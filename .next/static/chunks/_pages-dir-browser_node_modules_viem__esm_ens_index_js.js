"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_pages-dir-browser_node_modules_viem__esm_ens_index_js"],{

/***/ "(pages-dir-browser)/./node_modules/@adraffy/ens-normalize/dist/index.mjs":
/*!************************************************************!*\
  !*** ./node_modules/@adraffy/ens-normalize/dist/index.mjs ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ens_beautify: () => (/* binding */ ens_beautify),\n/* harmony export */   ens_emoji: () => (/* binding */ ens_emoji),\n/* harmony export */   ens_normalize: () => (/* binding */ ens_normalize),\n/* harmony export */   ens_normalize_fragment: () => (/* binding */ ens_normalize_fragment),\n/* harmony export */   ens_split: () => (/* binding */ ens_split),\n/* harmony export */   ens_tokenize: () => (/* binding */ ens_tokenize),\n/* harmony export */   is_combining_mark: () => (/* binding */ is_combining_mark),\n/* harmony export */   nfc: () => (/* binding */ nfc),\n/* harmony export */   nfd: () => (/* binding */ nfd),\n/* harmony export */   safe_str_from_cps: () => (/* binding */ safe_str_from_cps),\n/* harmony export */   should_escape: () => (/* binding */ should_escape)\n/* harmony export */ });\n// created 2024-09-13T06:42:45.675Z\n// compressed base64-encoded blob for include-ens data\n// source: https://github.com/adraffy/ens-normalize.js/blob/main/src/make.js\n// see: https://github.com/adraffy/ens-normalize.js#security\n// SHA-256: 0ca3917bee1eee342d64c631cb1dbaac37b167d848887d59f6d68328dc99ac09\nvar COMPRESSED$1 = '';\nconst FENCED = new Map([[8217,\"apostrophe\"],[8260,\"fraction slash\"],[12539,\"middle dot\"]]);\nconst NSM_MAX = 4;\n\nfunction decode_arithmetic(bytes) {\r\n\tlet pos = 0;\r\n\tfunction u16() { return (bytes[pos++] << 8) | bytes[pos++]; }\r\n\t\r\n\t// decode the frequency table\r\n\tlet symbol_count = u16();\r\n\tlet total = 1;\r\n\tlet acc = [0, 1]; // first symbol has frequency 1\r\n\tfor (let i = 1; i < symbol_count; i++) {\r\n\t\tacc.push(total += u16());\r\n\t}\r\n\r\n\t// skip the sized-payload that the last 3 symbols index into\r\n\tlet skip = u16();\r\n\tlet pos_payload = pos;\r\n\tpos += skip;\r\n\r\n\tlet read_width = 0;\r\n\tlet read_buffer = 0; \r\n\tfunction read_bit() {\r\n\t\tif (read_width == 0) {\r\n\t\t\t// this will read beyond end of buffer\r\n\t\t\t// but (undefined|0) => zero pad\r\n\t\t\tread_buffer = (read_buffer << 8) | bytes[pos++];\r\n\t\t\tread_width = 8;\r\n\t\t}\r\n\t\treturn (read_buffer >> --read_width) & 1;\r\n\t}\r\n\r\n\tconst N = 31;\r\n\tconst FULL = 2**N;\r\n\tconst HALF = FULL >>> 1;\r\n\tconst QRTR = HALF >> 1;\r\n\tconst MASK = FULL - 1;\r\n\r\n\t// fill register\r\n\tlet register = 0;\r\n\tfor (let i = 0; i < N; i++) register = (register << 1) | read_bit();\r\n\r\n\tlet symbols = [];\r\n\tlet low = 0;\r\n\tlet range = FULL; // treat like a float\r\n\twhile (true) {\r\n\t\tlet value = Math.floor((((register - low + 1) * total) - 1) / range);\r\n\t\tlet start = 0;\r\n\t\tlet end = symbol_count;\r\n\t\twhile (end - start > 1) { // binary search\r\n\t\t\tlet mid = (start + end) >>> 1;\r\n\t\t\tif (value < acc[mid]) {\r\n\t\t\t\tend = mid;\r\n\t\t\t} else {\r\n\t\t\t\tstart = mid;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (start == 0) break; // first symbol is end mark\r\n\t\tsymbols.push(start);\r\n\t\tlet a = low + Math.floor(range * acc[start]   / total);\r\n\t\tlet b = low + Math.floor(range * acc[start+1] / total) - 1;\r\n\t\twhile (((a ^ b) & HALF) == 0) {\r\n\t\t\tregister = (register << 1) & MASK | read_bit();\r\n\t\t\ta = (a << 1) & MASK;\r\n\t\t\tb = (b << 1) & MASK | 1;\r\n\t\t}\r\n\t\twhile (a & ~b & QRTR) {\r\n\t\t\tregister = (register & HALF) | ((register << 1) & (MASK >>> 1)) | read_bit();\r\n\t\t\ta = (a << 1) ^ HALF;\r\n\t\t\tb = ((b ^ HALF) << 1) | HALF | 1;\r\n\t\t}\r\n\t\tlow = a;\r\n\t\trange = 1 + b - a;\r\n\t}\r\n\tlet offset = symbol_count - 4;\r\n\treturn symbols.map(x => { // index into payload\r\n\t\tswitch (x - offset) {\r\n\t\t\tcase 3: return offset + 0x10100 + ((bytes[pos_payload++] << 16) | (bytes[pos_payload++] << 8) | bytes[pos_payload++]);\r\n\t\t\tcase 2: return offset + 0x100 + ((bytes[pos_payload++] << 8) | bytes[pos_payload++]);\r\n\t\t\tcase 1: return offset + bytes[pos_payload++];\r\n\t\t\tdefault: return x - 1;\r\n\t\t}\r\n\t});\r\n}\t\r\n\r\n// returns an iterator which returns the next symbol\r\nfunction read_payload(v) {\r\n\tlet pos = 0;\r\n\treturn () => v[pos++];\r\n}\r\nfunction read_compressed_payload(s) {\r\n\treturn read_payload(decode_arithmetic(unsafe_atob(s)));\r\n}\r\n\r\n// unsafe in the sense:\r\n// expected well-formed Base64 w/o padding \r\n// 20220922: added for https://github.com/adraffy/ens-normalize.js/issues/4\r\nfunction unsafe_atob(s) {\r\n\tlet lookup = [];\r\n\t[...'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'].forEach((c, i) => lookup[c.charCodeAt(0)] = i);\r\n\tlet n = s.length;\r\n\tlet ret = new Uint8Array((6 * n) >> 3);\r\n\tfor (let i = 0, pos = 0, width = 0, carry = 0; i < n; i++) {\r\n\t\tcarry = (carry << 6) | lookup[s.charCodeAt(i)];\r\n\t\twidth += 6;\r\n\t\tif (width >= 8) {\r\n\t\t\tret[pos++] = (carry >> (width -= 8));\r\n\t\t}\r\n\t}\r\n\treturn ret;\r\n}\r\n\r\n// eg. [0,1,2,3...] => [0,-1,1,-2,...]\r\nfunction signed(i) { \r\n\treturn (i & 1) ? (~i >> 1) : (i >> 1);\r\n}\r\n\r\nfunction read_deltas(n, next) {\r\n\tlet v = Array(n);\r\n\tfor (let i = 0, x = 0; i < n; i++) v[i] = x += signed(next());\r\n\treturn v;\r\n}\r\n\r\n// [123][5] => [0 3] [1 1] [0 0]\r\nfunction read_sorted(next, prev = 0) {\r\n\tlet ret = [];\r\n\twhile (true) {\r\n\t\tlet x = next();\r\n\t\tlet n = next();\r\n\t\tif (!n) break;\r\n\t\tprev += x;\r\n\t\tfor (let i = 0; i < n; i++) {\r\n\t\t\tret.push(prev + i);\r\n\t\t}\r\n\t\tprev += n + 1;\r\n\t}\r\n\treturn ret;\r\n}\r\n\r\nfunction read_sorted_arrays(next) {\r\n\treturn read_array_while(() => { \r\n\t\tlet v = read_sorted(next);\r\n\t\tif (v.length) return v;\r\n\t});\r\n}\r\n\r\n// returns map of x => ys\r\nfunction read_mapped(next) {\r\n\tlet ret = [];\r\n\twhile (true) {\r\n\t\tlet w = next();\r\n\t\tif (w == 0) break;\r\n\t\tret.push(read_linear_table(w, next));\r\n\t}\r\n\twhile (true) {\r\n\t\tlet w = next() - 1;\r\n\t\tif (w < 0) break;\r\n\t\tret.push(read_replacement_table(w, next));\r\n\t}\r\n\treturn ret.flat();\r\n}\r\n\r\n// read until next is falsy\r\n// return array of read values\r\nfunction read_array_while(next) {\r\n\tlet v = [];\r\n\twhile (true) {\r\n\t\tlet x = next(v.length);\r\n\t\tif (!x) break;\r\n\t\tv.push(x);\r\n\t}\r\n\treturn v;\r\n}\r\n\r\n// read w columns of length n\r\n// return as n rows of length w\r\nfunction read_transposed(n, w, next) {\r\n\tlet m = Array(n).fill().map(() => []);\r\n\tfor (let i = 0; i < w; i++) {\r\n\t\tread_deltas(n, next).forEach((x, j) => m[j].push(x));\r\n\t}\r\n\treturn m;\r\n}\r\n \r\n// returns [[x, ys], [x+dx, ys+dy], [x+2*dx, ys+2*dy], ...]\r\n// where dx/dy = steps, n = run size, w = length of y\r\nfunction read_linear_table(w, next) {\r\n\tlet dx = 1 + next();\r\n\tlet dy = next();\r\n\tlet vN = read_array_while(next);\r\n\tlet m = read_transposed(vN.length, 1+w, next);\r\n\treturn m.flatMap((v, i) => {\r\n\t\tlet [x, ...ys] = v;\r\n\t\treturn Array(vN[i]).fill().map((_, j) => {\r\n\t\t\tlet j_dy = j * dy;\r\n\t\t\treturn [x + j * dx, ys.map(y => y + j_dy)];\r\n\t\t});\r\n\t});\r\n}\r\n\r\n// return [[x, ys...], ...]\r\n// where w = length of y\r\nfunction read_replacement_table(w, next) { \r\n\tlet n = 1 + next();\r\n\tlet m = read_transposed(n, 1+w, next);\r\n\treturn m.map(v => [v[0], v.slice(1)]);\r\n}\r\n\r\n\r\nfunction read_trie(next) {\r\n\tlet ret = [];\r\n\tlet sorted = read_sorted(next); \r\n\texpand(decode([]), []);\r\n\treturn ret; // not sorted\r\n\tfunction decode(Q) { // characters that lead into this node\r\n\t\tlet S = next(); // state: valid, save, check\r\n\t\tlet B = read_array_while(() => { // buckets leading to new nodes\r\n\t\t\tlet cps = read_sorted(next).map(i => sorted[i]);\r\n\t\t\tif (cps.length) return decode(cps);\r\n\t\t});\r\n\t\treturn {S, B, Q};\r\n\t}\r\n\tfunction expand({S, B}, cps, saved) {\r\n\t\tif (S & 4 && saved === cps[cps.length-1]) return;\r\n\t\tif (S & 2) saved = cps[cps.length-1];\r\n\t\tif (S & 1) ret.push(cps); \r\n\t\tfor (let br of B) {\r\n\t\t\tfor (let cp of br.Q) {\r\n\t\t\t\texpand(br, [...cps, cp], saved);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\n\nfunction hex_cp(cp) {\r\n\treturn cp.toString(16).toUpperCase().padStart(2, '0');\r\n}\r\n\r\nfunction quote_cp(cp) {\r\n\treturn `{${hex_cp(cp)}}`; // raffy convention: like \"\\u{X}\" w/o the \"\\u\"\r\n}\r\n\r\n/*\r\nexport function explode_cp(s) {\r\n\treturn [...s].map(c => c.codePointAt(0));\r\n}\r\n*/\r\nfunction explode_cp(s) { // this is about 2x faster\r\n\tlet cps = [];\r\n\tfor (let pos = 0, len = s.length; pos < len; ) {\r\n\t\tlet cp = s.codePointAt(pos);\r\n\t\tpos += cp < 0x10000 ? 1 : 2;\r\n\t\tcps.push(cp);\r\n\t}\r\n\treturn cps;\r\n}\r\n\r\nfunction str_from_cps(cps) {\r\n\tconst chunk = 4096;\r\n\tlet len = cps.length;\r\n\tif (len < chunk) return String.fromCodePoint(...cps);\r\n\tlet buf = [];\r\n\tfor (let i = 0; i < len; ) {\r\n\t\tbuf.push(String.fromCodePoint(...cps.slice(i, i += chunk)));\r\n\t}\r\n\treturn buf.join('');\r\n}\r\n\r\nfunction compare_arrays(a, b) {\r\n\tlet n = a.length;\r\n\tlet c = n - b.length;\r\n\tfor (let i = 0; c == 0 && i < n; i++) c = a[i] - b[i];\r\n\treturn c;\r\n}\r\n\r\nfunction array_replace(v, a, b) {\r\n\tlet prev = 0;\r\n\twhile (true) {\r\n\t\tlet next = v.indexOf(a, prev);\r\n\t\tif (next < 0) break;\r\n\t\tv[next] = b; \r\n\t\tprev = next + 1;\r\n\t}\r\n}\n\n// created 2024-09-13T06:42:45.675Z\n// compressed base64-encoded blob for include-nf data\n// source: https://github.com/adraffy/ens-normalize.js/blob/main/src/make.js\n// see: https://github.com/adraffy/ens-normalize.js#security\n// SHA-256: a79d5f9b1879a7b416aa659f4a3d788f80a8cf5f0ab955a456592c02f556a28c\nvar COMPRESSED = 'AEUDVgHLCGMATwDUADIAdAAhADQAFAAtABQAIQAPACcADQASAAoAGAAJABIACQARAAUACwAFAAwABQAQAAMABwAEAAoABQAJAAIACgABAAQAFAALAAIACwABAAIAAQAHAAMAAwAEAAsADAAMAAwACwANAA0AAwAKAAkABAAdAAYAZwDTAeYDMwCxCl8B8xhZAqfoC190UGcThgBurwf7PT09Pb09AjgJum8OjDllxHYUKXAPxzq6tABAxgK8ysUvWAgMPT09PT09PSs6LT2HcgWXWwFLoSMEEEl5RFVMKvO0XQ8ExDdJMnIgPi89uj00MsvBXxEPAGPCDwBnQKoEbwRwBHEEcgRzBHQEdQR2BHcEeAR6BHsEfAR+BIAEgfndBQoBYgULAWIFDAFiBNcE2ATZBRAFEQUvBdALFAsVDPcNBw13DYcOMA4xDjMB4BllHI0B2grbAMDpHLkQ7QHVAPRNQQFnGRUEg0yEB2uaJF8AJpIBpob5AERSMAKNoAXqaQLUBMCzEiC+AZ4EWRJJFbEu7QDQLARtEbgECxDwAb/RyAk1AV4nD2cEQQKTAzsAGpobWgAahAGPCrysdy0OAKwAfFIcBAQFUmoA/PtZADkBIadVj2UMUgx5Il4ANQC9vAITAdQZWxDzALN9AhsZVwIcGSkCBAgXOhG7AqMZ4M7+1M0UAPDNAWsC+mcJDe8AAQA99zkEXLICyQozAo6lAobcP5JvjQLFzwKD9gU/OD8FEQCtEQL6bW+nAKUEvzjDHsuRyUvOFHcacUz5AqIFRSE2kzsBEQCuaQL5DQTlcgO6twSpTiUgCwIFCAUXBHQEqQV6swAVxUlmTmsCwjqsP/wKJQmXb793UgZBEBsnpRD3DDMBtQE7De1L2ATxBjsEyR99GRkPzZWcCKUt3QztJuMuoYBaI/UqgwXtS/Q83QtNUWgPWQtlCeM6Y4FOAyEBDSKLCt0NOQhtEPMKyWsN5RFFBzkD1UmaAKUHAQsRHTUVtSYQYqwLCTl3Bvsa9guPJq8TKXr8BdMaIQZNASka/wDPLueFsFoxXBxPXwYDCyUjxxSoUCANJUC3eEgaGwcVJakCkUNwSodRNh6TIfY8PQ1mLhNRfAf1PAUZTwuBPJ5Gq0UOEdI+jT1IIklMLAQ1fywvJ4sJzw+FDLl8cgFZCSEJsQxxEzERFzfFCDkHGS2XJCcVCCFGlWCaBPefA/MT0QMLBT8JQQcTA7UcLRMuFSkFDYEk1wLzNtUuswKPVoABFwXLDyUf3xBQR+AO6QibAmUDgyXrAC0VIQAXIpsIQ2MAX4/YUwUuywjHamwjdANnFOdhEXMHkQ5XB6ccMxW/HOFwyF4Lhggoo68JWwF1CZkBXwTjCAk1W4ygIEFnU4tYGJsgYUE/XfwCMQxlFZ9EvYd4AosPaxIbATUBcwc5DQECdxHtEWsQlQjrhgQ1tTP4OiUETyGDIBEKJwNPbM4LJyb5DPhpAaMSYgMMND137merYLYkF/0HGTLFQWAh8QuST80MnBrBGEJULhnkB78D8xrzJ+pBVwX/A6MDEzpNM+4EvQtpCIsJPwBJDqMXB9cYagpxjNABMYsBt5kDV5GDAm+PBjcHCwBnC4cFeeUAHQKnCKMABQDPA1cAOQKtB50AGQCFQQE9AycvASHlAo8DkwgxywGVLwHzKQQbwwwVAPc3bkoCw7ECgGpmogXdWAKOAkk1AU0lBAVOR1EDr3HhANsASwYT30cBFatKyxrjQwHfbysAxwD7AAU1BwVBAc0B820AtwFfCzEJorO1AU3pKQCDABVrAdcCiQDdADUAf/EBUwBNBVn5BdMCT0kBETEYK1dhAbsDHwEzAQ0AeQbLjaXJBx8EbQfTAhAbFeEC7y4HtQEDIt8TzULFAr3eVaFgAmSBAmJCW02vWzcgAqH3AmiYAmYJAp+EOBsLAmY7AmYmBG4EfwN/EwN+kjkGOXcXOYI6IyMCbB0CMjY4CgJtxwJtru+KM2dFKwFnAN4A4QBKBQeYDI0A/gvCAA21AncvAnaiPwJ5S0MCeLodXNtFrkbXAnw/AnrIAn0JAnzwBVkFIEgASH1jJAKBbQKAAAKABQJ/rklYSlsVF0rMAtEBAtDMSycDiE8Dh+ZExZEyAvKhXQMDA65LzkwtJQPPTUxNrwKLPwKK2MEbBx1DZwW3Ao43Ao5cQJeBAo7ZAo5ceFG0UzUKUtRUhQKT+wKTDADpABxVHlWvVdAGLBsplYYy4XhmRTs5ApefAu+yWCGoAFklApaPApZ8nACpWaxaCYFNADsClrUClk5cRFzRApnLAplkXMpdBxkCnJs5wjqdApwWAp+bAp64igAdDzEqDwKd8QKekgC1PWE0Ye8CntMCoG4BqQKenx8Cnk6lY8hkJyUrAievAiZ+AqD7AqBMAqLdAqHEAqYvAqXOAqf/AH0Cp/JofGixAANJahxq0QKs4wKsrgKtZwKtAgJXHQJV3AKx4dcDH05slwKyvQ0CsugXbOBtY21IXwMlzQK2XDs/bpADKUUCuF4CuUcVArkqd3A2cOECvRkCu9pwlgMyEQK+iHICAzNxAr4acyJzTwLDywLDBHOCdEs1RXTgAzynAzyaAz2/AsV8AsZHAsYQiQLIaVECyEQCyU8CyS4CZJ0C3dJ4eWF4rnklS9ADGKNnAgJh9BnzlSR7C16SXrsRAs9rAs9sL0tT0vMTnwDGrQLPcwEp6gNOEn5LBQLcJwLbigLSTwNSXANTXwEBA1WMgIk/AMsW7WBFghyC04LOg40C2scC2d6EEIRJpzwDhqUALwNkDoZxWfkAVQLfZQLeuHN3AuIv7RQB8zAnAfSbAfLShwLr8wLpcHkC6vkC6uQA+UcBuQLuiQLrnJaqlwMC7j8DheCYeXDgcaEC8wMAaQOOFpmTAvcTA5FuA5KHAveYAvnZAvhmmhyaq7s3mx4DnYMC/voBGwA5nxyfswMFjQOmagOm2QDRxQMGaqGIogUJAwxJAtQAPwMA4UEXUwER8wNrB5dnBQCTLSu3r73bAYmZFH8RBDkB+ykFIQ6dCZ8Akv0TtRQrxQL3LScApQC3BbmOkRc/xqdtQS4UJo0uAUMBgPwBtSYAdQMOBG0ALAIWDKEAAAoCPQJqA90DfgSRASBFBSF8CgAFAEQAEwA2EgJ3AQAF1QNr7wrFAgD3Cp8nv7G35QGRIUFCAekUfxE0wIkABAAbAFoCRQKEiwAGOlM6lI1tALg6jzrQAI04wTrcAKUA6ADLATqBOjs5/Dn5O3aJOls7nok6bzkYAVYBMwFsBS81XTWeNa01ZjV1NbY1xTWCNZE10jXhNZ41rTXuNf01sjXBNgI2ETXGNdU2FjYnNd417TYuNj02LjUtITY6Nj02PDbJNwgEkDxXNjg23TcgNw82yiA3iTcwCgSwPGc2JDcZN2w6jTchQtRDB0LgQwscDw8JmyhtKFFVBgDpfwDpsAD+mxQ91wLpNSMArQC9BbeOkRdLxptzBL8MDAMMAQgDAAkKCwsLCQoGBAVVBI/DvwDz9b29kaUCb0QtsRTNLt4eGBcSHAMZFhYZEhYEARAEBUEcQRxBHEEcQRxBHEEaQRxBHEFCSTxBPElISUhBNkM2QTYbNklISVmBVIgELgEaJZkC7aMAoQCjBcGOmxdNxrsBvwGJAaQcEZ0ePCklMAAhMvAIMAL54gC7Bm8EescjzQMpARQpKgDUHqSvAj5Gqwr7YrMUACT9AN3rlr3JG9m8w9lIAXltp/v8kfWaIaaR9OwpAES/I3ZVamDXSgB/UsOgAG6D0tq+5CIqE15FiAhV3yA2VhCQ7tj+m6xXaF53FIfGi/IAZIskMGAi2MU7MDVJNCbMzERyHZi+osdPtnFVbvq653O8rwaCy4IAf9OOok65AqJUtUriUfYsGPPVbe6jm0s9lbKlPCUKjdkHsFsEhvX4kT39ZCtAAbwQdn/h4TpO5hTByWAmr5n+Wuwhdegv6bmvX4LyOes3z2+cuHv2JFYwVMNuq2gzn8YHTjlUQd39osyWei4NKl3LAdfxlO876hh5ENp/cOvpuI9bF55guEthLLPOXjD4dktTH04P5TvZrWTM0e4+BHJxj7MLApXIFOs0sWKhNkG8iwuM5wR83my6V3wW06abhDzTXYfOr/ZpFXgXzmv4d12FFyP00/dPGbIVGV5ao8UufGzUwp/IHx6v/wDWJr9iaoCulhWwlZ7A8q/NMoD12+mBdNRgJYnThRLtMx1Bgwttn8/4Qn2CDfOSup9GVXEvA21ILgp0owHYxNOkpwLWz0G7K+WREIDjIzUzSn8I99CuJSmSpPyH0Ke6/NERYiNx+3dncSebPnOUnnWD61AhJ1n/tSLZmU5wYO5GfgzyAYJm6VL91LxZ8hL1lfximQxIDMRhIecQZBmeE5R0XlrpvwplVrJwpa8BBCdp93GPP9lyBeZ2zkRr920CR3cYbKpKHfogvm0nV7XdDz6EbjzlxADCMjSLXuXpIpyuizy39yY+I+H9rmpoIF3YwEjlH9MgGgWcCNTjHEWMqAbprn2Ox7rOHupaVE3lNyg3nt5XaZID6Y+uml5Ja+aOPu+BI+DZbiJVfaspUadakWUX6TA4dETkIqdJJHYnU4Z4yKpt5y8rVIahoMUf8A8kWtAQNCTbjp71gx3/zVdqNz1Sutkw0gFIMVm2BF4Xdv/0olw+NaDIR9Bb3DPweZA2K/cw+/b+AwyWl9ZOP67A9nexmeTNjfdzPGf9J6E6BMPKa5lJh+qNsdUz3HBUevU71eQFCqOcxiIYhacAhh/8PX0J5DdSViZ6WazDDx7cukJNpMfEkYLJ5Ao4vLoVd3d25Pg4qaVa2p2D2L3WvYPJ5Yf/A/MSxptjlgXL/KJtP2U0cRv2I09ATAiWCJYuRwiapeKFsqmi18yMMulDp3HdcIldq+7jkwsJUOHLHCzzzBw5XFvL0CAmo1ub456z7zb7shk3KPGCLZzr47oT1k/j06XNnJvG3Udv6XrP+wsqTBlZ5MaNPt9FOs/4Bt/ja/vbVhTNpBFl9Gq7MqINvGlWKOAwQzwOZy+EzSdjAqKJVV2YcskTuM94aIK+kc/AZaXiZLPREUDpkXIV947IFfj+85TrqPqLfkGcxgboMQjosf+az+odLNXdyp1mDNGsqSdK/pJ2Ca04mt/4d6s1X+lncOEYaGBBeW4pApGcjf7/XJCFbj3N3mFb+BtlIcw8ZiDKoClFX9Rf0bxCqtLpicObKJzBVVHr/6u4siH2hK75RNv7w9GfTbhJOQBYiFUZAByY4rn37tZBHT//kqKsNi3ryL9AqXJRzqiMIJMhILjoi/i8LVEsbu+Ih9bsyW16sgQqjYLO0qda6KaCPKj3DQcu6CfV5lKtjS3ZCdqLAZkOey9MR+QutJBGiz/r15GVD6rCVwJR4UUKC4GNJkfDf00OMW8aQtLSAGLXV8MIi9mbbl/qQEpxCm2L5hutFX4ekeLH4QgBWUFKs/2VVMKy46WtFE6AbwgmYm/Z0yHk5veDIrcl2HpVqb/rSE0PC9EbDzJEWqeaPhh7vF369Umq2kSiB3s5rBI6c/7N9bkRu4h2n+/h5nSwy+7n+/I+6oXQVANo2Jb5zDwtiBPf1ySCzHdT6yJShMzqSRZfnykX49CaFaxhoVF4PBhEuECJ1PrFYSpmHuyYsl14DTAV9ZxRms1XiR/kBrjhZjidOt0UNe+GSml7XNgpVw8YsUTmZXLTK+6iYnyW/wYR1W4UXwOi14xpFROHb6HcZzksgF5DbL2AFXzKNwHU2adjdAY+KCyM/cwRTBkkq/a227NI0q6DR2MkMCRu620t79bGcYUmACtqN3mk/0uNwd3JSXHqE1kzf6Yyj0W2083JNDRnIXDlgBxJ6uf58NN1f6FQiRCWB4egF8QDx74AixV8oTyw7PluIjr3/rj/WzgwPSq4xPojaF7V0xqG2u5ti2L1h6yYHv73Isrukr0kURDIEjClBsBx7kdcXUxaYMS0syT3ymLzDzslNDWQOT1Tao1YNmJHARUenhCkmV9tqCPGI5GqZaRpkiPxyjoncWjyOHYGqvbvRX+Bn1pn7EhRNXa1lqJPmoeN5VqdqIDPhEVhFsyG0d4iQEIYX0wZUbY2XbZWYlpZ/l66IrDDY0q1C1YzBDpHC4h05YqHQLqS9anyl22JQ6lEvjvdBwMHfE7z0luCXD34/rFeDa2TmSeEAykSpYO5j1G/nsgpR3qn0qaQEmLjnnLfcz+veoYqPnRqmRGwCJ6FJ3Gm/Z1/aVX5PSb03MMnjAf41ww54sD5k8FrkfBP+K0b1MrYpapWjtpZfve2HVf4ickX3LKSOhu7qI1Vd4c1kNrn2ajy1t4y93JhV4fnWCKq7OmFpcr7FjdJCXPTql0Drr14Ho3Z87+GPQ4Z/DcTiGqtvZxlRYi8cNuhXABveZIwNl/BX1huhVLaFax5OqypUrQRyb9OE3SSkPlDdy5uo5XGg2EIGEjLY1MO5cr1ibfiFWV7zspcTgkBKkwo5jPyAin04LqizZXb2tDRgwKJjGx4cVk3ngAQixwcxjYAg2Q7vmUR/hpwInMdw7OhC2qyf41vTPkudQAORS0DdLtOGQxb4fH2VYGsvJCkeWPeUwtf1/tuIhzXEThoCZzzSJqqjUtbaPI3ntHm3T5uf849hGUA0zU8ni5W+EEn3/0Y6oUhQFw9z0aGjkljBbAlFXc0y82G2wkd7VdgWa5KTgJJNjNwZMfmdnUIUn1JU5LiWX5UZEZbVlKSN76mlmjUR2ku+fucTNlO4IAAahnLjBhlvQNR9pe9swGBgq0YR7P3VCyI/seYwQ4QBzy9X+HPePgoF8WfKaJ4MBOhLCGHae6Z8xkNXwni9QAKvTNtVA56x8YJflZ/VvONRSlsSLmiSyNMnTjTaE1ko81zkzGEnVwEhjCzlwIqpxmpDAqwsEmtpdr3xpc7i/ZX3f2TzT3M0FdxIEQvO1jgmmiN+D1YpMduAzEhBtj2OBkMN/rv6p7Th4pSH6f5aH3aTvwFTl7EOSgGASI7ttyMehzpm4AVyK+bFEaFg9gnZsSUPpsbAe/0RFhrH+EXZ12Z7thf4dzN1+Sn+G8QrDA1VKaN4IFxD1rQz9Xq9Coii9S9/hPbTGjyBwFH3H1UdQuz5KsgPDEHua4/kPg2Gp/IIItsaLWBqiT9XH45MiQxSosGJ56H/0F2cjcCFd72l1665RNHURdC3lspI77esfJsl+rXXabkAy7vxDXG/XGGcKpwiKDPFfvMEgjkAHil4Za1F36RnyxxvdIAzvgfH8knukYDck07tc++DP4TdWeI7HXuq5Yl6VVFrUQtf64/dkXewlKZSHQo6YvCSpREB0GDrz+Ys2GfO8nw2SwrYwaf88AifzlPvP17bf1mI3AuccJvAjZIpBmqvharKFAebEjVKfGAwpQjWoXlm9LROsq9bCk1UeQ3CJxJqprzssS/Q04JeS1ReCCubL3J7sx86spkP4eNpp95UF+8K748icIs8vdILFklk9skQqi1So6cx3X906pvy1vz+KipTJ8fiVJxsV5MmT0XwA';\n\n// https://unicode.org/reports/tr15/\r\n// for reference implementation\r\n// see: /derive/nf.js\r\n\r\n\r\n// algorithmic hangul\r\n// https://www.unicode.org/versions/Unicode15.0.0/ch03.pdf (page 144)\r\nconst S0 = 0xAC00;\r\nconst L0 = 0x1100;\r\nconst V0 = 0x1161;\r\nconst T0 = 0x11A7;\r\nconst L_COUNT = 19;\r\nconst V_COUNT = 21;\r\nconst T_COUNT = 28;\r\nconst N_COUNT = V_COUNT * T_COUNT;\r\nconst S_COUNT = L_COUNT * N_COUNT;\r\nconst S1 = S0 + S_COUNT;\r\nconst L1 = L0 + L_COUNT;\r\nconst V1 = V0 + V_COUNT;\r\nconst T1 = T0 + T_COUNT;\r\n\r\nfunction unpack_cc(packed) {\r\n\treturn (packed >> 24) & 0xFF;\r\n}\r\nfunction unpack_cp(packed) {\r\n\treturn packed & 0xFFFFFF;\r\n}\r\n\r\nlet SHIFTED_RANK, EXCLUSIONS, DECOMP, RECOMP;\r\n\r\n// export function nf_deinit() {\r\n// \tif (!SHIFTED_RANK) return;\r\n// \tSHIFTED_RANK = EXCLUSIONS = DECOMP = RECOMP = undefined;\r\n// }\r\n\r\nfunction init$1() {\r\n\t//console.time('nf');\r\n\tlet r = read_compressed_payload(COMPRESSED);\r\n\tSHIFTED_RANK = new Map(read_sorted_arrays(r).flatMap((v, i) => v.map(x => [x, (i+1) << 24]))); // pre-shifted\r\n\tEXCLUSIONS = new Set(read_sorted(r));\r\n\tDECOMP = new Map();\r\n\tRECOMP = new Map();\r\n\tfor (let [cp, cps] of read_mapped(r)) {\r\n\t\tif (!EXCLUSIONS.has(cp) && cps.length == 2) {\r\n\t\t\tlet [a, b] = cps;\r\n\t\t\tlet bucket = RECOMP.get(a);\r\n\t\t\tif (!bucket) {\r\n\t\t\t\tbucket = new Map();\r\n\t\t\t\tRECOMP.set(a, bucket);\r\n\t\t\t}\r\n\t\t\tbucket.set(b, cp);\r\n\t\t}\r\n\t\tDECOMP.set(cp, cps.reverse()); // stored reversed\r\n\t}\r\n\t//console.timeEnd('nf');\r\n\t// 20230905: 11ms\r\n}\r\n\r\nfunction is_hangul(cp) {\r\n\treturn cp >= S0 && cp < S1;\r\n}\r\n\r\nfunction compose_pair(a, b) {\r\n\tif (a >= L0 && a < L1 && b >= V0 && b < V1) {\r\n\t\treturn S0 + (a - L0) * N_COUNT + (b - V0) * T_COUNT;\r\n\t} else if (is_hangul(a) && b > T0 && b < T1 && (a - S0) % T_COUNT == 0) {\r\n\t\treturn a + (b - T0);\r\n\t} else {\r\n\t\tlet recomp = RECOMP.get(a);\r\n\t\tif (recomp) {\r\n\t\t\trecomp = recomp.get(b);\r\n\t\t\tif (recomp) {\r\n\t\t\t\treturn recomp;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn -1;\r\n\t}\r\n}\r\n\r\nfunction decomposed(cps) {\r\n\tif (!SHIFTED_RANK) init$1();\r\n\tlet ret = [];\r\n\tlet buf = [];\r\n\tlet check_order = false;\r\n\tfunction add(cp) {\r\n\t\tlet cc = SHIFTED_RANK.get(cp);\r\n\t\tif (cc) {\r\n\t\t\tcheck_order = true;\r\n\t\t\tcp |= cc;\r\n\t\t}\r\n\t\tret.push(cp);\r\n\t}\r\n\tfor (let cp of cps) {\r\n\t\twhile (true) {\r\n\t\t\tif (cp < 0x80) {\r\n\t\t\t\tret.push(cp);\r\n\t\t\t} else if (is_hangul(cp)) {\r\n\t\t\t\tlet s_index = cp - S0;\r\n\t\t\t\tlet l_index = s_index / N_COUNT | 0;\r\n\t\t\t\tlet v_index = (s_index % N_COUNT) / T_COUNT | 0;\r\n\t\t\t\tlet t_index = s_index % T_COUNT;\r\n\t\t\t\tadd(L0 + l_index);\r\n\t\t\t\tadd(V0 + v_index);\r\n\t\t\t\tif (t_index > 0) add(T0 + t_index);\r\n\t\t\t} else {\r\n\t\t\t\tlet mapped = DECOMP.get(cp);\r\n\t\t\t\tif (mapped) {\r\n\t\t\t\t\tbuf.push(...mapped);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tadd(cp);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (!buf.length) break;\r\n\t\t\tcp = buf.pop();\r\n\t\t}\r\n\t}\r\n\tif (check_order && ret.length > 1) {\r\n\t\tlet prev_cc = unpack_cc(ret[0]);\r\n\t\tfor (let i = 1; i < ret.length; i++) {\r\n\t\t\tlet cc = unpack_cc(ret[i]);\r\n\t\t\tif (cc == 0 || prev_cc <= cc) {\r\n\t\t\t\tprev_cc = cc;\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tlet j = i-1;\r\n\t\t\twhile (true) {\r\n\t\t\t\tlet tmp = ret[j+1];\r\n\t\t\t\tret[j+1] = ret[j];\r\n\t\t\t\tret[j] = tmp;\r\n\t\t\t\tif (!j) break;\r\n\t\t\t\tprev_cc = unpack_cc(ret[--j]);\r\n\t\t\t\tif (prev_cc <= cc) break;\r\n\t\t\t}\r\n\t\t\tprev_cc = unpack_cc(ret[i]);\r\n\t\t}\r\n\t}\r\n\treturn ret;\r\n}\r\n\r\nfunction composed_from_decomposed(v) {\r\n\tlet ret = [];\r\n\tlet stack = [];\r\n\tlet prev_cp = -1;\r\n\tlet prev_cc = 0;\r\n\tfor (let packed of v) {\r\n\t\tlet cc = unpack_cc(packed);\r\n\t\tlet cp = unpack_cp(packed);\r\n\t\tif (prev_cp == -1) {\r\n\t\t\tif (cc == 0) {\r\n\t\t\t\tprev_cp = cp;\r\n\t\t\t} else {\r\n\t\t\t\tret.push(cp);\r\n\t\t\t}\r\n\t\t} else if (prev_cc > 0 && prev_cc >= cc) {\r\n\t\t\tif (cc == 0) {\r\n\t\t\t\tret.push(prev_cp, ...stack);\r\n\t\t\t\tstack.length = 0;\r\n\t\t\t\tprev_cp = cp;\r\n\t\t\t} else {\r\n\t\t\t\tstack.push(cp);\r\n\t\t\t}\r\n\t\t\tprev_cc = cc;\r\n\t\t} else {\r\n\t\t\tlet composed = compose_pair(prev_cp, cp);\r\n\t\t\tif (composed >= 0) {\r\n\t\t\t\tprev_cp = composed;\r\n\t\t\t} else if (prev_cc == 0 && cc == 0) {\r\n\t\t\t\tret.push(prev_cp);\r\n\t\t\t\tprev_cp = cp;\r\n\t\t\t} else {\r\n\t\t\t\tstack.push(cp);\r\n\t\t\t\tprev_cc = cc;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tif (prev_cp >= 0) {\r\n\t\tret.push(prev_cp, ...stack);\t\r\n\t}\r\n\treturn ret;\r\n}\r\n\r\n// note: cps can be iterable\r\nfunction nfd(cps) {\r\n\treturn decomposed(cps).map(unpack_cp);\r\n}\r\nfunction nfc(cps) {\r\n\treturn composed_from_decomposed(decomposed(cps));\r\n}\n\nconst HYPHEN = 0x2D;\r\nconst STOP = 0x2E;\r\nconst STOP_CH = '.';\r\nconst FE0F = 0xFE0F;\r\nconst UNIQUE_PH = 1;\r\n\r\n// 20230913: replace [...v] with Array_from(v) to avoid large spreads\r\nconst Array_from = x => Array.from(x); // Array.from.bind(Array);\r\n\r\nfunction group_has_cp(g, cp) {\r\n\t// 20230913: keep primary and secondary distinct instead of creating valid union\r\n\treturn g.P.has(cp) || g.Q.has(cp);\r\n}\r\n\r\nclass Emoji extends Array {\r\n\tget is_emoji() { return true; } // free tagging system\r\n}\r\n\r\nlet MAPPED, IGNORED, CM, NSM, ESCAPE, NFC_CHECK, GROUPS, WHOLE_VALID, WHOLE_MAP, VALID, EMOJI_LIST, EMOJI_ROOT;\r\n\r\n// export function ens_deinit() {\r\n// \tnf_deinit();\r\n// \tif (!MAPPED) return;\r\n// \tMAPPED = IGNORED = CM = NSM = ESCAPE = NFC_CHECK = GROUPS = WHOLE_VALID = WHOLE_MAP = VALID = EMOJI_LIST = EMOJI_ROOT = undefined;\r\n// }\r\n\r\nfunction init() {\r\n\tif (MAPPED) return;\r\n\t\r\n\tlet r = read_compressed_payload(COMPRESSED$1);\r\n\tconst read_sorted_array = () => read_sorted(r);\r\n\tconst read_sorted_set = () => new Set(read_sorted_array());\r\n\tconst set_add_many = (set, v) => v.forEach(x => set.add(x));\r\n\r\n\tMAPPED = new Map(read_mapped(r)); \r\n\tIGNORED = read_sorted_set(); // ignored characters are not valid, so just read raw codepoints\r\n\r\n\t/*\r\n\t// direct include from payload is smaller than the decompression code\r\n\tconst FENCED = new Map(read_array_while(() => {\r\n\t\tlet cp = r();\r\n\t\tif (cp) return [cp, read_str(r())];\r\n\t}));\r\n\t*/\r\n\t// 20230217: we still need all CM for proper error formatting\r\n\t// but norm only needs NSM subset that are potentially-valid\r\n\tCM = read_sorted_array();\r\n\tNSM = new Set(read_sorted_array().map(i => CM[i]));\r\n\tCM = new Set(CM);\r\n\t\r\n\tESCAPE = read_sorted_set(); // characters that should not be printed\r\n\tNFC_CHECK = read_sorted_set(); // only needed to illustrate ens_tokenize() transformations\r\n\r\n\tlet chunks = read_sorted_arrays(r);\r\n\tlet unrestricted = r();\r\n\t//const read_chunked = () => new Set(read_sorted_array().flatMap(i => chunks[i]).concat(read_sorted_array()));\r\n\tconst read_chunked = () => {\r\n\t\t// 20230921: build set in parts, 2x faster\r\n\t\tlet set = new Set();\r\n\t\tread_sorted_array().forEach(i => set_add_many(set, chunks[i]));\r\n\t\tset_add_many(set, read_sorted_array());\r\n\t\treturn set; \r\n\t};\r\n\tGROUPS = read_array_while(i => {\r\n\t\t// minifier property mangling seems unsafe\r\n\t\t// so these are manually renamed to single chars\r\n\t\tlet N = read_array_while(r).map(x => x+0x60);\r\n\t\tif (N.length) {\r\n\t\t\tlet R = i >= unrestricted; // unrestricted then restricted\r\n\t\t\tN[0] -= 32; // capitalize\r\n\t\t\tN = str_from_cps(N);\r\n\t\t\tif (R) N=`Restricted[${N}]`;\r\n\t\t\tlet P = read_chunked(); // primary\r\n\t\t\tlet Q = read_chunked(); // secondary\r\n\t\t\tlet M = !r(); // not-whitelisted, check for NSM\r\n\t\t\t// *** this code currently isn't needed ***\r\n\t\t\t/*\r\n\t\t\tlet V = [...P, ...Q].sort((a, b) => a-b); // derive: sorted valid\r\n\t\t\tlet M = r()-1; // number of combining mark\r\n\t\t\tif (M < 0) { // whitelisted\r\n\t\t\t\tM = new Map(read_array_while(() => {\r\n\t\t\t\t\tlet i = r();\r\n\t\t\t\t\tif (i) return [V[i-1], read_array_while(() => {\r\n\t\t\t\t\t\tlet v = read_array_while(r);\r\n\t\t\t\t\t\tif (v.length) return v.map(x => x-1);\r\n\t\t\t\t\t})];\r\n\t\t\t\t}));\r\n\t\t\t}*/\r\n\t\t\treturn {N, P, Q, M, R};\r\n\t\t}\r\n\t});\r\n\r\n\t// decode compressed wholes\r\n\tWHOLE_VALID = read_sorted_set();\r\n\tWHOLE_MAP = new Map();\r\n\tlet wholes = read_sorted_array().concat(Array_from(WHOLE_VALID)).sort((a, b) => a-b); // must be sorted\r\n\twholes.forEach((cp, i) => {\r\n\t\tlet d = r(); \r\n\t\tlet w = wholes[i] = d ? wholes[i-d] : {V: [], M: new Map()};\r\n\t\tw.V.push(cp); // add to member set\r\n\t\tif (!WHOLE_VALID.has(cp)) {\r\n\t\t\tWHOLE_MAP.set(cp, w);  // register with whole map\r\n\t\t}\r\n\t});\r\n\r\n\t// compute confusable-extent complements\r\n\t// usage: WHOLE_MAP.get(cp).M.get(cp) = complement set\r\n\tfor (let {V, M} of new Set(WHOLE_MAP.values())) {\r\n\t\t// connect all groups that have each whole character\r\n\t\tlet recs = [];\r\n\t\tfor (let cp of V) {\r\n\t\t\tlet gs = GROUPS.filter(g => group_has_cp(g, cp));\r\n\t\t\tlet rec = recs.find(({G}) => gs.some(g => G.has(g)));\r\n\t\t\tif (!rec) {\r\n\t\t\t\trec = {G: new Set(), V: []};\r\n\t\t\t\trecs.push(rec);\r\n\t\t\t}\r\n\t\t\trec.V.push(cp);\r\n\t\t\tset_add_many(rec.G, gs);\r\n\t\t}\r\n\t\t// per character cache groups which are not a member of the extent\r\n\t\tlet union = recs.flatMap(x => Array_from(x.G)); // all of the groups used by this whole\r\n\t\tfor (let {G, V} of recs) {\r\n\t\t\tlet complement = new Set(union.filter(g => !G.has(g))); // groups not covered by the extent\r\n\t\t\tfor (let cp of V) {\r\n\t\t\t\tM.set(cp, complement); // this is the same reference\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// compute valid set\r\n\t// 20230924: VALID was union but can be re-used\r\n\tVALID = new Set(); // exists in 1+ groups\r\n\tlet multi = new Set(); // exists in 2+ groups\r\n\tconst add_to_union = cp => VALID.has(cp) ? multi.add(cp) : VALID.add(cp);\r\n\tfor (let g of GROUPS) {\r\n\t\tfor (let cp of g.P) add_to_union(cp);\r\n\t\tfor (let cp of g.Q) add_to_union(cp);\r\n\t}\r\n\t// dual purpose WHOLE_MAP: return placeholder if unique non-confusable\r\n\tfor (let cp of VALID) {\r\n\t\tif (!WHOLE_MAP.has(cp) && !multi.has(cp)) {\r\n\t\t\tWHOLE_MAP.set(cp, UNIQUE_PH);\r\n\t\t}\r\n\t}\r\n\t// add all decomposed parts\r\n\t// see derive: \"Valid is Closed (via Brute-force)\"\r\n\tset_add_many(VALID, nfd(VALID));\r\n\t\r\n\t// decode emoji\r\n\t// 20230719: emoji are now fully-expanded to avoid quirk logic \r\n\tEMOJI_LIST = read_trie(r).map(v => Emoji.from(v)).sort(compare_arrays);\r\n\tEMOJI_ROOT = new Map(); // this has approx 7K nodes (2+ per emoji)\r\n\tfor (let cps of EMOJI_LIST) {\r\n\t\t// 20230719: change to *slightly* stricter algorithm which disallows \r\n\t\t// insertion of misplaced FE0F in emoji sequences (matching ENSIP-15)\r\n\t\t// example: beautified [A B] (eg. flag emoji) \r\n\t\t//  before: allow: [A FE0F B], error: [A FE0F FE0F B] \r\n\t\t//   after: error: both\r\n\t\t// note: this code now matches ENSNormalize.{cs,java} logic\r\n\t\tlet prev = [EMOJI_ROOT];\r\n\t\tfor (let cp of cps) {\r\n\t\t\tlet next = prev.map(node => {\r\n\t\t\t\tlet child = node.get(cp);\r\n\t\t\t\tif (!child) {\r\n\t\t\t\t\t// should this be object? \r\n\t\t\t\t\t// (most have 1-2 items, few have many)\r\n\t\t\t\t\t// 20230719: no, v8 default map is 4?\r\n\t\t\t\t\tchild = new Map();\r\n\t\t\t\t\tnode.set(cp, child);\r\n\t\t\t\t}\r\n\t\t\t\treturn child;\r\n\t\t\t});\r\n\t\t\tif (cp === FE0F) {\r\n\t\t\t\tprev.push(...next); // less than 20 elements\r\n\t\t\t} else {\r\n\t\t\t\tprev = next;\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor (let x of prev) {\r\n\t\t\tx.V = cps;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// if escaped: {HEX}\r\n//       else: \"x\" {HEX}\r\nfunction quoted_cp(cp) {\r\n\treturn (should_escape(cp) ? '' : `${bidi_qq(safe_str_from_cps([cp]))} `) + quote_cp(cp);\r\n}\r\n\r\n// 20230211: some messages can be mixed-directional and result in spillover\r\n// use 200E after a quoted string to force the remainder of a string from \r\n// acquring the direction of the quote\r\n// https://www.w3.org/International/questions/qa-bidi-unicode-controls#exceptions\r\nfunction bidi_qq(s) {\r\n\treturn `\"${s}\"\\u200E`; // strong LTR\r\n}\r\n\r\nfunction check_label_extension(cps) {\r\n\tif (cps.length >= 4 && cps[2] == HYPHEN && cps[3] == HYPHEN) {\r\n\t\tthrow new Error(`invalid label extension: \"${str_from_cps(cps.slice(0, 4))}\"`); // this can only be ascii so cant be bidi\r\n\t}\r\n}\r\nfunction check_leading_underscore(cps) {\r\n\tconst UNDERSCORE = 0x5F;\r\n\tfor (let i = cps.lastIndexOf(UNDERSCORE); i > 0; ) {\r\n\t\tif (cps[--i] !== UNDERSCORE) {\r\n\t\t\tthrow new Error('underscore allowed only at start');\r\n\t\t}\r\n\t}\r\n}\r\n// check that a fenced cp is not leading, trailing, or touching another fenced cp\r\nfunction check_fenced(cps) {\r\n\tlet cp = cps[0];\r\n\tlet prev = FENCED.get(cp);\r\n\tif (prev) throw error_placement(`leading ${prev}`);\r\n\tlet n = cps.length;\r\n\tlet last = -1; // prevents trailing from throwing\r\n\tfor (let i = 1; i < n; i++) {\r\n\t\tcp = cps[i];\r\n\t\tlet match = FENCED.get(cp);\r\n\t\tif (match) {\r\n\t\t\t// since cps[0] isn't fenced, cps[1] cannot throw\r\n\t\t\tif (last == i) throw error_placement(`${prev} + ${match}`);\r\n\t\t\tlast = i + 1;\r\n\t\t\tprev = match;\r\n\t\t}\r\n\t}\r\n\tif (last == n) throw error_placement(`trailing ${prev}`);\r\n}\r\n\r\n// create a safe to print string \r\n// invisibles are escaped\r\n// leading cm uses placeholder\r\n// if cps exceed max, middle truncate with ellipsis\r\n// quoter(cp) => string, eg. 3000 => \"{3000}\"\r\n// note: in html, you'd call this function then replace [<>&] with entities\r\nfunction safe_str_from_cps(cps, max = Infinity, quoter = quote_cp) {\r\n\t//if (Number.isInteger(cps)) cps = [cps];\r\n\t//if (!Array.isArray(cps)) throw new TypeError(`expected codepoints`);\r\n\tlet buf = [];\r\n\tif (is_combining_mark(cps[0])) buf.push('◌');\r\n\tif (cps.length > max) {\r\n\t\tmax >>= 1;\r\n\t\tcps = [...cps.slice(0, max), 0x2026, ...cps.slice(-max)];\r\n\t}\r\n\tlet prev = 0;\r\n\tlet n = cps.length;\r\n\tfor (let i = 0; i < n; i++) {\r\n\t\tlet cp = cps[i];\r\n\t\tif (should_escape(cp)) {\r\n\t\t\tbuf.push(str_from_cps(cps.slice(prev, i)));\r\n\t\t\tbuf.push(quoter(cp));\r\n\t\t\tprev = i + 1;\r\n\t\t}\r\n\t}\r\n\tbuf.push(str_from_cps(cps.slice(prev, n)));\r\n\treturn buf.join('');\r\n}\r\n\r\n// note: set(s) cannot be exposed because they can be modified\r\n// note: Object.freeze() doesn't work\r\nfunction is_combining_mark(cp, only_nsm) { // 20240127: add extra argument\r\n\tinit();\r\n\treturn only_nsm ? NSM.has(cp) : CM.has(cp);\r\n}\r\nfunction should_escape(cp) {\r\n\tinit();\r\n\treturn ESCAPE.has(cp);\r\n}\r\n\r\n// return all supported emoji as fully-qualified emoji \r\n// ordered by length then lexicographic \r\nfunction ens_emoji() {\r\n\tinit();\r\n\treturn EMOJI_LIST.map(x => x.slice()); // emoji are exposed so copy\r\n}\r\n\r\nfunction ens_normalize_fragment(frag, decompose) {\r\n\tinit();\r\n\tlet nf = decompose ? nfd : nfc;\r\n\treturn frag.split(STOP_CH).map(label => str_from_cps(tokens_from_str(explode_cp(label), nf, filter_fe0f).flat())).join(STOP_CH);\r\n}\r\n\r\nfunction ens_normalize(name) {\r\n\treturn flatten(split(name, nfc, filter_fe0f));\r\n}\r\n\r\nfunction ens_beautify(name) {\r\n\tlet labels = split(name, nfc, x => x); // emoji not exposed\r\n\tfor (let {type, output, error} of labels) {\r\n\t\tif (error) break; // flatten will throw\r\n\r\n\t\t// replace leading/trailing hyphen\r\n\t\t// 20230121: consider beautifing all or leading/trailing hyphen to unicode variant\r\n\t\t// not exactly the same in every font, but very similar: \"-\" vs \"‐\"\r\n\t\t/*\r\n\t\tconst UNICODE_HYPHEN = 0x2010;\r\n\t\t// maybe this should replace all for visual consistancy?\r\n\t\t// `node tools/reg-count.js regex ^-\\{2,\\}` => 592\r\n\t\t//for (let i = 0; i < output.length; i++) if (output[i] == 0x2D) output[i] = 0x2010;\r\n\t\tif (output[0] == HYPHEN) output[0] = UNICODE_HYPHEN;\r\n\t\tlet end = output.length-1;\r\n\t\tif (output[end] == HYPHEN) output[end] = UNICODE_HYPHEN;\r\n\t\t*/\r\n\t\t// 20230123: WHATWG URL uses \"CheckHyphens\" false\r\n\t\t// https://url.spec.whatwg.org/#idna\r\n\r\n\t\t// update ethereum symbol\r\n\t\t// ξ => Ξ if not greek\r\n\t\tif (type !== 'Greek') array_replace(output, 0x3BE, 0x39E);\r\n\r\n\t\t// 20221213: fixes bidi subdomain issue, but breaks invariant (200E is disallowed)\r\n\t\t// could be fixed with special case for: 2D (.) + 200E (LTR)\r\n\t\t// https://discuss.ens.domains/t/bidi-label-ordering-spoof/15824\r\n\t\t//output.splice(0, 0, 0x200E);\r\n\t}\r\n\treturn flatten(labels);\r\n}\r\n\r\nfunction ens_split(name, preserve_emoji) {\r\n\treturn split(name, nfc, preserve_emoji ? x => x.slice() : filter_fe0f); // emoji are exposed so copy\r\n}\r\n\r\nfunction split(name, nf, ef) {\r\n\tif (!name) return []; // 20230719: empty name allowance\r\n\tinit();\r\n\tlet offset = 0;\r\n\t// https://unicode.org/reports/tr46/#Validity_Criteria\r\n\t// 4.) \"The label must not contain a U+002E ( . ) FULL STOP.\"\r\n\treturn name.split(STOP_CH).map(label => {\r\n\t\tlet input = explode_cp(label);\r\n\t\tlet info = {\r\n\t\t\tinput,\r\n\t\t\toffset, // codepoint, not substring!\r\n\t\t};\r\n\t\toffset += input.length + 1; // + stop\r\n\t\ttry {\r\n\t\t\t// 1.) \"The label must be in Unicode Normalization Form NFC\"\r\n\t\t\tlet tokens = info.tokens = tokens_from_str(input, nf, ef);\r\n\t\t\tlet token_count = tokens.length;\r\n\t\t\tlet type;\r\n\t\t\tif (!token_count) { // the label was effectively empty (could of had ignored characters)\r\n\t\t\t\t//norm = [];\r\n\t\t\t\t//type = 'None'; // use this instead of next match, \"ASCII\"\r\n\t\t\t\t// 20230120: change to strict\r\n\t\t\t\t// https://discuss.ens.domains/t/ens-name-normalization-2nd/14564/59\r\n\t\t\t\tthrow new Error(`empty label`);\r\n\t\t\t} \r\n\t\t\tlet norm = info.output = tokens.flat();\r\n\t\t\tcheck_leading_underscore(norm);\r\n\t\t\tlet emoji = info.emoji = token_count > 1 || tokens[0].is_emoji; // same as: tokens.some(x => x.is_emoji);\r\n\t\t\tif (!emoji && norm.every(cp => cp < 0x80)) { // special case for ascii\r\n\t\t\t\t// 20230123: matches matches WHATWG, see note 3.3\r\n\t\t\t\tcheck_label_extension(norm); // only needed for ascii\r\n\t\t\t\t// cant have fenced\r\n\t\t\t\t// cant have cm\r\n\t\t\t\t// cant have wholes\r\n\t\t\t\t// see derive: \"Fastpath ASCII\"\r\n\t\t\t\ttype = 'ASCII';\r\n\t\t\t} else {\r\n\t\t\t\tlet chars = tokens.flatMap(x => x.is_emoji ? [] : x); // all of the nfc tokens concat together\r\n\t\t\t\tif (!chars.length) { // theres no text, just emoji\r\n\t\t\t\t\ttype = 'Emoji';\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// 5.) \"The label must not begin with a combining mark, that is: General_Category=Mark.\"\r\n\t\t\t\t\tif (CM.has(norm[0])) throw error_placement('leading combining mark');\r\n\t\t\t\t\tfor (let i = 1; i < token_count; i++) { // we've already checked the first token\r\n\t\t\t\t\t\tlet cps = tokens[i];\r\n\t\t\t\t\t\tif (!cps.is_emoji && CM.has(cps[0])) { // every text token has emoji neighbors, eg. EtEEEtEt...\r\n\t\t\t\t\t\t\t// bidi_qq() not needed since emoji is LTR and cps is a CM\r\n\t\t\t\t\t\t\tthrow error_placement(`emoji + combining mark: \"${str_from_cps(tokens[i-1])} + ${safe_str_from_cps([cps[0]])}\"`); \r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcheck_fenced(norm);\r\n\t\t\t\t\tlet unique = Array_from(new Set(chars));\r\n\t\t\t\t\tlet [g] = determine_group(unique); // take the first match\r\n\t\t\t\t\t// see derive: \"Matching Groups have Same CM Style\"\r\n\t\t\t\t\t// alternative: could form a hybrid type: Latin/Japanese/...\t\r\n\t\t\t\t\tcheck_group(g, chars); // need text in order\r\n\t\t\t\t\tcheck_whole(g, unique); // only need unique text (order would be required for multiple-char confusables)\r\n\t\t\t\t\ttype = g.N;\r\n\t\t\t\t\t// 20230121: consider exposing restricted flag\r\n\t\t\t\t\t// it's simpler to just check for 'Restricted'\r\n\t\t\t\t\t// or even better: type.endsWith(']')\r\n\t\t\t\t\t//if (g.R) info.restricted = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tinfo.type = type;\r\n\t\t} catch (err) {\r\n\t\t\tinfo.error = err; // use full error object\r\n\t\t}\r\n\t\treturn info;\r\n\t});\r\n}\r\n\r\nfunction check_whole(group, unique) {\r\n\tlet maker;\r\n\tlet shared = [];\r\n\tfor (let cp of unique) {\r\n\t\tlet whole = WHOLE_MAP.get(cp);\r\n\t\tif (whole === UNIQUE_PH) return; // unique, non-confusable\r\n\t\tif (whole) {\r\n\t\t\tlet set = whole.M.get(cp); // groups which have a character that look-like this character\r\n\t\t\tmaker = maker ? maker.filter(g => set.has(g)) : Array_from(set);\r\n\t\t\tif (!maker.length) return; // confusable intersection is empty\r\n\t\t} else {\r\n\t\t\tshared.push(cp); \r\n\t\t}\r\n\t}\r\n\tif (maker) {\r\n\t\t// we have 1+ confusable\r\n\t\t// check if any of the remaining groups\r\n\t\t// contain the shared characters too\r\n\t\tfor (let g of maker) {\r\n\t\t\tif (shared.every(cp => group_has_cp(g, cp))) {\r\n\t\t\t\tthrow new Error(`whole-script confusable: ${group.N}/${g.N}`);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// assumption: unique.size > 0\r\n// returns list of matching groups\r\nfunction determine_group(unique) {\r\n\tlet groups = GROUPS;\r\n\tfor (let cp of unique) {\r\n\t\t// note: we need to dodge CM that are whitelisted\r\n\t\t// but that code isn't currently necessary\r\n\t\tlet gs = groups.filter(g => group_has_cp(g, cp));\r\n\t\tif (!gs.length) {\r\n\t\t\tif (!GROUPS.some(g => group_has_cp(g, cp))) { \r\n\t\t\t\t// the character was composed of valid parts\r\n\t\t\t\t// but it's NFC form is invalid\r\n\t\t\t\t// 20230716: change to more exact statement, see: ENSNormalize.{cs,java}\r\n\t\t\t\t// note: this doesn't have to be a composition\r\n\t\t\t\t// 20230720: change to full check\r\n\t\t\t\tthrow error_disallowed(cp); // this should be rare\r\n\t\t\t} else {\r\n\t\t\t\t// there is no group that contains all these characters\r\n\t\t\t\t// throw using the highest priority group that matched\r\n\t\t\t\t// https://www.unicode.org/reports/tr39/#mixed_script_confusables\r\n\t\t\t\tthrow error_group_member(groups[0], cp);\r\n\t\t\t}\r\n\t\t}\r\n\t\tgroups = gs;\r\n\t\tif (gs.length == 1) break; // there is only one group left\r\n\t}\r\n\t// there are at least 1 group(s) with all of these characters\r\n\treturn groups;\r\n}\r\n\r\n// throw on first error\r\nfunction flatten(split) {\r\n\treturn split.map(({input, error, output}) => {\r\n\t\tif (error) {\r\n\t\t\t// don't print label again if just a single label\r\n\t\t\tlet msg = error.message;\r\n\t\t\t// bidi_qq() only necessary if msg is digits\r\n\t\t\tthrow new Error(split.length == 1 ? msg : `Invalid label ${bidi_qq(safe_str_from_cps(input, 63))}: ${msg}`); \r\n\t\t}\r\n\t\treturn str_from_cps(output);\r\n\t}).join(STOP_CH);\r\n}\r\n\r\nfunction error_disallowed(cp) {\r\n\t// TODO: add cp to error?\r\n\treturn new Error(`disallowed character: ${quoted_cp(cp)}`); \r\n}\r\nfunction error_group_member(g, cp) {\r\n\tlet quoted = quoted_cp(cp);\r\n\tlet gg = GROUPS.find(g => g.P.has(cp)); // only check primary\r\n\tif (gg) {\r\n\t\tquoted = `${gg.N} ${quoted}`;\r\n\t}\r\n\treturn new Error(`illegal mixture: ${g.N} + ${quoted}`);\r\n}\r\nfunction error_placement(where) {\r\n\treturn new Error(`illegal placement: ${where}`);\r\n}\r\n\r\n// assumption: cps.length > 0\r\n// assumption: cps[0] isn't a CM\r\n// assumption: the previous character isn't an emoji\r\nfunction check_group(g, cps) {\r\n\tfor (let cp of cps) {\r\n\t\tif (!group_has_cp(g, cp)) {\r\n\t\t\t// for whitelisted scripts, this will throw illegal mixture on invalid cm, eg. \"e{300}{300}\"\r\n\t\t\t// at the moment, it's unnecessary to introduce an extra error type\r\n\t\t\t// until there exists a whitelisted multi-character\r\n\t\t\t//   eg. if (M < 0 && is_combining_mark(cp)) { ... }\r\n\t\t\t// there are 3 cases:\r\n\t\t\t//   1. illegal cm for wrong group => mixture error\r\n\t\t\t//   2. illegal cm for same group => cm error\r\n\t\t\t//       requires set of whitelist cm per group: \r\n\t\t\t//        eg. new Set([...g.P, ...g.Q].flatMap(nfc).filter(cp => CM.has(cp)))\r\n\t\t\t//   3. wrong group => mixture error\r\n\t\t\tthrow error_group_member(g, cp);\r\n\t\t}\r\n\t}\r\n\t//if (M >= 0) { // we have a known fixed cm count\r\n\tif (g.M) { // we need to check for NSM\r\n\t\tlet decomposed = nfd(cps);\r\n\t\tfor (let i = 1, e = decomposed.length; i < e; i++) { // see: assumption\r\n\t\t\t// 20230210: bugfix: using cps instead of decomposed h/t Carbon225\r\n\t\t\t/*\r\n\t\t\tif (CM.has(decomposed[i])) {\r\n\t\t\t\tlet j = i + 1;\r\n\t\t\t\twhile (j < e && CM.has(decomposed[j])) j++;\r\n\t\t\t\tif (j - i > M) {\r\n\t\t\t\t\tthrow new Error(`too many combining marks: ${g.N} ${bidi_qq(str_from_cps(decomposed.slice(i-1, j)))} (${j-i}/${M})`);\r\n\t\t\t\t}\r\n\t\t\t\ti = j;\r\n\t\t\t}\r\n\t\t\t*/\r\n\t\t\t// 20230217: switch to NSM counting\r\n\t\t\t// https://www.unicode.org/reports/tr39/#Optional_Detection\r\n\t\t\tif (NSM.has(decomposed[i])) {\r\n\t\t\t\tlet j = i + 1;\r\n\t\t\t\tfor (let cp; j < e && NSM.has(cp = decomposed[j]); j++) {\r\n\t\t\t\t\t// a. Forbid sequences of the same nonspacing mark.\r\n\t\t\t\t\tfor (let k = i; k < j; k++) { // O(n^2) but n < 100\r\n\t\t\t\t\t\tif (decomposed[k] == cp) {\r\n\t\t\t\t\t\t\tthrow new Error(`duplicate non-spacing marks: ${quoted_cp(cp)}`);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t// parse to end so we have full nsm count\r\n\t\t\t\t// b. Forbid sequences of more than 4 nonspacing marks (gc=Mn or gc=Me).\r\n\t\t\t\tif (j - i > NSM_MAX) {\r\n\t\t\t\t\t// note: this slice starts with a base char or spacing-mark cm\r\n\t\t\t\t\tthrow new Error(`excessive non-spacing marks: ${bidi_qq(safe_str_from_cps(decomposed.slice(i-1, j)))} (${j-i}/${NSM_MAX})`);\r\n\t\t\t\t}\r\n\t\t\t\ti = j;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t// *** this code currently isn't needed ***\r\n\t/*\r\n\tlet cm_whitelist = M instanceof Map;\r\n\tfor (let i = 0, e = cps.length; i < e; ) {\r\n\t\tlet cp = cps[i++];\r\n\t\tlet seqs = cm_whitelist && M.get(cp);\r\n\t\tif (seqs) { \r\n\t\t\t// list of codepoints that can follow\r\n\t\t\t// if this exists, this will always be 1+\r\n\t\t\tlet j = i;\r\n\t\t\twhile (j < e && CM.has(cps[j])) j++;\r\n\t\t\tlet cms = cps.slice(i, j);\r\n\t\t\tlet match = seqs.find(seq => !compare_arrays(seq, cms));\r\n\t\t\tif (!match) throw new Error(`disallowed combining mark sequence: \"${safe_str_from_cps([cp, ...cms])}\"`);\r\n\t\t\ti = j;\r\n\t\t} else if (!V.has(cp)) {\r\n\t\t\t// https://www.unicode.org/reports/tr39/#mixed_script_confusables\r\n\t\t\tlet quoted = quoted_cp(cp);\r\n\t\t\tfor (let cp of cps) {\r\n\t\t\t\tlet u = UNIQUE.get(cp);\r\n\t\t\t\tif (u && u !== g) {\r\n\t\t\t\t\t// if both scripts are restricted this error is confusing\r\n\t\t\t\t\t// because we don't differentiate RestrictedA from RestrictedB \r\n\t\t\t\t\tif (!u.R) quoted = `${quoted} is ${u.N}`;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthrow new Error(`disallowed ${g.N} character: ${quoted}`);\r\n\t\t\t//throw new Error(`disallowed character: ${quoted} (expected ${g.N})`);\r\n\t\t\t//throw new Error(`${g.N} does not allow: ${quoted}`);\r\n\t\t}\r\n\t}\r\n\tif (!cm_whitelist) {\r\n\t\tlet decomposed = nfd(cps);\r\n\t\tfor (let i = 1, e = decomposed.length; i < e; i++) { // we know it can't be cm leading\r\n\t\t\tif (CM.has(decomposed[i])) {\r\n\t\t\t\tlet j = i + 1;\r\n\t\t\t\twhile (j < e && CM.has(decomposed[j])) j++;\r\n\t\t\t\tif (j - i > M) {\r\n\t\t\t\t\tthrow new Error(`too many combining marks: \"${str_from_cps(decomposed.slice(i-1, j))}\" (${j-i}/${M})`);\r\n\t\t\t\t}\r\n\t\t\t\ti = j;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t*/\r\n}\r\n\r\n// given a list of codepoints\r\n// returns a list of lists, where emoji are a fully-qualified (as Array subclass)\r\n// eg. explode_cp(\"abc💩d\") => [[61, 62, 63], Emoji[1F4A9, FE0F], [64]]\r\n// 20230818: rename for 'process' name collision h/t Javarome\r\n// https://github.com/adraffy/ens-normalize.js/issues/23\r\nfunction tokens_from_str(input, nf, ef) {\r\n\tlet ret = [];\r\n\tlet chars = [];\r\n\tinput = input.slice().reverse(); // flip so we can pop\r\n\twhile (input.length) {\r\n\t\tlet emoji = consume_emoji_reversed(input);\r\n\t\tif (emoji) {\r\n\t\t\tif (chars.length) {\r\n\t\t\t\tret.push(nf(chars));\r\n\t\t\t\tchars = [];\r\n\t\t\t}\r\n\t\t\tret.push(ef(emoji));\r\n\t\t} else {\r\n\t\t\tlet cp = input.pop();\r\n\t\t\tif (VALID.has(cp)) {\r\n\t\t\t\tchars.push(cp);\r\n\t\t\t} else {\r\n\t\t\t\tlet cps = MAPPED.get(cp);\r\n\t\t\t\tif (cps) {\r\n\t\t\t\t\tchars.push(...cps); // less than 10 elements\r\n\t\t\t\t} else if (!IGNORED.has(cp)) {\r\n\t\t\t\t\t// 20230912: unicode 15.1 changed the order of processing such that\r\n\t\t\t\t\t// disallowed parts are only rejected after NFC\r\n\t\t\t\t\t// https://unicode.org/reports/tr46/#Validity_Criteria\r\n\t\t\t\t\t// this doesn't impact normalization as of today\r\n\t\t\t\t\t// technically, this error can be removed as the group logic will apply similar logic\r\n\t\t\t\t\t// however the error type might be less clear\r\n\t\t\t\t\tthrow error_disallowed(cp);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tif (chars.length) {\r\n\t\tret.push(nf(chars));\r\n\t}\r\n\treturn ret;\r\n}\r\n\r\nfunction filter_fe0f(cps) {\r\n\treturn cps.filter(cp => cp != FE0F);\r\n}\r\n\r\n// given array of codepoints\r\n// returns the longest valid emoji sequence (or undefined if no match)\r\n// *MUTATES* the supplied array\r\n// disallows interleaved ignored characters\r\n// fills (optional) eaten array with matched codepoints\r\nfunction consume_emoji_reversed(cps, eaten) {\r\n\tlet node = EMOJI_ROOT;\r\n\tlet emoji;\r\n\tlet pos = cps.length;\r\n\twhile (pos) {\r\n\t\tnode = node.get(cps[--pos]);\r\n\t\tif (!node) break;\r\n\t\tlet {V} = node;\r\n\t\tif (V) { // this is a valid emoji (so far)\r\n\t\t\temoji = V;\r\n\t\t\tif (eaten) eaten.push(...cps.slice(pos).reverse()); // (optional) copy input, used for ens_tokenize()\r\n\t\t\tcps.length = pos; // truncate\r\n\t\t}\r\n\t}\r\n\treturn emoji;\r\n}\r\n\r\n// ************************************************************\r\n// tokenizer \r\n\r\nconst TY_VALID = 'valid';\r\nconst TY_MAPPED = 'mapped';\r\nconst TY_IGNORED = 'ignored';\r\nconst TY_DISALLOWED = 'disallowed';\r\nconst TY_EMOJI = 'emoji';\r\nconst TY_NFC = 'nfc';\r\nconst TY_STOP = 'stop';\r\n\r\nfunction ens_tokenize(name, {\r\n\tnf = true, // collapse unnormalized runs into a single token\r\n} = {}) {\r\n\tinit();\r\n\tlet input = explode_cp(name).reverse();\r\n\tlet eaten = [];\r\n\tlet tokens = [];\r\n\twhile (input.length) {\r\n\t\tlet emoji = consume_emoji_reversed(input, eaten);\r\n\t\tif (emoji) {\r\n\t\t\ttokens.push({\r\n\t\t\t\ttype: TY_EMOJI,\r\n\t\t\t\temoji: emoji.slice(), // copy emoji\r\n\t\t\t\tinput: eaten,\r\n\t\t\t\tcps: filter_fe0f(emoji)\r\n\t\t\t});\r\n\t\t\teaten = []; // reset buffer\r\n\t\t} else {\r\n\t\t\tlet cp = input.pop();\r\n\t\t\tif (cp == STOP) {\r\n\t\t\t\ttokens.push({type: TY_STOP, cp});\r\n\t\t\t} else if (VALID.has(cp)) {\r\n\t\t\t\ttokens.push({type: TY_VALID, cps: [cp]});\r\n\t\t\t} else if (IGNORED.has(cp)) {\r\n\t\t\t\ttokens.push({type: TY_IGNORED, cp});\r\n\t\t\t} else {\r\n\t\t\t\tlet cps = MAPPED.get(cp);\r\n\t\t\t\tif (cps) {\r\n\t\t\t\t\ttokens.push({type: TY_MAPPED, cp, cps: cps.slice()});\r\n\t\t\t\t} else {\r\n\t\t\t\t\ttokens.push({type: TY_DISALLOWED, cp});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tif (nf) {\r\n\t\tfor (let i = 0, start = -1; i < tokens.length; i++) {\r\n\t\t\tlet token = tokens[i];\r\n\t\t\tif (is_valid_or_mapped(token.type)) {\r\n\t\t\t\tif (requires_check(token.cps)) { // normalization might be needed\r\n\t\t\t\t\tlet end = i + 1;\r\n\t\t\t\t\tfor (let pos = end; pos < tokens.length; pos++) { // find adjacent text\r\n\t\t\t\t\t\tlet {type, cps} = tokens[pos];\r\n\t\t\t\t\t\tif (is_valid_or_mapped(type)) {\r\n\t\t\t\t\t\t\tif (!requires_check(cps)) break;\r\n\t\t\t\t\t\t\tend = pos + 1;\r\n\t\t\t\t\t\t} else if (type !== TY_IGNORED) { // || type !== TY_DISALLOWED) { \r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (start < 0) start = i;\r\n\t\t\t\t\tlet slice = tokens.slice(start, end);\r\n\t\t\t\t\tlet cps0 = slice.flatMap(x => is_valid_or_mapped(x.type) ? x.cps : []); // strip junk tokens\r\n\t\t\t\t\tlet cps = nfc(cps0);\r\n\t\t\t\t\tif (compare_arrays(cps, cps0)) { // bundle into an nfc token\r\n\t\t\t\t\t\ttokens.splice(start, end - start, {\r\n\t\t\t\t\t\t\ttype: TY_NFC, \r\n\t\t\t\t\t\t\tinput: cps0, // there are 3 states: tokens0 ==(process)=> input ==(nfc)=> tokens/cps\r\n\t\t\t\t\t\t\tcps, \r\n\t\t\t\t\t\t\ttokens0: collapse_valid_tokens(slice),\r\n\t\t\t\t\t\t\ttokens: ens_tokenize(str_from_cps(cps), {nf: false})\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\ti = start;\r\n\t\t\t\t\t} else { \r\n\t\t\t\t\t\ti = end - 1; // skip to end of slice\r\n\t\t\t\t\t}\r\n\t\t\t\t\tstart = -1; // reset\r\n\t\t\t\t} else {\r\n\t\t\t\t\tstart = i; // remember last\r\n\t\t\t\t}\r\n\t\t\t} else if (token.type !== TY_IGNORED) { // 20221024: is this correct?\r\n\t\t\t\tstart = -1; // reset\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn collapse_valid_tokens(tokens);\r\n}\r\n\r\nfunction is_valid_or_mapped(type) {\r\n\treturn type == TY_VALID || type == TY_MAPPED;\r\n}\r\n\r\nfunction requires_check(cps) {\r\n\treturn cps.some(cp => NFC_CHECK.has(cp));\r\n}\r\n\r\nfunction collapse_valid_tokens(tokens) {\r\n\tfor (let i = 0; i < tokens.length; i++) {\r\n\t\tif (tokens[i].type == TY_VALID) {\r\n\t\t\tlet j = i + 1;\r\n\t\t\twhile (j < tokens.length && tokens[j].type == TY_VALID) j++;\r\n\t\t\ttokens.splice(i, j - i, {type: TY_VALID, cps: tokens.slice(i, j).flatMap(x => x.cps)});\r\n\t\t}\r\n\t}\r\n\treturn tokens;\r\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/@adraffy/ens-normalize/dist/index.mjs\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/@noble/ciphers/esm/_polyval.js":
/*!*****************************************************!*\
  !*** ./node_modules/@noble/ciphers/esm/_polyval.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _toGHASHKey: () => (/* binding */ _toGHASHKey),\n/* harmony export */   ghash: () => (/* binding */ ghash),\n/* harmony export */   polyval: () => (/* binding */ polyval)\n/* harmony export */ });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(pages-dir-browser)/./node_modules/@noble/ciphers/esm/utils.js\");\n/**\n * GHash from AES-GCM and its little-endian \"mirror image\" Polyval from AES-SIV.\n *\n * Implemented in terms of GHash with conversion function for keys\n * GCM GHASH from\n * [NIST SP800-38d](https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-38d.pdf),\n * SIV from\n * [RFC 8452](https://datatracker.ietf.org/doc/html/rfc8452).\n *\n * GHASH   modulo: x^128 + x^7   + x^2   + x     + 1\n * POLYVAL modulo: x^128 + x^127 + x^126 + x^121 + 1\n *\n * @module\n */\n// prettier-ignore\n\nconst BLOCK_SIZE = 16;\n// TODO: rewrite\n// temporary padding buffer\nconst ZEROS16 = /* @__PURE__ */ new Uint8Array(16);\nconst ZEROS32 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.u32)(ZEROS16);\nconst POLY = 0xe1; // v = 2*v % POLY\n// v = 2*v % POLY\n// NOTE: because x + x = 0 (add/sub is same), mul2(x) != x+x\n// We can multiply any number using montgomery ladder and this function (works as double, add is simple xor)\nconst mul2 = (s0, s1, s2, s3) => {\n    const hiBit = s3 & 1;\n    return {\n        s3: (s2 << 31) | (s3 >>> 1),\n        s2: (s1 << 31) | (s2 >>> 1),\n        s1: (s0 << 31) | (s1 >>> 1),\n        s0: (s0 >>> 1) ^ ((POLY << 24) & -(hiBit & 1)), // reduce % poly\n    };\n};\nconst swapLE = (n) => (((n >>> 0) & 0xff) << 24) |\n    (((n >>> 8) & 0xff) << 16) |\n    (((n >>> 16) & 0xff) << 8) |\n    ((n >>> 24) & 0xff) |\n    0;\n/**\n * `mulX_POLYVAL(ByteReverse(H))` from spec\n * @param k mutated in place\n */\nfunction _toGHASHKey(k) {\n    k.reverse();\n    const hiBit = k[15] & 1;\n    // k >>= 1\n    let carry = 0;\n    for (let i = 0; i < k.length; i++) {\n        const t = k[i];\n        k[i] = (t >>> 1) | carry;\n        carry = (t & 1) << 7;\n    }\n    k[0] ^= -hiBit & 0xe1; // if (hiBit) n ^= 0xe1000000000000000000000000000000;\n    return k;\n}\nconst estimateWindow = (bytes) => {\n    if (bytes > 64 * 1024)\n        return 8;\n    if (bytes > 1024)\n        return 4;\n    return 2;\n};\nclass GHASH {\n    // We select bits per window adaptively based on expectedLength\n    constructor(key, expectedLength) {\n        this.blockLen = BLOCK_SIZE;\n        this.outputLen = BLOCK_SIZE;\n        this.s0 = 0;\n        this.s1 = 0;\n        this.s2 = 0;\n        this.s3 = 0;\n        this.finished = false;\n        key = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toBytes)(key);\n        (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.abytes)(key, 16);\n        const kView = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.createView)(key);\n        let k0 = kView.getUint32(0, false);\n        let k1 = kView.getUint32(4, false);\n        let k2 = kView.getUint32(8, false);\n        let k3 = kView.getUint32(12, false);\n        // generate table of doubled keys (half of montgomery ladder)\n        const doubles = [];\n        for (let i = 0; i < 128; i++) {\n            doubles.push({ s0: swapLE(k0), s1: swapLE(k1), s2: swapLE(k2), s3: swapLE(k3) });\n            ({ s0: k0, s1: k1, s2: k2, s3: k3 } = mul2(k0, k1, k2, k3));\n        }\n        const W = estimateWindow(expectedLength || 1024);\n        if (![1, 2, 4, 8].includes(W))\n            throw new Error('ghash: invalid window size, expected 2, 4 or 8');\n        this.W = W;\n        const bits = 128; // always 128 bits;\n        const windows = bits / W;\n        const windowSize = (this.windowSize = 2 ** W);\n        const items = [];\n        // Create precompute table for window of W bits\n        for (let w = 0; w < windows; w++) {\n            // truth table: 00, 01, 10, 11\n            for (let byte = 0; byte < windowSize; byte++) {\n                // prettier-ignore\n                let s0 = 0, s1 = 0, s2 = 0, s3 = 0;\n                for (let j = 0; j < W; j++) {\n                    const bit = (byte >>> (W - j - 1)) & 1;\n                    if (!bit)\n                        continue;\n                    const { s0: d0, s1: d1, s2: d2, s3: d3 } = doubles[W * w + j];\n                    (s0 ^= d0), (s1 ^= d1), (s2 ^= d2), (s3 ^= d3);\n                }\n                items.push({ s0, s1, s2, s3 });\n            }\n        }\n        this.t = items;\n    }\n    _updateBlock(s0, s1, s2, s3) {\n        (s0 ^= this.s0), (s1 ^= this.s1), (s2 ^= this.s2), (s3 ^= this.s3);\n        const { W, t, windowSize } = this;\n        // prettier-ignore\n        let o0 = 0, o1 = 0, o2 = 0, o3 = 0;\n        const mask = (1 << W) - 1; // 2**W will kill performance.\n        let w = 0;\n        for (const num of [s0, s1, s2, s3]) {\n            for (let bytePos = 0; bytePos < 4; bytePos++) {\n                const byte = (num >>> (8 * bytePos)) & 0xff;\n                for (let bitPos = 8 / W - 1; bitPos >= 0; bitPos--) {\n                    const bit = (byte >>> (W * bitPos)) & mask;\n                    const { s0: e0, s1: e1, s2: e2, s3: e3 } = t[w * windowSize + bit];\n                    (o0 ^= e0), (o1 ^= e1), (o2 ^= e2), (o3 ^= e3);\n                    w += 1;\n                }\n            }\n        }\n        this.s0 = o0;\n        this.s1 = o1;\n        this.s2 = o2;\n        this.s3 = o3;\n    }\n    update(data) {\n        (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.aexists)(this);\n        data = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toBytes)(data);\n        (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.abytes)(data);\n        const b32 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.u32)(data);\n        const blocks = Math.floor(data.length / BLOCK_SIZE);\n        const left = data.length % BLOCK_SIZE;\n        for (let i = 0; i < blocks; i++) {\n            this._updateBlock(b32[i * 4 + 0], b32[i * 4 + 1], b32[i * 4 + 2], b32[i * 4 + 3]);\n        }\n        if (left) {\n            ZEROS16.set(data.subarray(blocks * BLOCK_SIZE));\n            this._updateBlock(ZEROS32[0], ZEROS32[1], ZEROS32[2], ZEROS32[3]);\n            (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.clean)(ZEROS32); // clean tmp buffer\n        }\n        return this;\n    }\n    destroy() {\n        const { t } = this;\n        // clean precompute table\n        for (const elm of t) {\n            (elm.s0 = 0), (elm.s1 = 0), (elm.s2 = 0), (elm.s3 = 0);\n        }\n    }\n    digestInto(out) {\n        (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.aexists)(this);\n        (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.aoutput)(out, this);\n        this.finished = true;\n        const { s0, s1, s2, s3 } = this;\n        const o32 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.u32)(out);\n        o32[0] = s0;\n        o32[1] = s1;\n        o32[2] = s2;\n        o32[3] = s3;\n        return out;\n    }\n    digest() {\n        const res = new Uint8Array(BLOCK_SIZE);\n        this.digestInto(res);\n        this.destroy();\n        return res;\n    }\n}\nclass Polyval extends GHASH {\n    constructor(key, expectedLength) {\n        key = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toBytes)(key);\n        (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.abytes)(key);\n        const ghKey = _toGHASHKey((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.copyBytes)(key));\n        super(ghKey, expectedLength);\n        (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.clean)(ghKey);\n    }\n    update(data) {\n        data = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toBytes)(data);\n        (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.aexists)(this);\n        const b32 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.u32)(data);\n        const left = data.length % BLOCK_SIZE;\n        const blocks = Math.floor(data.length / BLOCK_SIZE);\n        for (let i = 0; i < blocks; i++) {\n            this._updateBlock(swapLE(b32[i * 4 + 3]), swapLE(b32[i * 4 + 2]), swapLE(b32[i * 4 + 1]), swapLE(b32[i * 4 + 0]));\n        }\n        if (left) {\n            ZEROS16.set(data.subarray(blocks * BLOCK_SIZE));\n            this._updateBlock(swapLE(ZEROS32[3]), swapLE(ZEROS32[2]), swapLE(ZEROS32[1]), swapLE(ZEROS32[0]));\n            (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.clean)(ZEROS32);\n        }\n        return this;\n    }\n    digestInto(out) {\n        (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.aexists)(this);\n        (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.aoutput)(out, this);\n        this.finished = true;\n        // tmp ugly hack\n        const { s0, s1, s2, s3 } = this;\n        const o32 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.u32)(out);\n        o32[0] = s0;\n        o32[1] = s1;\n        o32[2] = s2;\n        o32[3] = s3;\n        return out.reverse();\n    }\n}\nfunction wrapConstructorWithKey(hashCons) {\n    const hashC = (msg, key) => hashCons(key, msg.length).update((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toBytes)(msg)).digest();\n    const tmp = hashCons(new Uint8Array(16), 0);\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (key, expectedLength) => hashCons(key, expectedLength);\n    return hashC;\n}\n/** GHash MAC for AES-GCM. */\nconst ghash = wrapConstructorWithKey((key, expectedLength) => new GHASH(key, expectedLength));\n/** Polyval MAC for AES-SIV. */\nconst polyval = wrapConstructorWithKey((key, expectedLength) => new Polyval(key, expectedLength));\n//# sourceMappingURL=_polyval.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/@noble/ciphers/esm/_polyval.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/@noble/ciphers/esm/aes.js":
/*!************************************************!*\
  !*** ./node_modules/@noble/ciphers/esm/aes.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   aeskw: () => (/* binding */ aeskw),\n/* harmony export */   aeskwp: () => (/* binding */ aeskwp),\n/* harmony export */   cbc: () => (/* binding */ cbc),\n/* harmony export */   cfb: () => (/* binding */ cfb),\n/* harmony export */   ctr: () => (/* binding */ ctr),\n/* harmony export */   ecb: () => (/* binding */ ecb),\n/* harmony export */   gcm: () => (/* binding */ gcm),\n/* harmony export */   gcmsiv: () => (/* binding */ gcmsiv),\n/* harmony export */   siv: () => (/* binding */ siv),\n/* harmony export */   unsafe: () => (/* binding */ unsafe)\n/* harmony export */ });\n/* harmony import */ var _polyval_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_polyval.js */ \"(pages-dir-browser)/./node_modules/@noble/ciphers/esm/_polyval.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(pages-dir-browser)/./node_modules/@noble/ciphers/esm/utils.js\");\n/**\n * [AES](https://en.wikipedia.org/wiki/Advanced_Encryption_Standard)\n * a.k.a. Advanced Encryption Standard\n * is a variant of Rijndael block cipher, standardized by NIST in 2001.\n * We provide the fastest available pure JS implementation.\n *\n * Data is split into 128-bit blocks. Encrypted in 10/12/14 rounds (128/192/256 bits). In every round:\n * 1. **S-box**, table substitution\n * 2. **Shift rows**, cyclic shift left of all rows of data array\n * 3. **Mix columns**, multiplying every column by fixed polynomial\n * 4. **Add round key**, round_key xor i-th column of array\n *\n * Check out [FIPS-197](https://csrc.nist.gov/files/pubs/fips/197/final/docs/fips-197.pdf)\n * and [original proposal](https://csrc.nist.gov/csrc/media/projects/cryptographic-standards-and-guidelines/documents/aes-development/rijndael-ammended.pdf)\n * @module\n */\n\n// prettier-ignore\n\nconst BLOCK_SIZE = 16;\nconst BLOCK_SIZE32 = 4;\nconst EMPTY_BLOCK = /* @__PURE__ */ new Uint8Array(BLOCK_SIZE);\nconst POLY = 0x11b; // 1 + x + x**3 + x**4 + x**8\n// TODO: remove multiplication, binary ops only\nfunction mul2(n) {\n    return (n << 1) ^ (POLY & -(n >> 7));\n}\nfunction mul(a, b) {\n    let res = 0;\n    for (; b > 0; b >>= 1) {\n        // Montgomery ladder\n        res ^= a & -(b & 1); // if (b&1) res ^=a (but const-time).\n        a = mul2(a); // a = 2*a\n    }\n    return res;\n}\n// AES S-box is generated using finite field inversion,\n// an affine transform, and xor of a constant 0x63.\nconst sbox = /* @__PURE__ */ (() => {\n    const t = new Uint8Array(256);\n    for (let i = 0, x = 1; i < 256; i++, x ^= mul2(x))\n        t[i] = x;\n    const box = new Uint8Array(256);\n    box[0] = 0x63; // first elm\n    for (let i = 0; i < 255; i++) {\n        let x = t[255 - i];\n        x |= x << 8;\n        box[t[i]] = (x ^ (x >> 4) ^ (x >> 5) ^ (x >> 6) ^ (x >> 7) ^ 0x63) & 0xff;\n    }\n    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.clean)(t);\n    return box;\n})();\n// Inverted S-box\nconst invSbox = /* @__PURE__ */ sbox.map((_, j) => sbox.indexOf(j));\n// Rotate u32 by 8\nconst rotr32_8 = (n) => (n << 24) | (n >>> 8);\nconst rotl32_8 = (n) => (n << 8) | (n >>> 24);\n// The byte swap operation for uint32 (LE<->BE)\nconst byteSwap = (word) => ((word << 24) & 0xff000000) |\n    ((word << 8) & 0xff0000) |\n    ((word >>> 8) & 0xff00) |\n    ((word >>> 24) & 0xff);\n// T-table is optimization suggested in 5.2 of original proposal (missed from FIPS-197). Changes:\n// - LE instead of BE\n// - bigger tables: T0 and T1 are merged into T01 table and T2 & T3 into T23;\n//   so index is u16, instead of u8. This speeds up things, unexpectedly\nfunction genTtable(sbox, fn) {\n    if (sbox.length !== 256)\n        throw new Error('Wrong sbox length');\n    const T0 = new Uint32Array(256).map((_, j) => fn(sbox[j]));\n    const T1 = T0.map(rotl32_8);\n    const T2 = T1.map(rotl32_8);\n    const T3 = T2.map(rotl32_8);\n    const T01 = new Uint32Array(256 * 256);\n    const T23 = new Uint32Array(256 * 256);\n    const sbox2 = new Uint16Array(256 * 256);\n    for (let i = 0; i < 256; i++) {\n        for (let j = 0; j < 256; j++) {\n            const idx = i * 256 + j;\n            T01[idx] = T0[i] ^ T1[j];\n            T23[idx] = T2[i] ^ T3[j];\n            sbox2[idx] = (sbox[i] << 8) | sbox[j];\n        }\n    }\n    return { sbox, sbox2, T0, T1, T2, T3, T01, T23 };\n}\nconst tableEncoding = /* @__PURE__ */ genTtable(sbox, (s) => (mul(s, 3) << 24) | (s << 16) | (s << 8) | mul(s, 2));\nconst tableDecoding = /* @__PURE__ */ genTtable(invSbox, (s) => (mul(s, 11) << 24) | (mul(s, 13) << 16) | (mul(s, 9) << 8) | mul(s, 14));\nconst xPowers = /* @__PURE__ */ (() => {\n    const p = new Uint8Array(16);\n    for (let i = 0, x = 1; i < 16; i++, x = mul2(x))\n        p[i] = x;\n    return p;\n})();\n/** Key expansion used in CTR. */\nfunction expandKeyLE(key) {\n    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.abytes)(key);\n    const len = key.length;\n    if (![16, 24, 32].includes(len))\n        throw new Error('aes: invalid key size, should be 16, 24 or 32, got ' + len);\n    const { sbox2 } = tableEncoding;\n    const toClean = [];\n    if (!(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isAligned32)(key))\n        toClean.push((key = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.copyBytes)(key)));\n    const k32 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.u32)(key);\n    const Nk = k32.length;\n    const subByte = (n) => applySbox(sbox2, n, n, n, n);\n    const xk = new Uint32Array(len + 28); // expanded key\n    xk.set(k32);\n    // 4.3.1 Key expansion\n    for (let i = Nk; i < xk.length; i++) {\n        let t = xk[i - 1];\n        if (i % Nk === 0)\n            t = subByte(rotr32_8(t)) ^ xPowers[i / Nk - 1];\n        else if (Nk > 6 && i % Nk === 4)\n            t = subByte(t);\n        xk[i] = xk[i - Nk] ^ t;\n    }\n    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.clean)(...toClean);\n    return xk;\n}\nfunction expandKeyDecLE(key) {\n    const encKey = expandKeyLE(key);\n    const xk = encKey.slice();\n    const Nk = encKey.length;\n    const { sbox2 } = tableEncoding;\n    const { T0, T1, T2, T3 } = tableDecoding;\n    // Inverse key by chunks of 4 (rounds)\n    for (let i = 0; i < Nk; i += 4) {\n        for (let j = 0; j < 4; j++)\n            xk[i + j] = encKey[Nk - i - 4 + j];\n    }\n    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.clean)(encKey);\n    // apply InvMixColumn except first & last round\n    for (let i = 4; i < Nk - 4; i++) {\n        const x = xk[i];\n        const w = applySbox(sbox2, x, x, x, x);\n        xk[i] = T0[w & 0xff] ^ T1[(w >>> 8) & 0xff] ^ T2[(w >>> 16) & 0xff] ^ T3[w >>> 24];\n    }\n    return xk;\n}\n// Apply tables\nfunction apply0123(T01, T23, s0, s1, s2, s3) {\n    return (T01[((s0 << 8) & 0xff00) | ((s1 >>> 8) & 0xff)] ^\n        T23[((s2 >>> 8) & 0xff00) | ((s3 >>> 24) & 0xff)]);\n}\nfunction applySbox(sbox2, s0, s1, s2, s3) {\n    return (sbox2[(s0 & 0xff) | (s1 & 0xff00)] |\n        (sbox2[((s2 >>> 16) & 0xff) | ((s3 >>> 16) & 0xff00)] << 16));\n}\nfunction encrypt(xk, s0, s1, s2, s3) {\n    const { sbox2, T01, T23 } = tableEncoding;\n    let k = 0;\n    (s0 ^= xk[k++]), (s1 ^= xk[k++]), (s2 ^= xk[k++]), (s3 ^= xk[k++]);\n    const rounds = xk.length / 4 - 2;\n    for (let i = 0; i < rounds; i++) {\n        const t0 = xk[k++] ^ apply0123(T01, T23, s0, s1, s2, s3);\n        const t1 = xk[k++] ^ apply0123(T01, T23, s1, s2, s3, s0);\n        const t2 = xk[k++] ^ apply0123(T01, T23, s2, s3, s0, s1);\n        const t3 = xk[k++] ^ apply0123(T01, T23, s3, s0, s1, s2);\n        (s0 = t0), (s1 = t1), (s2 = t2), (s3 = t3);\n    }\n    // last round (without mixcolumns, so using SBOX2 table)\n    const t0 = xk[k++] ^ applySbox(sbox2, s0, s1, s2, s3);\n    const t1 = xk[k++] ^ applySbox(sbox2, s1, s2, s3, s0);\n    const t2 = xk[k++] ^ applySbox(sbox2, s2, s3, s0, s1);\n    const t3 = xk[k++] ^ applySbox(sbox2, s3, s0, s1, s2);\n    return { s0: t0, s1: t1, s2: t2, s3: t3 };\n}\n// Can't be merged with encrypt: arg positions for apply0123 / applySbox are different\nfunction decrypt(xk, s0, s1, s2, s3) {\n    const { sbox2, T01, T23 } = tableDecoding;\n    let k = 0;\n    (s0 ^= xk[k++]), (s1 ^= xk[k++]), (s2 ^= xk[k++]), (s3 ^= xk[k++]);\n    const rounds = xk.length / 4 - 2;\n    for (let i = 0; i < rounds; i++) {\n        const t0 = xk[k++] ^ apply0123(T01, T23, s0, s3, s2, s1);\n        const t1 = xk[k++] ^ apply0123(T01, T23, s1, s0, s3, s2);\n        const t2 = xk[k++] ^ apply0123(T01, T23, s2, s1, s0, s3);\n        const t3 = xk[k++] ^ apply0123(T01, T23, s3, s2, s1, s0);\n        (s0 = t0), (s1 = t1), (s2 = t2), (s3 = t3);\n    }\n    // Last round\n    const t0 = xk[k++] ^ applySbox(sbox2, s0, s3, s2, s1);\n    const t1 = xk[k++] ^ applySbox(sbox2, s1, s0, s3, s2);\n    const t2 = xk[k++] ^ applySbox(sbox2, s2, s1, s0, s3);\n    const t3 = xk[k++] ^ applySbox(sbox2, s3, s2, s1, s0);\n    return { s0: t0, s1: t1, s2: t2, s3: t3 };\n}\n// TODO: investigate merging with ctr32\nfunction ctrCounter(xk, nonce, src, dst) {\n    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.abytes)(nonce, BLOCK_SIZE);\n    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.abytes)(src);\n    const srcLen = src.length;\n    dst = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.getOutput)(srcLen, dst);\n    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.complexOverlapBytes)(src, dst);\n    const ctr = nonce;\n    const c32 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.u32)(ctr);\n    // Fill block (empty, ctr=0)\n    let { s0, s1, s2, s3 } = encrypt(xk, c32[0], c32[1], c32[2], c32[3]);\n    const src32 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.u32)(src);\n    const dst32 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.u32)(dst);\n    // process blocks\n    for (let i = 0; i + 4 <= src32.length; i += 4) {\n        dst32[i + 0] = src32[i + 0] ^ s0;\n        dst32[i + 1] = src32[i + 1] ^ s1;\n        dst32[i + 2] = src32[i + 2] ^ s2;\n        dst32[i + 3] = src32[i + 3] ^ s3;\n        // Full 128 bit counter with wrap around\n        let carry = 1;\n        for (let i = ctr.length - 1; i >= 0; i--) {\n            carry = (carry + (ctr[i] & 0xff)) | 0;\n            ctr[i] = carry & 0xff;\n            carry >>>= 8;\n        }\n        ({ s0, s1, s2, s3 } = encrypt(xk, c32[0], c32[1], c32[2], c32[3]));\n    }\n    // leftovers (less than block)\n    // It's possible to handle > u32 fast, but is it worth it?\n    const start = BLOCK_SIZE * Math.floor(src32.length / BLOCK_SIZE32);\n    if (start < srcLen) {\n        const b32 = new Uint32Array([s0, s1, s2, s3]);\n        const buf = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.u8)(b32);\n        for (let i = start, pos = 0; i < srcLen; i++, pos++)\n            dst[i] = src[i] ^ buf[pos];\n        (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.clean)(b32);\n    }\n    return dst;\n}\n// AES CTR with overflowing 32 bit counter\n// It's possible to do 32le significantly simpler (and probably faster) by using u32.\n// But, we need both, and perf bottleneck is in ghash anyway.\nfunction ctr32(xk, isLE, nonce, src, dst) {\n    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.abytes)(nonce, BLOCK_SIZE);\n    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.abytes)(src);\n    dst = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.getOutput)(src.length, dst);\n    const ctr = nonce; // write new value to nonce, so it can be re-used\n    const c32 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.u32)(ctr);\n    const view = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.createView)(ctr);\n    const src32 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.u32)(src);\n    const dst32 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.u32)(dst);\n    const ctrPos = isLE ? 0 : 12;\n    const srcLen = src.length;\n    // Fill block (empty, ctr=0)\n    let ctrNum = view.getUint32(ctrPos, isLE); // read current counter value\n    let { s0, s1, s2, s3 } = encrypt(xk, c32[0], c32[1], c32[2], c32[3]);\n    // process blocks\n    for (let i = 0; i + 4 <= src32.length; i += 4) {\n        dst32[i + 0] = src32[i + 0] ^ s0;\n        dst32[i + 1] = src32[i + 1] ^ s1;\n        dst32[i + 2] = src32[i + 2] ^ s2;\n        dst32[i + 3] = src32[i + 3] ^ s3;\n        ctrNum = (ctrNum + 1) >>> 0; // u32 wrap\n        view.setUint32(ctrPos, ctrNum, isLE);\n        ({ s0, s1, s2, s3 } = encrypt(xk, c32[0], c32[1], c32[2], c32[3]));\n    }\n    // leftovers (less than a block)\n    const start = BLOCK_SIZE * Math.floor(src32.length / BLOCK_SIZE32);\n    if (start < srcLen) {\n        const b32 = new Uint32Array([s0, s1, s2, s3]);\n        const buf = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.u8)(b32);\n        for (let i = start, pos = 0; i < srcLen; i++, pos++)\n            dst[i] = src[i] ^ buf[pos];\n        (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.clean)(b32);\n    }\n    return dst;\n}\n/**\n * CTR: counter mode. Creates stream cipher.\n * Requires good IV. Parallelizable. OK, but no MAC.\n */\nconst ctr = /* @__PURE__ */ (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.wrapCipher)({ blockSize: 16, nonceLength: 16 }, function aesctr(key, nonce) {\n    function processCtr(buf, dst) {\n        (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.abytes)(buf);\n        if (dst !== undefined) {\n            (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.abytes)(dst);\n            if (!(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isAligned32)(dst))\n                throw new Error('unaligned destination');\n        }\n        const xk = expandKeyLE(key);\n        const n = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.copyBytes)(nonce); // align + avoid changing\n        const toClean = [xk, n];\n        if (!(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isAligned32)(buf))\n            toClean.push((buf = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.copyBytes)(buf)));\n        const out = ctrCounter(xk, n, buf, dst);\n        (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.clean)(...toClean);\n        return out;\n    }\n    return {\n        encrypt: (plaintext, dst) => processCtr(plaintext, dst),\n        decrypt: (ciphertext, dst) => processCtr(ciphertext, dst),\n    };\n});\nfunction validateBlockDecrypt(data) {\n    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.abytes)(data);\n    if (data.length % BLOCK_SIZE !== 0) {\n        throw new Error('aes-(cbc/ecb).decrypt ciphertext should consist of blocks with size ' + BLOCK_SIZE);\n    }\n}\nfunction validateBlockEncrypt(plaintext, pcks5, dst) {\n    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.abytes)(plaintext);\n    let outLen = plaintext.length;\n    const remaining = outLen % BLOCK_SIZE;\n    if (!pcks5 && remaining !== 0)\n        throw new Error('aec/(cbc-ecb): unpadded plaintext with disabled padding');\n    if (!(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isAligned32)(plaintext))\n        plaintext = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.copyBytes)(plaintext);\n    const b = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.u32)(plaintext);\n    if (pcks5) {\n        let left = BLOCK_SIZE - remaining;\n        if (!left)\n            left = BLOCK_SIZE; // if no bytes left, create empty padding block\n        outLen = outLen + left;\n    }\n    dst = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.getOutput)(outLen, dst);\n    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.complexOverlapBytes)(plaintext, dst);\n    const o = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.u32)(dst);\n    return { b, o, out: dst };\n}\nfunction validatePCKS(data, pcks5) {\n    if (!pcks5)\n        return data;\n    const len = data.length;\n    if (!len)\n        throw new Error('aes/pcks5: empty ciphertext not allowed');\n    const lastByte = data[len - 1];\n    if (lastByte <= 0 || lastByte > 16)\n        throw new Error('aes/pcks5: wrong padding');\n    const out = data.subarray(0, -lastByte);\n    for (let i = 0; i < lastByte; i++)\n        if (data[len - i - 1] !== lastByte)\n            throw new Error('aes/pcks5: wrong padding');\n    return out;\n}\nfunction padPCKS(left) {\n    const tmp = new Uint8Array(16);\n    const tmp32 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.u32)(tmp);\n    tmp.set(left);\n    const paddingByte = BLOCK_SIZE - left.length;\n    for (let i = BLOCK_SIZE - paddingByte; i < BLOCK_SIZE; i++)\n        tmp[i] = paddingByte;\n    return tmp32;\n}\n/**\n * ECB: Electronic CodeBook. Simple deterministic replacement.\n * Dangerous: always map x to y. See [AES Penguin](https://words.filippo.io/the-ecb-penguin/).\n */\nconst ecb = /* @__PURE__ */ (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.wrapCipher)({ blockSize: 16 }, function aesecb(key, opts = {}) {\n    const pcks5 = !opts.disablePadding;\n    return {\n        encrypt(plaintext, dst) {\n            const { b, o, out: _out } = validateBlockEncrypt(plaintext, pcks5, dst);\n            const xk = expandKeyLE(key);\n            let i = 0;\n            for (; i + 4 <= b.length;) {\n                const { s0, s1, s2, s3 } = encrypt(xk, b[i + 0], b[i + 1], b[i + 2], b[i + 3]);\n                (o[i++] = s0), (o[i++] = s1), (o[i++] = s2), (o[i++] = s3);\n            }\n            if (pcks5) {\n                const tmp32 = padPCKS(plaintext.subarray(i * 4));\n                const { s0, s1, s2, s3 } = encrypt(xk, tmp32[0], tmp32[1], tmp32[2], tmp32[3]);\n                (o[i++] = s0), (o[i++] = s1), (o[i++] = s2), (o[i++] = s3);\n            }\n            (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.clean)(xk);\n            return _out;\n        },\n        decrypt(ciphertext, dst) {\n            validateBlockDecrypt(ciphertext);\n            const xk = expandKeyDecLE(key);\n            dst = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.getOutput)(ciphertext.length, dst);\n            const toClean = [xk];\n            if (!(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isAligned32)(ciphertext))\n                toClean.push((ciphertext = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.copyBytes)(ciphertext)));\n            (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.complexOverlapBytes)(ciphertext, dst);\n            const b = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.u32)(ciphertext);\n            const o = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.u32)(dst);\n            for (let i = 0; i + 4 <= b.length;) {\n                const { s0, s1, s2, s3 } = decrypt(xk, b[i + 0], b[i + 1], b[i + 2], b[i + 3]);\n                (o[i++] = s0), (o[i++] = s1), (o[i++] = s2), (o[i++] = s3);\n            }\n            (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.clean)(...toClean);\n            return validatePCKS(dst, pcks5);\n        },\n    };\n});\n/**\n * CBC: Cipher-Block-Chaining. Key is previous round’s block.\n * Fragile: needs proper padding. Unauthenticated: needs MAC.\n */\nconst cbc = /* @__PURE__ */ (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.wrapCipher)({ blockSize: 16, nonceLength: 16 }, function aescbc(key, iv, opts = {}) {\n    const pcks5 = !opts.disablePadding;\n    return {\n        encrypt(plaintext, dst) {\n            const xk = expandKeyLE(key);\n            const { b, o, out: _out } = validateBlockEncrypt(plaintext, pcks5, dst);\n            let _iv = iv;\n            const toClean = [xk];\n            if (!(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isAligned32)(_iv))\n                toClean.push((_iv = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.copyBytes)(_iv)));\n            const n32 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.u32)(_iv);\n            // prettier-ignore\n            let s0 = n32[0], s1 = n32[1], s2 = n32[2], s3 = n32[3];\n            let i = 0;\n            for (; i + 4 <= b.length;) {\n                (s0 ^= b[i + 0]), (s1 ^= b[i + 1]), (s2 ^= b[i + 2]), (s3 ^= b[i + 3]);\n                ({ s0, s1, s2, s3 } = encrypt(xk, s0, s1, s2, s3));\n                (o[i++] = s0), (o[i++] = s1), (o[i++] = s2), (o[i++] = s3);\n            }\n            if (pcks5) {\n                const tmp32 = padPCKS(plaintext.subarray(i * 4));\n                (s0 ^= tmp32[0]), (s1 ^= tmp32[1]), (s2 ^= tmp32[2]), (s3 ^= tmp32[3]);\n                ({ s0, s1, s2, s3 } = encrypt(xk, s0, s1, s2, s3));\n                (o[i++] = s0), (o[i++] = s1), (o[i++] = s2), (o[i++] = s3);\n            }\n            (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.clean)(...toClean);\n            return _out;\n        },\n        decrypt(ciphertext, dst) {\n            validateBlockDecrypt(ciphertext);\n            const xk = expandKeyDecLE(key);\n            let _iv = iv;\n            const toClean = [xk];\n            if (!(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isAligned32)(_iv))\n                toClean.push((_iv = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.copyBytes)(_iv)));\n            const n32 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.u32)(_iv);\n            dst = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.getOutput)(ciphertext.length, dst);\n            if (!(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isAligned32)(ciphertext))\n                toClean.push((ciphertext = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.copyBytes)(ciphertext)));\n            (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.complexOverlapBytes)(ciphertext, dst);\n            const b = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.u32)(ciphertext);\n            const o = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.u32)(dst);\n            // prettier-ignore\n            let s0 = n32[0], s1 = n32[1], s2 = n32[2], s3 = n32[3];\n            for (let i = 0; i + 4 <= b.length;) {\n                // prettier-ignore\n                const ps0 = s0, ps1 = s1, ps2 = s2, ps3 = s3;\n                (s0 = b[i + 0]), (s1 = b[i + 1]), (s2 = b[i + 2]), (s3 = b[i + 3]);\n                const { s0: o0, s1: o1, s2: o2, s3: o3 } = decrypt(xk, s0, s1, s2, s3);\n                (o[i++] = o0 ^ ps0), (o[i++] = o1 ^ ps1), (o[i++] = o2 ^ ps2), (o[i++] = o3 ^ ps3);\n            }\n            (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.clean)(...toClean);\n            return validatePCKS(dst, pcks5);\n        },\n    };\n});\n/**\n * CFB: Cipher Feedback Mode. The input for the block cipher is the previous cipher output.\n * Unauthenticated: needs MAC.\n */\nconst cfb = /* @__PURE__ */ (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.wrapCipher)({ blockSize: 16, nonceLength: 16 }, function aescfb(key, iv) {\n    function processCfb(src, isEncrypt, dst) {\n        (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.abytes)(src);\n        const srcLen = src.length;\n        dst = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.getOutput)(srcLen, dst);\n        if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.overlapBytes)(src, dst))\n            throw new Error('overlapping src and dst not supported.');\n        const xk = expandKeyLE(key);\n        let _iv = iv;\n        const toClean = [xk];\n        if (!(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isAligned32)(_iv))\n            toClean.push((_iv = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.copyBytes)(_iv)));\n        if (!(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isAligned32)(src))\n            toClean.push((src = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.copyBytes)(src)));\n        const src32 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.u32)(src);\n        const dst32 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.u32)(dst);\n        const next32 = isEncrypt ? dst32 : src32;\n        const n32 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.u32)(_iv);\n        // prettier-ignore\n        let s0 = n32[0], s1 = n32[1], s2 = n32[2], s3 = n32[3];\n        for (let i = 0; i + 4 <= src32.length;) {\n            const { s0: e0, s1: e1, s2: e2, s3: e3 } = encrypt(xk, s0, s1, s2, s3);\n            dst32[i + 0] = src32[i + 0] ^ e0;\n            dst32[i + 1] = src32[i + 1] ^ e1;\n            dst32[i + 2] = src32[i + 2] ^ e2;\n            dst32[i + 3] = src32[i + 3] ^ e3;\n            (s0 = next32[i++]), (s1 = next32[i++]), (s2 = next32[i++]), (s3 = next32[i++]);\n        }\n        // leftovers (less than block)\n        const start = BLOCK_SIZE * Math.floor(src32.length / BLOCK_SIZE32);\n        if (start < srcLen) {\n            ({ s0, s1, s2, s3 } = encrypt(xk, s0, s1, s2, s3));\n            const buf = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.u8)(new Uint32Array([s0, s1, s2, s3]));\n            for (let i = start, pos = 0; i < srcLen; i++, pos++)\n                dst[i] = src[i] ^ buf[pos];\n            (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.clean)(buf);\n        }\n        (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.clean)(...toClean);\n        return dst;\n    }\n    return {\n        encrypt: (plaintext, dst) => processCfb(plaintext, true, dst),\n        decrypt: (ciphertext, dst) => processCfb(ciphertext, false, dst),\n    };\n});\n// TODO: merge with chacha, however gcm has bitLen while chacha has byteLen\nfunction computeTag(fn, isLE, key, data, AAD) {\n    const aadLength = AAD ? AAD.length : 0;\n    const h = fn.create(key, data.length + aadLength);\n    if (AAD)\n        h.update(AAD);\n    const num = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.u64Lengths)(8 * data.length, 8 * aadLength, isLE);\n    h.update(data);\n    h.update(num);\n    const res = h.digest();\n    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.clean)(num);\n    return res;\n}\n/**\n * GCM: Galois/Counter Mode.\n * Modern, parallel version of CTR, with MAC.\n * Be careful: MACs can be forged.\n * Unsafe to use random nonces under the same key, due to collision chance.\n * As for nonce size, prefer 12-byte, instead of 8-byte.\n */\nconst gcm = /* @__PURE__ */ (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.wrapCipher)({ blockSize: 16, nonceLength: 12, tagLength: 16, varSizeNonce: true }, function aesgcm(key, nonce, AAD) {\n    // NIST 800-38d doesn't enforce minimum nonce length.\n    // We enforce 8 bytes for compat with openssl.\n    // 12 bytes are recommended. More than 12 bytes would be converted into 12.\n    if (nonce.length < 8)\n        throw new Error('aes/gcm: invalid nonce length');\n    const tagLength = 16;\n    function _computeTag(authKey, tagMask, data) {\n        const tag = computeTag(_polyval_js__WEBPACK_IMPORTED_MODULE_1__.ghash, false, authKey, data, AAD);\n        for (let i = 0; i < tagMask.length; i++)\n            tag[i] ^= tagMask[i];\n        return tag;\n    }\n    function deriveKeys() {\n        const xk = expandKeyLE(key);\n        const authKey = EMPTY_BLOCK.slice();\n        const counter = EMPTY_BLOCK.slice();\n        ctr32(xk, false, counter, counter, authKey);\n        // NIST 800-38d, page 15: different behavior for 96-bit and non-96-bit nonces\n        if (nonce.length === 12) {\n            counter.set(nonce);\n        }\n        else {\n            const nonceLen = EMPTY_BLOCK.slice();\n            const view = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.createView)(nonceLen);\n            (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.setBigUint64)(view, 8, BigInt(nonce.length * 8), false);\n            // ghash(nonce || u64be(0) || u64be(nonceLen*8))\n            const g = _polyval_js__WEBPACK_IMPORTED_MODULE_1__.ghash.create(authKey).update(nonce).update(nonceLen);\n            g.digestInto(counter); // digestInto doesn't trigger '.destroy'\n            g.destroy();\n        }\n        const tagMask = ctr32(xk, false, counter, EMPTY_BLOCK);\n        return { xk, authKey, counter, tagMask };\n    }\n    return {\n        encrypt(plaintext) {\n            const { xk, authKey, counter, tagMask } = deriveKeys();\n            const out = new Uint8Array(plaintext.length + tagLength);\n            const toClean = [xk, authKey, counter, tagMask];\n            if (!(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isAligned32)(plaintext))\n                toClean.push((plaintext = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.copyBytes)(plaintext)));\n            ctr32(xk, false, counter, plaintext, out.subarray(0, plaintext.length));\n            const tag = _computeTag(authKey, tagMask, out.subarray(0, out.length - tagLength));\n            toClean.push(tag);\n            out.set(tag, plaintext.length);\n            (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.clean)(...toClean);\n            return out;\n        },\n        decrypt(ciphertext) {\n            const { xk, authKey, counter, tagMask } = deriveKeys();\n            const toClean = [xk, authKey, tagMask, counter];\n            if (!(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isAligned32)(ciphertext))\n                toClean.push((ciphertext = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.copyBytes)(ciphertext)));\n            const data = ciphertext.subarray(0, -tagLength);\n            const passedTag = ciphertext.subarray(-tagLength);\n            const tag = _computeTag(authKey, tagMask, data);\n            toClean.push(tag);\n            if (!(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.equalBytes)(tag, passedTag))\n                throw new Error('aes/gcm: invalid ghash tag');\n            const out = ctr32(xk, false, counter, data);\n            (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.clean)(...toClean);\n            return out;\n        },\n    };\n});\nconst limit = (name, min, max) => (value) => {\n    if (!Number.isSafeInteger(value) || min > value || value > max) {\n        const minmax = '[' + min + '..' + max + ']';\n        throw new Error('' + name + ': expected value in range ' + minmax + ', got ' + value);\n    }\n};\n/**\n * AES-GCM-SIV: classic AES-GCM with nonce-misuse resistance.\n * Guarantees that, when a nonce is repeated, the only security loss is that identical\n * plaintexts will produce identical ciphertexts.\n * RFC 8452, https://datatracker.ietf.org/doc/html/rfc8452\n */\nconst gcmsiv = /* @__PURE__ */ (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.wrapCipher)({ blockSize: 16, nonceLength: 12, tagLength: 16, varSizeNonce: true }, function aessiv(key, nonce, AAD) {\n    const tagLength = 16;\n    // From RFC 8452: Section 6\n    const AAD_LIMIT = limit('AAD', 0, 2 ** 36);\n    const PLAIN_LIMIT = limit('plaintext', 0, 2 ** 36);\n    const NONCE_LIMIT = limit('nonce', 12, 12);\n    const CIPHER_LIMIT = limit('ciphertext', 16, 2 ** 36 + 16);\n    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.abytes)(key, 16, 24, 32);\n    NONCE_LIMIT(nonce.length);\n    if (AAD !== undefined)\n        AAD_LIMIT(AAD.length);\n    function deriveKeys() {\n        const xk = expandKeyLE(key);\n        const encKey = new Uint8Array(key.length);\n        const authKey = new Uint8Array(16);\n        const toClean = [xk, encKey];\n        let _nonce = nonce;\n        if (!(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isAligned32)(_nonce))\n            toClean.push((_nonce = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.copyBytes)(_nonce)));\n        const n32 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.u32)(_nonce);\n        // prettier-ignore\n        let s0 = 0, s1 = n32[0], s2 = n32[1], s3 = n32[2];\n        let counter = 0;\n        for (const derivedKey of [authKey, encKey].map(_utils_js__WEBPACK_IMPORTED_MODULE_0__.u32)) {\n            const d32 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.u32)(derivedKey);\n            for (let i = 0; i < d32.length; i += 2) {\n                // aes(u32le(0) || nonce)[:8] || aes(u32le(1) || nonce)[:8] ...\n                const { s0: o0, s1: o1 } = encrypt(xk, s0, s1, s2, s3);\n                d32[i + 0] = o0;\n                d32[i + 1] = o1;\n                s0 = ++counter; // increment counter inside state\n            }\n        }\n        const res = { authKey, encKey: expandKeyLE(encKey) };\n        // Cleanup\n        (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.clean)(...toClean);\n        return res;\n    }\n    function _computeTag(encKey, authKey, data) {\n        const tag = computeTag(_polyval_js__WEBPACK_IMPORTED_MODULE_1__.polyval, true, authKey, data, AAD);\n        // Compute the expected tag by XORing S_s and the nonce, clearing the\n        // most significant bit of the last byte and encrypting with the\n        // message-encryption key.\n        for (let i = 0; i < 12; i++)\n            tag[i] ^= nonce[i];\n        tag[15] &= 0x7f; // Clear the highest bit\n        // encrypt tag as block\n        const t32 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.u32)(tag);\n        // prettier-ignore\n        let s0 = t32[0], s1 = t32[1], s2 = t32[2], s3 = t32[3];\n        ({ s0, s1, s2, s3 } = encrypt(encKey, s0, s1, s2, s3));\n        (t32[0] = s0), (t32[1] = s1), (t32[2] = s2), (t32[3] = s3);\n        return tag;\n    }\n    // actual decrypt/encrypt of message.\n    function processSiv(encKey, tag, input) {\n        let block = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.copyBytes)(tag);\n        block[15] |= 0x80; // Force highest bit\n        const res = ctr32(encKey, true, block, input);\n        // Cleanup\n        (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.clean)(block);\n        return res;\n    }\n    return {\n        encrypt(plaintext) {\n            PLAIN_LIMIT(plaintext.length);\n            const { encKey, authKey } = deriveKeys();\n            const tag = _computeTag(encKey, authKey, plaintext);\n            const toClean = [encKey, authKey, tag];\n            if (!(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isAligned32)(plaintext))\n                toClean.push((plaintext = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.copyBytes)(plaintext)));\n            const out = new Uint8Array(plaintext.length + tagLength);\n            out.set(tag, plaintext.length);\n            out.set(processSiv(encKey, tag, plaintext));\n            // Cleanup\n            (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.clean)(...toClean);\n            return out;\n        },\n        decrypt(ciphertext) {\n            CIPHER_LIMIT(ciphertext.length);\n            const tag = ciphertext.subarray(-tagLength);\n            const { encKey, authKey } = deriveKeys();\n            const toClean = [encKey, authKey];\n            if (!(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isAligned32)(ciphertext))\n                toClean.push((ciphertext = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.copyBytes)(ciphertext)));\n            const plaintext = processSiv(encKey, tag, ciphertext.subarray(0, -tagLength));\n            const expectedTag = _computeTag(encKey, authKey, plaintext);\n            toClean.push(expectedTag);\n            if (!(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.equalBytes)(tag, expectedTag)) {\n                (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.clean)(...toClean);\n                throw new Error('invalid polyval tag');\n            }\n            // Cleanup\n            (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.clean)(...toClean);\n            return plaintext;\n        },\n    };\n});\n/**\n * AES-GCM-SIV, not AES-SIV.\n * This is legace name, use `gcmsiv` export instead.\n * @deprecated\n */\nconst siv = gcmsiv;\nfunction isBytes32(a) {\n    return (a instanceof Uint32Array || (ArrayBuffer.isView(a) && a.constructor.name === 'Uint32Array'));\n}\nfunction encryptBlock(xk, block) {\n    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.abytes)(block, 16);\n    if (!isBytes32(xk))\n        throw new Error('_encryptBlock accepts result of expandKeyLE');\n    const b32 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.u32)(block);\n    let { s0, s1, s2, s3 } = encrypt(xk, b32[0], b32[1], b32[2], b32[3]);\n    (b32[0] = s0), (b32[1] = s1), (b32[2] = s2), (b32[3] = s3);\n    return block;\n}\nfunction decryptBlock(xk, block) {\n    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.abytes)(block, 16);\n    if (!isBytes32(xk))\n        throw new Error('_decryptBlock accepts result of expandKeyLE');\n    const b32 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.u32)(block);\n    let { s0, s1, s2, s3 } = decrypt(xk, b32[0], b32[1], b32[2], b32[3]);\n    (b32[0] = s0), (b32[1] = s1), (b32[2] = s2), (b32[3] = s3);\n    return block;\n}\n/**\n * AES-W (base for AESKW/AESKWP).\n * Specs: [SP800-38F](https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-38F.pdf),\n * [RFC 3394](https://datatracker.ietf.org/doc/rfc3394/),\n * [RFC 5649](https://datatracker.ietf.org/doc/rfc5649/).\n */\nconst AESW = {\n    /*\n    High-level pseudocode:\n    ```\n    A: u64 = IV\n    out = []\n    for (let i=0, ctr = 0; i<6; i++) {\n      for (const chunk of chunks(plaintext, 8)) {\n        A ^= swapEndianess(ctr++)\n        [A, res] = chunks(encrypt(A || chunk), 8);\n        out ||= res\n      }\n    }\n    out = A || out\n    ```\n    Decrypt is the same, but reversed.\n    */\n    encrypt(kek, out) {\n        // Size is limited to 4GB, otherwise ctr will overflow and we'll need to switch to bigints.\n        // If you need it larger, open an issue.\n        if (out.length >= 2 ** 32)\n            throw new Error('plaintext should be less than 4gb');\n        const xk = expandKeyLE(kek);\n        if (out.length === 16)\n            encryptBlock(xk, out);\n        else {\n            const o32 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.u32)(out);\n            // prettier-ignore\n            let a0 = o32[0], a1 = o32[1]; // A\n            for (let j = 0, ctr = 1; j < 6; j++) {\n                for (let pos = 2; pos < o32.length; pos += 2, ctr++) {\n                    const { s0, s1, s2, s3 } = encrypt(xk, a0, a1, o32[pos], o32[pos + 1]);\n                    // A = MSB(64, B) ^ t where t = (n*j)+i\n                    (a0 = s0), (a1 = s1 ^ byteSwap(ctr)), (o32[pos] = s2), (o32[pos + 1] = s3);\n                }\n            }\n            (o32[0] = a0), (o32[1] = a1); // out = A || out\n        }\n        xk.fill(0);\n    },\n    decrypt(kek, out) {\n        if (out.length - 8 >= 2 ** 32)\n            throw new Error('ciphertext should be less than 4gb');\n        const xk = expandKeyDecLE(kek);\n        const chunks = out.length / 8 - 1; // first chunk is IV\n        if (chunks === 1)\n            decryptBlock(xk, out);\n        else {\n            const o32 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.u32)(out);\n            // prettier-ignore\n            let a0 = o32[0], a1 = o32[1]; // A\n            for (let j = 0, ctr = chunks * 6; j < 6; j++) {\n                for (let pos = chunks * 2; pos >= 1; pos -= 2, ctr--) {\n                    a1 ^= byteSwap(ctr);\n                    const { s0, s1, s2, s3 } = decrypt(xk, a0, a1, o32[pos], o32[pos + 1]);\n                    (a0 = s0), (a1 = s1), (o32[pos] = s2), (o32[pos + 1] = s3);\n                }\n            }\n            (o32[0] = a0), (o32[1] = a1);\n        }\n        xk.fill(0);\n    },\n};\nconst AESKW_IV = /* @__PURE__ */ new Uint8Array(8).fill(0xa6); // A6A6A6A6A6A6A6A6\n/**\n * AES-KW (key-wrap). Injects static IV into plaintext, adds counter, encrypts 6 times.\n * Reduces block size from 16 to 8 bytes.\n * For padded version, use aeskwp.\n * [RFC 3394](https://datatracker.ietf.org/doc/rfc3394/),\n * [NIST.SP.800-38F](https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-38F.pdf).\n */\nconst aeskw = /* @__PURE__ */ (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.wrapCipher)({ blockSize: 8 }, (kek) => ({\n    encrypt(plaintext) {\n        if (!plaintext.length || plaintext.length % 8 !== 0)\n            throw new Error('invalid plaintext length');\n        if (plaintext.length === 8)\n            throw new Error('8-byte keys not allowed in AESKW, use AESKWP instead');\n        const out = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.concatBytes)(AESKW_IV, plaintext);\n        AESW.encrypt(kek, out);\n        return out;\n    },\n    decrypt(ciphertext) {\n        // ciphertext must be at least 24 bytes and a multiple of 8 bytes\n        // 24 because should have at least two block (1 iv + 2).\n        // Replace with 16 to enable '8-byte keys'\n        if (ciphertext.length % 8 !== 0 || ciphertext.length < 3 * 8)\n            throw new Error('invalid ciphertext length');\n        const out = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.copyBytes)(ciphertext);\n        AESW.decrypt(kek, out);\n        if (!(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.equalBytes)(out.subarray(0, 8), AESKW_IV))\n            throw new Error('integrity check failed');\n        out.subarray(0, 8).fill(0); // ciphertext.subarray(0, 8) === IV, but we clean it anyway\n        return out.subarray(8);\n    },\n}));\n/*\nWe don't support 8-byte keys. The rabbit hole:\n\n- Wycheproof says: \"NIST SP 800-38F does not define the wrapping of 8 byte keys.\n  RFC 3394 Section 2  on the other hand specifies that 8 byte keys are wrapped\n  by directly encrypting one block with AES.\"\n    - https://github.com/C2SP/wycheproof/blob/master/doc/key_wrap.md\n    - \"RFC 3394 specifies in Section 2, that the input for the key wrap\n      algorithm must be at least two blocks and otherwise the constant\n      field and key are simply encrypted with ECB as a single block\"\n- What RFC 3394 actually says (in Section 2):\n    - \"Before being wrapped, the key data is parsed into n blocks of 64 bits.\n      The only restriction the key wrap algorithm places on n is that n be\n      at least two\"\n    - \"For key data with length less than or equal to 64 bits, the constant\n      field used in this specification and the key data form a single\n      128-bit codebook input making this key wrap unnecessary.\"\n- Which means \"assert(n >= 2)\" and \"use something else for 8 byte keys\"\n- NIST SP800-38F actually prohibits 8-byte in \"5.3.1 Mandatory Limits\".\n  It states that plaintext for KW should be \"2 to 2^54 -1 semiblocks\".\n- So, where does \"directly encrypt single block with AES\" come from?\n    - Not RFC 3394. Pseudocode of key wrap in 2.2 explicitly uses\n      loop of 6 for any code path\n    - There is a weird W3C spec:\n      https://www.w3.org/TR/2002/REC-xmlenc-core-20021210/Overview.html#kw-aes128\n    - This spec is outdated, as admitted by Wycheproof authors\n    - There is RFC 5649 for padded key wrap, which is padding construction on\n      top of AESKW. In '4.1.2' it says: \"If the padded plaintext contains exactly\n      eight octets, then prepend the AIV as defined in Section 3 above to P[1] and\n      encrypt the resulting 128-bit block using AES in ECB mode [Modes] with key\n      K (the KEK).  In this case, the output is two 64-bit blocks C[0] and C[1]:\"\n    - Browser subtle crypto is actually crashes on wrapping keys less than 16 bytes:\n      `Error: error:1C8000E6:Provider routines::invalid input length] { opensslErrorStack: [ 'error:030000BD:digital envelope routines::update error' ]`\n\nIn the end, seems like a bug in Wycheproof.\nThe 8-byte check can be easily disabled inside of AES_W.\n*/\nconst AESKWP_IV = 0xa65959a6; // single u32le value\n/**\n * AES-KW, but with padding and allows random keys.\n * Second u32 of IV is used as counter for length.\n * [RFC 5649](https://www.rfc-editor.org/rfc/rfc5649)\n */\nconst aeskwp = /* @__PURE__ */ (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.wrapCipher)({ blockSize: 8 }, (kek) => ({\n    encrypt(plaintext) {\n        if (!plaintext.length)\n            throw new Error('invalid plaintext length');\n        const padded = Math.ceil(plaintext.length / 8) * 8;\n        const out = new Uint8Array(8 + padded);\n        out.set(plaintext, 8);\n        const out32 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.u32)(out);\n        out32[0] = AESKWP_IV;\n        out32[1] = byteSwap(plaintext.length);\n        AESW.encrypt(kek, out);\n        return out;\n    },\n    decrypt(ciphertext) {\n        // 16 because should have at least one block\n        if (ciphertext.length < 16)\n            throw new Error('invalid ciphertext length');\n        const out = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.copyBytes)(ciphertext);\n        const o32 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.u32)(out);\n        AESW.decrypt(kek, out);\n        const len = byteSwap(o32[1]) >>> 0;\n        const padded = Math.ceil(len / 8) * 8;\n        if (o32[0] !== AESKWP_IV || out.length - 8 !== padded)\n            throw new Error('integrity check failed');\n        for (let i = len; i < padded; i++)\n            if (out[8 + i] !== 0)\n                throw new Error('integrity check failed');\n        out.subarray(0, 8).fill(0); // ciphertext.subarray(0, 8) === IV, but we clean it anyway\n        return out.subarray(8, 8 + len);\n    },\n}));\n/** Unsafe low-level internal methods. May change at any time. */\nconst unsafe = {\n    expandKeyLE,\n    expandKeyDecLE,\n    encrypt,\n    decrypt,\n    encryptBlock,\n    decryptBlock,\n    ctrCounter,\n    ctr32,\n};\n//# sourceMappingURL=aes.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/@noble/ciphers/esm/aes.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/@noble/ciphers/esm/utils.js":
/*!**************************************************!*\
  !*** ./node_modules/@noble/ciphers/esm/utils.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Hash: () => (/* binding */ Hash),\n/* harmony export */   abool: () => (/* binding */ abool),\n/* harmony export */   abytes: () => (/* binding */ abytes),\n/* harmony export */   aexists: () => (/* binding */ aexists),\n/* harmony export */   ahash: () => (/* binding */ ahash),\n/* harmony export */   anumber: () => (/* binding */ anumber),\n/* harmony export */   aoutput: () => (/* binding */ aoutput),\n/* harmony export */   bytesToHex: () => (/* binding */ bytesToHex),\n/* harmony export */   bytesToNumberBE: () => (/* binding */ bytesToNumberBE),\n/* harmony export */   bytesToUtf8: () => (/* binding */ bytesToUtf8),\n/* harmony export */   checkOpts: () => (/* binding */ checkOpts),\n/* harmony export */   clean: () => (/* binding */ clean),\n/* harmony export */   complexOverlapBytes: () => (/* binding */ complexOverlapBytes),\n/* harmony export */   concatBytes: () => (/* binding */ concatBytes),\n/* harmony export */   copyBytes: () => (/* binding */ copyBytes),\n/* harmony export */   createView: () => (/* binding */ createView),\n/* harmony export */   equalBytes: () => (/* binding */ equalBytes),\n/* harmony export */   getOutput: () => (/* binding */ getOutput),\n/* harmony export */   hexToBytes: () => (/* binding */ hexToBytes),\n/* harmony export */   hexToNumber: () => (/* binding */ hexToNumber),\n/* harmony export */   isAligned32: () => (/* binding */ isAligned32),\n/* harmony export */   isBytes: () => (/* binding */ isBytes),\n/* harmony export */   isLE: () => (/* binding */ isLE),\n/* harmony export */   nextTick: () => (/* binding */ nextTick),\n/* harmony export */   numberToBytesBE: () => (/* binding */ numberToBytesBE),\n/* harmony export */   overlapBytes: () => (/* binding */ overlapBytes),\n/* harmony export */   setBigUint64: () => (/* binding */ setBigUint64),\n/* harmony export */   toBytes: () => (/* binding */ toBytes),\n/* harmony export */   u32: () => (/* binding */ u32),\n/* harmony export */   u64Lengths: () => (/* binding */ u64Lengths),\n/* harmony export */   u8: () => (/* binding */ u8),\n/* harmony export */   utf8ToBytes: () => (/* binding */ utf8ToBytes),\n/* harmony export */   wrapCipher: () => (/* binding */ wrapCipher)\n/* harmony export */ });\n/**\n * Utilities for hex, bytes, CSPRNG.\n * @module\n */\n/*! noble-ciphers - MIT License (c) 2023 Paul Miller (paulmillr.com) */\n/** Checks if something is Uint8Array. Be careful: nodejs Buffer will return true. */\nfunction isBytes(a) {\n    return a instanceof Uint8Array || (ArrayBuffer.isView(a) && a.constructor.name === 'Uint8Array');\n}\n/** Asserts something is boolean. */\nfunction abool(b) {\n    if (typeof b !== 'boolean')\n        throw new Error(`boolean expected, not ${b}`);\n}\n/** Asserts something is positive integer. */\nfunction anumber(n) {\n    if (!Number.isSafeInteger(n) || n < 0)\n        throw new Error('positive integer expected, got ' + n);\n}\n/** Asserts something is Uint8Array. */\nfunction abytes(b, ...lengths) {\n    if (!isBytes(b))\n        throw new Error('Uint8Array expected');\n    if (lengths.length > 0 && !lengths.includes(b.length))\n        throw new Error('Uint8Array expected of length ' + lengths + ', got length=' + b.length);\n}\n/**\n * Asserts something is hash\n * TODO: remove\n * @deprecated\n */\nfunction ahash(h) {\n    if (typeof h !== 'function' || typeof h.create !== 'function')\n        throw new Error('Hash should be wrapped by utils.createHasher');\n    anumber(h.outputLen);\n    anumber(h.blockLen);\n}\n/** Asserts a hash instance has not been destroyed / finished */\nfunction aexists(instance, checkFinished = true) {\n    if (instance.destroyed)\n        throw new Error('Hash instance has been destroyed');\n    if (checkFinished && instance.finished)\n        throw new Error('Hash#digest() has already been called');\n}\n/** Asserts output is properly-sized byte array */\nfunction aoutput(out, instance) {\n    abytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error('digestInto() expects output buffer of length at least ' + min);\n    }\n}\n/** Cast u8 / u16 / u32 to u8. */\nfunction u8(arr) {\n    return new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\n}\n/** Cast u8 / u16 / u32 to u32. */\nfunction u32(arr) {\n    return new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n}\n/** Zeroize a byte array. Warning: JS provides no guarantees. */\nfunction clean(...arrays) {\n    for (let i = 0; i < arrays.length; i++) {\n        arrays[i].fill(0);\n    }\n}\n/** Create DataView of an array for easy byte-level manipulation. */\nfunction createView(arr) {\n    return new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n}\n/** Is current platform little-endian? Most are. Big-Endian platform: IBM */\nconst isLE = /* @__PURE__ */ (() => new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44)();\n// Built-in hex conversion https://caniuse.com/mdn-javascript_builtins_uint8array_fromhex\nconst hasHexBuiltin = /* @__PURE__ */ (() => \n// @ts-ignore\ntypeof Uint8Array.from([]).toHex === 'function' && typeof Uint8Array.fromHex === 'function')();\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));\n/**\n * Convert byte array to hex string. Uses built-in function, when available.\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nfunction bytesToHex(bytes) {\n    abytes(bytes);\n    // @ts-ignore\n    if (hasHexBuiltin)\n        return bytes.toHex();\n    // pre-caching improves the speed 6x\n    let hex = '';\n    for (let i = 0; i < bytes.length; i++) {\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 };\nfunction asciiToBase16(ch) {\n    if (ch >= asciis._0 && ch <= asciis._9)\n        return ch - asciis._0; // '2' => 50-48\n    if (ch >= asciis.A && ch <= asciis.F)\n        return ch - (asciis.A - 10); // 'B' => 66-(65-10)\n    if (ch >= asciis.a && ch <= asciis.f)\n        return ch - (asciis.a - 10); // 'b' => 98-(97-10)\n    return;\n}\n/**\n * Convert hex string to byte array. Uses built-in function, when available.\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    // @ts-ignore\n    if (hasHexBuiltin)\n        return Uint8Array.fromHex(hex);\n    const hl = hex.length;\n    const al = hl / 2;\n    if (hl % 2)\n        throw new Error('hex string expected, got unpadded hex of length ' + hl);\n    const array = new Uint8Array(al);\n    for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n        const n1 = asciiToBase16(hex.charCodeAt(hi));\n        const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n        if (n1 === undefined || n2 === undefined) {\n            const char = hex[hi] + hex[hi + 1];\n            throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n        }\n        array[ai] = n1 * 16 + n2; // multiply first octet, e.g. 'a3' => 10*16+3 => 160 + 3 => 163\n    }\n    return array;\n}\n// Used in micro\nfunction hexToNumber(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    return BigInt(hex === '' ? '0' : '0x' + hex); // Big Endian\n}\n// Used in ff1\n// BE: Big Endian, LE: Little Endian\nfunction bytesToNumberBE(bytes) {\n    return hexToNumber(bytesToHex(bytes));\n}\n// Used in micro, ff1\nfunction numberToBytesBE(n, len) {\n    return hexToBytes(n.toString(16).padStart(len * 2, '0'));\n}\n// TODO: remove\n// There is no setImmediate in browser and setTimeout is slow.\n// call of async fn will return Promise, which will be fullfiled only on\n// next scheduler queue processing step and this is exactly what we need.\nconst nextTick = async () => { };\n/**\n * Converts string to bytes using UTF8 encoding.\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nfunction utf8ToBytes(str) {\n    if (typeof str !== 'string')\n        throw new Error('string expected');\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n/**\n * Converts bytes to string using UTF8 encoding.\n * @example bytesToUtf8(new Uint8Array([97, 98, 99])) // 'abc'\n */\nfunction bytesToUtf8(bytes) {\n    return new TextDecoder().decode(bytes);\n}\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nfunction toBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    else if (isBytes(data))\n        data = copyBytes(data);\n    else\n        throw new Error('Uint8Array expected, got ' + typeof data);\n    return data;\n}\n/**\n * Checks if two U8A use same underlying buffer and overlaps.\n * This is invalid and can corrupt data.\n */\nfunction overlapBytes(a, b) {\n    return (a.buffer === b.buffer && // best we can do, may fail with an obscure Proxy\n        a.byteOffset < b.byteOffset + b.byteLength && // a starts before b end\n        b.byteOffset < a.byteOffset + a.byteLength // b starts before a end\n    );\n}\n/**\n * If input and output overlap and input starts before output, we will overwrite end of input before\n * we start processing it, so this is not supported for most ciphers (except chacha/salse, which designed with this)\n */\nfunction complexOverlapBytes(input, output) {\n    // This is very cursed. It works somehow, but I'm completely unsure,\n    // reasoning about overlapping aligned windows is very hard.\n    if (overlapBytes(input, output) && input.byteOffset < output.byteOffset)\n        throw new Error('complex overlap of input and output is not supported');\n}\n/**\n * Copies several Uint8Arrays into one.\n */\nfunction concatBytes(...arrays) {\n    let sum = 0;\n    for (let i = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        abytes(a);\n        sum += a.length;\n    }\n    const res = new Uint8Array(sum);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        res.set(a, pad);\n        pad += a.length;\n    }\n    return res;\n}\nfunction checkOpts(defaults, opts) {\n    if (opts == null || typeof opts !== 'object')\n        throw new Error('options must be defined');\n    const merged = Object.assign(defaults, opts);\n    return merged;\n}\n/** Compares 2 uint8array-s in kinda constant time. */\nfunction equalBytes(a, b) {\n    if (a.length !== b.length)\n        return false;\n    let diff = 0;\n    for (let i = 0; i < a.length; i++)\n        diff |= a[i] ^ b[i];\n    return diff === 0;\n}\n// TODO: remove\n/** For runtime check if class implements interface. */\nclass Hash {\n}\n/**\n * Wraps a cipher: validates args, ensures encrypt() can only be called once.\n * @__NO_SIDE_EFFECTS__\n */\nconst wrapCipher = (params, constructor) => {\n    function wrappedCipher(key, ...args) {\n        // Validate key\n        abytes(key);\n        // Big-Endian hardware is rare. Just in case someone still decides to run ciphers:\n        if (!isLE)\n            throw new Error('Non little-endian hardware is not yet supported');\n        // Validate nonce if nonceLength is present\n        if (params.nonceLength !== undefined) {\n            const nonce = args[0];\n            if (!nonce)\n                throw new Error('nonce / iv required');\n            if (params.varSizeNonce)\n                abytes(nonce);\n            else\n                abytes(nonce, params.nonceLength);\n        }\n        // Validate AAD if tagLength present\n        const tagl = params.tagLength;\n        if (tagl && args[1] !== undefined) {\n            abytes(args[1]);\n        }\n        const cipher = constructor(key, ...args);\n        const checkOutput = (fnLength, output) => {\n            if (output !== undefined) {\n                if (fnLength !== 2)\n                    throw new Error('cipher output not supported');\n                abytes(output);\n            }\n        };\n        // Create wrapped cipher with validation and single-use encryption\n        let called = false;\n        const wrCipher = {\n            encrypt(data, output) {\n                if (called)\n                    throw new Error('cannot encrypt() twice with same key + nonce');\n                called = true;\n                abytes(data);\n                checkOutput(cipher.encrypt.length, output);\n                return cipher.encrypt(data, output);\n            },\n            decrypt(data, output) {\n                abytes(data);\n                if (tagl && data.length < tagl)\n                    throw new Error('invalid ciphertext length: smaller than tagLength=' + tagl);\n                checkOutput(cipher.decrypt.length, output);\n                return cipher.decrypt(data, output);\n            },\n        };\n        return wrCipher;\n    }\n    Object.assign(wrappedCipher, params);\n    return wrappedCipher;\n};\n/**\n * By default, returns u8a of length.\n * When out is available, it checks it for validity and uses it.\n */\nfunction getOutput(expectedLength, out, onlyAligned = true) {\n    if (out === undefined)\n        return new Uint8Array(expectedLength);\n    if (out.length !== expectedLength)\n        throw new Error('invalid output length, expected ' + expectedLength + ', got: ' + out.length);\n    if (onlyAligned && !isAligned32(out))\n        throw new Error('invalid output, must be aligned');\n    return out;\n}\n/** Polyfill for Safari 14. */\nfunction setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\nfunction u64Lengths(dataLength, aadLength, isLE) {\n    abool(isLE);\n    const num = new Uint8Array(16);\n    const view = createView(num);\n    setBigUint64(view, 0, BigInt(aadLength), isLE);\n    setBigUint64(view, 8, BigInt(dataLength), isLE);\n    return num;\n}\n// Is byte array aligned to 4 byte offset (u32)?\nfunction isAligned32(bytes) {\n    return bytes.byteOffset % 4 === 0;\n}\n// copy bytes to new u8a (aligned). Because Buffer.slice is broken.\nfunction copyBytes(bytes) {\n    return Uint8Array.from(bytes);\n}\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/@noble/ciphers/esm/utils.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/@noble/curves/esm/abstract/bls.js":
/*!********************************************************!*\
  !*** ./node_modules/@noble/curves/esm/abstract/bls.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bls: () => (/* binding */ bls)\n/* harmony export */ });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils.js */ \"(pages-dir-browser)/./node_modules/@noble/curves/esm/utils.js\");\n/* harmony import */ var _curve_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./curve.js */ \"(pages-dir-browser)/./node_modules/@noble/curves/esm/abstract/curve.js\");\n/* harmony import */ var _hash_to_curve_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./hash-to-curve.js */ \"(pages-dir-browser)/./node_modules/@noble/curves/esm/abstract/hash-to-curve.js\");\n/* harmony import */ var _modular_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./modular.js */ \"(pages-dir-browser)/./node_modules/@noble/curves/esm/abstract/modular.js\");\n/* harmony import */ var _weierstrass_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./weierstrass.js */ \"(pages-dir-browser)/./node_modules/@noble/curves/esm/abstract/weierstrass.js\");\n/**\n * BLS != BLS.\n * The file implements BLS (Boneh-Lynn-Shacham) signatures.\n * Used in both BLS (Barreto-Lynn-Scott) and BN (Barreto-Naehrig)\n * families of pairing-friendly curves.\n * Consists of two curves: G1 and G2:\n * - G1 is a subgroup of (x, y) E(Fq) over y² = x³ + 4.\n * - G2 is a subgroup of ((x₁, x₂+i), (y₁, y₂+i)) E(Fq²) over y² = x³ + 4(1 + i) where i is √-1\n * - Gt, created by bilinear (ate) pairing e(G1, G2), consists of p-th roots of unity in\n *   Fq^k where k is embedding degree. Only degree 12 is currently supported, 24 is not.\n * Pairing is used to aggregate and verify signatures.\n * There are two modes of operation:\n * - Long signatures:  X-byte keys + 2X-byte sigs (G1 keys + G2 sigs).\n * - Short signatures: 2X-byte keys + X-byte sigs (G2 keys + G1 sigs).\n * @module\n **/\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n\n\n\n\n\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3);\n// Not used with BLS12-381 (no sequential `11` in X). Useful for other curves.\nfunction NAfDecomposition(a) {\n    const res = [];\n    // a>1 because of marker bit\n    for (; a > _1n; a >>= _1n) {\n        if ((a & _1n) === _0n)\n            res.unshift(0);\n        else if ((a & _3n) === _3n) {\n            res.unshift(-1);\n            a += _1n;\n        }\n        else\n            res.unshift(1);\n    }\n    return res;\n}\n// G1_Point: ProjConstructor<bigint>, G2_Point: ProjConstructor<Fp2>,\nfunction bls(CURVE) {\n    // Fields are specific for curve, so for now we'll need to pass them with opts\n    const { Fp, Fr, Fp2, Fp6, Fp12 } = CURVE.fields;\n    const BLS_X_IS_NEGATIVE = CURVE.params.xNegative;\n    const TWIST = CURVE.params.twistType;\n    // Point on G1 curve: (x, y)\n    const G1_ = (0,_weierstrass_js__WEBPACK_IMPORTED_MODULE_0__.weierstrassPoints)(CURVE.G1);\n    const G1 = Object.assign(G1_, (0,_hash_to_curve_js__WEBPACK_IMPORTED_MODULE_1__.createHasher)(G1_.Point, CURVE.G1.mapToCurve, {\n        ...CURVE.htfDefaults,\n        ...CURVE.G1.htfDefaults,\n    }));\n    // Point on G2 curve (complex numbers): (x₁, x₂+i), (y₁, y₂+i)\n    const G2_ = (0,_weierstrass_js__WEBPACK_IMPORTED_MODULE_0__.weierstrassPoints)(CURVE.G2);\n    const G2 = Object.assign(G2_, (0,_hash_to_curve_js__WEBPACK_IMPORTED_MODULE_1__.createHasher)(G2_.Point, CURVE.G2.mapToCurve, {\n        ...CURVE.htfDefaults,\n        ...CURVE.G2.htfDefaults,\n    }));\n    // Applies sparse multiplication as line function\n    let lineFunction;\n    if (TWIST === 'multiplicative') {\n        lineFunction = (c0, c1, c2, f, Px, Py) => Fp12.mul014(f, c0, Fp2.mul(c1, Px), Fp2.mul(c2, Py));\n    }\n    else if (TWIST === 'divisive') {\n        // NOTE: it should be [c0, c1, c2], but we use different order here to reduce complexity of\n        // precompute calculations.\n        lineFunction = (c0, c1, c2, f, Px, Py) => Fp12.mul034(f, Fp2.mul(c2, Py), Fp2.mul(c1, Px), c0);\n    }\n    else\n        throw new Error('bls: unknown twist type');\n    const Fp2div2 = Fp2.div(Fp2.ONE, Fp2.mul(Fp2.ONE, _2n));\n    function pointDouble(ell, Rx, Ry, Rz) {\n        const t0 = Fp2.sqr(Ry); // Ry²\n        const t1 = Fp2.sqr(Rz); // Rz²\n        const t2 = Fp2.mulByB(Fp2.mul(t1, _3n)); // 3 * T1 * B\n        const t3 = Fp2.mul(t2, _3n); // 3 * T2\n        const t4 = Fp2.sub(Fp2.sub(Fp2.sqr(Fp2.add(Ry, Rz)), t1), t0); // (Ry + Rz)² - T1 - T0\n        const c0 = Fp2.sub(t2, t0); // T2 - T0 (i)\n        const c1 = Fp2.mul(Fp2.sqr(Rx), _3n); // 3 * Rx²\n        const c2 = Fp2.neg(t4); // -T4 (-h)\n        ell.push([c0, c1, c2]);\n        Rx = Fp2.mul(Fp2.mul(Fp2.mul(Fp2.sub(t0, t3), Rx), Ry), Fp2div2); // ((T0 - T3) * Rx * Ry) / 2\n        Ry = Fp2.sub(Fp2.sqr(Fp2.mul(Fp2.add(t0, t3), Fp2div2)), Fp2.mul(Fp2.sqr(t2), _3n)); // ((T0 + T3) / 2)² - 3 * T2²\n        Rz = Fp2.mul(t0, t4); // T0 * T4\n        return { Rx, Ry, Rz };\n    }\n    function pointAdd(ell, Rx, Ry, Rz, Qx, Qy) {\n        // Addition\n        const t0 = Fp2.sub(Ry, Fp2.mul(Qy, Rz)); // Ry - Qy * Rz\n        const t1 = Fp2.sub(Rx, Fp2.mul(Qx, Rz)); // Rx - Qx * Rz\n        const c0 = Fp2.sub(Fp2.mul(t0, Qx), Fp2.mul(t1, Qy)); // T0 * Qx - T1 * Qy == Ry * Qx  - Rx * Qy\n        const c1 = Fp2.neg(t0); // -T0 == Qy * Rz - Ry\n        const c2 = t1; // == Rx - Qx * Rz\n        ell.push([c0, c1, c2]);\n        const t2 = Fp2.sqr(t1); // T1²\n        const t3 = Fp2.mul(t2, t1); // T2 * T1\n        const t4 = Fp2.mul(t2, Rx); // T2 * Rx\n        const t5 = Fp2.add(Fp2.sub(t3, Fp2.mul(t4, _2n)), Fp2.mul(Fp2.sqr(t0), Rz)); // T3 - 2 * T4 + T0² * Rz\n        Rx = Fp2.mul(t1, t5); // T1 * T5\n        Ry = Fp2.sub(Fp2.mul(Fp2.sub(t4, t5), t0), Fp2.mul(t3, Ry)); // (T4 - T5) * T0 - T3 * Ry\n        Rz = Fp2.mul(Rz, t3); // Rz * T3\n        return { Rx, Ry, Rz };\n    }\n    // Pre-compute coefficients for sparse multiplication\n    // Point addition and point double calculations is reused for coefficients\n    // pointAdd happens only if bit set, so wNAF is reasonable. Unfortunately we cannot combine\n    // add + double in windowed precomputes here, otherwise it would be single op (since X is static)\n    const ATE_NAF = NAfDecomposition(CURVE.params.ateLoopSize);\n    const calcPairingPrecomputes = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.memoized)((point) => {\n        const p = point;\n        const { x, y } = p.toAffine();\n        // prettier-ignore\n        const Qx = x, Qy = y, negQy = Fp2.neg(y);\n        // prettier-ignore\n        let Rx = Qx, Ry = Qy, Rz = Fp2.ONE;\n        const ell = [];\n        for (const bit of ATE_NAF) {\n            const cur = [];\n            ({ Rx, Ry, Rz } = pointDouble(cur, Rx, Ry, Rz));\n            if (bit)\n                ({ Rx, Ry, Rz } = pointAdd(cur, Rx, Ry, Rz, Qx, bit === -1 ? negQy : Qy));\n            ell.push(cur);\n        }\n        if (CURVE.postPrecompute) {\n            const last = ell[ell.length - 1];\n            CURVE.postPrecompute(Rx, Ry, Rz, Qx, Qy, pointAdd.bind(null, last));\n        }\n        return ell;\n    });\n    function millerLoopBatch(pairs, withFinalExponent = false) {\n        let f12 = Fp12.ONE;\n        if (pairs.length) {\n            const ellLen = pairs[0][0].length;\n            for (let i = 0; i < ellLen; i++) {\n                f12 = Fp12.sqr(f12); // This allows us to do sqr only one time for all pairings\n                // NOTE: we apply multiple pairings in parallel here\n                for (const [ell, Px, Py] of pairs) {\n                    for (const [c0, c1, c2] of ell[i])\n                        f12 = lineFunction(c0, c1, c2, f12, Px, Py);\n                }\n            }\n        }\n        if (BLS_X_IS_NEGATIVE)\n            f12 = Fp12.conjugate(f12);\n        return withFinalExponent ? Fp12.finalExponentiate(f12) : f12;\n    }\n    // Calculates product of multiple pairings\n    // This up to x2 faster than just `map(({g1, g2})=>pairing({g1,g2}))`\n    function pairingBatch(pairs, withFinalExponent = true) {\n        const res = [];\n        // Cache precomputed toAffine for all points\n        (0,_curve_js__WEBPACK_IMPORTED_MODULE_3__.normalizeZ)(G1.Point, 'pz', pairs.map(({ g1 }) => g1));\n        (0,_curve_js__WEBPACK_IMPORTED_MODULE_3__.normalizeZ)(G2.Point, 'pz', pairs.map(({ g2 }) => g2));\n        for (const { g1, g2 } of pairs) {\n            if (g1.is0() || g2.is0())\n                throw new Error('pairing is not available for ZERO point');\n            // This uses toAffine inside\n            g1.assertValidity();\n            g2.assertValidity();\n            const Qa = g1.toAffine();\n            res.push([calcPairingPrecomputes(g2), Qa.x, Qa.y]);\n        }\n        return millerLoopBatch(res, withFinalExponent);\n    }\n    // Calculates bilinear pairing\n    function pairing(Q, P, withFinalExponent = true) {\n        return pairingBatch([{ g1: Q, g2: P }], withFinalExponent);\n    }\n    const rand = CURVE.randomBytes || _utils_js__WEBPACK_IMPORTED_MODULE_2__.randomBytes;\n    const utils = {\n        randomPrivateKey: () => {\n            const length = (0,_modular_js__WEBPACK_IMPORTED_MODULE_4__.getMinHashLength)(Fr.ORDER);\n            return (0,_modular_js__WEBPACK_IMPORTED_MODULE_4__.mapHashToField)(rand(length), Fr.ORDER);\n        },\n        calcPairingPrecomputes,\n    };\n    function aNonEmpty(arr) {\n        if (!Array.isArray(arr) || arr.length === 0)\n            throw new Error('expected non-empty array');\n    }\n    function normP1(point) {\n        return point instanceof G1.Point ? point : G1.Point.fromHex(point);\n    }\n    function normP2(point) {\n        return point instanceof G2.Point ? point : Signature.fromHex(point);\n    }\n    // TODO: add verifyBatch, fix types, Export Signature property,\n    // actually expose the generated APIs\n    function createBls(PubCurve, SigCurve) {\n        function normPub(point) {\n            return point instanceof PubCurve.Point ? point : PubCurve.Point.fromHex(point);\n        }\n        function normSig(point) {\n            return point instanceof SigCurve.Point ? point : SigCurve.Point.fromHex(point);\n        }\n        function amsg(m) {\n            if (!(m instanceof SigCurve.Point))\n                throw new Error(`expected valid message hashed to ${isLongSigs ? 'G2' : 'G1'} curve`);\n            return m;\n        }\n        // TODO: is this always ok?\n        const isLongSigs = SigCurve.Point.Fp.BYTES > PubCurve.Point.Fp.BYTES;\n        return {\n            // P = pk x G\n            getPublicKey(privateKey) {\n                return PubCurve.Point.fromPrivateKey(privateKey);\n            },\n            // S = pk x H(m)\n            sign(message, privateKey, unusedArg) {\n                if (unusedArg != null)\n                    throw new Error('sign() expects 2 arguments');\n                amsg(message).assertValidity();\n                return message.multiply(PubCurve.normPrivateKeyToScalar(privateKey));\n            },\n            // Checks if pairing of public key & hash is equal to pairing of generator & signature.\n            // e(P, H(m)) == e(G, S)\n            // e(S, G) == e(H(m), P)\n            verify(signature, message, publicKey, unusedArg) {\n                if (unusedArg != null)\n                    throw new Error('verify() expects 3 arguments');\n                signature = normSig(signature);\n                publicKey = normPub(publicKey);\n                const P = publicKey.negate();\n                const G = PubCurve.Point.BASE;\n                const Hm = amsg(message);\n                const S = signature;\n                // This code was changed in 1.9.x:\n                // Before it was G.negate() in G2, now it's always pubKey.negate\n                // TODO: understand if this is OK?\n                // prettier-ignore\n                const exp_ = isLongSigs ? [\n                    { g1: P, g2: Hm },\n                    { g1: G, g2: S }\n                ] : [\n                    { g1: Hm, g2: P },\n                    { g1: S, g2: G }\n                ];\n                // TODO\n                // @ts-ignore\n                const exp = pairingBatch(exp_);\n                return Fp12.eql(exp, Fp12.ONE);\n            },\n            // Adds a bunch of public key points together.\n            // pk1 + pk2 + pk3 = pkA\n            aggregatePublicKeys(publicKeys) {\n                aNonEmpty(publicKeys);\n                publicKeys = publicKeys.map((pub) => normPub(pub));\n                const agg = publicKeys.reduce((sum, p) => sum.add(p), PubCurve.Point.ZERO);\n                agg.assertValidity();\n                return agg;\n            },\n            // Adds a bunch of signature points together.\n            // pk1 + pk2 + pk3 = pkA\n            aggregateSignatures(signatures) {\n                aNonEmpty(signatures);\n                signatures = signatures.map((sig) => normSig(sig));\n                const agg = signatures.reduce((sum, s) => sum.add(s), SigCurve.Point.ZERO);\n                agg.assertValidity();\n                return agg;\n            },\n            hash(messageBytes, DST) {\n                (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.abytes)(messageBytes);\n                const opts = DST ? { DST } : undefined;\n                return SigCurve.hashToCurve(messageBytes, opts);\n            },\n            // @ts-ignore\n            Signature: isLongSigs ? CURVE.G2.Signature : CURVE.G1.ShortSignature,\n        };\n    }\n    const longSignatures = createBls(G1, G2);\n    const shortSignatures = createBls(G2, G1);\n    // LEGACY code\n    const { ShortSignature } = CURVE.G1;\n    const { Signature } = CURVE.G2;\n    function normP1Hash(point, htfOpts) {\n        return point instanceof G1.Point\n            ? point\n            : shortSignatures.hash((0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.ensureBytes)('point', point), htfOpts?.DST);\n    }\n    function normP2Hash(point, htfOpts) {\n        return point instanceof G2.Point\n            ? point\n            : longSignatures.hash((0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.ensureBytes)('point', point), htfOpts?.DST);\n    }\n    function getPublicKey(privateKey) {\n        return longSignatures.getPublicKey(privateKey).toBytes(true);\n    }\n    function getPublicKeyForShortSignatures(privateKey) {\n        return shortSignatures.getPublicKey(privateKey).toBytes(true);\n    }\n    function sign(message, privateKey, htfOpts) {\n        const Hm = normP2Hash(message, htfOpts);\n        const S = longSignatures.sign(Hm, privateKey);\n        return message instanceof G2.Point ? S : Signature.toBytes(S);\n    }\n    function signShortSignature(message, privateKey, htfOpts) {\n        const Hm = normP1Hash(message, htfOpts);\n        const S = shortSignatures.sign(Hm, privateKey);\n        return message instanceof G1.Point ? S : ShortSignature.toBytes(S);\n    }\n    function verify(signature, message, publicKey, htfOpts) {\n        const Hm = normP2Hash(message, htfOpts);\n        return longSignatures.verify(signature, Hm, publicKey);\n    }\n    function verifyShortSignature(signature, message, publicKey, htfOpts) {\n        const Hm = normP1Hash(message, htfOpts);\n        return shortSignatures.verify(signature, Hm, publicKey);\n    }\n    function aggregatePublicKeys(publicKeys) {\n        const agg = longSignatures.aggregatePublicKeys(publicKeys);\n        return publicKeys[0] instanceof G1.Point ? agg : agg.toBytes(true);\n    }\n    function aggregateSignatures(signatures) {\n        const agg = longSignatures.aggregateSignatures(signatures);\n        return signatures[0] instanceof G2.Point ? agg : Signature.toBytes(agg);\n    }\n    function aggregateShortSignatures(signatures) {\n        const agg = shortSignatures.aggregateSignatures(signatures);\n        return signatures[0] instanceof G1.Point ? agg : ShortSignature.toBytes(agg);\n    }\n    // https://ethresear.ch/t/fast-verification-of-multiple-bls-signatures/5407\n    // e(G, S) = e(G, SUM(n)(Si)) = MUL(n)(e(G, Si))\n    // TODO: maybe `{message: G2Hex, publicKey: G1Hex}[]` instead?\n    function verifyBatch(signature, messages, publicKeys, htfOpts) {\n        aNonEmpty(messages);\n        if (publicKeys.length !== messages.length)\n            throw new Error('amount of public keys and messages should be equal');\n        const sig = normP2(signature);\n        const nMessages = messages.map((i) => normP2Hash(i, htfOpts));\n        const nPublicKeys = publicKeys.map(normP1);\n        // NOTE: this works only for exact same object\n        const messagePubKeyMap = new Map();\n        for (let i = 0; i < nPublicKeys.length; i++) {\n            const pub = nPublicKeys[i];\n            const msg = nMessages[i];\n            let keys = messagePubKeyMap.get(msg);\n            if (keys === undefined) {\n                keys = [];\n                messagePubKeyMap.set(msg, keys);\n            }\n            keys.push(pub);\n        }\n        const paired = [];\n        try {\n            for (const [msg, keys] of messagePubKeyMap) {\n                const groupPublicKey = keys.reduce((acc, msg) => acc.add(msg));\n                paired.push({ g1: groupPublicKey, g2: msg });\n            }\n            paired.push({ g1: G1.Point.BASE.negate(), g2: sig });\n            return Fp12.eql(pairingBatch(paired), Fp12.ONE);\n        }\n        catch {\n            return false;\n        }\n    }\n    G1.Point.BASE.precompute(4);\n    return {\n        longSignatures,\n        shortSignatures,\n        millerLoopBatch,\n        pairing,\n        pairingBatch,\n        // TODO!!!\n        verifyBatch,\n        curves: {\n            G1: G1_.Point,\n            G2: G2_.Point,\n        },\n        fields: {\n            Fr,\n            Fp,\n            Fp2,\n            Fp6,\n            Fp12,\n        },\n        params: {\n            ateLoopSize: CURVE.params.ateLoopSize,\n            twistType: CURVE.params.twistType,\n            // deprecated\n            r: CURVE.params.r,\n            G1b: CURVE.G1.b,\n            G2b: CURVE.G2.b,\n        },\n        utils,\n        // deprecated\n        getPublicKey,\n        getPublicKeyForShortSignatures,\n        sign,\n        signShortSignature,\n        verify,\n        verifyShortSignature,\n        aggregatePublicKeys,\n        aggregateSignatures,\n        aggregateShortSignatures,\n        G1,\n        G2,\n        Signature,\n        ShortSignature,\n    };\n}\n//# sourceMappingURL=bls.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/@noble/curves/esm/abstract/bls.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/@noble/curves/esm/abstract/tower.js":
/*!**********************************************************!*\
  !*** ./node_modules/@noble/curves/esm/abstract/tower.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   psiFrobenius: () => (/* binding */ psiFrobenius),\n/* harmony export */   tower12: () => (/* binding */ tower12)\n/* harmony export */ });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils.js */ \"(pages-dir-browser)/./node_modules/@noble/curves/esm/utils.js\");\n/* harmony import */ var _modular_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modular.js */ \"(pages-dir-browser)/./node_modules/@noble/curves/esm/abstract/modular.js\");\n/**\n * Towered extension fields.\n * Rather than implementing a massive 12th-degree extension directly, it is more efficient\n * to build it up from smaller extensions: a tower of extensions.\n *\n * For BLS12-381, the Fp12 field is implemented as a quadratic (degree two) extension,\n * on top of a cubic (degree three) extension, on top of a quadratic extension of Fp.\n *\n * For more info: \"Pairings for beginners\" by Costello, section 7.3.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n\n\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3);\nfunction calcFrobeniusCoefficients(Fp, nonResidue, modulus, degree, num = 1, divisor) {\n    const _divisor = BigInt(divisor === undefined ? degree : divisor);\n    const towerModulus = modulus ** BigInt(degree);\n    const res = [];\n    for (let i = 0; i < num; i++) {\n        const a = BigInt(i + 1);\n        const powers = [];\n        for (let j = 0, qPower = _1n; j < degree; j++) {\n            const power = ((a * qPower - a) / _divisor) % towerModulus;\n            powers.push(Fp.pow(nonResidue, power));\n            qPower *= modulus;\n        }\n        res.push(powers);\n    }\n    return res;\n}\n// This works same at least for bls12-381, bn254 and bls12-377\nfunction psiFrobenius(Fp, Fp2, base) {\n    // GLV endomorphism Ψ(P)\n    const PSI_X = Fp2.pow(base, (Fp.ORDER - _1n) / _3n); // u^((p-1)/3)\n    const PSI_Y = Fp2.pow(base, (Fp.ORDER - _1n) / _2n); // u^((p-1)/2)\n    function psi(x, y) {\n        // This x10 faster than previous version in bls12-381\n        const x2 = Fp2.mul(Fp2.frobeniusMap(x, 1), PSI_X);\n        const y2 = Fp2.mul(Fp2.frobeniusMap(y, 1), PSI_Y);\n        return [x2, y2];\n    }\n    // Ψ²(P) endomorphism (psi2(x) = psi(psi(x)))\n    const PSI2_X = Fp2.pow(base, (Fp.ORDER ** _2n - _1n) / _3n); // u^((p^2 - 1)/3)\n    // This equals -1, which causes y to be Fp2.neg(y).\n    // But not sure if there are case when this is not true?\n    const PSI2_Y = Fp2.pow(base, (Fp.ORDER ** _2n - _1n) / _2n); // u^((p^2 - 1)/3)\n    if (!Fp2.eql(PSI2_Y, Fp2.neg(Fp2.ONE)))\n        throw new Error('psiFrobenius: PSI2_Y!==-1');\n    function psi2(x, y) {\n        return [Fp2.mul(x, PSI2_X), Fp2.neg(y)];\n    }\n    // Map points\n    const mapAffine = (fn) => (c, P) => {\n        const affine = P.toAffine();\n        const p = fn(affine.x, affine.y);\n        return c.fromAffine({ x: p[0], y: p[1] });\n    };\n    const G2psi = mapAffine(psi);\n    const G2psi2 = mapAffine(psi2);\n    return { psi, psi2, G2psi, G2psi2, PSI_X, PSI_Y, PSI2_X, PSI2_Y };\n}\nfunction tower12(opts) {\n    const { ORDER } = opts;\n    // Fp\n    const Fp = _modular_js__WEBPACK_IMPORTED_MODULE_0__.Field(ORDER);\n    const FpNONRESIDUE = Fp.create(opts.NONRESIDUE || BigInt(-1));\n    const Fpdiv2 = Fp.div(Fp.ONE, _2n); // 1/2\n    // Fp2\n    const FP2_FROBENIUS_COEFFICIENTS = calcFrobeniusCoefficients(Fp, FpNONRESIDUE, Fp.ORDER, 2)[0];\n    const Fp2Add = ({ c0, c1 }, { c0: r0, c1: r1 }) => ({\n        c0: Fp.add(c0, r0),\n        c1: Fp.add(c1, r1),\n    });\n    const Fp2Subtract = ({ c0, c1 }, { c0: r0, c1: r1 }) => ({\n        c0: Fp.sub(c0, r0),\n        c1: Fp.sub(c1, r1),\n    });\n    const Fp2Multiply = ({ c0, c1 }, rhs) => {\n        if (typeof rhs === 'bigint')\n            return { c0: Fp.mul(c0, rhs), c1: Fp.mul(c1, rhs) };\n        // (a+bi)(c+di) = (ac−bd) + (ad+bc)i\n        const { c0: r0, c1: r1 } = rhs;\n        let t1 = Fp.mul(c0, r0); // c0 * o0\n        let t2 = Fp.mul(c1, r1); // c1 * o1\n        // (T1 - T2) + ((c0 + c1) * (r0 + r1) - (T1 + T2))*i\n        const o0 = Fp.sub(t1, t2);\n        const o1 = Fp.sub(Fp.mul(Fp.add(c0, c1), Fp.add(r0, r1)), Fp.add(t1, t2));\n        return { c0: o0, c1: o1 };\n    };\n    const Fp2Square = ({ c0, c1 }) => {\n        const a = Fp.add(c0, c1);\n        const b = Fp.sub(c0, c1);\n        const c = Fp.add(c0, c0);\n        return { c0: Fp.mul(a, b), c1: Fp.mul(c, c1) };\n    };\n    const Fp2fromBigTuple = (tuple) => {\n        if (tuple.length !== 2)\n            throw new Error('invalid tuple');\n        const fps = tuple.map((n) => Fp.create(n));\n        return { c0: fps[0], c1: fps[1] };\n    };\n    function isValidC(num, ORDER) {\n        return typeof num === 'bigint' && _0n <= num && num < ORDER;\n    }\n    const FP2_ORDER = ORDER * ORDER;\n    const Fp2Nonresidue = Fp2fromBigTuple(opts.FP2_NONRESIDUE);\n    const Fp2 = {\n        ORDER: FP2_ORDER,\n        isLE: Fp.isLE,\n        NONRESIDUE: Fp2Nonresidue,\n        BITS: (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.bitLen)(FP2_ORDER),\n        BYTES: Math.ceil((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.bitLen)(FP2_ORDER) / 8),\n        MASK: (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.bitMask)((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.bitLen)(FP2_ORDER)),\n        ZERO: { c0: Fp.ZERO, c1: Fp.ZERO },\n        ONE: { c0: Fp.ONE, c1: Fp.ZERO },\n        create: (num) => num,\n        isValid: ({ c0, c1 }) => isValidC(c0, FP2_ORDER) && isValidC(c1, FP2_ORDER),\n        is0: ({ c0, c1 }) => Fp.is0(c0) && Fp.is0(c1),\n        isValidNot0: (num) => !Fp2.is0(num) && Fp2.isValid(num),\n        eql: ({ c0, c1 }, { c0: r0, c1: r1 }) => Fp.eql(c0, r0) && Fp.eql(c1, r1),\n        neg: ({ c0, c1 }) => ({ c0: Fp.neg(c0), c1: Fp.neg(c1) }),\n        pow: (num, power) => _modular_js__WEBPACK_IMPORTED_MODULE_0__.FpPow(Fp2, num, power),\n        invertBatch: (nums) => _modular_js__WEBPACK_IMPORTED_MODULE_0__.FpInvertBatch(Fp2, nums),\n        // Normalized\n        add: Fp2Add,\n        sub: Fp2Subtract,\n        mul: Fp2Multiply,\n        sqr: Fp2Square,\n        // NonNormalized stuff\n        addN: Fp2Add,\n        subN: Fp2Subtract,\n        mulN: Fp2Multiply,\n        sqrN: Fp2Square,\n        // Why inversion for bigint inside Fp instead of Fp2? it is even used in that context?\n        div: (lhs, rhs) => Fp2.mul(lhs, typeof rhs === 'bigint' ? Fp.inv(Fp.create(rhs)) : Fp2.inv(rhs)),\n        inv: ({ c0: a, c1: b }) => {\n            // We wish to find the multiplicative inverse of a nonzero\n            // element a + bu in Fp2. We leverage an identity\n            //\n            // (a + bu)(a - bu) = a² + b²\n            //\n            // which holds because u² = -1. This can be rewritten as\n            //\n            // (a + bu)(a - bu)/(a² + b²) = 1\n            //\n            // because a² + b² = 0 has no nonzero solutions for (a, b).\n            // This gives that (a - bu)/(a² + b²) is the inverse\n            // of (a + bu). Importantly, this can be computing using\n            // only a single inversion in Fp.\n            const factor = Fp.inv(Fp.create(a * a + b * b));\n            return { c0: Fp.mul(factor, Fp.create(a)), c1: Fp.mul(factor, Fp.create(-b)) };\n        },\n        sqrt: (num) => {\n            if (opts.Fp2sqrt)\n                return opts.Fp2sqrt(num);\n            // This is generic for all quadratic extensions (Fp2)\n            const { c0, c1 } = num;\n            if (Fp.is0(c1)) {\n                // if c0 is quadratic residue\n                if (_modular_js__WEBPACK_IMPORTED_MODULE_0__.FpLegendre(Fp, c0) === 1)\n                    return Fp2.create({ c0: Fp.sqrt(c0), c1: Fp.ZERO });\n                else\n                    return Fp2.create({ c0: Fp.ZERO, c1: Fp.sqrt(Fp.div(c0, FpNONRESIDUE)) });\n            }\n            const a = Fp.sqrt(Fp.sub(Fp.sqr(c0), Fp.mul(Fp.sqr(c1), FpNONRESIDUE)));\n            let d = Fp.mul(Fp.add(a, c0), Fpdiv2);\n            const legendre = _modular_js__WEBPACK_IMPORTED_MODULE_0__.FpLegendre(Fp, d);\n            // -1, Quadratic non residue\n            if (legendre === -1)\n                d = Fp.sub(d, a);\n            const a0 = Fp.sqrt(d);\n            const candidateSqrt = Fp2.create({ c0: a0, c1: Fp.div(Fp.mul(c1, Fpdiv2), a0) });\n            if (!Fp2.eql(Fp2.sqr(candidateSqrt), num))\n                throw new Error('Cannot find square root');\n            // Normalize root: at this point candidateSqrt ** 2 = num, but also -candidateSqrt ** 2 = num\n            const x1 = candidateSqrt;\n            const x2 = Fp2.neg(x1);\n            const { re: re1, im: im1 } = Fp2.reim(x1);\n            const { re: re2, im: im2 } = Fp2.reim(x2);\n            if (im1 > im2 || (im1 === im2 && re1 > re2))\n                return x1;\n            return x2;\n        },\n        // Same as sgn0_m_eq_2 in RFC 9380\n        isOdd: (x) => {\n            const { re: x0, im: x1 } = Fp2.reim(x);\n            const sign_0 = x0 % _2n;\n            const zero_0 = x0 === _0n;\n            const sign_1 = x1 % _2n;\n            return BigInt(sign_0 || (zero_0 && sign_1)) == _1n;\n        },\n        // Bytes util\n        fromBytes(b) {\n            if (b.length !== Fp2.BYTES)\n                throw new Error('fromBytes invalid length=' + b.length);\n            return { c0: Fp.fromBytes(b.subarray(0, Fp.BYTES)), c1: Fp.fromBytes(b.subarray(Fp.BYTES)) };\n        },\n        toBytes: ({ c0, c1 }) => (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.concatBytes)(Fp.toBytes(c0), Fp.toBytes(c1)),\n        cmov: ({ c0, c1 }, { c0: r0, c1: r1 }, c) => ({\n            c0: Fp.cmov(c0, r0, c),\n            c1: Fp.cmov(c1, r1, c),\n        }),\n        reim: ({ c0, c1 }) => ({ re: c0, im: c1 }),\n        // multiply by u + 1\n        mulByNonresidue: ({ c0, c1 }) => Fp2.mul({ c0, c1 }, Fp2Nonresidue),\n        mulByB: opts.Fp2mulByB,\n        fromBigTuple: Fp2fromBigTuple,\n        frobeniusMap: ({ c0, c1 }, power) => ({\n            c0,\n            c1: Fp.mul(c1, FP2_FROBENIUS_COEFFICIENTS[power % 2]),\n        }),\n    };\n    // Fp6\n    const Fp6Add = ({ c0, c1, c2 }, { c0: r0, c1: r1, c2: r2 }) => ({\n        c0: Fp2.add(c0, r0),\n        c1: Fp2.add(c1, r1),\n        c2: Fp2.add(c2, r2),\n    });\n    const Fp6Subtract = ({ c0, c1, c2 }, { c0: r0, c1: r1, c2: r2 }) => ({\n        c0: Fp2.sub(c0, r0),\n        c1: Fp2.sub(c1, r1),\n        c2: Fp2.sub(c2, r2),\n    });\n    const Fp6Multiply = ({ c0, c1, c2 }, rhs) => {\n        if (typeof rhs === 'bigint') {\n            return {\n                c0: Fp2.mul(c0, rhs),\n                c1: Fp2.mul(c1, rhs),\n                c2: Fp2.mul(c2, rhs),\n            };\n        }\n        const { c0: r0, c1: r1, c2: r2 } = rhs;\n        const t0 = Fp2.mul(c0, r0); // c0 * o0\n        const t1 = Fp2.mul(c1, r1); // c1 * o1\n        const t2 = Fp2.mul(c2, r2); // c2 * o2\n        return {\n            // t0 + (c1 + c2) * (r1 * r2) - (T1 + T2) * (u + 1)\n            c0: Fp2.add(t0, Fp2.mulByNonresidue(Fp2.sub(Fp2.mul(Fp2.add(c1, c2), Fp2.add(r1, r2)), Fp2.add(t1, t2)))),\n            // (c0 + c1) * (r0 + r1) - (T0 + T1) + T2 * (u + 1)\n            c1: Fp2.add(Fp2.sub(Fp2.mul(Fp2.add(c0, c1), Fp2.add(r0, r1)), Fp2.add(t0, t1)), Fp2.mulByNonresidue(t2)),\n            // T1 + (c0 + c2) * (r0 + r2) - T0 + T2\n            c2: Fp2.sub(Fp2.add(t1, Fp2.mul(Fp2.add(c0, c2), Fp2.add(r0, r2))), Fp2.add(t0, t2)),\n        };\n    };\n    const Fp6Square = ({ c0, c1, c2 }) => {\n        let t0 = Fp2.sqr(c0); // c0²\n        let t1 = Fp2.mul(Fp2.mul(c0, c1), _2n); // 2 * c0 * c1\n        let t3 = Fp2.mul(Fp2.mul(c1, c2), _2n); // 2 * c1 * c2\n        let t4 = Fp2.sqr(c2); // c2²\n        return {\n            c0: Fp2.add(Fp2.mulByNonresidue(t3), t0), // T3 * (u + 1) + T0\n            c1: Fp2.add(Fp2.mulByNonresidue(t4), t1), // T4 * (u + 1) + T1\n            // T1 + (c0 - c1 + c2)² + T3 - T0 - T4\n            c2: Fp2.sub(Fp2.sub(Fp2.add(Fp2.add(t1, Fp2.sqr(Fp2.add(Fp2.sub(c0, c1), c2))), t3), t0), t4),\n        };\n    };\n    const [FP6_FROBENIUS_COEFFICIENTS_1, FP6_FROBENIUS_COEFFICIENTS_2] = calcFrobeniusCoefficients(Fp2, Fp2Nonresidue, Fp.ORDER, 6, 2, 3);\n    const Fp6 = {\n        ORDER: Fp2.ORDER, // TODO: unused, but need to verify\n        isLE: Fp2.isLE,\n        BITS: 3 * Fp2.BITS,\n        BYTES: 3 * Fp2.BYTES,\n        MASK: (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.bitMask)(3 * Fp2.BITS),\n        ZERO: { c0: Fp2.ZERO, c1: Fp2.ZERO, c2: Fp2.ZERO },\n        ONE: { c0: Fp2.ONE, c1: Fp2.ZERO, c2: Fp2.ZERO },\n        create: (num) => num,\n        isValid: ({ c0, c1, c2 }) => Fp2.isValid(c0) && Fp2.isValid(c1) && Fp2.isValid(c2),\n        is0: ({ c0, c1, c2 }) => Fp2.is0(c0) && Fp2.is0(c1) && Fp2.is0(c2),\n        isValidNot0: (num) => !Fp6.is0(num) && Fp6.isValid(num),\n        neg: ({ c0, c1, c2 }) => ({ c0: Fp2.neg(c0), c1: Fp2.neg(c1), c2: Fp2.neg(c2) }),\n        eql: ({ c0, c1, c2 }, { c0: r0, c1: r1, c2: r2 }) => Fp2.eql(c0, r0) && Fp2.eql(c1, r1) && Fp2.eql(c2, r2),\n        sqrt: _utils_js__WEBPACK_IMPORTED_MODULE_1__.notImplemented,\n        // Do we need division by bigint at all? Should be done via order:\n        div: (lhs, rhs) => Fp6.mul(lhs, typeof rhs === 'bigint' ? Fp.inv(Fp.create(rhs)) : Fp6.inv(rhs)),\n        pow: (num, power) => _modular_js__WEBPACK_IMPORTED_MODULE_0__.FpPow(Fp6, num, power),\n        invertBatch: (nums) => _modular_js__WEBPACK_IMPORTED_MODULE_0__.FpInvertBatch(Fp6, nums),\n        // Normalized\n        add: Fp6Add,\n        sub: Fp6Subtract,\n        mul: Fp6Multiply,\n        sqr: Fp6Square,\n        // NonNormalized stuff\n        addN: Fp6Add,\n        subN: Fp6Subtract,\n        mulN: Fp6Multiply,\n        sqrN: Fp6Square,\n        inv: ({ c0, c1, c2 }) => {\n            let t0 = Fp2.sub(Fp2.sqr(c0), Fp2.mulByNonresidue(Fp2.mul(c2, c1))); // c0² - c2 * c1 * (u + 1)\n            let t1 = Fp2.sub(Fp2.mulByNonresidue(Fp2.sqr(c2)), Fp2.mul(c0, c1)); // c2² * (u + 1) - c0 * c1\n            let t2 = Fp2.sub(Fp2.sqr(c1), Fp2.mul(c0, c2)); // c1² - c0 * c2\n            // 1/(((c2 * T1 + c1 * T2) * v) + c0 * T0)\n            let t4 = Fp2.inv(Fp2.add(Fp2.mulByNonresidue(Fp2.add(Fp2.mul(c2, t1), Fp2.mul(c1, t2))), Fp2.mul(c0, t0)));\n            return { c0: Fp2.mul(t4, t0), c1: Fp2.mul(t4, t1), c2: Fp2.mul(t4, t2) };\n        },\n        // Bytes utils\n        fromBytes: (b) => {\n            if (b.length !== Fp6.BYTES)\n                throw new Error('fromBytes invalid length=' + b.length);\n            return {\n                c0: Fp2.fromBytes(b.subarray(0, Fp2.BYTES)),\n                c1: Fp2.fromBytes(b.subarray(Fp2.BYTES, 2 * Fp2.BYTES)),\n                c2: Fp2.fromBytes(b.subarray(2 * Fp2.BYTES)),\n            };\n        },\n        toBytes: ({ c0, c1, c2 }) => (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.concatBytes)(Fp2.toBytes(c0), Fp2.toBytes(c1), Fp2.toBytes(c2)),\n        cmov: ({ c0, c1, c2 }, { c0: r0, c1: r1, c2: r2 }, c) => ({\n            c0: Fp2.cmov(c0, r0, c),\n            c1: Fp2.cmov(c1, r1, c),\n            c2: Fp2.cmov(c2, r2, c),\n        }),\n        fromBigSix: (t) => {\n            if (!Array.isArray(t) || t.length !== 6)\n                throw new Error('invalid Fp6 usage');\n            return {\n                c0: Fp2.fromBigTuple(t.slice(0, 2)),\n                c1: Fp2.fromBigTuple(t.slice(2, 4)),\n                c2: Fp2.fromBigTuple(t.slice(4, 6)),\n            };\n        },\n        frobeniusMap: ({ c0, c1, c2 }, power) => ({\n            c0: Fp2.frobeniusMap(c0, power),\n            c1: Fp2.mul(Fp2.frobeniusMap(c1, power), FP6_FROBENIUS_COEFFICIENTS_1[power % 6]),\n            c2: Fp2.mul(Fp2.frobeniusMap(c2, power), FP6_FROBENIUS_COEFFICIENTS_2[power % 6]),\n        }),\n        mulByFp2: ({ c0, c1, c2 }, rhs) => ({\n            c0: Fp2.mul(c0, rhs),\n            c1: Fp2.mul(c1, rhs),\n            c2: Fp2.mul(c2, rhs),\n        }),\n        mulByNonresidue: ({ c0, c1, c2 }) => ({ c0: Fp2.mulByNonresidue(c2), c1: c0, c2: c1 }),\n        // Sparse multiplication\n        mul1: ({ c0, c1, c2 }, b1) => ({\n            c0: Fp2.mulByNonresidue(Fp2.mul(c2, b1)),\n            c1: Fp2.mul(c0, b1),\n            c2: Fp2.mul(c1, b1),\n        }),\n        // Sparse multiplication\n        mul01({ c0, c1, c2 }, b0, b1) {\n            let t0 = Fp2.mul(c0, b0); // c0 * b0\n            let t1 = Fp2.mul(c1, b1); // c1 * b1\n            return {\n                // ((c1 + c2) * b1 - T1) * (u + 1) + T0\n                c0: Fp2.add(Fp2.mulByNonresidue(Fp2.sub(Fp2.mul(Fp2.add(c1, c2), b1), t1)), t0),\n                // (b0 + b1) * (c0 + c1) - T0 - T1\n                c1: Fp2.sub(Fp2.sub(Fp2.mul(Fp2.add(b0, b1), Fp2.add(c0, c1)), t0), t1),\n                // (c0 + c2) * b0 - T0 + T1\n                c2: Fp2.add(Fp2.sub(Fp2.mul(Fp2.add(c0, c2), b0), t0), t1),\n            };\n        },\n    };\n    // Fp12\n    const FP12_FROBENIUS_COEFFICIENTS = calcFrobeniusCoefficients(Fp2, Fp2Nonresidue, Fp.ORDER, 12, 1, 6)[0];\n    const Fp12Add = ({ c0, c1 }, { c0: r0, c1: r1 }) => ({\n        c0: Fp6.add(c0, r0),\n        c1: Fp6.add(c1, r1),\n    });\n    const Fp12Subtract = ({ c0, c1 }, { c0: r0, c1: r1 }) => ({\n        c0: Fp6.sub(c0, r0),\n        c1: Fp6.sub(c1, r1),\n    });\n    const Fp12Multiply = ({ c0, c1 }, rhs) => {\n        if (typeof rhs === 'bigint')\n            return { c0: Fp6.mul(c0, rhs), c1: Fp6.mul(c1, rhs) };\n        let { c0: r0, c1: r1 } = rhs;\n        let t1 = Fp6.mul(c0, r0); // c0 * r0\n        let t2 = Fp6.mul(c1, r1); // c1 * r1\n        return {\n            c0: Fp6.add(t1, Fp6.mulByNonresidue(t2)), // T1 + T2 * v\n            // (c0 + c1) * (r0 + r1) - (T1 + T2)\n            c1: Fp6.sub(Fp6.mul(Fp6.add(c0, c1), Fp6.add(r0, r1)), Fp6.add(t1, t2)),\n        };\n    };\n    const Fp12Square = ({ c0, c1 }) => {\n        let ab = Fp6.mul(c0, c1); // c0 * c1\n        return {\n            // (c1 * v + c0) * (c0 + c1) - AB - AB * v\n            c0: Fp6.sub(Fp6.sub(Fp6.mul(Fp6.add(Fp6.mulByNonresidue(c1), c0), Fp6.add(c0, c1)), ab), Fp6.mulByNonresidue(ab)),\n            c1: Fp6.add(ab, ab),\n        }; // AB + AB\n    };\n    function Fp4Square(a, b) {\n        const a2 = Fp2.sqr(a);\n        const b2 = Fp2.sqr(b);\n        return {\n            first: Fp2.add(Fp2.mulByNonresidue(b2), a2), // b² * Nonresidue + a²\n            second: Fp2.sub(Fp2.sub(Fp2.sqr(Fp2.add(a, b)), a2), b2), // (a + b)² - a² - b²\n        };\n    }\n    const Fp12 = {\n        ORDER: Fp2.ORDER, // TODO: unused, but need to verify\n        isLE: Fp6.isLE,\n        BITS: 2 * Fp6.BITS,\n        BYTES: 2 * Fp6.BYTES,\n        MASK: (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.bitMask)(2 * Fp6.BITS),\n        ZERO: { c0: Fp6.ZERO, c1: Fp6.ZERO },\n        ONE: { c0: Fp6.ONE, c1: Fp6.ZERO },\n        create: (num) => num,\n        isValid: ({ c0, c1 }) => Fp6.isValid(c0) && Fp6.isValid(c1),\n        is0: ({ c0, c1 }) => Fp6.is0(c0) && Fp6.is0(c1),\n        isValidNot0: (num) => !Fp12.is0(num) && Fp12.isValid(num),\n        neg: ({ c0, c1 }) => ({ c0: Fp6.neg(c0), c1: Fp6.neg(c1) }),\n        eql: ({ c0, c1 }, { c0: r0, c1: r1 }) => Fp6.eql(c0, r0) && Fp6.eql(c1, r1),\n        sqrt: _utils_js__WEBPACK_IMPORTED_MODULE_1__.notImplemented,\n        inv: ({ c0, c1 }) => {\n            let t = Fp6.inv(Fp6.sub(Fp6.sqr(c0), Fp6.mulByNonresidue(Fp6.sqr(c1)))); // 1 / (c0² - c1² * v)\n            return { c0: Fp6.mul(c0, t), c1: Fp6.neg(Fp6.mul(c1, t)) }; // ((C0 * T) * T) + (-C1 * T) * w\n        },\n        div: (lhs, rhs) => Fp12.mul(lhs, typeof rhs === 'bigint' ? Fp.inv(Fp.create(rhs)) : Fp12.inv(rhs)),\n        pow: (num, power) => _modular_js__WEBPACK_IMPORTED_MODULE_0__.FpPow(Fp12, num, power),\n        invertBatch: (nums) => _modular_js__WEBPACK_IMPORTED_MODULE_0__.FpInvertBatch(Fp12, nums),\n        // Normalized\n        add: Fp12Add,\n        sub: Fp12Subtract,\n        mul: Fp12Multiply,\n        sqr: Fp12Square,\n        // NonNormalized stuff\n        addN: Fp12Add,\n        subN: Fp12Subtract,\n        mulN: Fp12Multiply,\n        sqrN: Fp12Square,\n        // Bytes utils\n        fromBytes: (b) => {\n            if (b.length !== Fp12.BYTES)\n                throw new Error('fromBytes invalid length=' + b.length);\n            return {\n                c0: Fp6.fromBytes(b.subarray(0, Fp6.BYTES)),\n                c1: Fp6.fromBytes(b.subarray(Fp6.BYTES)),\n            };\n        },\n        toBytes: ({ c0, c1 }) => (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.concatBytes)(Fp6.toBytes(c0), Fp6.toBytes(c1)),\n        cmov: ({ c0, c1 }, { c0: r0, c1: r1 }, c) => ({\n            c0: Fp6.cmov(c0, r0, c),\n            c1: Fp6.cmov(c1, r1, c),\n        }),\n        // Utils\n        // toString() {\n        //   return '' + 'Fp12(' + this.c0 + this.c1 + '* w');\n        // },\n        // fromTuple(c: [Fp6, Fp6]) {\n        //   return new Fp12(...c);\n        // }\n        fromBigTwelve: (t) => ({\n            c0: Fp6.fromBigSix(t.slice(0, 6)),\n            c1: Fp6.fromBigSix(t.slice(6, 12)),\n        }),\n        // Raises to q**i -th power\n        frobeniusMap(lhs, power) {\n            const { c0, c1, c2 } = Fp6.frobeniusMap(lhs.c1, power);\n            const coeff = FP12_FROBENIUS_COEFFICIENTS[power % 12];\n            return {\n                c0: Fp6.frobeniusMap(lhs.c0, power),\n                c1: Fp6.create({\n                    c0: Fp2.mul(c0, coeff),\n                    c1: Fp2.mul(c1, coeff),\n                    c2: Fp2.mul(c2, coeff),\n                }),\n            };\n        },\n        mulByFp2: ({ c0, c1 }, rhs) => ({\n            c0: Fp6.mulByFp2(c0, rhs),\n            c1: Fp6.mulByFp2(c1, rhs),\n        }),\n        conjugate: ({ c0, c1 }) => ({ c0, c1: Fp6.neg(c1) }),\n        // Sparse multiplication\n        mul014: ({ c0, c1 }, o0, o1, o4) => {\n            let t0 = Fp6.mul01(c0, o0, o1);\n            let t1 = Fp6.mul1(c1, o4);\n            return {\n                c0: Fp6.add(Fp6.mulByNonresidue(t1), t0), // T1 * v + T0\n                // (c1 + c0) * [o0, o1+o4] - T0 - T1\n                c1: Fp6.sub(Fp6.sub(Fp6.mul01(Fp6.add(c1, c0), o0, Fp2.add(o1, o4)), t0), t1),\n            };\n        },\n        mul034: ({ c0, c1 }, o0, o3, o4) => {\n            const a = Fp6.create({\n                c0: Fp2.mul(c0.c0, o0),\n                c1: Fp2.mul(c0.c1, o0),\n                c2: Fp2.mul(c0.c2, o0),\n            });\n            const b = Fp6.mul01(c1, o3, o4);\n            const e = Fp6.mul01(Fp6.add(c0, c1), Fp2.add(o0, o3), o4);\n            return {\n                c0: Fp6.add(Fp6.mulByNonresidue(b), a),\n                c1: Fp6.sub(e, Fp6.add(a, b)),\n            };\n        },\n        // A cyclotomic group is a subgroup of Fp^n defined by\n        //   GΦₙ(p) = {α ∈ Fpⁿ : α^Φₙ(p) = 1}\n        // The result of any pairing is in a cyclotomic subgroup\n        // https://eprint.iacr.org/2009/565.pdf\n        _cyclotomicSquare: opts.Fp12cyclotomicSquare,\n        _cyclotomicExp: opts.Fp12cyclotomicExp,\n        // https://eprint.iacr.org/2010/354.pdf\n        // https://eprint.iacr.org/2009/565.pdf\n        finalExponentiate: opts.Fp12finalExponentiate,\n    };\n    return { Fp, Fp2, Fp6, Fp12, Fp4Square };\n}\n//# sourceMappingURL=tower.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/@noble/curves/esm/abstract/tower.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/@noble/curves/esm/bls12-381.js":
/*!*****************************************************!*\
  !*** ./node_modules/@noble/curves/esm/bls12-381.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bls12_381: () => (/* binding */ bls12_381),\n/* harmony export */   bls12_381_Fr: () => (/* binding */ bls12_381_Fr)\n/* harmony export */ });\n/* harmony import */ var _noble_hashes_sha2_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @noble/hashes/sha2.js */ \"(pages-dir-browser)/./node_modules/@noble/hashes/esm/sha2.js\");\n/* harmony import */ var _abstract_bls_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./abstract/bls.js */ \"(pages-dir-browser)/./node_modules/@noble/curves/esm/abstract/bls.js\");\n/* harmony import */ var _abstract_modular_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./abstract/modular.js */ \"(pages-dir-browser)/./node_modules/@noble/curves/esm/abstract/modular.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(pages-dir-browser)/./node_modules/@noble/curves/esm/utils.js\");\n/* harmony import */ var _abstract_hash_to_curve_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./abstract/hash-to-curve.js */ \"(pages-dir-browser)/./node_modules/@noble/curves/esm/abstract/hash-to-curve.js\");\n/* harmony import */ var _abstract_tower_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./abstract/tower.js */ \"(pages-dir-browser)/./node_modules/@noble/curves/esm/abstract/tower.js\");\n/* harmony import */ var _abstract_weierstrass_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./abstract/weierstrass.js */ \"(pages-dir-browser)/./node_modules/@noble/curves/esm/abstract/weierstrass.js\");\n/**\n * bls12-381 is pairing-friendly Barreto-Lynn-Scott elliptic curve construction allowing to:\n\n* Construct zk-SNARKs at the ~120-bit security, as per [Barbulescu-Duquesne 2017](https://hal.science/hal-01534101/file/main.pdf)\n* Efficiently verify N aggregate signatures with 1 pairing and N ec additions:\nthe Boneh-Lynn-Shacham signature scheme is orders of magnitude more efficient than Schnorr\n\nBLS can mean 2 different things:\n\n* Barreto-Lynn-Scott: BLS12, a Pairing Friendly Elliptic Curve\n* Boneh-Lynn-Shacham: A Signature Scheme.\n\n### Summary\n\n1. BLS Relies on expensive bilinear pairing\n2. Private Keys: 32 bytes\n3. Public Keys: 48 OR 96 bytes - big-endian x coordinate of point on G1 OR G2 curve\n4. Signatures: 96 OR 48 bytes - big-endian x coordinate of point on G2 OR G1 curve\n5. The 12 stands for the Embedding degree.\n\nModes of operation:\n\n* Long signatures:  48-byte keys + 96-byte sigs (G1 keys + G2 sigs).\n* Short signatures: 96-byte keys + 48-byte sigs (G2 keys + G1 sigs).\n\n### Formulas\n\n- `P = pk x G` - public keys\n- `S = pk x H(m)` - signing, uses hash-to-curve on m\n- `e(P, H(m)) == e(G, S)` - verification using pairings\n- `e(G, S) = e(G, SUM(n)(Si)) = MUL(n)(e(G, Si))` - signature aggregation\n\n### Curves\n\nG1 is ordinary elliptic curve. G2 is extension field curve, think \"over complex numbers\".\n\n- G1: y² = x³ + 4\n- G2: y² = x³ + 4(u + 1) where u = √−1; r-order subgroup of E'(Fp²), M-type twist\n\n### Towers\n\nPairing G1 + G2 produces element in Fp₁₂, 12-degree polynomial.\nFp₁₂ is usually implemented using tower of lower-degree polynomials for speed.\n\n- Fp₁₂ = Fp₆² => Fp₂³\n- Fp(u) / (u² - β) where β = -1\n- Fp₂(v) / (v³ - ξ) where ξ = u + 1\n- Fp₆(w) / (w² - γ) where γ = v\n- Fp²[u] = Fp/u²+1\n- Fp⁶[v] = Fp²/v³-1-u\n- Fp¹²[w] = Fp⁶/w²-v\n\n### Params\n\n* Embedding degree (k): 12\n* Seed is sometimes named x or t\n* t = -15132376222941642752\n* p = (t-1)² * (t⁴-t²+1)/3 + t\n* r = t⁴-t²+1\n* Ate loop size: X\n\nTo verify curve parameters, see\n[pairing-friendly-curves spec](https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-pairing-friendly-curves-11).\nBasic math is done over finite fields over p.\nMore complicated math is done over polynominal extension fields.\n\n### Compatibility and notes\n1. It is compatible with Algorand, Chia, Dfinity, Ethereum, Filecoin, ZEC.\nFilecoin uses little endian byte arrays for private keys - make sure to reverse byte order.\n2. Make sure to correctly select mode: \"long signature\" or \"short signature\".\n3. Compatible with specs:\n   RFC 9380,\n   [cfrg-pairing-friendly-curves-11](https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-pairing-friendly-curves-11),\n   [cfrg-bls-signature-05](https://datatracker.ietf.org/doc/draft-irtf-cfrg-bls-signature/).\n\n *\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n\n\n\n\n// Types\n\n\n\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);\n// To verify math:\n// https://tools.ietf.org/html/draft-irtf-cfrg-pairing-friendly-curves-11\n// The BLS parameter x (seed) for BLS12-381. NOTE: it is negative!\n// x = -2^63 - 2^62 - 2^60 - 2^57 - 2^48 - 2^16\nconst BLS_X = BigInt('0xd201000000010000');\n// t = x (called differently in different places)\n// const t = -BLS_X;\nconst BLS_X_LEN = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.bitLen)(BLS_X);\n// a=0, b=4\n// P is characteristic of field Fp, in which curve calculations are done.\n// p = (t-1)² * (t⁴-t²+1)/3 + t\n// bls12_381_Fp = (t-1n)**2n * (t**4n - t**2n + 1n) / 3n + t\n// r*h is curve order, amount of points on curve,\n// where r is order of prime subgroup and h is cofactor.\n// r = t⁴-t²+1\n// r = (t**4n - t**2n + 1n)\n// cofactor h of G1: (t - 1)²/3\n// cofactorG1 = (t-1n)**2n/3n\n// x = 3685416753713387016781088315183077757961620795782546409894578378688607592378376318836054947676345821548104185464507\n// y = 1339506544944476473020471379941921221584933875938349620426543736416511423956333506472724655353366534992391756441569\nconst bls12_381_CURVE_G1 = {\n    p: BigInt('0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaab'),\n    n: BigInt('0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001'),\n    h: BigInt('0x396c8c005555e1568c00aaab0000aaab'),\n    a: _0n,\n    b: _4n,\n    Gx: BigInt('0x17f1d3a73197d7942695638c4fa9ac0fc3688c4f9774b905a14e3a3f171bac586c55e83ff97a1aeffb3af00adb22c6bb'),\n    Gy: BigInt('0x08b3f481e3aaa0f1a09e30ed741d8ae4fcf5e095d5d00af600db18cb2c04b3edd03cc744a2888ae40caa232946c5e7e1'),\n};\n// CURVE FIELDS\nconst bls12_381_Fr = (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_1__.Field)(bls12_381_CURVE_G1.n);\nconst { Fp, Fp2, Fp6, Fp4Square, Fp12 } = (0,_abstract_tower_js__WEBPACK_IMPORTED_MODULE_2__.tower12)({\n    // Order of Fp\n    ORDER: bls12_381_CURVE_G1.p,\n    // Finite extension field over irreducible polynominal.\n    // Fp(u) / (u² - β) where β = -1\n    FP2_NONRESIDUE: [_1n, _1n],\n    Fp2mulByB: ({ c0, c1 }) => {\n        const t0 = Fp.mul(c0, _4n); // 4 * c0\n        const t1 = Fp.mul(c1, _4n); // 4 * c1\n        // (T0-T1) + (T0+T1)*i\n        return { c0: Fp.sub(t0, t1), c1: Fp.add(t0, t1) };\n    },\n    // Fp12\n    // A cyclotomic group is a subgroup of Fp^n defined by\n    //   GΦₙ(p) = {α ∈ Fpⁿ : α^Φₙ(p) = 1}\n    // The result of any pairing is in a cyclotomic subgroup\n    // https://eprint.iacr.org/2009/565.pdf\n    Fp12cyclotomicSquare: ({ c0, c1 }) => {\n        const { c0: c0c0, c1: c0c1, c2: c0c2 } = c0;\n        const { c0: c1c0, c1: c1c1, c2: c1c2 } = c1;\n        const { first: t3, second: t4 } = Fp4Square(c0c0, c1c1);\n        const { first: t5, second: t6 } = Fp4Square(c1c0, c0c2);\n        const { first: t7, second: t8 } = Fp4Square(c0c1, c1c2);\n        const t9 = Fp2.mulByNonresidue(t8); // T8 * (u + 1)\n        return {\n            c0: Fp6.create({\n                c0: Fp2.add(Fp2.mul(Fp2.sub(t3, c0c0), _2n), t3), // 2 * (T3 - c0c0)  + T3\n                c1: Fp2.add(Fp2.mul(Fp2.sub(t5, c0c1), _2n), t5), // 2 * (T5 - c0c1)  + T5\n                c2: Fp2.add(Fp2.mul(Fp2.sub(t7, c0c2), _2n), t7),\n            }), // 2 * (T7 - c0c2)  + T7\n            c1: Fp6.create({\n                c0: Fp2.add(Fp2.mul(Fp2.add(t9, c1c0), _2n), t9), // 2 * (T9 + c1c0) + T9\n                c1: Fp2.add(Fp2.mul(Fp2.add(t4, c1c1), _2n), t4), // 2 * (T4 + c1c1) + T4\n                c2: Fp2.add(Fp2.mul(Fp2.add(t6, c1c2), _2n), t6),\n            }),\n        }; // 2 * (T6 + c1c2) + T6\n    },\n    Fp12cyclotomicExp(num, n) {\n        let z = Fp12.ONE;\n        for (let i = BLS_X_LEN - 1; i >= 0; i--) {\n            z = Fp12._cyclotomicSquare(z);\n            if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.bitGet)(n, i))\n                z = Fp12.mul(z, num);\n        }\n        return z;\n    },\n    // https://eprint.iacr.org/2010/354.pdf\n    // https://eprint.iacr.org/2009/565.pdf\n    Fp12finalExponentiate: (num) => {\n        const x = BLS_X;\n        // this^(q⁶) / this\n        const t0 = Fp12.div(Fp12.frobeniusMap(num, 6), num);\n        // t0^(q²) * t0\n        const t1 = Fp12.mul(Fp12.frobeniusMap(t0, 2), t0);\n        const t2 = Fp12.conjugate(Fp12._cyclotomicExp(t1, x));\n        const t3 = Fp12.mul(Fp12.conjugate(Fp12._cyclotomicSquare(t1)), t2);\n        const t4 = Fp12.conjugate(Fp12._cyclotomicExp(t3, x));\n        const t5 = Fp12.conjugate(Fp12._cyclotomicExp(t4, x));\n        const t6 = Fp12.mul(Fp12.conjugate(Fp12._cyclotomicExp(t5, x)), Fp12._cyclotomicSquare(t2));\n        const t7 = Fp12.conjugate(Fp12._cyclotomicExp(t6, x));\n        const t2_t5_pow_q2 = Fp12.frobeniusMap(Fp12.mul(t2, t5), 2);\n        const t4_t1_pow_q3 = Fp12.frobeniusMap(Fp12.mul(t4, t1), 3);\n        const t6_t1c_pow_q1 = Fp12.frobeniusMap(Fp12.mul(t6, Fp12.conjugate(t1)), 1);\n        const t7_t3c_t1 = Fp12.mul(Fp12.mul(t7, Fp12.conjugate(t3)), t1);\n        // (t2 * t5)^(q²) * (t4 * t1)^(q³) * (t6 * t1.conj)^(q^1) * t7 * t3.conj * t1\n        return Fp12.mul(Fp12.mul(Fp12.mul(t2_t5_pow_q2, t4_t1_pow_q3), t6_t1c_pow_q1), t7_t3c_t1);\n    },\n});\n// GLV endomorphism Ψ(P), for fast cofactor clearing\nconst { G2psi, G2psi2 } = (0,_abstract_tower_js__WEBPACK_IMPORTED_MODULE_2__.psiFrobenius)(Fp, Fp2, Fp2.div(Fp2.ONE, Fp2.NONRESIDUE)); // 1/(u+1)\n/**\n * Default hash_to_field / hash-to-curve for BLS.\n * m: 1 for G1, 2 for G2\n * k: target security level in bits\n * hash: any function, e.g. BBS+ uses BLAKE2: see [github](https://github.com/hyperledger/aries-framework-go/issues/2247).\n * Parameter values come from [section 8.8.2 of RFC 9380](https://www.rfc-editor.org/rfc/rfc9380#section-8.8.2).\n */\nconst htfDefaults = Object.freeze({\n    DST: 'BLS_SIG_BLS12381G2_XMD:SHA-256_SSWU_RO_NUL_',\n    encodeDST: 'BLS_SIG_BLS12381G2_XMD:SHA-256_SSWU_RO_NUL_',\n    p: Fp.ORDER,\n    m: 2,\n    k: 128,\n    expand: 'xmd',\n    hash: _noble_hashes_sha2_js__WEBPACK_IMPORTED_MODULE_3__.sha256,\n});\n// a=0, b=4\n// cofactor h of G2\n// (t^8 - 4t^7 + 5t^6 - 4t^4 + 6t^3 - 4t^2 - 4t + 13)/9\n// cofactorG2 = (t**8n - 4n*t**7n + 5n*t**6n - 4n*t**4n + 6n*t**3n - 4n*t**2n - 4n*t+13n)/9n\n// x = 3059144344244213709971259814753781636986470325476647558659373206291635324768958432433509563104347017837885763365758*u + 352701069587466618187139116011060144890029952792775240219908644239793785735715026873347600343865175952761926303160\n// y = 927553665492332455747201965776037880757740193453592970025027978793976877002675564980949289727957565575433344219582*u + 1985150602287291935568054521177171638300868978215655730859378665066344726373823718423869104263333984641494340347905\nconst bls12_381_CURVE_G2 = {\n    p: Fp2.ORDER,\n    n: bls12_381_CURVE_G1.n,\n    h: BigInt('0x5d543a95414e7f1091d50792876a202cd91de4547085abaa68a205b2e5a7ddfa628f1cb4d9e82ef21537e293a6691ae1616ec6e786f0c70cf1c38e31c7238e5'),\n    a: Fp2.ZERO,\n    b: Fp2.fromBigTuple([_4n, _4n]),\n    Gx: Fp2.fromBigTuple([\n        BigInt('0x024aa2b2f08f0a91260805272dc51051c6e47ad4fa403b02b4510b647ae3d1770bac0326a805bbefd48056c8c121bdb8'),\n        BigInt('0x13e02b6052719f607dacd3a088274f65596bd0d09920b61ab5da61bbdc7f5049334cf11213945d57e5ac7d055d042b7e'),\n    ]),\n    Gy: Fp2.fromBigTuple([\n        BigInt('0x0ce5d527727d6e118cc9cdc6da2e351aadfd9baa8cbdd3a76d429a695160d12c923ac9cc3baca289e193548608b82801'),\n        BigInt('0x0606c4a02ea734cc32acd2b02bc28b99cb3e287e85a763af267492ab572e99ab3f370d275cec1da1aaa9075ff05f79be'),\n    ]),\n};\n// Encoding utils\n// Compressed point of infinity\n// Set compressed & point-at-infinity bits\nconst COMPZERO = setMask(Fp.toBytes(_0n), { infinity: true, compressed: true });\nfunction parseMask(bytes) {\n    // Copy, so we can remove mask data. It will be removed also later, when Fp.create will call modulo.\n    bytes = bytes.slice();\n    const mask = bytes[0] & 224;\n    const compressed = !!((mask >> 7) & 1); // compression bit (0b1000_0000)\n    const infinity = !!((mask >> 6) & 1); // point at infinity bit (0b0100_0000)\n    const sort = !!((mask >> 5) & 1); // sort bit (0b0010_0000)\n    bytes[0] &= 31; // clear mask (zero first 3 bits)\n    return { compressed, infinity, sort, value: bytes };\n}\nfunction setMask(bytes, mask) {\n    if (bytes[0] & 224)\n        throw new Error('setMask: non-empty mask');\n    if (mask.compressed)\n        bytes[0] |= 128;\n    if (mask.infinity)\n        bytes[0] |= 64;\n    if (mask.sort)\n        bytes[0] |= 32;\n    return bytes;\n}\nfunction pointG1ToBytes(_c, point, isComp) {\n    const { BYTES: L, ORDER: P } = Fp;\n    const is0 = point.is0();\n    const { x, y } = point.toAffine();\n    if (isComp) {\n        if (is0)\n            return COMPZERO.slice();\n        const sort = Boolean((y * _2n) / P);\n        return setMask((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.numberToBytesBE)(x, L), { compressed: true, sort });\n    }\n    else {\n        if (is0) {\n            return (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.concatBytes)(Uint8Array.of(0x40), new Uint8Array(2 * L - 1));\n        }\n        else {\n            return (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.concatBytes)((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.numberToBytesBE)(x, L), (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.numberToBytesBE)(y, L));\n        }\n    }\n}\nfunction signatureG1ToBytes(point) {\n    point.assertValidity();\n    const { BYTES: L, ORDER: P } = Fp;\n    const { x, y } = point.toAffine();\n    if (point.is0())\n        return COMPZERO.slice();\n    const sort = Boolean((y * _2n) / P);\n    return setMask((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.numberToBytesBE)(x, L), { compressed: true, sort });\n}\nfunction pointG1FromBytes(bytes) {\n    const { compressed, infinity, sort, value } = parseMask(bytes);\n    const { BYTES: L, ORDER: P } = Fp;\n    if (value.length === 48 && compressed) {\n        const compressedValue = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumberBE)(value);\n        // Zero\n        const x = Fp.create(compressedValue & Fp.MASK);\n        if (infinity) {\n            if (x !== _0n)\n                throw new Error('invalid G1 point: non-empty, at infinity, with compression');\n            return { x: _0n, y: _0n };\n        }\n        const right = Fp.add(Fp.pow(x, _3n), Fp.create(bls12_381_CURVE_G1.b)); // y² = x³ + b\n        let y = Fp.sqrt(right);\n        if (!y)\n            throw new Error('invalid G1 point: compressed point');\n        if ((y * _2n) / P !== BigInt(sort))\n            y = Fp.neg(y);\n        return { x: Fp.create(x), y: Fp.create(y) };\n    }\n    else if (value.length === 96 && !compressed) {\n        // Check if the infinity flag is set\n        const x = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumberBE)(value.subarray(0, L));\n        const y = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumberBE)(value.subarray(L));\n        if (infinity) {\n            if (x !== _0n || y !== _0n)\n                throw new Error('G1: non-empty point at infinity');\n            return bls12_381.G1.Point.ZERO.toAffine();\n        }\n        return { x: Fp.create(x), y: Fp.create(y) };\n    }\n    else {\n        throw new Error('invalid G1 point: expected 48/96 bytes');\n    }\n}\nfunction signatureG1FromBytes(hex) {\n    const { infinity, sort, value } = parseMask((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBytes)('signatureHex', hex, 48));\n    const P = Fp.ORDER;\n    const Point = bls12_381.G1.Point;\n    const compressedValue = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumberBE)(value);\n    // Zero\n    if (infinity)\n        return Point.ZERO;\n    const x = Fp.create(compressedValue & Fp.MASK);\n    const right = Fp.add(Fp.pow(x, _3n), Fp.create(bls12_381_CURVE_G1.b)); // y² = x³ + b\n    let y = Fp.sqrt(right);\n    if (!y)\n        throw new Error('invalid G1 point: compressed');\n    const aflag = BigInt(sort);\n    if ((y * _2n) / P !== aflag)\n        y = Fp.neg(y);\n    const point = Point.fromAffine({ x, y });\n    point.assertValidity();\n    return point;\n}\nfunction pointG2ToBytes(_c, point, isComp) {\n    const { BYTES: L, ORDER: P } = Fp;\n    const is0 = point.is0();\n    const { x, y } = point.toAffine();\n    if (isComp) {\n        if (is0)\n            return (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.concatBytes)(COMPZERO, (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.numberToBytesBE)(_0n, L));\n        const flag = Boolean(y.c1 === _0n ? (y.c0 * _2n) / P : (y.c1 * _2n) / P);\n        return (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.concatBytes)(setMask((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.numberToBytesBE)(x.c1, L), { compressed: true, sort: flag }), (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.numberToBytesBE)(x.c0, L));\n    }\n    else {\n        if (is0)\n            return (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.concatBytes)(Uint8Array.of(0x40), new Uint8Array(4 * L - 1));\n        const { re: x0, im: x1 } = Fp2.reim(x);\n        const { re: y0, im: y1 } = Fp2.reim(y);\n        return (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.concatBytes)((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.numberToBytesBE)(x1, L), (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.numberToBytesBE)(x0, L), (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.numberToBytesBE)(y1, L), (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.numberToBytesBE)(y0, L));\n    }\n}\nfunction signatureG2ToBytes(point) {\n    point.assertValidity();\n    const { BYTES: L } = Fp;\n    if (point.is0())\n        return (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.concatBytes)(COMPZERO, (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.numberToBytesBE)(_0n, L));\n    const { x, y } = point.toAffine();\n    const { re: x0, im: x1 } = Fp2.reim(x);\n    const { re: y0, im: y1 } = Fp2.reim(y);\n    const tmp = y1 > _0n ? y1 * _2n : y0 * _2n;\n    const sort = Boolean((tmp / Fp.ORDER) & _1n);\n    const z2 = x0;\n    return (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.concatBytes)(setMask((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.numberToBytesBE)(x1, L), { sort, compressed: true }), (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.numberToBytesBE)(z2, L));\n}\nfunction pointG2FromBytes(bytes) {\n    const { BYTES: L, ORDER: P } = Fp;\n    const { compressed, infinity, sort, value } = parseMask(bytes);\n    if ((!compressed && !infinity && sort) || // 00100000\n        (!compressed && infinity && sort) || // 01100000\n        (sort && infinity && compressed) // 11100000\n    ) {\n        throw new Error('invalid encoding flag: ' + (bytes[0] & 224));\n    }\n    const slc = (b, from, to) => (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumberBE)(b.slice(from, to));\n    if (value.length === 96 && compressed) {\n        if (infinity) {\n            // check that all bytes are 0\n            if (value.reduce((p, c) => (p !== 0 ? c + 1 : c), 0) > 0) {\n                throw new Error('invalid G2 point: compressed');\n            }\n            return { x: Fp2.ZERO, y: Fp2.ZERO };\n        }\n        const x_1 = slc(value, 0, L);\n        const x_0 = slc(value, L, 2 * L);\n        const x = Fp2.create({ c0: Fp.create(x_0), c1: Fp.create(x_1) });\n        const right = Fp2.add(Fp2.pow(x, _3n), bls12_381_CURVE_G2.b); // y² = x³ + 4 * (u+1) = x³ + b\n        let y = Fp2.sqrt(right);\n        const Y_bit = y.c1 === _0n ? (y.c0 * _2n) / P : (y.c1 * _2n) / P ? _1n : _0n;\n        y = sort && Y_bit > 0 ? y : Fp2.neg(y);\n        return { x, y };\n    }\n    else if (value.length === 192 && !compressed) {\n        if (infinity) {\n            if (value.reduce((p, c) => (p !== 0 ? c + 1 : c), 0) > 0) {\n                throw new Error('invalid G2 point: uncompressed');\n            }\n            return { x: Fp2.ZERO, y: Fp2.ZERO };\n        }\n        const x1 = slc(value, 0 * L, 1 * L);\n        const x0 = slc(value, 1 * L, 2 * L);\n        const y1 = slc(value, 2 * L, 3 * L);\n        const y0 = slc(value, 3 * L, 4 * L);\n        return { x: Fp2.fromBigTuple([x0, x1]), y: Fp2.fromBigTuple([y0, y1]) };\n    }\n    else {\n        throw new Error('invalid G2 point: expected 96/192 bytes');\n    }\n}\nfunction signatureG2FromBytes(hex) {\n    const { ORDER: P } = Fp;\n    // TODO: Optimize, it's very slow because of sqrt.\n    const { infinity, sort, value } = parseMask((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBytes)('signatureHex', hex));\n    const Point = bls12_381.G2.Point;\n    const half = value.length / 2;\n    if (half !== 48 && half !== 96)\n        throw new Error('invalid compressed signature length, expected 96/192 bytes');\n    const z1 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumberBE)(value.slice(0, half));\n    const z2 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumberBE)(value.slice(half));\n    // Indicates the infinity point\n    if (infinity)\n        return Point.ZERO;\n    const x1 = Fp.create(z1 & Fp.MASK);\n    const x2 = Fp.create(z2);\n    const x = Fp2.create({ c0: x2, c1: x1 });\n    const y2 = Fp2.add(Fp2.pow(x, _3n), bls12_381_CURVE_G2.b); // y² = x³ + 4\n    // The slow part\n    let y = Fp2.sqrt(y2);\n    if (!y)\n        throw new Error('Failed to find a square root');\n    // Choose the y whose leftmost bit of the imaginary part is equal to the a_flag1\n    // If y1 happens to be zero, then use the bit of y0\n    const { re: y0, im: y1 } = Fp2.reim(y);\n    const aflag1 = BigInt(sort);\n    const isGreater = y1 > _0n && (y1 * _2n) / P !== aflag1;\n    const is0 = y1 === _0n && (y0 * _2n) / P !== aflag1;\n    if (isGreater || is0)\n        y = Fp2.neg(y);\n    const point = Point.fromAffine({ x, y });\n    point.assertValidity();\n    return point;\n}\n/**\n * bls12-381 pairing-friendly curve.\n * @example\n * import { bls12_381 as bls } from '@noble/curves/bls12-381';\n * // G1 keys, G2 signatures\n * const privateKey = '67d53f170b908cabb9eb326c3c337762d59289a8fec79f7bc9254b584b73265c';\n * const message = '64726e3da8';\n * const publicKey = bls.getPublicKey(privateKey);\n * const signature = bls.sign(message, privateKey);\n * const isValid = bls.verify(signature, message, publicKey);\n */\nconst bls12_381 = (0,_abstract_bls_js__WEBPACK_IMPORTED_MODULE_4__.bls)({\n    // Fields\n    fields: {\n        Fp,\n        Fp2,\n        Fp6,\n        Fp12,\n        Fr: bls12_381_Fr,\n    },\n    // G1: y² = x³ + 4\n    G1: {\n        ...bls12_381_CURVE_G1,\n        Fp,\n        htfDefaults: { ...htfDefaults, m: 1, DST: 'BLS_SIG_BLS12381G1_XMD:SHA-256_SSWU_RO_NUL_' },\n        wrapPrivateKey: true,\n        allowInfinityPoint: true,\n        // Checks is the point resides in prime-order subgroup.\n        // point.isTorsionFree() should return true for valid points\n        // It returns false for shitty points.\n        // https://eprint.iacr.org/2021/1130.pdf\n        isTorsionFree: (c, point) => {\n            // GLV endomorphism ψ(P)\n            const beta = BigInt('0x5f19672fdf76ce51ba69c6076a0f77eaddb3a93be6f89688de17d813620a00022e01fffffffefffe');\n            const phi = new c(Fp.mul(point.px, beta), point.py, point.pz);\n            // TODO: unroll\n            const xP = point.multiplyUnsafe(BLS_X).negate(); // [x]P\n            const u2P = xP.multiplyUnsafe(BLS_X); // [u2]P\n            return u2P.equals(phi);\n        },\n        // Clear cofactor of G1\n        // https://eprint.iacr.org/2019/403\n        clearCofactor: (_c, point) => {\n            // return this.multiplyUnsafe(CURVE.h);\n            return point.multiplyUnsafe(BLS_X).add(point); // x*P + P\n        },\n        mapToCurve: mapToG1,\n        fromBytes: pointG1FromBytes,\n        toBytes: pointG1ToBytes,\n        ShortSignature: {\n            fromBytes(bytes) {\n                (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.abytes)(bytes);\n                return signatureG1FromBytes(bytes);\n            },\n            fromHex(hex) {\n                return signatureG1FromBytes(hex);\n            },\n            toBytes(point) {\n                return signatureG1ToBytes(point);\n            },\n            toRawBytes(point) {\n                return signatureG1ToBytes(point);\n            },\n            toHex(point) {\n                return (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.bytesToHex)(signatureG1ToBytes(point));\n            },\n        },\n    },\n    G2: {\n        ...bls12_381_CURVE_G2,\n        Fp: Fp2,\n        // https://datatracker.ietf.org/doc/html/rfc9380#name-clearing-the-cofactor\n        // https://datatracker.ietf.org/doc/html/rfc9380#name-cofactor-clearing-for-bls12\n        hEff: BigInt('0xbc69f08f2ee75b3584c6a0ea91b352888e2a8e9145ad7689986ff031508ffe1329c2f178731db956d82bf015d1212b02ec0ec69d7477c1ae954cbc06689f6a359894c0adebbf6b4e8020005aaa95551'),\n        htfDefaults: { ...htfDefaults },\n        wrapPrivateKey: true,\n        allowInfinityPoint: true,\n        mapToCurve: mapToG2,\n        // Checks is the point resides in prime-order subgroup.\n        // point.isTorsionFree() should return true for valid points\n        // It returns false for shitty points.\n        // https://eprint.iacr.org/2021/1130.pdf\n        // Older version: https://eprint.iacr.org/2019/814.pdf\n        isTorsionFree: (c, P) => {\n            return P.multiplyUnsafe(BLS_X).negate().equals(G2psi(c, P)); // ψ(P) == [u](P)\n        },\n        // Maps the point into the prime-order subgroup G2.\n        // clear_cofactor_bls12381_g2 from RFC 9380.\n        // https://eprint.iacr.org/2017/419.pdf\n        // prettier-ignore\n        clearCofactor: (c, P) => {\n            const x = BLS_X;\n            let t1 = P.multiplyUnsafe(x).negate(); // [-x]P\n            let t2 = G2psi(c, P); // Ψ(P)\n            let t3 = P.double(); // 2P\n            t3 = G2psi2(c, t3); // Ψ²(2P)\n            t3 = t3.subtract(t2); // Ψ²(2P) - Ψ(P)\n            t2 = t1.add(t2); // [-x]P + Ψ(P)\n            t2 = t2.multiplyUnsafe(x).negate(); // [x²]P - [x]Ψ(P)\n            t3 = t3.add(t2); // Ψ²(2P) - Ψ(P) + [x²]P - [x]Ψ(P)\n            t3 = t3.subtract(t1); // Ψ²(2P) - Ψ(P) + [x²]P - [x]Ψ(P) + [x]P\n            const Q = t3.subtract(P); // Ψ²(2P) - Ψ(P) + [x²]P - [x]Ψ(P) + [x]P - 1P\n            return Q; // [x²-x-1]P + [x-1]Ψ(P) + Ψ²(2P)\n        },\n        fromBytes: pointG2FromBytes,\n        toBytes: pointG2ToBytes,\n        Signature: {\n            fromBytes(bytes) {\n                (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.abytes)(bytes);\n                return signatureG2FromBytes(bytes);\n            },\n            fromHex(hex) {\n                return signatureG2FromBytes(hex);\n            },\n            toBytes(point) {\n                return signatureG2ToBytes(point);\n            },\n            toRawBytes(point) {\n                return signatureG2ToBytes(point);\n            },\n            toHex(point) {\n                return (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.bytesToHex)(signatureG2ToBytes(point));\n            },\n        },\n    },\n    params: {\n        ateLoopSize: BLS_X, // The BLS parameter x for BLS12-381\n        r: bls12_381_CURVE_G1.n, // order; z⁴ − z² + 1; CURVE.n from other curves\n        xNegative: true,\n        twistType: 'multiplicative',\n    },\n    htfDefaults,\n    hash: _noble_hashes_sha2_js__WEBPACK_IMPORTED_MODULE_3__.sha256,\n});\n// 3-isogeny map from E' to E https://www.rfc-editor.org/rfc/rfc9380#appendix-E.3\nconst isogenyMapG2 = (0,_abstract_hash_to_curve_js__WEBPACK_IMPORTED_MODULE_5__.isogenyMap)(Fp2, [\n    // xNum\n    [\n        [\n            '0x5c759507e8e333ebb5b7a9a47d7ed8532c52d39fd3a042a88b58423c50ae15d5c2638e343d9c71c6238aaaaaaaa97d6',\n            '0x5c759507e8e333ebb5b7a9a47d7ed8532c52d39fd3a042a88b58423c50ae15d5c2638e343d9c71c6238aaaaaaaa97d6',\n        ],\n        [\n            '0x0',\n            '0x11560bf17baa99bc32126fced787c88f984f87adf7ae0c7f9a208c6b4f20a4181472aaa9cb8d555526a9ffffffffc71a',\n        ],\n        [\n            '0x11560bf17baa99bc32126fced787c88f984f87adf7ae0c7f9a208c6b4f20a4181472aaa9cb8d555526a9ffffffffc71e',\n            '0x8ab05f8bdd54cde190937e76bc3e447cc27c3d6fbd7063fcd104635a790520c0a395554e5c6aaaa9354ffffffffe38d',\n        ],\n        [\n            '0x171d6541fa38ccfaed6dea691f5fb614cb14b4e7f4e810aa22d6108f142b85757098e38d0f671c7188e2aaaaaaaa5ed1',\n            '0x0',\n        ],\n    ],\n    // xDen\n    [\n        [\n            '0x0',\n            '0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaa63',\n        ],\n        [\n            '0xc',\n            '0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaa9f',\n        ],\n        ['0x1', '0x0'], // LAST 1\n    ],\n    // yNum\n    [\n        [\n            '0x1530477c7ab4113b59a4c18b076d11930f7da5d4a07f649bf54439d87d27e500fc8c25ebf8c92f6812cfc71c71c6d706',\n            '0x1530477c7ab4113b59a4c18b076d11930f7da5d4a07f649bf54439d87d27e500fc8c25ebf8c92f6812cfc71c71c6d706',\n        ],\n        [\n            '0x0',\n            '0x5c759507e8e333ebb5b7a9a47d7ed8532c52d39fd3a042a88b58423c50ae15d5c2638e343d9c71c6238aaaaaaaa97be',\n        ],\n        [\n            '0x11560bf17baa99bc32126fced787c88f984f87adf7ae0c7f9a208c6b4f20a4181472aaa9cb8d555526a9ffffffffc71c',\n            '0x8ab05f8bdd54cde190937e76bc3e447cc27c3d6fbd7063fcd104635a790520c0a395554e5c6aaaa9354ffffffffe38f',\n        ],\n        [\n            '0x124c9ad43b6cf79bfbf7043de3811ad0761b0f37a1e26286b0e977c69aa274524e79097a56dc4bd9e1b371c71c718b10',\n            '0x0',\n        ],\n    ],\n    // yDen\n    [\n        [\n            '0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffa8fb',\n            '0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffa8fb',\n        ],\n        [\n            '0x0',\n            '0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffa9d3',\n        ],\n        [\n            '0x12',\n            '0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaa99',\n        ],\n        ['0x1', '0x0'], // LAST 1\n    ],\n].map((i) => i.map((pair) => Fp2.fromBigTuple(pair.map(BigInt)))));\n// 11-isogeny map from E' to E\nconst isogenyMapG1 = (0,_abstract_hash_to_curve_js__WEBPACK_IMPORTED_MODULE_5__.isogenyMap)(Fp, [\n    // xNum\n    [\n        '0x11a05f2b1e833340b809101dd99815856b303e88a2d7005ff2627b56cdb4e2c85610c2d5f2e62d6eaeac1662734649b7',\n        '0x17294ed3e943ab2f0588bab22147a81c7c17e75b2f6a8417f565e33c70d1e86b4838f2a6f318c356e834eef1b3cb83bb',\n        '0xd54005db97678ec1d1048c5d10a9a1bce032473295983e56878e501ec68e25c958c3e3d2a09729fe0179f9dac9edcb0',\n        '0x1778e7166fcc6db74e0609d307e55412d7f5e4656a8dbf25f1b33289f1b330835336e25ce3107193c5b388641d9b6861',\n        '0xe99726a3199f4436642b4b3e4118e5499db995a1257fb3f086eeb65982fac18985a286f301e77c451154ce9ac8895d9',\n        '0x1630c3250d7313ff01d1201bf7a74ab5db3cb17dd952799b9ed3ab9097e68f90a0870d2dcae73d19cd13c1c66f652983',\n        '0xd6ed6553fe44d296a3726c38ae652bfb11586264f0f8ce19008e218f9c86b2a8da25128c1052ecaddd7f225a139ed84',\n        '0x17b81e7701abdbe2e8743884d1117e53356de5ab275b4db1a682c62ef0f2753339b7c8f8c8f475af9ccb5618e3f0c88e',\n        '0x80d3cf1f9a78fc47b90b33563be990dc43b756ce79f5574a2c596c928c5d1de4fa295f296b74e956d71986a8497e317',\n        '0x169b1f8e1bcfa7c42e0c37515d138f22dd2ecb803a0c5c99676314baf4bb1b7fa3190b2edc0327797f241067be390c9e',\n        '0x10321da079ce07e272d8ec09d2565b0dfa7dccdde6787f96d50af36003b14866f69b771f8c285decca67df3f1605fb7b',\n        '0x6e08c248e260e70bd1e962381edee3d31d79d7e22c837bc23c0bf1bc24c6b68c24b1b80b64d391fa9c8ba2e8ba2d229',\n    ],\n    // xDen\n    [\n        '0x8ca8d548cff19ae18b2e62f4bd3fa6f01d5ef4ba35b48ba9c9588617fc8ac62b558d681be343df8993cf9fa40d21b1c',\n        '0x12561a5deb559c4348b4711298e536367041e8ca0cf0800c0126c2588c48bf5713daa8846cb026e9e5c8276ec82b3bff',\n        '0xb2962fe57a3225e8137e629bff2991f6f89416f5a718cd1fca64e00b11aceacd6a3d0967c94fedcfcc239ba5cb83e19',\n        '0x3425581a58ae2fec83aafef7c40eb545b08243f16b1655154cca8abc28d6fd04976d5243eecf5c4130de8938dc62cd8',\n        '0x13a8e162022914a80a6f1d5f43e7a07dffdfc759a12062bb8d6b44e833b306da9bd29ba81f35781d539d395b3532a21e',\n        '0xe7355f8e4e667b955390f7f0506c6e9395735e9ce9cad4d0a43bcef24b8982f7400d24bc4228f11c02df9a29f6304a5',\n        '0x772caacf16936190f3e0c63e0596721570f5799af53a1894e2e073062aede9cea73b3538f0de06cec2574496ee84a3a',\n        '0x14a7ac2a9d64a8b230b3f5b074cf01996e7f63c21bca68a81996e1cdf9822c580fa5b9489d11e2d311f7d99bbdcc5a5e',\n        '0xa10ecf6ada54f825e920b3dafc7a3cce07f8d1d7161366b74100da67f39883503826692abba43704776ec3a79a1d641',\n        '0x95fc13ab9e92ad4476d6e3eb3a56680f682b4ee96f7d03776df533978f31c1593174e4b4b7865002d6384d168ecdd0a',\n        '0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n    ],\n    // yNum\n    [\n        '0x90d97c81ba24ee0259d1f094980dcfa11ad138e48a869522b52af6c956543d3cd0c7aee9b3ba3c2be9845719707bb33',\n        '0x134996a104ee5811d51036d776fb46831223e96c254f383d0f906343eb67ad34d6c56711962fa8bfe097e75a2e41c696',\n        '0xcc786baa966e66f4a384c86a3b49942552e2d658a31ce2c344be4b91400da7d26d521628b00523b8dfe240c72de1f6',\n        '0x1f86376e8981c217898751ad8746757d42aa7b90eeb791c09e4a3ec03251cf9de405aba9ec61deca6355c77b0e5f4cb',\n        '0x8cc03fdefe0ff135caf4fe2a21529c4195536fbe3ce50b879833fd221351adc2ee7f8dc099040a841b6daecf2e8fedb',\n        '0x16603fca40634b6a2211e11db8f0a6a074a7d0d4afadb7bd76505c3d3ad5544e203f6326c95a807299b23ab13633a5f0',\n        '0x4ab0b9bcfac1bbcb2c977d027796b3ce75bb8ca2be184cb5231413c4d634f3747a87ac2460f415ec961f8855fe9d6f2',\n        '0x987c8d5333ab86fde9926bd2ca6c674170a05bfe3bdd81ffd038da6c26c842642f64550fedfe935a15e4ca31870fb29',\n        '0x9fc4018bd96684be88c9e221e4da1bb8f3abd16679dc26c1e8b6e6a1f20cabe69d65201c78607a360370e577bdba587',\n        '0xe1bba7a1186bdb5223abde7ada14a23c42a0ca7915af6fe06985e7ed1e4d43b9b3f7055dd4eba6f2bafaaebca731c30',\n        '0x19713e47937cd1be0dfd0b8f1d43fb93cd2fcbcb6caf493fd1183e416389e61031bf3a5cce3fbafce813711ad011c132',\n        '0x18b46a908f36f6deb918c143fed2edcc523559b8aaf0c2462e6bfe7f911f643249d9cdf41b44d606ce07c8a4d0074d8e',\n        '0xb182cac101b9399d155096004f53f447aa7b12a3426b08ec02710e807b4633f06c851c1919211f20d4c04f00b971ef8',\n        '0x245a394ad1eca9b72fc00ae7be315dc757b3b080d4c158013e6632d3c40659cc6cf90ad1c232a6442d9d3f5db980133',\n        '0x5c129645e44cf1102a159f748c4a3fc5e673d81d7e86568d9ab0f5d396a7ce46ba1049b6579afb7866b1e715475224b',\n        '0x15e6be4e990f03ce4ea50b3b42df2eb5cb181d8f84965a3957add4fa95af01b2b665027efec01c7704b456be69c8b604',\n    ],\n    // yDen\n    [\n        '0x16112c4c3a9c98b252181140fad0eae9601a6de578980be6eec3232b5be72e7a07f3688ef60c206d01479253b03663c1',\n        '0x1962d75c2381201e1a0cbd6c43c348b885c84ff731c4d59ca4a10356f453e01f78a4260763529e3532f6102c2e49a03d',\n        '0x58df3306640da276faaae7d6e8eb15778c4855551ae7f310c35a5dd279cd2eca6757cd636f96f891e2538b53dbf67f2',\n        '0x16b7d288798e5395f20d23bf89edb4d1d115c5dbddbcd30e123da489e726af41727364f2c28297ada8d26d98445f5416',\n        '0xbe0e079545f43e4b00cc912f8228ddcc6d19c9f0f69bbb0542eda0fc9dec916a20b15dc0fd2ededda39142311a5001d',\n        '0x8d9e5297186db2d9fb266eaac783182b70152c65550d881c5ecd87b6f0f5a6449f38db9dfa9cce202c6477faaf9b7ac',\n        '0x166007c08a99db2fc3ba8734ace9824b5eecfdfa8d0cf8ef5dd365bc400a0051d5fa9c01a58b1fb93d1a1399126a775c',\n        '0x16a3ef08be3ea7ea03bcddfabba6ff6ee5a4375efa1f4fd7feb34fd206357132b920f5b00801dee460ee415a15812ed9',\n        '0x1866c8ed336c61231a1be54fd1d74cc4f9fb0ce4c6af5920abc5750c4bf39b4852cfe2f7bb9248836b233d9d55535d4a',\n        '0x167a55cda70a6e1cea820597d94a84903216f763e13d87bb5308592e7ea7d4fbc7385ea3d529b35e346ef48bb8913f55',\n        '0x4d2f259eea405bd48f010a01ad2911d9c6dd039bb61a6290e591b36e636a5c871a5c29f4f83060400f8b49cba8f6aa8',\n        '0xaccbb67481d033ff5852c1e48c50c477f94ff8aefce42d28c0f9a88cea7913516f968986f7ebbea9684b529e2561092',\n        '0xad6b9514c767fe3c3613144b45f1496543346d98adf02267d5ceef9a00d9b8693000763e3b90ac11e99b138573345cc',\n        '0x2660400eb2e4f3b628bdd0d53cd76f2bf565b94e72927c1cb748df27942480e420517bd8714cc80d1fadc1326ed06f7',\n        '0xe0fa1d816ddc03e6b24255e0d7819c171c40f65e273b853324efcd6356caa205ca2f570f13497804415473a1d634b8f',\n        '0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n    ],\n].map((i) => i.map((j) => BigInt(j))));\n// Optimized SWU Map - Fp to G1\nconst G1_SWU = (0,_abstract_weierstrass_js__WEBPACK_IMPORTED_MODULE_6__.mapToCurveSimpleSWU)(Fp, {\n    A: Fp.create(BigInt('0x144698a3b8e9433d693a02c96d4982b0ea985383ee66a8d8e8981aefd881ac98936f8da0e0f97f5cf428082d584c1d')),\n    B: Fp.create(BigInt('0x12e2908d11688030018b12e8753eee3b2016c1f0f24f4070a0b9c14fcef35ef55a23215a316ceaa5d1cc48e98e172be0')),\n    Z: Fp.create(BigInt(11)),\n});\n// SWU Map - Fp2 to G2': y² = x³ + 240i * x + 1012 + 1012i\nconst G2_SWU = (0,_abstract_weierstrass_js__WEBPACK_IMPORTED_MODULE_6__.mapToCurveSimpleSWU)(Fp2, {\n    A: Fp2.create({ c0: Fp.create(_0n), c1: Fp.create(BigInt(240)) }), // A' = 240 * I\n    B: Fp2.create({ c0: Fp.create(BigInt(1012)), c1: Fp.create(BigInt(1012)) }), // B' = 1012 * (1 + I)\n    Z: Fp2.create({ c0: Fp.create(BigInt(-2)), c1: Fp.create(BigInt(-1)) }), // Z: -(2 + I)\n});\nfunction mapToG1(scalars) {\n    const { x, y } = G1_SWU(Fp.create(scalars[0]));\n    return isogenyMapG1(x, y);\n}\nfunction mapToG2(scalars) {\n    const { x, y } = G2_SWU(Fp2.fromBigTuple(scalars));\n    return isogenyMapG2(x, y);\n}\n//# sourceMappingURL=bls12-381.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/@noble/curves/esm/bls12-381.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/@noble/curves/esm/nist.js":
/*!************************************************!*\
  !*** ./node_modules/@noble/curves/esm/nist.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   p256: () => (/* binding */ p256),\n/* harmony export */   p256_hasher: () => (/* binding */ p256_hasher),\n/* harmony export */   p384: () => (/* binding */ p384),\n/* harmony export */   p384_hasher: () => (/* binding */ p384_hasher),\n/* harmony export */   p521: () => (/* binding */ p521),\n/* harmony export */   p521_hasher: () => (/* binding */ p521_hasher),\n/* harmony export */   secp256r1: () => (/* binding */ secp256r1),\n/* harmony export */   secp384r1: () => (/* binding */ secp384r1),\n/* harmony export */   secp521r1: () => (/* binding */ secp521r1)\n/* harmony export */ });\n/* harmony import */ var _noble_hashes_sha2_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @noble/hashes/sha2.js */ \"(pages-dir-browser)/./node_modules/@noble/hashes/esm/sha2.js\");\n/* harmony import */ var _shortw_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_shortw_utils.js */ \"(pages-dir-browser)/./node_modules/@noble/curves/esm/_shortw_utils.js\");\n/* harmony import */ var _abstract_hash_to_curve_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./abstract/hash-to-curve.js */ \"(pages-dir-browser)/./node_modules/@noble/curves/esm/abstract/hash-to-curve.js\");\n/* harmony import */ var _abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./abstract/modular.js */ \"(pages-dir-browser)/./node_modules/@noble/curves/esm/abstract/modular.js\");\n/* harmony import */ var _abstract_weierstrass_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./abstract/weierstrass.js */ \"(pages-dir-browser)/./node_modules/@noble/curves/esm/abstract/weierstrass.js\");\n/**\n * Internal module for NIST P256, P384, P521 curves.\n * Do not use for now.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n\n\n\n\n\n// p = 2n**224n * (2n**32n-1n) + 2n**192n + 2n**96n - 1n\n// a = Fp256.create(BigInt('-3'));\nconst p256_CURVE = {\n    p: BigInt('0xffffffff00000001000000000000000000000000ffffffffffffffffffffffff'),\n    n: BigInt('0xffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551'),\n    h: BigInt(1),\n    a: BigInt('0xffffffff00000001000000000000000000000000fffffffffffffffffffffffc'),\n    b: BigInt('0x5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b'),\n    Gx: BigInt('0x6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296'),\n    Gy: BigInt('0x4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5'),\n};\n// p = 2n**384n - 2n**128n - 2n**96n + 2n**32n - 1n\nconst p384_CURVE = {\n    p: BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffeffffffff0000000000000000ffffffff'),\n    n: BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffc7634d81f4372ddf581a0db248b0a77aecec196accc52973'),\n    h: BigInt(1),\n    a: BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffeffffffff0000000000000000fffffffc'),\n    b: BigInt('0xb3312fa7e23ee7e4988e056be3f82d19181d9c6efe8141120314088f5013875ac656398d8a2ed19d2a85c8edd3ec2aef'),\n    Gx: BigInt('0xaa87ca22be8b05378eb1c71ef320ad746e1d3b628ba79b9859f741e082542a385502f25dbf55296c3a545e3872760ab7'),\n    Gy: BigInt('0x3617de4a96262c6f5d9e98bf9292dc29f8f41dbd289a147ce9da3113b5f0b8c00a60b1ce1d7e819d7a431d7c90ea0e5f'),\n};\n// p = 2n**521n - 1n\nconst p521_CURVE = {\n    p: BigInt('0x1ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'),\n    n: BigInt('0x01fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa51868783bf2f966b7fcc0148f709a5d03bb5c9b8899c47aebb6fb71e91386409'),\n    h: BigInt(1),\n    a: BigInt('0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc'),\n    b: BigInt('0x0051953eb9618e1c9a1f929a21a0b68540eea2da725b99b315f3b8b489918ef109e156193951ec7e937b1652c0bd3bb1bf073573df883d2c34f1ef451fd46b503f00'),\n    Gx: BigInt('0x00c6858e06b70404e9cd9e3ecb662395b4429c648139053fb521f828af606b4d3dbaa14b5e77efe75928fe1dc127a2ffa8de3348b3c1856a429bf97e7e31c2e5bd66'),\n    Gy: BigInt('0x011839296a789a3bc0045c8a5fb42c7d1bd998f54449579b446817afbd17273e662c97ee72995ef42640c550b9013fad0761353c7086a272c24088be94769fd16650'),\n};\nconst Fp256 = (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.Field)(p256_CURVE.p);\nconst Fp384 = (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.Field)(p384_CURVE.p);\nconst Fp521 = (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.Field)(p521_CURVE.p);\nfunction createSWU(field, opts) {\n    const map = (0,_abstract_weierstrass_js__WEBPACK_IMPORTED_MODULE_1__.mapToCurveSimpleSWU)(field, opts);\n    return (scalars) => map(scalars[0]);\n}\n/** NIST P256 (aka secp256r1, prime256v1) curve, ECDSA and ECDH methods. */\nconst p256 = (0,_shortw_utils_js__WEBPACK_IMPORTED_MODULE_2__.createCurve)({ ...p256_CURVE, Fp: Fp256, lowS: false }, _noble_hashes_sha2_js__WEBPACK_IMPORTED_MODULE_3__.sha256);\n/** Alias to p256. */\nconst secp256r1 = p256;\n/** Hashing / encoding to p256 points / field. RFC 9380 methods. */\nconst p256_hasher = /* @__PURE__ */ (() => {\n    return (0,_abstract_hash_to_curve_js__WEBPACK_IMPORTED_MODULE_4__.createHasher)(p256.Point, createSWU(Fp256, {\n        A: p256_CURVE.a,\n        B: p256_CURVE.b,\n        Z: Fp256.create(BigInt('-10')),\n    }), {\n        DST: 'P256_XMD:SHA-256_SSWU_RO_',\n        encodeDST: 'P256_XMD:SHA-256_SSWU_NU_',\n        p: p256_CURVE.p,\n        m: 1,\n        k: 128,\n        expand: 'xmd',\n        hash: _noble_hashes_sha2_js__WEBPACK_IMPORTED_MODULE_3__.sha256,\n    });\n})();\n/** NIST P384 (aka secp384r1) curve, ECDSA and ECDH methods. */\nconst p384 = (0,_shortw_utils_js__WEBPACK_IMPORTED_MODULE_2__.createCurve)({ ...p384_CURVE, Fp: Fp384, lowS: false }, _noble_hashes_sha2_js__WEBPACK_IMPORTED_MODULE_3__.sha384);\n/** Alias to p384. */\nconst secp384r1 = p384;\n/** Hashing / encoding to p384 points / field. RFC 9380 methods. */\nconst p384_hasher = /* @__PURE__ */ (() => {\n    return (0,_abstract_hash_to_curve_js__WEBPACK_IMPORTED_MODULE_4__.createHasher)(p384.Point, createSWU(Fp384, {\n        A: p384_CURVE.a,\n        B: p384_CURVE.b,\n        Z: Fp384.create(BigInt('-12')),\n    }), {\n        DST: 'P384_XMD:SHA-384_SSWU_RO_',\n        encodeDST: 'P384_XMD:SHA-384_SSWU_NU_',\n        p: p384_CURVE.p,\n        m: 1,\n        k: 192,\n        expand: 'xmd',\n        hash: _noble_hashes_sha2_js__WEBPACK_IMPORTED_MODULE_3__.sha384,\n    });\n})();\n/** NIST P521 (aka secp521r1) curve, ECDSA and ECDH methods. */\nconst p521 = (0,_shortw_utils_js__WEBPACK_IMPORTED_MODULE_2__.createCurve)({ ...p521_CURVE, Fp: Fp521, lowS: false, allowedPrivateKeyLengths: [130, 131, 132] }, _noble_hashes_sha2_js__WEBPACK_IMPORTED_MODULE_3__.sha512);\n/** Alias to p521. */\nconst secp521r1 = p521;\n/** Hashing / encoding to p521 points / field. RFC 9380 methods. */\nconst p521_hasher = /* @__PURE__ */ (() => {\n    return (0,_abstract_hash_to_curve_js__WEBPACK_IMPORTED_MODULE_4__.createHasher)(p521.Point, createSWU(Fp521, {\n        A: p521_CURVE.a,\n        B: p521_CURVE.b,\n        Z: Fp521.create(BigInt('-4')),\n    }), {\n        DST: 'P521_XMD:SHA-512_SSWU_RO_',\n        encodeDST: 'P521_XMD:SHA-512_SSWU_NU_',\n        p: p521_CURVE.p,\n        m: 1,\n        k: 256,\n        expand: 'xmd',\n        hash: _noble_hashes_sha2_js__WEBPACK_IMPORTED_MODULE_3__.sha512,\n    });\n})();\n//# sourceMappingURL=nist.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/@noble/curves/esm/nist.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/@noble/curves/esm/p256.js":
/*!************************************************!*\
  !*** ./node_modules/@noble/curves/esm/p256.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   encodeToCurve: () => (/* binding */ encodeToCurve),\n/* harmony export */   hashToCurve: () => (/* binding */ hashToCurve),\n/* harmony export */   p256: () => (/* binding */ p256),\n/* harmony export */   secp256r1: () => (/* binding */ secp256r1)\n/* harmony export */ });\n/* harmony import */ var _nist_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./nist.js */ \"(pages-dir-browser)/./node_modules/@noble/curves/esm/nist.js\");\n/**\n * NIST secp256r1 aka p256.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n\n\nconst p256 = _nist_js__WEBPACK_IMPORTED_MODULE_0__.p256;\nconst secp256r1 = _nist_js__WEBPACK_IMPORTED_MODULE_0__.p256;\nconst hashToCurve = /* @__PURE__ */ (() => _nist_js__WEBPACK_IMPORTED_MODULE_0__.p256_hasher.hashToCurve)();\nconst encodeToCurve = /* @__PURE__ */ (() => _nist_js__WEBPACK_IMPORTED_MODULE_0__.p256_hasher.encodeToCurve)();\n//# sourceMappingURL=p256.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Abm9ibGUvY3VydmVzL2VzbS9wMjU2LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUM2QztBQUNVO0FBQ2hELGFBQWEsMENBQUs7QUFDbEIsa0JBQWtCLDBDQUFLO0FBQ3ZCLDJDQUEyQyxpREFBVztBQUN0RCw2Q0FBNkMsaURBQVc7QUFDL0QiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcY2hhbmRcXERvd25sb2Fkc1xcam9obndyaWNoa2lkaW50b3JpenpcXG5vZGVfbW9kdWxlc1xcQG5vYmxlXFxjdXJ2ZXNcXGVzbVxccDI1Ni5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIE5JU1Qgc2VjcDI1NnIxIGFrYSBwMjU2LlxuICogQG1vZHVsZVxuICovXG4vKiEgbm9ibGUtY3VydmVzIC0gTUlUIExpY2Vuc2UgKGMpIDIwMjIgUGF1bCBNaWxsZXIgKHBhdWxtaWxsci5jb20pICovXG5pbXBvcnQge30gZnJvbSBcIi4vYWJzdHJhY3QvaGFzaC10by1jdXJ2ZS5qc1wiO1xuaW1wb3J0IHsgcDI1Nl9oYXNoZXIsIHAyNTYgYXMgcDI1Nm4gfSBmcm9tIFwiLi9uaXN0LmpzXCI7XG5leHBvcnQgY29uc3QgcDI1NiA9IHAyNTZuO1xuZXhwb3J0IGNvbnN0IHNlY3AyNTZyMSA9IHAyNTZuO1xuZXhwb3J0IGNvbnN0IGhhc2hUb0N1cnZlID0gLyogQF9fUFVSRV9fICovICgoKSA9PiBwMjU2X2hhc2hlci5oYXNoVG9DdXJ2ZSkoKTtcbmV4cG9ydCBjb25zdCBlbmNvZGVUb0N1cnZlID0gLyogQF9fUFVSRV9fICovICgoKSA9PiBwMjU2X2hhc2hlci5lbmNvZGVUb0N1cnZlKSgpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cDI1Ni5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/@noble/curves/esm/p256.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/@noble/hashes/esm/_blake.js":
/*!**************************************************!*\
  !*** ./node_modules/@noble/hashes/esm/_blake.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BSIGMA: () => (/* binding */ BSIGMA),\n/* harmony export */   G1s: () => (/* binding */ G1s),\n/* harmony export */   G2s: () => (/* binding */ G2s)\n/* harmony export */ });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(pages-dir-browser)/./node_modules/@noble/hashes/esm/utils.js\");\n/**\n * Internal helpers for blake hash.\n * @module\n */\n\n/**\n * Internal blake variable.\n * For BLAKE2b, the two extra permutations for rounds 10 and 11 are SIGMA[10..11] = SIGMA[0..1].\n */\n// prettier-ignore\nconst BSIGMA = /* @__PURE__ */ Uint8Array.from([\n    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n    14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3,\n    11, 8, 12, 0, 5, 2, 15, 13, 10, 14, 3, 6, 7, 1, 9, 4,\n    7, 9, 3, 1, 13, 12, 11, 14, 2, 6, 5, 10, 4, 0, 15, 8,\n    9, 0, 5, 7, 2, 4, 10, 15, 14, 1, 11, 12, 6, 8, 3, 13,\n    2, 12, 6, 10, 0, 11, 8, 3, 4, 13, 7, 5, 15, 14, 1, 9,\n    12, 5, 1, 15, 14, 13, 4, 10, 0, 7, 6, 3, 9, 2, 8, 11,\n    13, 11, 7, 14, 12, 1, 3, 9, 5, 0, 15, 4, 8, 6, 2, 10,\n    6, 15, 14, 9, 11, 3, 0, 8, 12, 2, 13, 7, 1, 4, 10, 5,\n    10, 2, 8, 4, 7, 6, 1, 5, 15, 11, 9, 14, 3, 12, 13, 0,\n    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n    14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3,\n    // Blake1, unused in others\n    11, 8, 12, 0, 5, 2, 15, 13, 10, 14, 3, 6, 7, 1, 9, 4,\n    7, 9, 3, 1, 13, 12, 11, 14, 2, 6, 5, 10, 4, 0, 15, 8,\n    9, 0, 5, 7, 2, 4, 10, 15, 14, 1, 11, 12, 6, 8, 3, 13,\n    2, 12, 6, 10, 0, 11, 8, 3, 4, 13, 7, 5, 15, 14, 1, 9,\n]);\n// Mixing function G splitted in two halfs\nfunction G1s(a, b, c, d, x) {\n    a = (a + b + x) | 0;\n    d = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.rotr)(d ^ a, 16);\n    c = (c + d) | 0;\n    b = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.rotr)(b ^ c, 12);\n    return { a, b, c, d };\n}\nfunction G2s(a, b, c, d, x) {\n    a = (a + b + x) | 0;\n    d = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.rotr)(d ^ a, 8);\n    c = (c + d) | 0;\n    b = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.rotr)(b ^ c, 7);\n    return { a, b, c, d };\n}\n//# sourceMappingURL=_blake.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Abm9ibGUvaGFzaGVzL2VzbS9fYmxha2UuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ2tDO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBLFFBQVEsK0NBQUk7QUFDWjtBQUNBLFFBQVEsK0NBQUk7QUFDWixhQUFhO0FBQ2I7QUFDTztBQUNQO0FBQ0EsUUFBUSwrQ0FBSTtBQUNaO0FBQ0EsUUFBUSwrQ0FBSTtBQUNaLGFBQWE7QUFDYjtBQUNBIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGNoYW5kXFxEb3dubG9hZHNcXGpvaG53cmljaGtpZGludG9yaXp6XFxub2RlX21vZHVsZXNcXEBub2JsZVxcaGFzaGVzXFxlc21cXF9ibGFrZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEludGVybmFsIGhlbHBlcnMgZm9yIGJsYWtlIGhhc2guXG4gKiBAbW9kdWxlXG4gKi9cbmltcG9ydCB7IHJvdHIgfSBmcm9tIFwiLi91dGlscy5qc1wiO1xuLyoqXG4gKiBJbnRlcm5hbCBibGFrZSB2YXJpYWJsZS5cbiAqIEZvciBCTEFLRTJiLCB0aGUgdHdvIGV4dHJhIHBlcm11dGF0aW9ucyBmb3Igcm91bmRzIDEwIGFuZCAxMSBhcmUgU0lHTUFbMTAuLjExXSA9IFNJR01BWzAuLjFdLlxuICovXG4vLyBwcmV0dGllci1pZ25vcmVcbmV4cG9ydCBjb25zdCBCU0lHTUEgPSAvKiBAX19QVVJFX18gKi8gVWludDhBcnJheS5mcm9tKFtcbiAgICAwLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5LCAxMCwgMTEsIDEyLCAxMywgMTQsIDE1LFxuICAgIDE0LCAxMCwgNCwgOCwgOSwgMTUsIDEzLCA2LCAxLCAxMiwgMCwgMiwgMTEsIDcsIDUsIDMsXG4gICAgMTEsIDgsIDEyLCAwLCA1LCAyLCAxNSwgMTMsIDEwLCAxNCwgMywgNiwgNywgMSwgOSwgNCxcbiAgICA3LCA5LCAzLCAxLCAxMywgMTIsIDExLCAxNCwgMiwgNiwgNSwgMTAsIDQsIDAsIDE1LCA4LFxuICAgIDksIDAsIDUsIDcsIDIsIDQsIDEwLCAxNSwgMTQsIDEsIDExLCAxMiwgNiwgOCwgMywgMTMsXG4gICAgMiwgMTIsIDYsIDEwLCAwLCAxMSwgOCwgMywgNCwgMTMsIDcsIDUsIDE1LCAxNCwgMSwgOSxcbiAgICAxMiwgNSwgMSwgMTUsIDE0LCAxMywgNCwgMTAsIDAsIDcsIDYsIDMsIDksIDIsIDgsIDExLFxuICAgIDEzLCAxMSwgNywgMTQsIDEyLCAxLCAzLCA5LCA1LCAwLCAxNSwgNCwgOCwgNiwgMiwgMTAsXG4gICAgNiwgMTUsIDE0LCA5LCAxMSwgMywgMCwgOCwgMTIsIDIsIDEzLCA3LCAxLCA0LCAxMCwgNSxcbiAgICAxMCwgMiwgOCwgNCwgNywgNiwgMSwgNSwgMTUsIDExLCA5LCAxNCwgMywgMTIsIDEzLCAwLFxuICAgIDAsIDEsIDIsIDMsIDQsIDUsIDYsIDcsIDgsIDksIDEwLCAxMSwgMTIsIDEzLCAxNCwgMTUsXG4gICAgMTQsIDEwLCA0LCA4LCA5LCAxNSwgMTMsIDYsIDEsIDEyLCAwLCAyLCAxMSwgNywgNSwgMyxcbiAgICAvLyBCbGFrZTEsIHVudXNlZCBpbiBvdGhlcnNcbiAgICAxMSwgOCwgMTIsIDAsIDUsIDIsIDE1LCAxMywgMTAsIDE0LCAzLCA2LCA3LCAxLCA5LCA0LFxuICAgIDcsIDksIDMsIDEsIDEzLCAxMiwgMTEsIDE0LCAyLCA2LCA1LCAxMCwgNCwgMCwgMTUsIDgsXG4gICAgOSwgMCwgNSwgNywgMiwgNCwgMTAsIDE1LCAxNCwgMSwgMTEsIDEyLCA2LCA4LCAzLCAxMyxcbiAgICAyLCAxMiwgNiwgMTAsIDAsIDExLCA4LCAzLCA0LCAxMywgNywgNSwgMTUsIDE0LCAxLCA5LFxuXSk7XG4vLyBNaXhpbmcgZnVuY3Rpb24gRyBzcGxpdHRlZCBpbiB0d28gaGFsZnNcbmV4cG9ydCBmdW5jdGlvbiBHMXMoYSwgYiwgYywgZCwgeCkge1xuICAgIGEgPSAoYSArIGIgKyB4KSB8IDA7XG4gICAgZCA9IHJvdHIoZCBeIGEsIDE2KTtcbiAgICBjID0gKGMgKyBkKSB8IDA7XG4gICAgYiA9IHJvdHIoYiBeIGMsIDEyKTtcbiAgICByZXR1cm4geyBhLCBiLCBjLCBkIH07XG59XG5leHBvcnQgZnVuY3Rpb24gRzJzKGEsIGIsIGMsIGQsIHgpIHtcbiAgICBhID0gKGEgKyBiICsgeCkgfCAwO1xuICAgIGQgPSByb3RyKGQgXiBhLCA4KTtcbiAgICBjID0gKGMgKyBkKSB8IDA7XG4gICAgYiA9IHJvdHIoYiBeIGMsIDcpO1xuICAgIHJldHVybiB7IGEsIGIsIGMsIGQgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPV9ibGFrZS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/@noble/hashes/esm/_blake.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/@noble/hashes/esm/blake2.js":
/*!**************************************************!*\
  !*** ./node_modules/@noble/hashes/esm/blake2.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BLAKE2: () => (/* binding */ BLAKE2),\n/* harmony export */   BLAKE2b: () => (/* binding */ BLAKE2b),\n/* harmony export */   BLAKE2s: () => (/* binding */ BLAKE2s),\n/* harmony export */   blake2b: () => (/* binding */ blake2b),\n/* harmony export */   blake2s: () => (/* binding */ blake2s),\n/* harmony export */   compress: () => (/* binding */ compress)\n/* harmony export */ });\n/* harmony import */ var _blake_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_blake.js */ \"(pages-dir-browser)/./node_modules/@noble/hashes/esm/_blake.js\");\n/* harmony import */ var _md_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./_md.js */ \"(pages-dir-browser)/./node_modules/@noble/hashes/esm/_md.js\");\n/* harmony import */ var _u64_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_u64.js */ \"(pages-dir-browser)/./node_modules/@noble/hashes/esm/_u64.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"(pages-dir-browser)/./node_modules/@noble/hashes/esm/utils.js\");\n/**\n * blake2b (64-bit) & blake2s (8 to 32-bit) hash functions.\n * b could have been faster, but there is no fast u64 in js, so s is 1.5x faster.\n * @module\n */\n\n\n\n// prettier-ignore\n\n// Same as SHA512_IV, but swapped endianness: LE instead of BE. iv[1] is iv[0], etc.\nconst B2B_IV = /* @__PURE__ */ Uint32Array.from([\n    0xf3bcc908, 0x6a09e667, 0x84caa73b, 0xbb67ae85, 0xfe94f82b, 0x3c6ef372, 0x5f1d36f1, 0xa54ff53a,\n    0xade682d1, 0x510e527f, 0x2b3e6c1f, 0x9b05688c, 0xfb41bd6b, 0x1f83d9ab, 0x137e2179, 0x5be0cd19,\n]);\n// Temporary buffer\nconst BBUF = /* @__PURE__ */ new Uint32Array(32);\n// Mixing function G splitted in two halfs\nfunction G1b(a, b, c, d, msg, x) {\n    // NOTE: V is LE here\n    const Xl = msg[x], Xh = msg[x + 1]; // prettier-ignore\n    let Al = BBUF[2 * a], Ah = BBUF[2 * a + 1]; // prettier-ignore\n    let Bl = BBUF[2 * b], Bh = BBUF[2 * b + 1]; // prettier-ignore\n    let Cl = BBUF[2 * c], Ch = BBUF[2 * c + 1]; // prettier-ignore\n    let Dl = BBUF[2 * d], Dh = BBUF[2 * d + 1]; // prettier-ignore\n    // v[a] = (v[a] + v[b] + x) | 0;\n    let ll = _u64_js__WEBPACK_IMPORTED_MODULE_0__.add3L(Al, Bl, Xl);\n    Ah = _u64_js__WEBPACK_IMPORTED_MODULE_0__.add3H(ll, Ah, Bh, Xh);\n    Al = ll | 0;\n    // v[d] = rotr(v[d] ^ v[a], 32)\n    ({ Dh, Dl } = { Dh: Dh ^ Ah, Dl: Dl ^ Al });\n    ({ Dh, Dl } = { Dh: _u64_js__WEBPACK_IMPORTED_MODULE_0__.rotr32H(Dh, Dl), Dl: _u64_js__WEBPACK_IMPORTED_MODULE_0__.rotr32L(Dh, Dl) });\n    // v[c] = (v[c] + v[d]) | 0;\n    ({ h: Ch, l: Cl } = _u64_js__WEBPACK_IMPORTED_MODULE_0__.add(Ch, Cl, Dh, Dl));\n    // v[b] = rotr(v[b] ^ v[c], 24)\n    ({ Bh, Bl } = { Bh: Bh ^ Ch, Bl: Bl ^ Cl });\n    ({ Bh, Bl } = { Bh: _u64_js__WEBPACK_IMPORTED_MODULE_0__.rotrSH(Bh, Bl, 24), Bl: _u64_js__WEBPACK_IMPORTED_MODULE_0__.rotrSL(Bh, Bl, 24) });\n    (BBUF[2 * a] = Al), (BBUF[2 * a + 1] = Ah);\n    (BBUF[2 * b] = Bl), (BBUF[2 * b + 1] = Bh);\n    (BBUF[2 * c] = Cl), (BBUF[2 * c + 1] = Ch);\n    (BBUF[2 * d] = Dl), (BBUF[2 * d + 1] = Dh);\n}\nfunction G2b(a, b, c, d, msg, x) {\n    // NOTE: V is LE here\n    const Xl = msg[x], Xh = msg[x + 1]; // prettier-ignore\n    let Al = BBUF[2 * a], Ah = BBUF[2 * a + 1]; // prettier-ignore\n    let Bl = BBUF[2 * b], Bh = BBUF[2 * b + 1]; // prettier-ignore\n    let Cl = BBUF[2 * c], Ch = BBUF[2 * c + 1]; // prettier-ignore\n    let Dl = BBUF[2 * d], Dh = BBUF[2 * d + 1]; // prettier-ignore\n    // v[a] = (v[a] + v[b] + x) | 0;\n    let ll = _u64_js__WEBPACK_IMPORTED_MODULE_0__.add3L(Al, Bl, Xl);\n    Ah = _u64_js__WEBPACK_IMPORTED_MODULE_0__.add3H(ll, Ah, Bh, Xh);\n    Al = ll | 0;\n    // v[d] = rotr(v[d] ^ v[a], 16)\n    ({ Dh, Dl } = { Dh: Dh ^ Ah, Dl: Dl ^ Al });\n    ({ Dh, Dl } = { Dh: _u64_js__WEBPACK_IMPORTED_MODULE_0__.rotrSH(Dh, Dl, 16), Dl: _u64_js__WEBPACK_IMPORTED_MODULE_0__.rotrSL(Dh, Dl, 16) });\n    // v[c] = (v[c] + v[d]) | 0;\n    ({ h: Ch, l: Cl } = _u64_js__WEBPACK_IMPORTED_MODULE_0__.add(Ch, Cl, Dh, Dl));\n    // v[b] = rotr(v[b] ^ v[c], 63)\n    ({ Bh, Bl } = { Bh: Bh ^ Ch, Bl: Bl ^ Cl });\n    ({ Bh, Bl } = { Bh: _u64_js__WEBPACK_IMPORTED_MODULE_0__.rotrBH(Bh, Bl, 63), Bl: _u64_js__WEBPACK_IMPORTED_MODULE_0__.rotrBL(Bh, Bl, 63) });\n    (BBUF[2 * a] = Al), (BBUF[2 * a + 1] = Ah);\n    (BBUF[2 * b] = Bl), (BBUF[2 * b + 1] = Bh);\n    (BBUF[2 * c] = Cl), (BBUF[2 * c + 1] = Ch);\n    (BBUF[2 * d] = Dl), (BBUF[2 * d + 1] = Dh);\n}\nfunction checkBlake2Opts(outputLen, opts = {}, keyLen, saltLen, persLen) {\n    (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.anumber)(keyLen);\n    if (outputLen < 0 || outputLen > keyLen)\n        throw new Error('outputLen bigger than keyLen');\n    const { key, salt, personalization } = opts;\n    if (key !== undefined && (key.length < 1 || key.length > keyLen))\n        throw new Error('key length must be undefined or 1..' + keyLen);\n    if (salt !== undefined && salt.length !== saltLen)\n        throw new Error('salt must be undefined or ' + saltLen);\n    if (personalization !== undefined && personalization.length !== persLen)\n        throw new Error('personalization must be undefined or ' + persLen);\n}\n/** Class, from which others are subclassed. */\nclass BLAKE2 extends _utils_js__WEBPACK_IMPORTED_MODULE_1__.Hash {\n    constructor(blockLen, outputLen) {\n        super();\n        this.finished = false;\n        this.destroyed = false;\n        this.length = 0;\n        this.pos = 0;\n        (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.anumber)(blockLen);\n        (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.anumber)(outputLen);\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.buffer = new Uint8Array(blockLen);\n        this.buffer32 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.u32)(this.buffer);\n    }\n    update(data) {\n        (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.aexists)(this);\n        data = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.toBytes)(data);\n        (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.abytes)(data);\n        // Main difference with other hashes: there is flag for last block,\n        // so we cannot process current block before we know that there\n        // is the next one. This significantly complicates logic and reduces ability\n        // to do zero-copy processing\n        const { blockLen, buffer, buffer32 } = this;\n        const len = data.length;\n        const offset = data.byteOffset;\n        const buf = data.buffer;\n        for (let pos = 0; pos < len;) {\n            // If buffer is full and we still have input (don't process last block, same as blake2s)\n            if (this.pos === blockLen) {\n                (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.swap32IfBE)(buffer32);\n                this.compress(buffer32, 0, false);\n                (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.swap32IfBE)(buffer32);\n                this.pos = 0;\n            }\n            const take = Math.min(blockLen - this.pos, len - pos);\n            const dataOffset = offset + pos;\n            // full block && aligned to 4 bytes && not last in input\n            if (take === blockLen && !(dataOffset % 4) && pos + take < len) {\n                const data32 = new Uint32Array(buf, dataOffset, Math.floor((len - pos) / 4));\n                (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.swap32IfBE)(data32);\n                for (let pos32 = 0; pos + blockLen < len; pos32 += buffer32.length, pos += blockLen) {\n                    this.length += blockLen;\n                    this.compress(data32, pos32, false);\n                }\n                (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.swap32IfBE)(data32);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            this.length += take;\n            pos += take;\n        }\n        return this;\n    }\n    digestInto(out) {\n        (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.aexists)(this);\n        (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.aoutput)(out, this);\n        const { pos, buffer32 } = this;\n        this.finished = true;\n        // Padding\n        (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.clean)(this.buffer.subarray(pos));\n        (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.swap32IfBE)(buffer32);\n        this.compress(buffer32, 0, true);\n        (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.swap32IfBE)(buffer32);\n        const out32 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.u32)(out);\n        this.get().forEach((v, i) => (out32[i] = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.swap8IfBE)(v)));\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        const { buffer, length, finished, destroyed, outputLen, pos } = this;\n        to || (to = new this.constructor({ dkLen: outputLen }));\n        to.set(...this.get());\n        to.buffer.set(buffer);\n        to.destroyed = destroyed;\n        to.finished = finished;\n        to.length = length;\n        to.pos = pos;\n        // @ts-ignore\n        to.outputLen = outputLen;\n        return to;\n    }\n    clone() {\n        return this._cloneInto();\n    }\n}\nclass BLAKE2b extends BLAKE2 {\n    constructor(opts = {}) {\n        const olen = opts.dkLen === undefined ? 64 : opts.dkLen;\n        super(128, olen);\n        // Same as SHA-512, but LE\n        this.v0l = B2B_IV[0] | 0;\n        this.v0h = B2B_IV[1] | 0;\n        this.v1l = B2B_IV[2] | 0;\n        this.v1h = B2B_IV[3] | 0;\n        this.v2l = B2B_IV[4] | 0;\n        this.v2h = B2B_IV[5] | 0;\n        this.v3l = B2B_IV[6] | 0;\n        this.v3h = B2B_IV[7] | 0;\n        this.v4l = B2B_IV[8] | 0;\n        this.v4h = B2B_IV[9] | 0;\n        this.v5l = B2B_IV[10] | 0;\n        this.v5h = B2B_IV[11] | 0;\n        this.v6l = B2B_IV[12] | 0;\n        this.v6h = B2B_IV[13] | 0;\n        this.v7l = B2B_IV[14] | 0;\n        this.v7h = B2B_IV[15] | 0;\n        checkBlake2Opts(olen, opts, 64, 16, 16);\n        let { key, personalization, salt } = opts;\n        let keyLength = 0;\n        if (key !== undefined) {\n            key = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.toBytes)(key);\n            keyLength = key.length;\n        }\n        this.v0l ^= this.outputLen | (keyLength << 8) | (0x01 << 16) | (0x01 << 24);\n        if (salt !== undefined) {\n            salt = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.toBytes)(salt);\n            const slt = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.u32)(salt);\n            this.v4l ^= (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.swap8IfBE)(slt[0]);\n            this.v4h ^= (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.swap8IfBE)(slt[1]);\n            this.v5l ^= (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.swap8IfBE)(slt[2]);\n            this.v5h ^= (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.swap8IfBE)(slt[3]);\n        }\n        if (personalization !== undefined) {\n            personalization = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.toBytes)(personalization);\n            const pers = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.u32)(personalization);\n            this.v6l ^= (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.swap8IfBE)(pers[0]);\n            this.v6h ^= (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.swap8IfBE)(pers[1]);\n            this.v7l ^= (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.swap8IfBE)(pers[2]);\n            this.v7h ^= (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.swap8IfBE)(pers[3]);\n        }\n        if (key !== undefined) {\n            // Pad to blockLen and update\n            const tmp = new Uint8Array(this.blockLen);\n            tmp.set(key);\n            this.update(tmp);\n        }\n    }\n    // prettier-ignore\n    get() {\n        let { v0l, v0h, v1l, v1h, v2l, v2h, v3l, v3h, v4l, v4h, v5l, v5h, v6l, v6h, v7l, v7h } = this;\n        return [v0l, v0h, v1l, v1h, v2l, v2h, v3l, v3h, v4l, v4h, v5l, v5h, v6l, v6h, v7l, v7h];\n    }\n    // prettier-ignore\n    set(v0l, v0h, v1l, v1h, v2l, v2h, v3l, v3h, v4l, v4h, v5l, v5h, v6l, v6h, v7l, v7h) {\n        this.v0l = v0l | 0;\n        this.v0h = v0h | 0;\n        this.v1l = v1l | 0;\n        this.v1h = v1h | 0;\n        this.v2l = v2l | 0;\n        this.v2h = v2h | 0;\n        this.v3l = v3l | 0;\n        this.v3h = v3h | 0;\n        this.v4l = v4l | 0;\n        this.v4h = v4h | 0;\n        this.v5l = v5l | 0;\n        this.v5h = v5h | 0;\n        this.v6l = v6l | 0;\n        this.v6h = v6h | 0;\n        this.v7l = v7l | 0;\n        this.v7h = v7h | 0;\n    }\n    compress(msg, offset, isLast) {\n        this.get().forEach((v, i) => (BBUF[i] = v)); // First half from state.\n        BBUF.set(B2B_IV, 16); // Second half from IV.\n        let { h, l } = _u64_js__WEBPACK_IMPORTED_MODULE_0__.fromBig(BigInt(this.length));\n        BBUF[24] = B2B_IV[8] ^ l; // Low word of the offset.\n        BBUF[25] = B2B_IV[9] ^ h; // High word.\n        // Invert all bits for last block\n        if (isLast) {\n            BBUF[28] = ~BBUF[28];\n            BBUF[29] = ~BBUF[29];\n        }\n        let j = 0;\n        const s = _blake_js__WEBPACK_IMPORTED_MODULE_2__.BSIGMA;\n        for (let i = 0; i < 12; i++) {\n            G1b(0, 4, 8, 12, msg, offset + 2 * s[j++]);\n            G2b(0, 4, 8, 12, msg, offset + 2 * s[j++]);\n            G1b(1, 5, 9, 13, msg, offset + 2 * s[j++]);\n            G2b(1, 5, 9, 13, msg, offset + 2 * s[j++]);\n            G1b(2, 6, 10, 14, msg, offset + 2 * s[j++]);\n            G2b(2, 6, 10, 14, msg, offset + 2 * s[j++]);\n            G1b(3, 7, 11, 15, msg, offset + 2 * s[j++]);\n            G2b(3, 7, 11, 15, msg, offset + 2 * s[j++]);\n            G1b(0, 5, 10, 15, msg, offset + 2 * s[j++]);\n            G2b(0, 5, 10, 15, msg, offset + 2 * s[j++]);\n            G1b(1, 6, 11, 12, msg, offset + 2 * s[j++]);\n            G2b(1, 6, 11, 12, msg, offset + 2 * s[j++]);\n            G1b(2, 7, 8, 13, msg, offset + 2 * s[j++]);\n            G2b(2, 7, 8, 13, msg, offset + 2 * s[j++]);\n            G1b(3, 4, 9, 14, msg, offset + 2 * s[j++]);\n            G2b(3, 4, 9, 14, msg, offset + 2 * s[j++]);\n        }\n        this.v0l ^= BBUF[0] ^ BBUF[16];\n        this.v0h ^= BBUF[1] ^ BBUF[17];\n        this.v1l ^= BBUF[2] ^ BBUF[18];\n        this.v1h ^= BBUF[3] ^ BBUF[19];\n        this.v2l ^= BBUF[4] ^ BBUF[20];\n        this.v2h ^= BBUF[5] ^ BBUF[21];\n        this.v3l ^= BBUF[6] ^ BBUF[22];\n        this.v3h ^= BBUF[7] ^ BBUF[23];\n        this.v4l ^= BBUF[8] ^ BBUF[24];\n        this.v4h ^= BBUF[9] ^ BBUF[25];\n        this.v5l ^= BBUF[10] ^ BBUF[26];\n        this.v5h ^= BBUF[11] ^ BBUF[27];\n        this.v6l ^= BBUF[12] ^ BBUF[28];\n        this.v6h ^= BBUF[13] ^ BBUF[29];\n        this.v7l ^= BBUF[14] ^ BBUF[30];\n        this.v7h ^= BBUF[15] ^ BBUF[31];\n        (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.clean)(BBUF);\n    }\n    destroy() {\n        this.destroyed = true;\n        (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.clean)(this.buffer32);\n        this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n    }\n}\n/**\n * Blake2b hash function. 64-bit. 1.5x slower than blake2s in JS.\n * @param msg - message that would be hashed\n * @param opts - dkLen output length, key for MAC mode, salt, personalization\n */\nconst blake2b = /* @__PURE__ */ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.createOptHasher)((opts) => new BLAKE2b(opts));\n// prettier-ignore\nfunction compress(s, offset, msg, rounds, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15) {\n    let j = 0;\n    for (let i = 0; i < rounds; i++) {\n        ({ a: v0, b: v4, c: v8, d: v12 } = (0,_blake_js__WEBPACK_IMPORTED_MODULE_2__.G1s)(v0, v4, v8, v12, msg[offset + s[j++]]));\n        ({ a: v0, b: v4, c: v8, d: v12 } = (0,_blake_js__WEBPACK_IMPORTED_MODULE_2__.G2s)(v0, v4, v8, v12, msg[offset + s[j++]]));\n        ({ a: v1, b: v5, c: v9, d: v13 } = (0,_blake_js__WEBPACK_IMPORTED_MODULE_2__.G1s)(v1, v5, v9, v13, msg[offset + s[j++]]));\n        ({ a: v1, b: v5, c: v9, d: v13 } = (0,_blake_js__WEBPACK_IMPORTED_MODULE_2__.G2s)(v1, v5, v9, v13, msg[offset + s[j++]]));\n        ({ a: v2, b: v6, c: v10, d: v14 } = (0,_blake_js__WEBPACK_IMPORTED_MODULE_2__.G1s)(v2, v6, v10, v14, msg[offset + s[j++]]));\n        ({ a: v2, b: v6, c: v10, d: v14 } = (0,_blake_js__WEBPACK_IMPORTED_MODULE_2__.G2s)(v2, v6, v10, v14, msg[offset + s[j++]]));\n        ({ a: v3, b: v7, c: v11, d: v15 } = (0,_blake_js__WEBPACK_IMPORTED_MODULE_2__.G1s)(v3, v7, v11, v15, msg[offset + s[j++]]));\n        ({ a: v3, b: v7, c: v11, d: v15 } = (0,_blake_js__WEBPACK_IMPORTED_MODULE_2__.G2s)(v3, v7, v11, v15, msg[offset + s[j++]]));\n        ({ a: v0, b: v5, c: v10, d: v15 } = (0,_blake_js__WEBPACK_IMPORTED_MODULE_2__.G1s)(v0, v5, v10, v15, msg[offset + s[j++]]));\n        ({ a: v0, b: v5, c: v10, d: v15 } = (0,_blake_js__WEBPACK_IMPORTED_MODULE_2__.G2s)(v0, v5, v10, v15, msg[offset + s[j++]]));\n        ({ a: v1, b: v6, c: v11, d: v12 } = (0,_blake_js__WEBPACK_IMPORTED_MODULE_2__.G1s)(v1, v6, v11, v12, msg[offset + s[j++]]));\n        ({ a: v1, b: v6, c: v11, d: v12 } = (0,_blake_js__WEBPACK_IMPORTED_MODULE_2__.G2s)(v1, v6, v11, v12, msg[offset + s[j++]]));\n        ({ a: v2, b: v7, c: v8, d: v13 } = (0,_blake_js__WEBPACK_IMPORTED_MODULE_2__.G1s)(v2, v7, v8, v13, msg[offset + s[j++]]));\n        ({ a: v2, b: v7, c: v8, d: v13 } = (0,_blake_js__WEBPACK_IMPORTED_MODULE_2__.G2s)(v2, v7, v8, v13, msg[offset + s[j++]]));\n        ({ a: v3, b: v4, c: v9, d: v14 } = (0,_blake_js__WEBPACK_IMPORTED_MODULE_2__.G1s)(v3, v4, v9, v14, msg[offset + s[j++]]));\n        ({ a: v3, b: v4, c: v9, d: v14 } = (0,_blake_js__WEBPACK_IMPORTED_MODULE_2__.G2s)(v3, v4, v9, v14, msg[offset + s[j++]]));\n    }\n    return { v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15 };\n}\nconst B2S_IV = _md_js__WEBPACK_IMPORTED_MODULE_3__.SHA256_IV;\nclass BLAKE2s extends BLAKE2 {\n    constructor(opts = {}) {\n        const olen = opts.dkLen === undefined ? 32 : opts.dkLen;\n        super(64, olen);\n        // Internal state, same as SHA-256\n        this.v0 = B2S_IV[0] | 0;\n        this.v1 = B2S_IV[1] | 0;\n        this.v2 = B2S_IV[2] | 0;\n        this.v3 = B2S_IV[3] | 0;\n        this.v4 = B2S_IV[4] | 0;\n        this.v5 = B2S_IV[5] | 0;\n        this.v6 = B2S_IV[6] | 0;\n        this.v7 = B2S_IV[7] | 0;\n        checkBlake2Opts(olen, opts, 32, 8, 8);\n        let { key, personalization, salt } = opts;\n        let keyLength = 0;\n        if (key !== undefined) {\n            key = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.toBytes)(key);\n            keyLength = key.length;\n        }\n        this.v0 ^= this.outputLen | (keyLength << 8) | (0x01 << 16) | (0x01 << 24);\n        if (salt !== undefined) {\n            salt = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.toBytes)(salt);\n            const slt = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.u32)(salt);\n            this.v4 ^= (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.swap8IfBE)(slt[0]);\n            this.v5 ^= (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.swap8IfBE)(slt[1]);\n        }\n        if (personalization !== undefined) {\n            personalization = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.toBytes)(personalization);\n            const pers = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.u32)(personalization);\n            this.v6 ^= (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.swap8IfBE)(pers[0]);\n            this.v7 ^= (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.swap8IfBE)(pers[1]);\n        }\n        if (key !== undefined) {\n            // Pad to blockLen and update\n            (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.abytes)(key);\n            const tmp = new Uint8Array(this.blockLen);\n            tmp.set(key);\n            this.update(tmp);\n        }\n    }\n    get() {\n        const { v0, v1, v2, v3, v4, v5, v6, v7 } = this;\n        return [v0, v1, v2, v3, v4, v5, v6, v7];\n    }\n    // prettier-ignore\n    set(v0, v1, v2, v3, v4, v5, v6, v7) {\n        this.v0 = v0 | 0;\n        this.v1 = v1 | 0;\n        this.v2 = v2 | 0;\n        this.v3 = v3 | 0;\n        this.v4 = v4 | 0;\n        this.v5 = v5 | 0;\n        this.v6 = v6 | 0;\n        this.v7 = v7 | 0;\n    }\n    compress(msg, offset, isLast) {\n        const { h, l } = _u64_js__WEBPACK_IMPORTED_MODULE_0__.fromBig(BigInt(this.length));\n        // prettier-ignore\n        const { v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15 } = compress(_blake_js__WEBPACK_IMPORTED_MODULE_2__.BSIGMA, offset, msg, 10, this.v0, this.v1, this.v2, this.v3, this.v4, this.v5, this.v6, this.v7, B2S_IV[0], B2S_IV[1], B2S_IV[2], B2S_IV[3], l ^ B2S_IV[4], h ^ B2S_IV[5], isLast ? ~B2S_IV[6] : B2S_IV[6], B2S_IV[7]);\n        this.v0 ^= v0 ^ v8;\n        this.v1 ^= v1 ^ v9;\n        this.v2 ^= v2 ^ v10;\n        this.v3 ^= v3 ^ v11;\n        this.v4 ^= v4 ^ v12;\n        this.v5 ^= v5 ^ v13;\n        this.v6 ^= v6 ^ v14;\n        this.v7 ^= v7 ^ v15;\n    }\n    destroy() {\n        this.destroyed = true;\n        (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.clean)(this.buffer32);\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\n    }\n}\n/**\n * Blake2s hash function. Focuses on 8-bit to 32-bit platforms. 1.5x faster than blake2b in JS.\n * @param msg - message that would be hashed\n * @param opts - dkLen output length, key for MAC mode, salt, personalization\n */\nconst blake2s = /* @__PURE__ */ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.createOptHasher)((opts) => new BLAKE2s(opts));\n//# sourceMappingURL=blake2.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/@noble/hashes/esm/blake2.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/@noble/hashes/esm/blake3.js":
/*!**************************************************!*\
  !*** ./node_modules/@noble/hashes/esm/blake3.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BLAKE3: () => (/* binding */ BLAKE3),\n/* harmony export */   blake3: () => (/* binding */ blake3)\n/* harmony export */ });\n/* harmony import */ var _md_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_md.js */ \"(pages-dir-browser)/./node_modules/@noble/hashes/esm/_md.js\");\n/* harmony import */ var _u64_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./_u64.js */ \"(pages-dir-browser)/./node_modules/@noble/hashes/esm/_u64.js\");\n/* harmony import */ var _blake2_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./blake2.js */ \"(pages-dir-browser)/./node_modules/@noble/hashes/esm/blake2.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils.js */ \"(pages-dir-browser)/./node_modules/@noble/hashes/esm/utils.js\");\n/**\n * Blake3 fast hash is Blake2 with reduced security (round count). Can also be used as MAC & KDF.\n *\n * It is advertised as \"the fastest cryptographic hash\". However, it isn't true in JS.\n * Why is this so slow? While it should be 6x faster than blake2b, perf diff is only 20%:\n *\n * * There is only 30% reduction in number of rounds from blake2s\n * * Speed-up comes from tree structure, which is parallelized using SIMD & threading.\n *   These features are not present in JS, so we only get overhead from trees.\n * * Parallelization only happens on 1024-byte chunks: there is no benefit for small inputs.\n * * It is still possible to make it faster using: a) loop unrolling b) web workers c) wasm\n * @module\n */\n\n\n\n// prettier-ignore\n\n// Flag bitset\nconst B3_Flags = {\n    CHUNK_START: 0b1,\n    CHUNK_END: 0b10,\n    PARENT: 0b100,\n    ROOT: 0b1000,\n    KEYED_HASH: 0b10000,\n    DERIVE_KEY_CONTEXT: 0b100000,\n    DERIVE_KEY_MATERIAL: 0b1000000,\n};\nconst B3_IV = _md_js__WEBPACK_IMPORTED_MODULE_0__.SHA256_IV.slice();\nconst B3_SIGMA = /* @__PURE__ */ (() => {\n    const Id = Array.from({ length: 16 }, (_, i) => i);\n    const permute = (arr) => [2, 6, 3, 10, 7, 0, 4, 13, 1, 11, 12, 5, 9, 14, 15, 8].map((i) => arr[i]);\n    const res = [];\n    for (let i = 0, v = Id; i < 7; i++, v = permute(v))\n        res.push(...v);\n    return Uint8Array.from(res);\n})();\n/** Blake3 hash. Can be used as MAC and KDF. */\nclass BLAKE3 extends _blake2_js__WEBPACK_IMPORTED_MODULE_1__.BLAKE2 {\n    constructor(opts = {}, flags = 0) {\n        super(64, opts.dkLen === undefined ? 32 : opts.dkLen);\n        this.chunkPos = 0; // Position of current block in chunk\n        this.chunksDone = 0; // How many chunks we already have\n        this.flags = 0 | 0;\n        this.stack = [];\n        // Output\n        this.posOut = 0;\n        this.bufferOut32 = new Uint32Array(16);\n        this.chunkOut = 0; // index of output chunk\n        this.enableXOF = true;\n        const { key, context } = opts;\n        const hasContext = context !== undefined;\n        if (key !== undefined) {\n            if (hasContext)\n                throw new Error('Only \"key\" or \"context\" can be specified at same time');\n            const k = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.toBytes)(key).slice();\n            (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.abytes)(k, 32);\n            this.IV = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.u32)(k);\n            (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.swap32IfBE)(this.IV);\n            this.flags = flags | B3_Flags.KEYED_HASH;\n        }\n        else if (hasContext) {\n            const ctx = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.toBytes)(context);\n            const contextKey = new BLAKE3({ dkLen: 32 }, B3_Flags.DERIVE_KEY_CONTEXT)\n                .update(ctx)\n                .digest();\n            this.IV = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.u32)(contextKey);\n            (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.swap32IfBE)(this.IV);\n            this.flags = flags | B3_Flags.DERIVE_KEY_MATERIAL;\n        }\n        else {\n            this.IV = B3_IV.slice();\n            this.flags = flags;\n        }\n        this.state = this.IV.slice();\n        this.bufferOut = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.u8)(this.bufferOut32);\n    }\n    // Unused\n    get() {\n        return [];\n    }\n    set() { }\n    b2Compress(counter, flags, buf, bufPos = 0) {\n        const { state: s, pos } = this;\n        const { h, l } = (0,_u64_js__WEBPACK_IMPORTED_MODULE_3__.fromBig)(BigInt(counter), true);\n        // prettier-ignore\n        const { v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15 } = (0,_blake2_js__WEBPACK_IMPORTED_MODULE_1__.compress)(B3_SIGMA, bufPos, buf, 7, s[0], s[1], s[2], s[3], s[4], s[5], s[6], s[7], B3_IV[0], B3_IV[1], B3_IV[2], B3_IV[3], h, l, pos, flags);\n        s[0] = v0 ^ v8;\n        s[1] = v1 ^ v9;\n        s[2] = v2 ^ v10;\n        s[3] = v3 ^ v11;\n        s[4] = v4 ^ v12;\n        s[5] = v5 ^ v13;\n        s[6] = v6 ^ v14;\n        s[7] = v7 ^ v15;\n    }\n    compress(buf, bufPos = 0, isLast = false) {\n        // Compress last block\n        let flags = this.flags;\n        if (!this.chunkPos)\n            flags |= B3_Flags.CHUNK_START;\n        if (this.chunkPos === 15 || isLast)\n            flags |= B3_Flags.CHUNK_END;\n        if (!isLast)\n            this.pos = this.blockLen;\n        this.b2Compress(this.chunksDone, flags, buf, bufPos);\n        this.chunkPos += 1;\n        // If current block is last in chunk (16 blocks), then compress chunks\n        if (this.chunkPos === 16 || isLast) {\n            let chunk = this.state;\n            this.state = this.IV.slice();\n            // If not the last one, compress only when there are trailing zeros in chunk counter\n            // chunks used as binary tree where current stack is path. Zero means current leaf is finished and can be compressed.\n            // 1 (001) - leaf not finished (just push current chunk to stack)\n            // 2 (010) - leaf finished at depth=1 (merge with last elm on stack and push back)\n            // 3 (011) - last leaf not finished\n            // 4 (100) - leafs finished at depth=1 and depth=2\n            for (let last, chunks = this.chunksDone + 1; isLast || !(chunks & 1); chunks >>= 1) {\n                if (!(last = this.stack.pop()))\n                    break;\n                this.buffer32.set(last, 0);\n                this.buffer32.set(chunk, 8);\n                this.pos = this.blockLen;\n                this.b2Compress(0, this.flags | B3_Flags.PARENT, this.buffer32, 0);\n                chunk = this.state;\n                this.state = this.IV.slice();\n            }\n            this.chunksDone++;\n            this.chunkPos = 0;\n            this.stack.push(chunk);\n        }\n        this.pos = 0;\n    }\n    _cloneInto(to) {\n        to = super._cloneInto(to);\n        const { IV, flags, state, chunkPos, posOut, chunkOut, stack, chunksDone } = this;\n        to.state.set(state.slice());\n        to.stack = stack.map((i) => Uint32Array.from(i));\n        to.IV.set(IV);\n        to.flags = flags;\n        to.chunkPos = chunkPos;\n        to.chunksDone = chunksDone;\n        to.posOut = posOut;\n        to.chunkOut = chunkOut;\n        to.enableXOF = this.enableXOF;\n        to.bufferOut32.set(this.bufferOut32);\n        return to;\n    }\n    destroy() {\n        this.destroyed = true;\n        (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.clean)(this.state, this.buffer32, this.IV, this.bufferOut32);\n        (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.clean)(...this.stack);\n    }\n    // Same as b2Compress, but doesn't modify state and returns 16 u32 array (instead of 8)\n    b2CompressOut() {\n        const { state: s, pos, flags, buffer32, bufferOut32: out32 } = this;\n        const { h, l } = (0,_u64_js__WEBPACK_IMPORTED_MODULE_3__.fromBig)(BigInt(this.chunkOut++));\n        (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.swap32IfBE)(buffer32);\n        // prettier-ignore\n        const { v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15 } = (0,_blake2_js__WEBPACK_IMPORTED_MODULE_1__.compress)(B3_SIGMA, 0, buffer32, 7, s[0], s[1], s[2], s[3], s[4], s[5], s[6], s[7], B3_IV[0], B3_IV[1], B3_IV[2], B3_IV[3], l, h, pos, flags);\n        out32[0] = v0 ^ v8;\n        out32[1] = v1 ^ v9;\n        out32[2] = v2 ^ v10;\n        out32[3] = v3 ^ v11;\n        out32[4] = v4 ^ v12;\n        out32[5] = v5 ^ v13;\n        out32[6] = v6 ^ v14;\n        out32[7] = v7 ^ v15;\n        out32[8] = s[0] ^ v8;\n        out32[9] = s[1] ^ v9;\n        out32[10] = s[2] ^ v10;\n        out32[11] = s[3] ^ v11;\n        out32[12] = s[4] ^ v12;\n        out32[13] = s[5] ^ v13;\n        out32[14] = s[6] ^ v14;\n        out32[15] = s[7] ^ v15;\n        (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.swap32IfBE)(buffer32);\n        (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.swap32IfBE)(out32);\n        this.posOut = 0;\n    }\n    finish() {\n        if (this.finished)\n            return;\n        this.finished = true;\n        // Padding\n        (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.clean)(this.buffer.subarray(this.pos));\n        // Process last chunk\n        let flags = this.flags | B3_Flags.ROOT;\n        if (this.stack.length) {\n            flags |= B3_Flags.PARENT;\n            (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.swap32IfBE)(this.buffer32);\n            this.compress(this.buffer32, 0, true);\n            (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.swap32IfBE)(this.buffer32);\n            this.chunksDone = 0;\n            this.pos = this.blockLen;\n        }\n        else {\n            flags |= (!this.chunkPos ? B3_Flags.CHUNK_START : 0) | B3_Flags.CHUNK_END;\n        }\n        this.flags = flags;\n        this.b2CompressOut();\n    }\n    writeInto(out) {\n        (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.aexists)(this, false);\n        (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.abytes)(out);\n        this.finish();\n        const { blockLen, bufferOut } = this;\n        for (let pos = 0, len = out.length; pos < len;) {\n            if (this.posOut >= blockLen)\n                this.b2CompressOut();\n            const take = Math.min(blockLen - this.posOut, len - pos);\n            out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);\n            this.posOut += take;\n            pos += take;\n        }\n        return out;\n    }\n    xofInto(out) {\n        if (!this.enableXOF)\n            throw new Error('XOF is not possible after digest call');\n        return this.writeInto(out);\n    }\n    xof(bytes) {\n        (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.anumber)(bytes);\n        return this.xofInto(new Uint8Array(bytes));\n    }\n    digestInto(out) {\n        (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.aoutput)(out, this);\n        if (this.finished)\n            throw new Error('digest() was already called');\n        this.enableXOF = false;\n        this.writeInto(out);\n        this.destroy();\n        return out;\n    }\n    digest() {\n        return this.digestInto(new Uint8Array(this.outputLen));\n    }\n}\n/**\n * BLAKE3 hash function. Can be used as MAC and KDF.\n * @param msg - message that would be hashed\n * @param opts - `dkLen` for output length, `key` for MAC mode, `context` for KDF mode\n * @example\n * const data = new Uint8Array(32);\n * const hash = blake3(data);\n * const mac = blake3(data, { key: new Uint8Array(32) });\n * const kdf = blake3(data, { context: 'application name' });\n */\nconst blake3 = /* @__PURE__ */ (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.createXOFer)((opts) => new BLAKE3(opts));\n//# sourceMappingURL=blake3.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/@noble/hashes/esm/blake3.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/@noble/hashes/esm/pbkdf2.js":
/*!**************************************************!*\
  !*** ./node_modules/@noble/hashes/esm/pbkdf2.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   pbkdf2: () => (/* binding */ pbkdf2),\n/* harmony export */   pbkdf2Async: () => (/* binding */ pbkdf2Async)\n/* harmony export */ });\n/* harmony import */ var _hmac_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./hmac.js */ \"(pages-dir-browser)/./node_modules/@noble/hashes/esm/hmac.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(pages-dir-browser)/./node_modules/@noble/hashes/esm/utils.js\");\n/**\n * PBKDF (RFC 2898). Can be used to create a key from password and salt.\n * @module\n */\n\n// prettier-ignore\n\n// Common prologue and epilogue for sync/async functions\nfunction pbkdf2Init(hash, _password, _salt, _opts) {\n    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.ahash)(hash);\n    const opts = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.checkOpts)({ dkLen: 32, asyncTick: 10 }, _opts);\n    const { c, dkLen, asyncTick } = opts;\n    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.anumber)(c);\n    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.anumber)(dkLen);\n    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.anumber)(asyncTick);\n    if (c < 1)\n        throw new Error('iterations (c) should be >= 1');\n    const password = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.kdfInputToBytes)(_password);\n    const salt = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.kdfInputToBytes)(_salt);\n    // DK = PBKDF2(PRF, Password, Salt, c, dkLen);\n    const DK = new Uint8Array(dkLen);\n    // U1 = PRF(Password, Salt + INT_32_BE(i))\n    const PRF = _hmac_js__WEBPACK_IMPORTED_MODULE_1__.hmac.create(hash, password);\n    const PRFSalt = PRF._cloneInto().update(salt);\n    return { c, dkLen, asyncTick, DK, PRF, PRFSalt };\n}\nfunction pbkdf2Output(PRF, PRFSalt, DK, prfW, u) {\n    PRF.destroy();\n    PRFSalt.destroy();\n    if (prfW)\n        prfW.destroy();\n    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.clean)(u);\n    return DK;\n}\n/**\n * PBKDF2-HMAC: RFC 2898 key derivation function\n * @param hash - hash function that would be used e.g. sha256\n * @param password - password from which a derived key is generated\n * @param salt - cryptographic salt\n * @param opts - {c, dkLen} where c is work factor and dkLen is output message size\n * @example\n * const key = pbkdf2(sha256, 'password', 'salt', { dkLen: 32, c: Math.pow(2, 18) });\n */\nfunction pbkdf2(hash, password, salt, opts) {\n    const { c, dkLen, DK, PRF, PRFSalt } = pbkdf2Init(hash, password, salt, opts);\n    let prfW; // Working copy\n    const arr = new Uint8Array(4);\n    const view = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.createView)(arr);\n    const u = new Uint8Array(PRF.outputLen);\n    // DK = T1 + T2 + ⋯ + Tdklen/hlen\n    for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {\n        // Ti = F(Password, Salt, c, i)\n        const Ti = DK.subarray(pos, pos + PRF.outputLen);\n        view.setInt32(0, ti, false);\n        // F(Password, Salt, c, i) = U1 ^ U2 ^ ⋯ ^ Uc\n        // U1 = PRF(Password, Salt + INT_32_BE(i))\n        (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);\n        Ti.set(u.subarray(0, Ti.length));\n        for (let ui = 1; ui < c; ui++) {\n            // Uc = PRF(Password, Uc−1)\n            PRF._cloneInto(prfW).update(u).digestInto(u);\n            for (let i = 0; i < Ti.length; i++)\n                Ti[i] ^= u[i];\n        }\n    }\n    return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);\n}\n/**\n * PBKDF2-HMAC: RFC 2898 key derivation function. Async version.\n * @example\n * await pbkdf2Async(sha256, 'password', 'salt', { dkLen: 32, c: 500_000 });\n */\nasync function pbkdf2Async(hash, password, salt, opts) {\n    const { c, dkLen, asyncTick, DK, PRF, PRFSalt } = pbkdf2Init(hash, password, salt, opts);\n    let prfW; // Working copy\n    const arr = new Uint8Array(4);\n    const view = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.createView)(arr);\n    const u = new Uint8Array(PRF.outputLen);\n    // DK = T1 + T2 + ⋯ + Tdklen/hlen\n    for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {\n        // Ti = F(Password, Salt, c, i)\n        const Ti = DK.subarray(pos, pos + PRF.outputLen);\n        view.setInt32(0, ti, false);\n        // F(Password, Salt, c, i) = U1 ^ U2 ^ ⋯ ^ Uc\n        // U1 = PRF(Password, Salt + INT_32_BE(i))\n        (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);\n        Ti.set(u.subarray(0, Ti.length));\n        await (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.asyncLoop)(c - 1, asyncTick, () => {\n            // Uc = PRF(Password, Uc−1)\n            PRF._cloneInto(prfW).update(u).digestInto(u);\n            for (let i = 0; i < Ti.length; i++)\n                Ti[i] ^= u[i];\n        });\n    }\n    return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);\n}\n//# sourceMappingURL=pbkdf2.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Abm9ibGUvaGFzaGVzL2VzbS9wYmtkZjIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ2lDO0FBQ2pDO0FBQzRHO0FBQzVHO0FBQ0E7QUFDQSxJQUFJLGdEQUFLO0FBQ1QsaUJBQWlCLG9EQUFTLEdBQUcsMEJBQTBCO0FBQ3ZELFlBQVksc0JBQXNCO0FBQ2xDLElBQUksa0RBQU87QUFDWCxJQUFJLGtEQUFPO0FBQ1gsSUFBSSxrREFBTztBQUNYO0FBQ0E7QUFDQSxxQkFBcUIsMERBQWU7QUFDcEMsaUJBQWlCLDBEQUFlO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQiwwQ0FBSTtBQUNwQjtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLGdEQUFLO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsVUFBVTtBQUM1QjtBQUNBLG9EQUFvRCwrQkFBK0I7QUFDbkY7QUFDTztBQUNQLFlBQVksNkJBQTZCO0FBQ3pDLGNBQWM7QUFDZDtBQUNBLGlCQUFpQixxREFBVTtBQUMzQjtBQUNBO0FBQ0EsOEJBQThCLGFBQWE7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsUUFBUTtBQUNqQztBQUNBO0FBQ0EsNEJBQTRCLGVBQWU7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1EQUFtRCx1QkFBdUI7QUFDMUU7QUFDTztBQUNQLFlBQVksd0NBQXdDO0FBQ3BELGNBQWM7QUFDZDtBQUNBLGlCQUFpQixxREFBVTtBQUMzQjtBQUNBO0FBQ0EsOEJBQThCLGFBQWE7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLG9EQUFTO0FBQ3ZCO0FBQ0E7QUFDQSw0QkFBNEIsZUFBZTtBQUMzQztBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxjaGFuZFxcRG93bmxvYWRzXFxqb2hud3JpY2hraWRpbnRvcml6elxcbm9kZV9tb2R1bGVzXFxAbm9ibGVcXGhhc2hlc1xcZXNtXFxwYmtkZjIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBQQktERiAoUkZDIDI4OTgpLiBDYW4gYmUgdXNlZCB0byBjcmVhdGUgYSBrZXkgZnJvbSBwYXNzd29yZCBhbmQgc2FsdC5cbiAqIEBtb2R1bGVcbiAqL1xuaW1wb3J0IHsgaG1hYyB9IGZyb20gXCIuL2htYWMuanNcIjtcbi8vIHByZXR0aWVyLWlnbm9yZVxuaW1wb3J0IHsgYWhhc2gsIGFudW1iZXIsIGFzeW5jTG9vcCwgY2hlY2tPcHRzLCBjbGVhbiwgY3JlYXRlVmlldywgSGFzaCwga2RmSW5wdXRUb0J5dGVzIH0gZnJvbSBcIi4vdXRpbHMuanNcIjtcbi8vIENvbW1vbiBwcm9sb2d1ZSBhbmQgZXBpbG9ndWUgZm9yIHN5bmMvYXN5bmMgZnVuY3Rpb25zXG5mdW5jdGlvbiBwYmtkZjJJbml0KGhhc2gsIF9wYXNzd29yZCwgX3NhbHQsIF9vcHRzKSB7XG4gICAgYWhhc2goaGFzaCk7XG4gICAgY29uc3Qgb3B0cyA9IGNoZWNrT3B0cyh7IGRrTGVuOiAzMiwgYXN5bmNUaWNrOiAxMCB9LCBfb3B0cyk7XG4gICAgY29uc3QgeyBjLCBka0xlbiwgYXN5bmNUaWNrIH0gPSBvcHRzO1xuICAgIGFudW1iZXIoYyk7XG4gICAgYW51bWJlcihka0xlbik7XG4gICAgYW51bWJlcihhc3luY1RpY2spO1xuICAgIGlmIChjIDwgMSlcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpdGVyYXRpb25zIChjKSBzaG91bGQgYmUgPj0gMScpO1xuICAgIGNvbnN0IHBhc3N3b3JkID0ga2RmSW5wdXRUb0J5dGVzKF9wYXNzd29yZCk7XG4gICAgY29uc3Qgc2FsdCA9IGtkZklucHV0VG9CeXRlcyhfc2FsdCk7XG4gICAgLy8gREsgPSBQQktERjIoUFJGLCBQYXNzd29yZCwgU2FsdCwgYywgZGtMZW4pO1xuICAgIGNvbnN0IERLID0gbmV3IFVpbnQ4QXJyYXkoZGtMZW4pO1xuICAgIC8vIFUxID0gUFJGKFBhc3N3b3JkLCBTYWx0ICsgSU5UXzMyX0JFKGkpKVxuICAgIGNvbnN0IFBSRiA9IGhtYWMuY3JlYXRlKGhhc2gsIHBhc3N3b3JkKTtcbiAgICBjb25zdCBQUkZTYWx0ID0gUFJGLl9jbG9uZUludG8oKS51cGRhdGUoc2FsdCk7XG4gICAgcmV0dXJuIHsgYywgZGtMZW4sIGFzeW5jVGljaywgREssIFBSRiwgUFJGU2FsdCB9O1xufVxuZnVuY3Rpb24gcGJrZGYyT3V0cHV0KFBSRiwgUFJGU2FsdCwgREssIHByZlcsIHUpIHtcbiAgICBQUkYuZGVzdHJveSgpO1xuICAgIFBSRlNhbHQuZGVzdHJveSgpO1xuICAgIGlmIChwcmZXKVxuICAgICAgICBwcmZXLmRlc3Ryb3koKTtcbiAgICBjbGVhbih1KTtcbiAgICByZXR1cm4gREs7XG59XG4vKipcbiAqIFBCS0RGMi1ITUFDOiBSRkMgMjg5OCBrZXkgZGVyaXZhdGlvbiBmdW5jdGlvblxuICogQHBhcmFtIGhhc2ggLSBoYXNoIGZ1bmN0aW9uIHRoYXQgd291bGQgYmUgdXNlZCBlLmcuIHNoYTI1NlxuICogQHBhcmFtIHBhc3N3b3JkIC0gcGFzc3dvcmQgZnJvbSB3aGljaCBhIGRlcml2ZWQga2V5IGlzIGdlbmVyYXRlZFxuICogQHBhcmFtIHNhbHQgLSBjcnlwdG9ncmFwaGljIHNhbHRcbiAqIEBwYXJhbSBvcHRzIC0ge2MsIGRrTGVufSB3aGVyZSBjIGlzIHdvcmsgZmFjdG9yIGFuZCBka0xlbiBpcyBvdXRwdXQgbWVzc2FnZSBzaXplXG4gKiBAZXhhbXBsZVxuICogY29uc3Qga2V5ID0gcGJrZGYyKHNoYTI1NiwgJ3Bhc3N3b3JkJywgJ3NhbHQnLCB7IGRrTGVuOiAzMiwgYzogTWF0aC5wb3coMiwgMTgpIH0pO1xuICovXG5leHBvcnQgZnVuY3Rpb24gcGJrZGYyKGhhc2gsIHBhc3N3b3JkLCBzYWx0LCBvcHRzKSB7XG4gICAgY29uc3QgeyBjLCBka0xlbiwgREssIFBSRiwgUFJGU2FsdCB9ID0gcGJrZGYySW5pdChoYXNoLCBwYXNzd29yZCwgc2FsdCwgb3B0cyk7XG4gICAgbGV0IHByZlc7IC8vIFdvcmtpbmcgY29weVxuICAgIGNvbnN0IGFyciA9IG5ldyBVaW50OEFycmF5KDQpO1xuICAgIGNvbnN0IHZpZXcgPSBjcmVhdGVWaWV3KGFycik7XG4gICAgY29uc3QgdSA9IG5ldyBVaW50OEFycmF5KFBSRi5vdXRwdXRMZW4pO1xuICAgIC8vIERLID0gVDEgKyBUMiArIOKLryArIFRka2xlbi9obGVuXG4gICAgZm9yIChsZXQgdGkgPSAxLCBwb3MgPSAwOyBwb3MgPCBka0xlbjsgdGkrKywgcG9zICs9IFBSRi5vdXRwdXRMZW4pIHtcbiAgICAgICAgLy8gVGkgPSBGKFBhc3N3b3JkLCBTYWx0LCBjLCBpKVxuICAgICAgICBjb25zdCBUaSA9IERLLnN1YmFycmF5KHBvcywgcG9zICsgUFJGLm91dHB1dExlbik7XG4gICAgICAgIHZpZXcuc2V0SW50MzIoMCwgdGksIGZhbHNlKTtcbiAgICAgICAgLy8gRihQYXNzd29yZCwgU2FsdCwgYywgaSkgPSBVMSBeIFUyIF4g4ouvIF4gVWNcbiAgICAgICAgLy8gVTEgPSBQUkYoUGFzc3dvcmQsIFNhbHQgKyBJTlRfMzJfQkUoaSkpXG4gICAgICAgIChwcmZXID0gUFJGU2FsdC5fY2xvbmVJbnRvKHByZlcpKS51cGRhdGUoYXJyKS5kaWdlc3RJbnRvKHUpO1xuICAgICAgICBUaS5zZXQodS5zdWJhcnJheSgwLCBUaS5sZW5ndGgpKTtcbiAgICAgICAgZm9yIChsZXQgdWkgPSAxOyB1aSA8IGM7IHVpKyspIHtcbiAgICAgICAgICAgIC8vIFVjID0gUFJGKFBhc3N3b3JkLCBVY+KIkjEpXG4gICAgICAgICAgICBQUkYuX2Nsb25lSW50byhwcmZXKS51cGRhdGUodSkuZGlnZXN0SW50byh1KTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgVGkubGVuZ3RoOyBpKyspXG4gICAgICAgICAgICAgICAgVGlbaV0gXj0gdVtpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcGJrZGYyT3V0cHV0KFBSRiwgUFJGU2FsdCwgREssIHByZlcsIHUpO1xufVxuLyoqXG4gKiBQQktERjItSE1BQzogUkZDIDI4OTgga2V5IGRlcml2YXRpb24gZnVuY3Rpb24uIEFzeW5jIHZlcnNpb24uXG4gKiBAZXhhbXBsZVxuICogYXdhaXQgcGJrZGYyQXN5bmMoc2hhMjU2LCAncGFzc3dvcmQnLCAnc2FsdCcsIHsgZGtMZW46IDMyLCBjOiA1MDBfMDAwIH0pO1xuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcGJrZGYyQXN5bmMoaGFzaCwgcGFzc3dvcmQsIHNhbHQsIG9wdHMpIHtcbiAgICBjb25zdCB7IGMsIGRrTGVuLCBhc3luY1RpY2ssIERLLCBQUkYsIFBSRlNhbHQgfSA9IHBia2RmMkluaXQoaGFzaCwgcGFzc3dvcmQsIHNhbHQsIG9wdHMpO1xuICAgIGxldCBwcmZXOyAvLyBXb3JraW5nIGNvcHlcbiAgICBjb25zdCBhcnIgPSBuZXcgVWludDhBcnJheSg0KTtcbiAgICBjb25zdCB2aWV3ID0gY3JlYXRlVmlldyhhcnIpO1xuICAgIGNvbnN0IHUgPSBuZXcgVWludDhBcnJheShQUkYub3V0cHV0TGVuKTtcbiAgICAvLyBESyA9IFQxICsgVDIgKyDii68gKyBUZGtsZW4vaGxlblxuICAgIGZvciAobGV0IHRpID0gMSwgcG9zID0gMDsgcG9zIDwgZGtMZW47IHRpKyssIHBvcyArPSBQUkYub3V0cHV0TGVuKSB7XG4gICAgICAgIC8vIFRpID0gRihQYXNzd29yZCwgU2FsdCwgYywgaSlcbiAgICAgICAgY29uc3QgVGkgPSBESy5zdWJhcnJheShwb3MsIHBvcyArIFBSRi5vdXRwdXRMZW4pO1xuICAgICAgICB2aWV3LnNldEludDMyKDAsIHRpLCBmYWxzZSk7XG4gICAgICAgIC8vIEYoUGFzc3dvcmQsIFNhbHQsIGMsIGkpID0gVTEgXiBVMiBeIOKLryBeIFVjXG4gICAgICAgIC8vIFUxID0gUFJGKFBhc3N3b3JkLCBTYWx0ICsgSU5UXzMyX0JFKGkpKVxuICAgICAgICAocHJmVyA9IFBSRlNhbHQuX2Nsb25lSW50byhwcmZXKSkudXBkYXRlKGFycikuZGlnZXN0SW50byh1KTtcbiAgICAgICAgVGkuc2V0KHUuc3ViYXJyYXkoMCwgVGkubGVuZ3RoKSk7XG4gICAgICAgIGF3YWl0IGFzeW5jTG9vcChjIC0gMSwgYXN5bmNUaWNrLCAoKSA9PiB7XG4gICAgICAgICAgICAvLyBVYyA9IFBSRihQYXNzd29yZCwgVWPiiJIxKVxuICAgICAgICAgICAgUFJGLl9jbG9uZUludG8ocHJmVykudXBkYXRlKHUpLmRpZ2VzdEludG8odSk7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IFRpLmxlbmd0aDsgaSsrKVxuICAgICAgICAgICAgICAgIFRpW2ldIF49IHVbaV07XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gcGJrZGYyT3V0cHV0KFBSRiwgUFJGU2FsdCwgREssIHByZlcsIHUpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGJrZGYyLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/@noble/hashes/esm/pbkdf2.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/@noble/hashes/esm/scrypt.js":
/*!**************************************************!*\
  !*** ./node_modules/@noble/hashes/esm/scrypt.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   scrypt: () => (/* binding */ scrypt),\n/* harmony export */   scryptAsync: () => (/* binding */ scryptAsync)\n/* harmony export */ });\n/* harmony import */ var _pbkdf2_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./pbkdf2.js */ \"(pages-dir-browser)/./node_modules/@noble/hashes/esm/pbkdf2.js\");\n/* harmony import */ var _sha2_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./sha2.js */ \"(pages-dir-browser)/./node_modules/@noble/hashes/esm/sha2.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(pages-dir-browser)/./node_modules/@noble/hashes/esm/utils.js\");\n/**\n * RFC 7914 Scrypt KDF. Can be used to create a key from password and salt.\n * @module\n */\n\n\n// prettier-ignore\n\n// The main Scrypt loop: uses Salsa extensively.\n// Six versions of the function were tried, this is the fastest one.\n// prettier-ignore\nfunction XorAndSalsa(prev, pi, input, ii, out, oi) {\n    // Based on https://cr.yp.to/salsa20.html\n    // Xor blocks\n    let y00 = prev[pi++] ^ input[ii++], y01 = prev[pi++] ^ input[ii++];\n    let y02 = prev[pi++] ^ input[ii++], y03 = prev[pi++] ^ input[ii++];\n    let y04 = prev[pi++] ^ input[ii++], y05 = prev[pi++] ^ input[ii++];\n    let y06 = prev[pi++] ^ input[ii++], y07 = prev[pi++] ^ input[ii++];\n    let y08 = prev[pi++] ^ input[ii++], y09 = prev[pi++] ^ input[ii++];\n    let y10 = prev[pi++] ^ input[ii++], y11 = prev[pi++] ^ input[ii++];\n    let y12 = prev[pi++] ^ input[ii++], y13 = prev[pi++] ^ input[ii++];\n    let y14 = prev[pi++] ^ input[ii++], y15 = prev[pi++] ^ input[ii++];\n    // Save state to temporary variables (salsa)\n    let x00 = y00, x01 = y01, x02 = y02, x03 = y03, x04 = y04, x05 = y05, x06 = y06, x07 = y07, x08 = y08, x09 = y09, x10 = y10, x11 = y11, x12 = y12, x13 = y13, x14 = y14, x15 = y15;\n    // Main loop (salsa)\n    for (let i = 0; i < 8; i += 2) {\n        x04 ^= (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.rotl)(x00 + x12 | 0, 7);\n        x08 ^= (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.rotl)(x04 + x00 | 0, 9);\n        x12 ^= (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.rotl)(x08 + x04 | 0, 13);\n        x00 ^= (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.rotl)(x12 + x08 | 0, 18);\n        x09 ^= (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.rotl)(x05 + x01 | 0, 7);\n        x13 ^= (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.rotl)(x09 + x05 | 0, 9);\n        x01 ^= (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.rotl)(x13 + x09 | 0, 13);\n        x05 ^= (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.rotl)(x01 + x13 | 0, 18);\n        x14 ^= (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.rotl)(x10 + x06 | 0, 7);\n        x02 ^= (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.rotl)(x14 + x10 | 0, 9);\n        x06 ^= (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.rotl)(x02 + x14 | 0, 13);\n        x10 ^= (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.rotl)(x06 + x02 | 0, 18);\n        x03 ^= (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.rotl)(x15 + x11 | 0, 7);\n        x07 ^= (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.rotl)(x03 + x15 | 0, 9);\n        x11 ^= (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.rotl)(x07 + x03 | 0, 13);\n        x15 ^= (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.rotl)(x11 + x07 | 0, 18);\n        x01 ^= (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.rotl)(x00 + x03 | 0, 7);\n        x02 ^= (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.rotl)(x01 + x00 | 0, 9);\n        x03 ^= (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.rotl)(x02 + x01 | 0, 13);\n        x00 ^= (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.rotl)(x03 + x02 | 0, 18);\n        x06 ^= (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.rotl)(x05 + x04 | 0, 7);\n        x07 ^= (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.rotl)(x06 + x05 | 0, 9);\n        x04 ^= (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.rotl)(x07 + x06 | 0, 13);\n        x05 ^= (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.rotl)(x04 + x07 | 0, 18);\n        x11 ^= (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.rotl)(x10 + x09 | 0, 7);\n        x08 ^= (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.rotl)(x11 + x10 | 0, 9);\n        x09 ^= (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.rotl)(x08 + x11 | 0, 13);\n        x10 ^= (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.rotl)(x09 + x08 | 0, 18);\n        x12 ^= (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.rotl)(x15 + x14 | 0, 7);\n        x13 ^= (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.rotl)(x12 + x15 | 0, 9);\n        x14 ^= (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.rotl)(x13 + x12 | 0, 13);\n        x15 ^= (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.rotl)(x14 + x13 | 0, 18);\n    }\n    // Write output (salsa)\n    out[oi++] = (y00 + x00) | 0;\n    out[oi++] = (y01 + x01) | 0;\n    out[oi++] = (y02 + x02) | 0;\n    out[oi++] = (y03 + x03) | 0;\n    out[oi++] = (y04 + x04) | 0;\n    out[oi++] = (y05 + x05) | 0;\n    out[oi++] = (y06 + x06) | 0;\n    out[oi++] = (y07 + x07) | 0;\n    out[oi++] = (y08 + x08) | 0;\n    out[oi++] = (y09 + x09) | 0;\n    out[oi++] = (y10 + x10) | 0;\n    out[oi++] = (y11 + x11) | 0;\n    out[oi++] = (y12 + x12) | 0;\n    out[oi++] = (y13 + x13) | 0;\n    out[oi++] = (y14 + x14) | 0;\n    out[oi++] = (y15 + x15) | 0;\n}\nfunction BlockMix(input, ii, out, oi, r) {\n    // The block B is r 128-byte chunks (which is equivalent of 2r 64-byte chunks)\n    let head = oi + 0;\n    let tail = oi + 16 * r;\n    for (let i = 0; i < 16; i++)\n        out[tail + i] = input[ii + (2 * r - 1) * 16 + i]; // X ← B[2r−1]\n    for (let i = 0; i < r; i++, head += 16, ii += 16) {\n        // We write odd & even Yi at same time. Even: 0bXXXXX0 Odd:  0bXXXXX1\n        XorAndSalsa(out, tail, input, ii, out, head); // head[i] = Salsa(blockIn[2*i] ^ tail[i-1])\n        if (i > 0)\n            tail += 16; // First iteration overwrites tmp value in tail\n        XorAndSalsa(out, head, input, (ii += 16), out, tail); // tail[i] = Salsa(blockIn[2*i+1] ^ head[i])\n    }\n}\n// Common prologue and epilogue for sync/async functions\nfunction scryptInit(password, salt, _opts) {\n    // Maxmem - 1GB+1KB by default\n    const opts = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.checkOpts)({\n        dkLen: 32,\n        asyncTick: 10,\n        maxmem: 1024 ** 3 + 1024,\n    }, _opts);\n    const { N, r, p, dkLen, asyncTick, maxmem, onProgress } = opts;\n    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.anumber)(N);\n    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.anumber)(r);\n    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.anumber)(p);\n    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.anumber)(dkLen);\n    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.anumber)(asyncTick);\n    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.anumber)(maxmem);\n    if (onProgress !== undefined && typeof onProgress !== 'function')\n        throw new Error('progressCb should be function');\n    const blockSize = 128 * r;\n    const blockSize32 = blockSize / 4;\n    // Max N is 2^32 (Integrify is 32-bit). Real limit is 2^22: JS engines Uint8Array limit is 4GB in 2024.\n    // Spec check `N >= 2^(blockSize / 8)` is not done for compat with popular libs,\n    // which used incorrect r: 1, p: 8. Also, the check seems to be a spec error:\n    // https://www.rfc-editor.org/errata_search.php?rfc=7914\n    const pow32 = Math.pow(2, 32);\n    if (N <= 1 || (N & (N - 1)) !== 0 || N > pow32) {\n        throw new Error('Scrypt: N must be larger than 1, a power of 2, and less than 2^32');\n    }\n    if (p < 0 || p > ((pow32 - 1) * 32) / blockSize) {\n        throw new Error('Scrypt: p must be a positive integer less than or equal to ((2^32 - 1) * 32) / (128 * r)');\n    }\n    if (dkLen < 0 || dkLen > (pow32 - 1) * 32) {\n        throw new Error('Scrypt: dkLen should be positive integer less than or equal to (2^32 - 1) * 32');\n    }\n    const memUsed = blockSize * (N + p);\n    if (memUsed > maxmem) {\n        throw new Error('Scrypt: memused is bigger than maxMem. Expected 128 * r * (N + p) > maxmem of ' + maxmem);\n    }\n    // [B0...Bp−1] ← PBKDF2HMAC-SHA256(Passphrase, Salt, 1, blockSize*ParallelizationFactor)\n    // Since it has only one iteration there is no reason to use async variant\n    const B = (0,_pbkdf2_js__WEBPACK_IMPORTED_MODULE_1__.pbkdf2)(_sha2_js__WEBPACK_IMPORTED_MODULE_2__.sha256, password, salt, { c: 1, dkLen: blockSize * p });\n    const B32 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.u32)(B);\n    // Re-used between parallel iterations. Array(iterations) of B\n    const V = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.u32)(new Uint8Array(blockSize * N));\n    const tmp = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.u32)(new Uint8Array(blockSize));\n    let blockMixCb = () => { };\n    if (onProgress) {\n        const totalBlockMix = 2 * N * p;\n        // Invoke callback if progress changes from 10.01 to 10.02\n        // Allows to draw smooth progress bar on up to 8K screen\n        const callbackPer = Math.max(Math.floor(totalBlockMix / 10000), 1);\n        let blockMixCnt = 0;\n        blockMixCb = () => {\n            blockMixCnt++;\n            if (onProgress && (!(blockMixCnt % callbackPer) || blockMixCnt === totalBlockMix))\n                onProgress(blockMixCnt / totalBlockMix);\n        };\n    }\n    return { N, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb, asyncTick };\n}\nfunction scryptOutput(password, dkLen, B, V, tmp) {\n    const res = (0,_pbkdf2_js__WEBPACK_IMPORTED_MODULE_1__.pbkdf2)(_sha2_js__WEBPACK_IMPORTED_MODULE_2__.sha256, password, B, { c: 1, dkLen });\n    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.clean)(B, V, tmp);\n    return res;\n}\n/**\n * Scrypt KDF from RFC 7914.\n * @param password - pass\n * @param salt - salt\n * @param opts - parameters\n * - `N` is cpu/mem work factor (power of 2 e.g. 2**18)\n * - `r` is block size (8 is common), fine-tunes sequential memory read size and performance\n * - `p` is parallelization factor (1 is common)\n * - `dkLen` is output key length in bytes e.g. 32.\n * - `asyncTick` - (default: 10) max time in ms for which async function can block execution\n * - `maxmem` - (default: `1024 ** 3 + 1024` aka 1GB+1KB). A limit that the app could use for scrypt\n * - `onProgress` - callback function that would be executed for progress report\n * @returns Derived key\n * @example\n * scrypt('password', 'salt', { N: 2**18, r: 8, p: 1, dkLen: 32 });\n */\nfunction scrypt(password, salt, opts) {\n    const { N, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb } = scryptInit(password, salt, opts);\n    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.swap32IfBE)(B32);\n    for (let pi = 0; pi < p; pi++) {\n        const Pi = blockSize32 * pi;\n        for (let i = 0; i < blockSize32; i++)\n            V[i] = B32[Pi + i]; // V[0] = B[i]\n        for (let i = 0, pos = 0; i < N - 1; i++) {\n            BlockMix(V, pos, V, (pos += blockSize32), r); // V[i] = BlockMix(V[i-1]);\n            blockMixCb();\n        }\n        BlockMix(V, (N - 1) * blockSize32, B32, Pi, r); // Process last element\n        blockMixCb();\n        for (let i = 0; i < N; i++) {\n            // First u32 of the last 64-byte block (u32 is LE)\n            const j = B32[Pi + blockSize32 - 16] % N; // j = Integrify(X) % iterations\n            for (let k = 0; k < blockSize32; k++)\n                tmp[k] = B32[Pi + k] ^ V[j * blockSize32 + k]; // tmp = B ^ V[j]\n            BlockMix(tmp, 0, B32, Pi, r); // B = BlockMix(B ^ V[j])\n            blockMixCb();\n        }\n    }\n    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.swap32IfBE)(B32);\n    return scryptOutput(password, dkLen, B, V, tmp);\n}\n/**\n * Scrypt KDF from RFC 7914. Async version.\n * @example\n * await scryptAsync('password', 'salt', { N: 2**18, r: 8, p: 1, dkLen: 32 });\n */\nasync function scryptAsync(password, salt, opts) {\n    const { N, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb, asyncTick } = scryptInit(password, salt, opts);\n    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.swap32IfBE)(B32);\n    for (let pi = 0; pi < p; pi++) {\n        const Pi = blockSize32 * pi;\n        for (let i = 0; i < blockSize32; i++)\n            V[i] = B32[Pi + i]; // V[0] = B[i]\n        let pos = 0;\n        await (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.asyncLoop)(N - 1, asyncTick, () => {\n            BlockMix(V, pos, V, (pos += blockSize32), r); // V[i] = BlockMix(V[i-1]);\n            blockMixCb();\n        });\n        BlockMix(V, (N - 1) * blockSize32, B32, Pi, r); // Process last element\n        blockMixCb();\n        await (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.asyncLoop)(N, asyncTick, () => {\n            // First u32 of the last 64-byte block (u32 is LE)\n            const j = B32[Pi + blockSize32 - 16] % N; // j = Integrify(X) % iterations\n            for (let k = 0; k < blockSize32; k++)\n                tmp[k] = B32[Pi + k] ^ V[j * blockSize32 + k]; // tmp = B ^ V[j]\n            BlockMix(tmp, 0, B32, Pi, r); // B = BlockMix(B ^ V[j])\n            blockMixCb();\n        });\n    }\n    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.swap32IfBE)(B32);\n    return scryptOutput(password, dkLen, B, V, tmp);\n}\n//# sourceMappingURL=scrypt.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/@noble/hashes/esm/scrypt.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ox/_esm/core/Abi.js":
/*!******************************************!*\
  !*** ./node_modules/ox/_esm/core/Abi.js ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   format: () => (/* binding */ format),\n/* harmony export */   from: () => (/* binding */ from)\n/* harmony export */ });\n/* harmony import */ var abitype__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! abitype */ \"(pages-dir-browser)/./node_modules/abitype/dist/esm/exports/index.js\");\n/* harmony import */ var _internal_abi_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internal/abi.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/internal/abi.js\");\n\n\n/** @internal */\nfunction format(abi) {\n    return abitype__WEBPACK_IMPORTED_MODULE_0__.formatAbi(abi);\n}\n/** @internal */\nfunction from(abi) {\n    if (_internal_abi_js__WEBPACK_IMPORTED_MODULE_1__.isSignatures(abi))\n        return abitype__WEBPACK_IMPORTED_MODULE_0__.parseAbi(abi);\n    return abi;\n}\n//# sourceMappingURL=Abi.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9veC9fZXNtL2NvcmUvQWJpLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBbUM7QUFDVztBQUM5QztBQUNPO0FBQ1AsV0FBVyw4Q0FBaUI7QUFDNUI7QUFDQTtBQUNPO0FBQ1AsUUFBUSwwREFBcUI7QUFDN0IsZUFBZSw2Q0FBZ0I7QUFDL0I7QUFDQTtBQUNBIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGNoYW5kXFxEb3dubG9hZHNcXGpvaG53cmljaGtpZGludG9yaXp6XFxub2RlX21vZHVsZXNcXG94XFxfZXNtXFxjb3JlXFxBYmkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgYWJpdHlwZSBmcm9tICdhYml0eXBlJztcbmltcG9ydCAqIGFzIGludGVybmFsIGZyb20gJy4vaW50ZXJuYWwvYWJpLmpzJztcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXQoYWJpKSB7XG4gICAgcmV0dXJuIGFiaXR5cGUuZm9ybWF0QWJpKGFiaSk7XG59XG4vKiogQGludGVybmFsICovXG5leHBvcnQgZnVuY3Rpb24gZnJvbShhYmkpIHtcbiAgICBpZiAoaW50ZXJuYWwuaXNTaWduYXR1cmVzKGFiaSkpXG4gICAgICAgIHJldHVybiBhYml0eXBlLnBhcnNlQWJpKGFiaSk7XG4gICAgcmV0dXJuIGFiaTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUFiaS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ox/_esm/core/Abi.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ox/_esm/core/AbiError.js":
/*!***********************************************!*\
  !*** ./node_modules/ox/_esm/core/AbiError.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decode: () => (/* binding */ decode),\n/* harmony export */   encode: () => (/* binding */ encode),\n/* harmony export */   format: () => (/* binding */ format),\n/* harmony export */   from: () => (/* binding */ from),\n/* harmony export */   fromAbi: () => (/* binding */ fromAbi),\n/* harmony export */   getSelector: () => (/* binding */ getSelector),\n/* harmony export */   panicReasons: () => (/* binding */ panicReasons),\n/* harmony export */   solidityError: () => (/* binding */ solidityError),\n/* harmony export */   solidityErrorSelector: () => (/* binding */ solidityErrorSelector),\n/* harmony export */   solidityPanic: () => (/* binding */ solidityPanic),\n/* harmony export */   solidityPanicSelector: () => (/* binding */ solidityPanicSelector)\n/* harmony export */ });\n/* harmony import */ var abitype__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! abitype */ \"(pages-dir-browser)/./node_modules/abitype/dist/esm/exports/index.js\");\n/* harmony import */ var _AbiItem_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./AbiItem.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/AbiItem.js\");\n/* harmony import */ var _AbiParameters_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./AbiParameters.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/AbiParameters.js\");\n/* harmony import */ var _Hex_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Hex.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Hex.js\");\n\n\n\n\n/** @internal */\nfunction decode(abiError, data, options = {}) {\n    if (_Hex_js__WEBPACK_IMPORTED_MODULE_0__.size(data) < 4)\n        throw new _AbiItem_js__WEBPACK_IMPORTED_MODULE_1__.InvalidSelectorSizeError({ data });\n    if (abiError.inputs.length === 0)\n        return undefined;\n    const values = _AbiParameters_js__WEBPACK_IMPORTED_MODULE_2__.decode(abiError.inputs, _Hex_js__WEBPACK_IMPORTED_MODULE_0__.slice(data, 4), options);\n    if (values && Object.keys(values).length === 1) {\n        if (Array.isArray(values))\n            return values[0];\n        return Object.values(values)[0];\n    }\n    return values;\n}\n/**\n * ABI-encodes the provided error input (`inputs`), prefixed with the 4 byte error selector.\n *\n * @example\n * ```ts twoslash\n * import { AbiError } from 'ox'\n *\n * const error = AbiError.from(\n *   'error InvalidSignature(uint r, uint s, uint8 yParity)'\n * )\n *\n * const data = AbiError.encode( // [!code focus]\n *   error, // [!code focus]\n *   [1n, 2n, 0] // [!code focus]\n * ) // [!code focus]\n * // @log: '0x095ea7b3000000000000000000000000d8da6bf26964af9d7eed9e03e53415d37aa960450000000000000000000000000000000000000000000000000000000000010f2c'\n * ```\n *\n * @example\n * You can extract an ABI Error from a JSON ABI with {@link ox#AbiError.(fromAbi:function)}:\n *\n * ```ts twoslash\n * // @noErrors\n * import { Abi, AbiError } from 'ox'\n *\n * const abi = Abi.from([ // [!code hl]\n *   // ... // [!code hl]\n *   { // [!code hl]\n *     name: 'InvalidSignature', // [!code hl]\n *     type: 'error', // [!code hl]\n *     inputs: [ // [!code hl]\n *       { name: 'r', type: 'uint256' }, // [!code hl]\n *       { name: 's', type: 'uint256' }, // [!code hl]\n *       { name: 'yParity', type: 'uint8' }, // [!code hl]\n *     ], // [!code hl]\n *   }, // [!code hl]\n *   // ... // [!code hl]\n * ]) // [!code hl]\n * const error = AbiError.fromAbi(abi, 'InvalidSignature') // [!code hl]\n *\n * const data = AbiError.encode(\n *   error,\n *   ['0xd8da6bf26964af9d7eed9e03e53415d37aa96045', 69420n]\n * )\n * // @log: '0x095ea7b3000000000000000000000000d8da6bf26964af9d7eed9e03e53415d37aa960450000000000000000000000000000000000000000000000000000000000010f2c'\n * ```\n *\n * @param abiError - ABI Error to encode\n * @param args - Error arguments\n * @returns ABI-encoded error name and arguments\n */\nfunction encode(abiError, ...args) {\n    const selector = getSelector(abiError);\n    const data = args.length > 0\n        ? _AbiParameters_js__WEBPACK_IMPORTED_MODULE_2__.encode(abiError.inputs, args[0])\n        : undefined;\n    return data ? _Hex_js__WEBPACK_IMPORTED_MODULE_0__.concat(selector, data) : selector;\n}\n/**\n * Formats an {@link ox#AbiError.AbiError} into a **Human Readable ABI Error**.\n *\n * @example\n * ```ts twoslash\n * import { AbiError } from 'ox'\n *\n * const formatted = AbiError.format({\n *   type: 'error',\n *   name: 'Example',\n *   inputs: [\n *     {\n *       name: 'spender',\n *       type: 'address',\n *     },\n *     {\n *       name: 'amount',\n *       type: 'uint256',\n *     },\n *   ],\n * })\n *\n * formatted\n * //    ^?\n *\n *\n * ```\n *\n * @param abiError - The ABI Error to format.\n * @returns The formatted ABI Error.\n */\nfunction format(abiError) {\n    return abitype__WEBPACK_IMPORTED_MODULE_3__.formatAbiItem(abiError);\n}\n/**\n * Parses an arbitrary **JSON ABI Error** or **Human Readable ABI Error** into a typed {@link ox#AbiError.AbiError}.\n *\n * @example\n * ### JSON ABIs\n *\n * ```ts twoslash\n * import { AbiError } from 'ox'\n *\n * const badSignatureVError = AbiError.from({\n *   inputs: [{ name: 'v', type: 'uint8' }],\n *   name: 'BadSignatureV',\n *   type: 'error',\n * })\n *\n * badSignatureVError\n * //^?\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n * ```\n *\n * @example\n * ### Human Readable ABIs\n *\n * A Human Readable ABI can be parsed into a typed ABI object:\n *\n * ```ts twoslash\n * import { AbiError } from 'ox'\n *\n * const badSignatureVError = AbiError.from(\n *   'error BadSignatureV(uint8 v)' // [!code hl]\n * )\n *\n * badSignatureVError\n * //^?\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n * ```\n *\n * @example\n * It is possible to specify `struct`s along with your definitions:\n *\n * ```ts twoslash\n * import { AbiError } from 'ox'\n *\n * const badSignatureVError = AbiError.from([\n *   'struct Signature { uint8 v; }', // [!code hl]\n *   'error BadSignatureV(Signature signature)',\n * ])\n *\n * badSignatureVError\n * //^?\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n * ```\n *\n *\n *\n * @param abiError - The ABI Error to parse.\n * @returns Typed ABI Error.\n */\nfunction from(abiError, options = {}) {\n    return _AbiItem_js__WEBPACK_IMPORTED_MODULE_1__.from(abiError, options);\n}\n/**\n * Extracts an {@link ox#AbiError.AbiError} from an {@link ox#Abi.Abi} given a name and optional arguments.\n *\n * @example\n * ### Extracting by Name\n *\n * ABI Errors can be extracted by their name using the `name` option:\n *\n * ```ts twoslash\n * import { Abi, AbiError } from 'ox'\n *\n * const abi = Abi.from([\n *   'function foo()',\n *   'error BadSignatureV(uint8 v)',\n *   'function bar(string a) returns (uint256 x)',\n * ])\n *\n * const item = AbiError.fromAbi(abi, 'BadSignatureV') // [!code focus]\n * //    ^?\n *\n *\n *\n *\n *\n *\n * ```\n *\n * @example\n * ### Extracting by Selector\n *\n * ABI Errors can be extract by their selector when {@link ox#Hex.Hex} is provided to `name`.\n *\n * ```ts twoslash\n * import { Abi, AbiError } from 'ox'\n *\n * const abi = Abi.from([\n *   'function foo()',\n *   'error BadSignatureV(uint8 v)',\n *   'function bar(string a) returns (uint256 x)',\n * ])\n * const item = AbiError.fromAbi(abi, '0x095ea7b3') // [!code focus]\n * //    ^?\n *\n *\n *\n *\n *\n *\n *\n *\n *\n * ```\n *\n * :::note\n *\n * Extracting via a hex selector is useful when extracting an ABI Error from JSON-RPC error data.\n *\n * :::\n *\n * @param abi - The ABI to extract from.\n * @param name - The name (or selector) of the ABI item to extract.\n * @param options - Extraction options.\n * @returns The ABI item.\n */\nfunction fromAbi(abi, name, options) {\n    if (name === 'Error')\n        return solidityError;\n    if (name === 'Panic')\n        return solidityPanic;\n    if (_Hex_js__WEBPACK_IMPORTED_MODULE_0__.validate(name, { strict: false })) {\n        const selector = _Hex_js__WEBPACK_IMPORTED_MODULE_0__.slice(name, 0, 4);\n        if (selector === solidityErrorSelector)\n            return solidityError;\n        if (selector === solidityPanicSelector)\n            return solidityPanic;\n    }\n    const item = _AbiItem_js__WEBPACK_IMPORTED_MODULE_1__.fromAbi(abi, name, options);\n    if (item.type !== 'error')\n        throw new _AbiItem_js__WEBPACK_IMPORTED_MODULE_1__.NotFoundError({ name, type: 'error' });\n    return item;\n}\n/**\n * Computes the [4-byte selector](https://solidity-by-example.org/function-selector/) for an {@link ox#AbiError.AbiError}.\n *\n * @example\n * ```ts twoslash\n * import { AbiError } from 'ox'\n *\n * const selector = AbiError.getSelector('error BadSignatureV(uint8 v)')\n * // @log: '0x6352211e'\n * ```\n *\n * @example\n * ```ts twoslash\n * import { AbiError } from 'ox'\n *\n * const selector = AbiError.getSelector({\n *   inputs: [{ name: 'v', type: 'uint8' }],\n *   name: 'BadSignatureV',\n *   type: 'error'\n * })\n * // @log: '0x6352211e'\n * ```\n *\n * @param abiItem - The ABI item to compute the selector for.\n * @returns The first 4 bytes of the {@link ox#Hash.(keccak256:function)} hash of the error signature.\n */\nfunction getSelector(abiItem) {\n    return _AbiItem_js__WEBPACK_IMPORTED_MODULE_1__.getSelector(abiItem);\n}\n// https://docs.soliditylang.org/en/v0.8.16/control-structures.html#panic-via-assert-and-error-via-require\nconst panicReasons = {\n    1: 'An `assert` condition failed.',\n    17: 'Arithmetic operation resulted in underflow or overflow.',\n    18: 'Division or modulo by zero (e.g. `5 / 0` or `23 % 0`).',\n    33: 'Attempted to convert to an invalid type.',\n    34: 'Attempted to access a storage byte array that is incorrectly encoded.',\n    49: 'Performed `.pop()` on an empty array',\n    50: 'Array index is out of bounds.',\n    65: 'Allocated too much memory or created an array which is too large.',\n    81: 'Attempted to call a zero-initialized variable of internal function type.',\n};\nconst solidityError = /*#__PURE__*/ from({\n    inputs: [\n        {\n            name: 'message',\n            type: 'string',\n        },\n    ],\n    name: 'Error',\n    type: 'error',\n});\nconst solidityErrorSelector = '0x08c379a0';\nconst solidityPanic = /*#__PURE__*/ from({\n    inputs: [\n        {\n            name: 'reason',\n            type: 'uint8',\n        },\n    ],\n    name: 'Panic',\n    type: 'error',\n});\nconst solidityPanicSelector = '0x4e487b71';\n//# sourceMappingURL=AbiError.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ox/_esm/core/AbiError.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ox/_esm/core/AbiEvent.js":
/*!***********************************************!*\
  !*** ./node_modules/ox/_esm/core/AbiEvent.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ArgsMismatchError: () => (/* binding */ ArgsMismatchError),\n/* harmony export */   DataMismatchError: () => (/* binding */ DataMismatchError),\n/* harmony export */   FilterTypeNotSupportedError: () => (/* binding */ FilterTypeNotSupportedError),\n/* harmony export */   InputNotFoundError: () => (/* binding */ InputNotFoundError),\n/* harmony export */   SelectorTopicMismatchError: () => (/* binding */ SelectorTopicMismatchError),\n/* harmony export */   TopicsMismatchError: () => (/* binding */ TopicsMismatchError),\n/* harmony export */   assertArgs: () => (/* binding */ assertArgs),\n/* harmony export */   decode: () => (/* binding */ decode),\n/* harmony export */   encode: () => (/* binding */ encode),\n/* harmony export */   format: () => (/* binding */ format),\n/* harmony export */   from: () => (/* binding */ from),\n/* harmony export */   fromAbi: () => (/* binding */ fromAbi),\n/* harmony export */   getSelector: () => (/* binding */ getSelector)\n/* harmony export */ });\n/* harmony import */ var abitype__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! abitype */ \"(pages-dir-browser)/./node_modules/abitype/dist/esm/exports/index.js\");\n/* harmony import */ var _AbiItem_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./AbiItem.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/AbiItem.js\");\n/* harmony import */ var _AbiParameters_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./AbiParameters.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/AbiParameters.js\");\n/* harmony import */ var _Address_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Address.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Address.js\");\n/* harmony import */ var _Bytes_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Bytes.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Bytes.js\");\n/* harmony import */ var _Errors_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./Errors.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Errors.js\");\n/* harmony import */ var _Hash_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Hash.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Hash.js\");\n/* harmony import */ var _Hex_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Hex.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Hex.js\");\n/* harmony import */ var _internal_cursor_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./internal/cursor.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/internal/cursor.js\");\n/* harmony import */ var _internal_errors_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./internal/errors.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/internal/errors.js\");\n\n\n\n\n\n\n\n\n\n\n/**\n * Asserts that the provided arguments match the decoded log arguments.\n *\n * @example\n * ```ts twoslash\n * import { AbiEvent } from 'ox'\n *\n * const abiEvent = AbiEvent.from('event Transfer(address indexed from, address indexed to, uint256 value)')\n *\n * const args = AbiEvent.decode(abiEvent, {\n *   data: '0x0000000000000000000000000000000000000000000000000000000000000001',\n *   topics: [\n *     '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef',\n *     '0x000000000000000000000000a5cc3c03994db5b0d9a5eedd10cabab0813678ac',\n *     '0x000000000000000000000000a5cc3c03994db5b0d9a5eedd10cabab0813678ac',\n *   ],\n * })\n *\n * AbiEvent.assertArgs(abiEvent, args, {\n *   from: '0xa5cc3c03994db5b0d9a5eedd10cabab0813678ad',\n *   to: '0xa5cc3c03994db5b0d9a5eedd10cabab0813678ac',\n *   value: 1n,\n * })\n *\n * // @error: AbiEvent.ArgsMismatchError: Given arguments to not match the arguments decoded from the log.\n * // @error: Event: event Transfer(address indexed from, address indexed to, uint256 value)\n * // @error: Expected Arguments:\n * // @error:   from:   0xa5cc3c03994db5b0d9a5eedd10cabab0813678ac\n * // @error:   to:     0xa5cc3c03994db5b0d9a5eedd10cabab0813678ad\n * // @error:   value:  1\n * // @error: Given Arguments:\n * // @error:   from:   0xa5cc3c03994db5b0d9a5eedd10cabab0813678ad\n * // @error:   to:     0xa5cc3c03994db5b0d9a5eedd10cabab0813678ac\n * // @error:   value:  1\n * ```\n *\n * @param abiEvent - ABI Event to check.\n * @param args - Decoded arguments.\n * @param matchArgs - The arguments to check.\n */\nfunction assertArgs(abiEvent, args, matchArgs) {\n    if (!args || !matchArgs)\n        throw new ArgsMismatchError({\n            abiEvent,\n            expected: args,\n            given: matchArgs,\n        });\n    function isEqual(input, value, arg) {\n        if (input.type === 'address')\n            return _Address_js__WEBPACK_IMPORTED_MODULE_0__.isEqual(value, arg);\n        if (input.type === 'string')\n            return _Hash_js__WEBPACK_IMPORTED_MODULE_1__.keccak256(_Bytes_js__WEBPACK_IMPORTED_MODULE_2__.fromString(value)) === arg;\n        if (input.type === 'bytes')\n            return _Hash_js__WEBPACK_IMPORTED_MODULE_1__.keccak256(value) === arg;\n        return value === arg;\n    }\n    if (Array.isArray(args) && Array.isArray(matchArgs)) {\n        for (const [index, value] of matchArgs.entries()) {\n            if (value === null || value === undefined)\n                continue;\n            const input = abiEvent.inputs[index];\n            if (!input)\n                throw new InputNotFoundError({\n                    abiEvent,\n                    name: `${index}`,\n                });\n            const value_ = Array.isArray(value) ? value : [value];\n            let equal = false;\n            for (const value of value_) {\n                if (isEqual(input, value, args[index]))\n                    equal = true;\n            }\n            if (!equal)\n                throw new ArgsMismatchError({\n                    abiEvent,\n                    expected: args,\n                    given: matchArgs,\n                });\n        }\n    }\n    if (typeof args === 'object' &&\n        !Array.isArray(args) &&\n        typeof matchArgs === 'object' &&\n        !Array.isArray(matchArgs))\n        for (const [key, value] of Object.entries(matchArgs)) {\n            if (value === null || value === undefined)\n                continue;\n            const input = abiEvent.inputs.find((input) => input.name === key);\n            if (!input)\n                throw new InputNotFoundError({ abiEvent, name: key });\n            const value_ = Array.isArray(value) ? value : [value];\n            let equal = false;\n            for (const value of value_) {\n                if (isEqual(input, value, args[key]))\n                    equal = true;\n            }\n            if (!equal)\n                throw new ArgsMismatchError({\n                    abiEvent,\n                    expected: args,\n                    given: matchArgs,\n                });\n        }\n}\n/**\n * ABI-Decodes the provided [Log Topics and Data](https://info.etherscan.com/what-is-event-logs/) according to the ABI Event's parameter types (`input`).\n *\n * :::tip\n *\n * This function is typically used to decode an [Event Log](https://info.etherscan.com/what-is-event-logs/) that may be returned from a Log Query (e.g. `eth_getLogs`) or Transaction Receipt.\n *\n * See the [End-to-end Example](#end-to-end).\n *\n * :::\n *\n * @example\n * ```ts twoslash\n * import { AbiEvent } from 'ox'\n *\n * const transfer = AbiEvent.from(\n *   'event Transfer(address indexed from, address indexed to, uint256 value)'\n * )\n *\n * const log = {\n *   // ...\n *   data: '0x0000000000000000000000000000000000000000000000000000000000000001',\n *   topics: [\n *     '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef',\n *     '0x000000000000000000000000a5cc3c03994db5b0d9a5eedd10cabab0813678ac',\n *     '0x000000000000000000000000a5cc3c03994db5b0d9a5eedd10cabab0813678ac',\n *   ],\n * } as const\n *\n * const decoded = AbiEvent.decode(transfer, log)\n * // @log: {\n * // @log:   from: '0xa5cc3c03994db5b0d9a5eedd10cabab0813678ac',\n * // @log:   to: '0xa5cc3c03994db5b0d9a5eedd10cabab0813678ac',\n * // @log:   value: 1n\n * // @log: }\n * ```\n *\n * @example\n * ### End-to-end\n *\n * Below is an end-to-end example of using `AbiEvent.decode` to decode the topics of a `Transfer` event on the [Wagmi Mint Example contract](https://etherscan.io/address/0xfba3912ca04dd458c843e2ee08967fc04f3579c2).\n *\n * ```ts twoslash\n * import 'ox/window'\n * import { AbiEvent, Hex } from 'ox'\n *\n * // 1. Instantiate the `Transfer` ABI Event.\n * const transfer = AbiEvent.from(\n *   'event Transfer(address indexed from, address indexed to, uint256 value)',\n * )\n *\n * // 2. Encode the ABI Event into Event Topics.\n * const { topics } = AbiEvent.encode(transfer)\n *\n * // 3. Query for events matching the encoded Topics.\n * const logs = await window.ethereum!.request({\n *   method: 'eth_getLogs',\n *   params: [\n *     {\n *       address: '0xfba3912ca04dd458c843e2ee08967fc04f3579c2',\n *       fromBlock: Hex.fromNumber(19760235n),\n *       toBlock: Hex.fromNumber(19760240n),\n *       topics,\n *     },\n *   ],\n * })\n *\n * // 4. Decode the Log. // [!code focus]\n * const decoded = AbiEvent.decode(transfer, logs[0]!) // [!code focus]\n * // @log: {\n * // @log:   from: '0xa5cc3c03994db5b0d9a5eedd10cabab0813678ac',\n * // @log:   to: '0xa5cc3c03994db5b0d9a5eedd10cabab0813678ac',\n * // @log:   value: 603n\n * // @log: }\n * ```\n *\n * :::note\n *\n * For simplicity, the above example uses `window.ethereum.request`, but you can use any\n * type of JSON-RPC interface.\n *\n * :::\n *\n * @param abiEvent - The ABI Event to decode.\n * @param log - `topics` & `data` to decode.\n * @returns The decoded event.\n */\nfunction decode(abiEvent, log) {\n    const { data, topics } = log;\n    const [selector_, ...argTopics] = topics;\n    const selector = getSelector(abiEvent);\n    if (selector_ !== selector)\n        throw new SelectorTopicMismatchError({\n            abiEvent,\n            actual: selector_,\n            expected: selector,\n        });\n    const { inputs } = abiEvent;\n    const isUnnamed = inputs?.every((x) => !('name' in x && x.name));\n    let args = isUnnamed ? [] : {};\n    // Decode topics (indexed args).\n    const indexedInputs = inputs.filter((x) => 'indexed' in x && x.indexed);\n    for (let i = 0; i < indexedInputs.length; i++) {\n        const param = indexedInputs[i];\n        const topic = argTopics[i];\n        if (!topic)\n            throw new TopicsMismatchError({\n                abiEvent,\n                param: param,\n            });\n        args[isUnnamed ? i : param.name || i] = (() => {\n            if (param.type === 'string' ||\n                param.type === 'bytes' ||\n                param.type === 'tuple' ||\n                param.type.match(/^(.*)\\[(\\d+)?\\]$/))\n                return topic;\n            const decoded = _AbiParameters_js__WEBPACK_IMPORTED_MODULE_3__.decode([param], topic) || [];\n            return decoded[0];\n        })();\n    }\n    // Decode data (non-indexed args).\n    const nonIndexedInputs = inputs.filter((x) => !('indexed' in x && x.indexed));\n    if (nonIndexedInputs.length > 0) {\n        if (data && data !== '0x') {\n            try {\n                const decodedData = _AbiParameters_js__WEBPACK_IMPORTED_MODULE_3__.decode(nonIndexedInputs, data);\n                if (decodedData) {\n                    if (isUnnamed)\n                        args = [...args, ...decodedData];\n                    else {\n                        for (let i = 0; i < nonIndexedInputs.length; i++) {\n                            const index = inputs.indexOf(nonIndexedInputs[i]);\n                            args[nonIndexedInputs[i].name || index] = decodedData[i];\n                        }\n                    }\n                }\n            }\n            catch (err) {\n                if (err instanceof _AbiParameters_js__WEBPACK_IMPORTED_MODULE_3__.DataSizeTooSmallError ||\n                    err instanceof _internal_cursor_js__WEBPACK_IMPORTED_MODULE_4__.PositionOutOfBoundsError)\n                    throw new DataMismatchError({\n                        abiEvent,\n                        data: data,\n                        parameters: nonIndexedInputs,\n                        size: _Hex_js__WEBPACK_IMPORTED_MODULE_5__.size(data),\n                    });\n                throw err;\n            }\n        }\n        else {\n            throw new DataMismatchError({\n                abiEvent,\n                data: '0x',\n                parameters: nonIndexedInputs,\n                size: 0,\n            });\n        }\n    }\n    return Object.values(args).length > 0 ? args : undefined;\n}\n/**\n * ABI-encodes the provided event input (`inputs`) into an array of [Event Topics](https://info.etherscan.com/what-is-event-logs/).\n *\n * :::tip\n *\n * This function is typically used to encode event arguments into [Event Topics](https://info.etherscan.com/what-is-event-logs/).\n *\n * See the [End-to-end Example](#end-to-end).\n *\n * :::\n *\n * @example\n * ```ts twoslash\n * import { AbiEvent } from 'ox'\n *\n * const transfer = AbiEvent.from(\n *   'event Transfer(address indexed from, address indexed to, uint256 value)'\n * )\n *\n * const { topics } = AbiEvent.encode(transfer)\n * // @log: ['0x406dade31f7ae4b5dbc276258c28dde5ae6d5c2773c5745802c493a2360e55e0']\n * ```\n *\n * @example\n * ### Passing Arguments\n *\n * You can pass `indexed` parameter values to `AbiEvent.encode`.\n *\n * TypeScript types will be inferred from the ABI Event, to guard you from inserting the wrong values.\n *\n * For example, the `Transfer` event below accepts an `address` type for the `from` and `to` attributes.\n *\n * ```ts twoslash\n * import { AbiEvent } from 'ox'\n *\n * const transfer = AbiEvent.from(\n *   'event Transfer(address indexed from, address indexed to, uint256 value)'\n * )\n *\n * const { topics } = AbiEvent.encode(transfer, {\n *   from: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266', // [!code hl]\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8' // [!code hl]\n * })\n * // @log: [\n * // @log:   '0x406dade31f7ae4b5dbc276258c28dde5ae6d5c2773c5745802c493a2360e55e0',\n * // @log:   '0x00000000000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n * // @log:   '0x0000000000000000000000000000000070997970c51812dc3a010c7d01b50e0d17dc79c8'\n * // @log: ]\n * ```\n *\n * @example\n * ### End-to-end\n *\n * Below is an end-to-end example of using `AbiEvent.encode` to encode the topics of a `Transfer` event and query for events matching the encoded topics on the [Wagmi Mint Example contract](https://etherscan.io/address/0xfba3912ca04dd458c843e2ee08967fc04f3579c2).\n *\n * ```ts twoslash\n * import 'ox/window'\n * import { AbiEvent, Hex } from 'ox'\n *\n * // 1. Instantiate the `Transfer` ABI Event.\n * const transfer = AbiEvent.from(\n *   'event Transfer(address indexed from, address indexed to, uint256 value)',\n * )\n *\n * // 2. Encode the ABI Event into Event Topics.\n * const { topics } = AbiEvent.encode(transfer)\n *\n * // 3. Query for events matching the encoded Topics.\n * const logs = await window.ethereum!.request({\n *   method: 'eth_getLogs',\n *   params: [\n *     {\n *       address: '0xfba3912ca04dd458c843e2ee08967fc04f3579c2',\n *       fromBlock: Hex.fromNumber(19760235n),\n *       toBlock: Hex.fromNumber(19760240n),\n *       topics,\n *     },\n *   ],\n * })\n * // @log: [\n * // @log:   \"0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\",\n * // @log:   \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n * // @log:   \"0x0000000000000000000000000c04d9e9278ec5e4d424476d3ebec70cb5d648d1\",\n * // @log:   \"0x000000000000000000000000000000000000000000000000000000000000025b\",\n * // @log: ]\n * ```\n *\n * :::note\n *\n * For simplicity, the above example uses `window.ethereum.request`, but you can use any\n * type of JSON-RPC interface.\n *\n * :::\n *\n * @param abiEvent - The event to encode.\n * @param args - The arguments to encode.\n * @returns The encoded event topics.\n */\nfunction encode(abiEvent, ...[args]) {\n    let topics = [];\n    if (args && abiEvent.inputs) {\n        const indexedInputs = abiEvent.inputs.filter((param) => 'indexed' in param && param.indexed);\n        const args_ = Array.isArray(args)\n            ? args\n            : Object.values(args).length > 0\n                ? indexedInputs?.map((x, i) => args[x.name ?? i]) ?? []\n                : [];\n        if (args_.length > 0) {\n            const encode = (param, value) => {\n                if (param.type === 'string')\n                    return _Hash_js__WEBPACK_IMPORTED_MODULE_1__.keccak256(_Hex_js__WEBPACK_IMPORTED_MODULE_5__.fromString(value));\n                if (param.type === 'bytes')\n                    return _Hash_js__WEBPACK_IMPORTED_MODULE_1__.keccak256(value);\n                if (param.type === 'tuple' || param.type.match(/^(.*)\\[(\\d+)?\\]$/))\n                    throw new FilterTypeNotSupportedError(param.type);\n                return _AbiParameters_js__WEBPACK_IMPORTED_MODULE_3__.encode([param], [value]);\n            };\n            topics =\n                indexedInputs?.map((param, i) => {\n                    if (Array.isArray(args_[i]))\n                        return args_[i].map((_, j) => encode(param, args_[i][j]));\n                    return typeof args_[i] !== 'undefined' && args_[i] !== null\n                        ? encode(param, args_[i])\n                        : null;\n                }) ?? [];\n        }\n    }\n    const selector = (() => {\n        if (abiEvent.hash)\n            return abiEvent.hash;\n        return getSelector(abiEvent);\n    })();\n    return { topics: [selector, ...topics] };\n}\n/**\n * Formats an {@link ox#AbiEvent.AbiEvent} into a **Human Readable ABI Error**.\n *\n * @example\n * ```ts twoslash\n * import { AbiEvent } from 'ox'\n *\n * const formatted = AbiEvent.format({\n *   type: 'event',\n *   name: 'Transfer',\n *   inputs: [\n *     { name: 'from', type: 'address', indexed: true },\n *     { name: 'to', type: 'address', indexed: true },\n *     { name: 'value', type: 'uint256' },\n *   ],\n * })\n *\n * formatted\n * //    ^?\n *\n *\n * ```\n *\n * @param abiEvent - The ABI Event to format.\n * @returns The formatted ABI Event.\n */\nfunction format(abiEvent) {\n    return abitype__WEBPACK_IMPORTED_MODULE_6__.formatAbiItem(abiEvent);\n}\n/**\n * Parses an arbitrary **JSON ABI Event** or **Human Readable ABI Event** into a typed {@link ox#AbiEvent.AbiEvent}.\n *\n * @example\n * ### JSON ABIs\n *\n * ```ts twoslash\n * import { AbiEvent } from 'ox'\n *\n * const transfer = AbiEvent.from({\n *   name: 'Transfer',\n *   type: 'event',\n *   inputs: [\n *     { name: 'from', type: 'address', indexed: true },\n *     { name: 'to', type: 'address', indexed: true },\n *     { name: 'value', type: 'uint256' },\n *   ],\n * })\n *\n * transfer\n * //^?\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n * ```\n *\n * @example\n * ### Human Readable ABIs\n *\n * A Human Readable ABI can be parsed into a typed ABI object:\n *\n * ```ts twoslash\n * import { AbiEvent } from 'ox'\n *\n * const transfer = AbiEvent.from(\n *   'event Transfer(address indexed from, address indexed to, uint256 value)' // [!code hl]\n * )\n *\n * transfer\n * //^?\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n * ```\n *\n * @param abiEvent - The ABI Event to parse.\n * @returns Typed ABI Event.\n */\nfunction from(abiEvent, options = {}) {\n    return _AbiItem_js__WEBPACK_IMPORTED_MODULE_7__.from(abiEvent, options);\n}\n/**\n * Extracts an {@link ox#AbiEvent.AbiEvent} from an {@link ox#Abi.Abi} given a name and optional arguments.\n *\n * @example\n * ### Extracting by Name\n *\n * ABI Events can be extracted by their name using the `name` option:\n *\n * ```ts twoslash\n * import { Abi, AbiEvent } from 'ox'\n *\n * const abi = Abi.from([\n *   'function foo()',\n *   'event Transfer(address owner, address to, uint256 tokenId)',\n *   'function bar(string a) returns (uint256 x)',\n * ])\n *\n * const item = AbiEvent.fromAbi(abi, 'Transfer') // [!code focus]\n * //    ^?\n *\n *\n *\n *\n *\n *\n * ```\n *\n * @example\n * ### Extracting by Selector\n *\n * ABI Events can be extract by their selector when {@link ox#Hex.Hex} is provided to `name`.\n *\n * ```ts twoslash\n * import { Abi, AbiEvent } from 'ox'\n *\n * const abi = Abi.from([\n *   'function foo()',\n *   'event Transfer(address owner, address to, uint256 tokenId)',\n *   'function bar(string a) returns (uint256 x)',\n * ])\n * const item = AbiEvent.fromAbi(abi, '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef') // [!code focus]\n * //    ^?\n *\n *\n *\n *\n *\n *\n *\n *\n *\n * ```\n *\n * :::note\n *\n * Extracting via a hex selector is useful when extracting an ABI Event from the first topic of a Log.\n *\n * :::\n *\n * @param abi - The ABI to extract from.\n * @param name - The name (or selector) of the ABI item to extract.\n * @param options - Extraction options.\n * @returns The ABI item.\n */\nfunction fromAbi(abi, name, options) {\n    const item = _AbiItem_js__WEBPACK_IMPORTED_MODULE_7__.fromAbi(abi, name, options);\n    if (item.type !== 'event')\n        throw new _AbiItem_js__WEBPACK_IMPORTED_MODULE_7__.NotFoundError({ name, type: 'event' });\n    return item;\n}\n/**\n * Computes the event selector (hash of event signature) for an {@link ox#AbiEvent.AbiEvent}.\n *\n * @example\n * ```ts twoslash\n * import { AbiEvent } from 'ox'\n *\n * const selector = AbiEvent.getSelector('event Transfer(address indexed from, address indexed to, uint256 value)')\n * // @log: '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f556a2'\n * ```\n *\n * @example\n * ```ts twoslash\n * import { AbiEvent } from 'ox'\n *\n * const selector = AbiEvent.getSelector({\n *   name: 'Transfer',\n *   type: 'event',\n *   inputs: [\n *     { name: 'from', type: 'address', indexed: true },\n *     { name: 'to', type: 'address', indexed: true },\n *     { name: 'value', type: 'uint256' }\n *   ]\n * })\n * // @log: '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f556a2'\n * ```\n *\n * @param abiItem - The ABI event to compute the selector for.\n * @returns The {@link ox#Hash.(keccak256:function)} hash of the event signature.\n */\nfunction getSelector(abiItem) {\n    return _AbiItem_js__WEBPACK_IMPORTED_MODULE_7__.getSignatureHash(abiItem);\n}\n/**\n * Thrown when the provided arguments do not match the expected arguments.\n *\n * @example\n * ```ts twoslash\n * import { AbiEvent } from 'ox'\n *\n * const abiEvent = AbiEvent.from(\n *   'event Transfer(address indexed from, address indexed to, uint256 value)',\n * )\n *\n * const args = AbiEvent.decode(abiEvent, {\n *   data: '0x0000000000000000000000000000000000000000000000000000000000000001',\n *   topics: [\n *     '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef',\n *     '0x000000000000000000000000a5cc3c03994db5b0d9a5eedd10cabab0813678ac',\n *     '0x000000000000000000000000a5cc3c03994db5b0d9a5eedd10cabab0813678ad',\n *   ],\n * })\n *\n * AbiEvent.assertArgs(abiEvent, args, {\n *   from: '0xa5cc3c03994db5b0d9a5eedd10cabab0813678ad',\n *   to: '0xa5cc3c03994db5b0d9a5eedd10cabab0813678ac',\n *   value: 1n,\n * })\n * // @error: AbiEvent.ArgsMismatchError: Given arguments do not match the expected arguments.\n * // @error: Event: event Transfer(address indexed from, address indexed to, uint256 value)\n * // @error: Expected Arguments:\n * // @error:   from:   0xa5cc3c03994db5b0d9a5eedd10cabab0813678ac\n * // @error:   to:     0xa5cc3c03994db5b0d9a5eedd10cabab0813678ad\n * // @error:   value:  1\n * // @error: Given Arguments:\n * // @error:   from:   0xa5cc3c03994db5b0d9a5eedd10cabab0813678ad\n * // @error:   to:     0xa5cc3c03994db5b0d9a5eedd10cabab0813678ac\n * // @error:   value:  1\n * ```\n *\n * ### Solution\n *\n * The provided arguments need to match the expected arguments.\n *\n * ```ts twoslash\n * // @noErrors\n * import { AbiEvent } from 'ox'\n *\n * const abiEvent = AbiEvent.from(\n *   'event Transfer(address indexed from, address indexed to, uint256 value)',\n * )\n *\n * const args = AbiEvent.decode(abiEvent, {\n *   data: '0x0000000000000000000000000000000000000000000000000000000000000001',\n *   topics: [\n *     '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef',\n *     '0x000000000000000000000000a5cc3c03994db5b0d9a5eedd10cabab0813678ac',\n *     '0x000000000000000000000000a5cc3c03994db5b0d9a5eedd10cabab0813678ad',\n *   ],\n * })\n *\n * AbiEvent.assertArgs(abiEvent, args, {\n *   from: '0xa5cc3c03994db5b0d9a5eedd10cabab0813678ad', // [!code --]\n *   from: '0xa5cc3c03994db5b0d9a5eedd10cabab0813678ac', // [!code ++]\n *   to: '0xa5cc3c03994db5b0d9a5eedd10cabab0813678ac', // [!code --]\n *   to: '0xa5cc3c03994db5b0d9a5eedd10cabab0813678ad', // [!code ++]\n *   value: 1n,\n * })\n * ```\n */\nclass ArgsMismatchError extends _Errors_js__WEBPACK_IMPORTED_MODULE_8__.BaseError {\n    constructor({ abiEvent, expected, given, }) {\n        super('Given arguments do not match the expected arguments.', {\n            metaMessages: [\n                `Event: ${format(abiEvent)}`,\n                `Expected Arguments: ${!expected ? 'None' : ''}`,\n                expected ? (0,_internal_errors_js__WEBPACK_IMPORTED_MODULE_9__.prettyPrint)(expected) : undefined,\n                `Given Arguments: ${!given ? 'None' : ''}`,\n                given ? (0,_internal_errors_js__WEBPACK_IMPORTED_MODULE_9__.prettyPrint)(given) : undefined,\n            ],\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'AbiEvent.ArgsMismatchError'\n        });\n    }\n}\n/**\n * Thrown when no argument was found on the event signature.\n *\n * @example\n * ```ts twoslash\n * // @noErrors\n * import { AbiEvent } from 'ox'\n *\n * const abiEvent = AbiEvent.from(\n *   'event Transfer(address indexed from, address indexed to, uint256 value)',\n * )\n *\n * const args = AbiEvent.decode(abiEvent, {\n *   data: '0x0000000000000000000000000000000000000000000000000000000000000001',\n *   topics: [\n *     '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef',\n *     '0x000000000000000000000000a5cc3c03994db5b0d9a5eedd10cabab0813678ac',\n *     '0x000000000000000000000000a5cc3c03994db5b0d9a5eedd10cabab0813678ad',\n *   ],\n * })\n *\n * AbiEvent.assertArgs(abiEvent, args, {\n *   a: 'b',\n *   from: '0xa5cc3c03994db5b0d9a5eedd10cabab0813678ac',\n *   to: '0xa5cc3c03994db5b0d9a5eedd10cabab0813678ad',\n *   value: 1n,\n * })\n * // @error: AbiEvent.InputNotFoundError: Parameter \"a\" not found on `event Transfer(address indexed from, address indexed to, uint256 value)`.\n * ```\n *\n * ### Solution\n *\n * Ensure the arguments match the event signature.\n *\n * ```ts twoslash\n * // @noErrors\n * import { AbiEvent } from 'ox'\n *\n * const abiEvent = AbiEvent.from(\n *   'event Transfer(address indexed from, address indexed to, uint256 value)',\n * )\n *\n * const args = AbiEvent.decode(abiEvent, {\n *   data: '0x0000000000000000000000000000000000000000000000000000000000000001',\n *   topics: [\n *     '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef',\n *     '0x000000000000000000000000a5cc3c03994db5b0d9a5eedd10cabab0813678ac',\n *     '0x000000000000000000000000a5cc3c03994db5b0d9a5eedd10cabab0813678ad',\n *   ],\n * })\n *\n * AbiEvent.assertArgs(abiEvent, args, {\n *   a: 'b', // [!code --]\n *   from: '0xa5cc3c03994db5b0d9a5eedd10cabab0813678ac',\n *   to: '0xa5cc3c03994db5b0d9a5eedd10cabab0813678ad',\n *   value: 1n,\n * })\n * ```\n */\nclass InputNotFoundError extends _Errors_js__WEBPACK_IMPORTED_MODULE_8__.BaseError {\n    constructor({ abiEvent, name, }) {\n        super(`Parameter \"${name}\" not found on \\`${format(abiEvent)}\\`.`);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'AbiEvent.InputNotFoundError'\n        });\n    }\n}\n/**\n * Thrown when the provided data size does not match the expected size from the non-indexed parameters.\n *\n * @example\n * ```ts twoslash\n * import { AbiEvent } from 'ox'\n *\n * const abiEvent = AbiEvent.from(\n *   'event Transfer(address indexed from, address to, uint256 value)',\n *   //                                    ↑ 32 bytes + ↑ 32 bytes = 64 bytes\n * )\n *\n * const args = AbiEvent.decode(abiEvent, {\n *   data: '0x0000000000000000000000000000000000000000000000000000000023c34600',\n *   //       ↑ 32 bytes ❌\n *   topics: [\n *     '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef',\n *     '0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n *   ],\n * })\n * // @error: AbiEvent.DataMismatchError: Data size of 32 bytes is too small for non-indexed event parameters.\n * // @error: Non-indexed Parameters: (address to, uint256 value)\n * // @error: Data:   0x0000000000000000000000000000000000000000000000000000000023c34600 (32 bytes)\n * ```\n *\n * ### Solution\n *\n * Ensure that the data size matches the expected size.\n *\n * ```ts twoslash\n * import { AbiEvent } from 'ox'\n *\n * const abiEvent = AbiEvent.from(\n *   'event Transfer(address indexed from, address to, uint256 value)',\n *   //                                    ↑ 32 bytes + ↑ 32 bytes = 64 bytes\n * )\n *\n * const args = AbiEvent.decode(abiEvent, {\n *   data: '0x0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb922660000000000000000000000000000000000000000000000000000000023c34600',\n *   //       ↑ 64 bytes ✅\n *   topics: [\n *     '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef',\n *     '0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n *   ],\n * })\n * ```\n */\nclass DataMismatchError extends _Errors_js__WEBPACK_IMPORTED_MODULE_8__.BaseError {\n    constructor({ abiEvent, data, parameters, size, }) {\n        super([\n            `Data size of ${size} bytes is too small for non-indexed event parameters.`,\n        ].join('\\n'), {\n            metaMessages: [\n                `Non-indexed Parameters: (${_AbiParameters_js__WEBPACK_IMPORTED_MODULE_3__.format(parameters)})`,\n                `Data:   ${data} (${size} bytes)`,\n            ],\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'AbiEvent.DataMismatchError'\n        });\n        Object.defineProperty(this, \"abiEvent\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"data\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"parameters\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"size\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.abiEvent = abiEvent;\n        this.data = data;\n        this.parameters = parameters;\n        this.size = size;\n    }\n}\n/**\n * Thrown when the provided topics do not match the expected number of topics.\n *\n * @example\n * ```ts twoslash\n * import { AbiEvent } from 'ox'\n *\n * const abiEvent = AbiEvent.from(\n *   'event Transfer(address indexed from, address indexed to, uint256 value)',\n * )\n *\n * const args = AbiEvent.decode(abiEvent, {\n *   data: '0x0000000000000000000000000000000000000000000000000000000000000001',\n *   topics: [\n *     '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef',\n *     '0x000000000000000000000000a5cc3c03994db5b0d9a5eedd10cabab0813678ac',\n *   ],\n * })\n * // @error: AbiEvent.TopicsMismatchError: Expected a topic for indexed event parameter \"to\" for \"event Transfer(address indexed from, address indexed to, uint256 value)\".\n * ```\n *\n * ### Solution\n *\n * Ensure that the topics match the expected number of topics.\n *\n * ```ts twoslash\n * import { AbiEvent } from 'ox'\n *\n * const abiEvent = AbiEvent.from(\n *   'event Transfer(address indexed from, address indexed to, uint256 value)',\n * )\n *\n * const args = AbiEvent.decode(abiEvent, {\n *   data: '0x0000000000000000000000000000000000000000000000000000000000000001',\n *   topics: [\n *     '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef',\n *     '0x000000000000000000000000a5cc3c03994db5b0d9a5eedd10cabab0813678ac',\n *     '0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266', // [!code ++]\n *   ],\n * })\n * ```\n *\n */\nclass TopicsMismatchError extends _Errors_js__WEBPACK_IMPORTED_MODULE_8__.BaseError {\n    constructor({ abiEvent, param, }) {\n        super([\n            `Expected a topic for indexed event parameter${param.name ? ` \"${param.name}\"` : ''} for \"${format(abiEvent)}\".`,\n        ].join('\\n'));\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'AbiEvent.TopicsMismatchError'\n        });\n        Object.defineProperty(this, \"abiEvent\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.abiEvent = abiEvent;\n    }\n}\n/**\n * Thrown when the provided selector does not match the expected selector.\n *\n * @example\n * ```ts twoslash\n * import { AbiEvent } from 'ox'\n *\n * const transfer = AbiEvent.from(\n *   'event Transfer(address indexed from, address indexed to, bool sender)',\n * )\n *\n * AbiEvent.decode(transfer, {\n *   topics: [\n *     '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef',\n *     '0x000000000000000000000000d8da6bf26964af9d7eed9e03e53415d37aa96045',\n *     '0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n *   ],\n * })\n * // @error: AbiEvent.SelectorTopicMismatchError: topics[0]=\"0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\" does not match the expected topics[0]=\"0x3da3cd3cf420c78f8981e7afeefa0eab1f0de0eb56e78ad9ba918ed01c0b402f\".\n * // @error: Event: event Transfer(address indexed from, address indexed to, bool sender)\n * // @error: Selector: 0x3da3cd3cf420c78f8981e7afeefa0eab1f0de0eb56e78ad9ba918ed01c0b402f\n * ```\n *\n * ### Solution\n *\n * Ensure that the provided selector matches the selector of the event signature.\n *\n * ```ts twoslash\n * import { AbiEvent } from 'ox'\n *\n * const transfer = AbiEvent.from(\n *   'event Transfer(address indexed from, address indexed to, bool sender)',\n * )\n *\n * AbiEvent.decode(transfer, {\n *   topics: [\n *     '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef', // [!code --]\n *     '0x3da3cd3cf420c78f8981e7afeefa0eab1f0de0eb56e78ad9ba918ed01c0b402f', // [!code ++]\n *     '0x000000000000000000000000d8da6bf26964af9d7eed9e03e53415d37aa96045',\n *     '0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n *   ],\n * })\n * ```\n */\nclass SelectorTopicMismatchError extends _Errors_js__WEBPACK_IMPORTED_MODULE_8__.BaseError {\n    constructor({ abiEvent, actual, expected, }) {\n        super(`topics[0]=\"${actual}\" does not match the expected topics[0]=\"${expected}\".`, {\n            metaMessages: [`Event: ${format(abiEvent)}`, `Selector: ${expected}`],\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'AbiEvent.SelectorTopicMismatchError'\n        });\n    }\n}\n/**\n * Thrown when the provided filter type is not supported.\n *\n * @example\n * ```ts twoslash\n * import { AbiEvent } from 'ox'\n *\n * const transfer = AbiEvent.from('event Transfer((string) indexed a, string b)')\n *\n * AbiEvent.encode(transfer, {\n *   a: ['hello'],\n * })\n * // @error: AbiEvent.FilterTypeNotSupportedError: Filter type \"tuple\" is not supported.\n * ```\n *\n * ### Solution\n *\n * Provide a valid event input type.\n *\n * ```ts twoslash\n * // @noErrors\n * import { AbiEvent } from 'ox'\n *\n * const transfer = AbiEvent.from('event Transfer((string) indexed a, string b)') // [!code --]\n * const transfer = AbiEvent.from('event Transfer(string indexed a, string b)') // [!code ++]\n * ```\n *\n *\n */\nclass FilterTypeNotSupportedError extends _Errors_js__WEBPACK_IMPORTED_MODULE_8__.BaseError {\n    constructor(type) {\n        super(`Filter type \"${type}\" is not supported.`);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'AbiEvent.FilterTypeNotSupportedError'\n        });\n    }\n}\n//# sourceMappingURL=AbiEvent.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ox/_esm/core/AbiEvent.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ox/_esm/core/AccessList.js":
/*!*************************************************!*\
  !*** ./node_modules/ox/_esm/core/AccessList.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InvalidStorageKeySizeError: () => (/* binding */ InvalidStorageKeySizeError),\n/* harmony export */   fromTupleList: () => (/* binding */ fromTupleList),\n/* harmony export */   toTupleList: () => (/* binding */ toTupleList)\n/* harmony export */ });\n/* harmony import */ var _Address_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Address.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Address.js\");\n/* harmony import */ var _Errors_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Errors.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Errors.js\");\n/* harmony import */ var _Hash_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Hash.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Hash.js\");\n/* harmony import */ var _Hex_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Hex.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Hex.js\");\n\n\n\n\n/**\n * Converts a list of Access List tuples into a object-formatted list.\n *\n * @example\n * ```ts twoslash\n * import { AccessList } from 'ox'\n *\n * const accessList = AccessList.fromTupleList([\n *   [\n *     '0x0000000000000000000000000000000000000000',\n *     [\n *       '0x0000000000000000000000000000000000000000000000000000000000000001',\n *       '0x60fdd29ff912ce880cd3edaf9f932dc61d3dae823ea77e0323f94adb9f6a72fe',\n *     ],\n *   ],\n * ])\n * // @log: [\n * // @log:   {\n * // @log:     address: '0x0000000000000000000000000000000000000000',\n * // @log:     storageKeys: [\n * // @log:       '0x0000000000000000000000000000000000000000000000000000000000000001',\n * // @log:       '0x60fdd29ff912ce880cd3edaf9f932dc61d3dae823ea77e0323f94adb9f6a72fe',\n * // @log:     ],\n * // @log:   },\n * // @log: ]\n * ```\n *\n * @param accessList - List of tuples.\n * @returns Access list.\n */\nfunction fromTupleList(accessList) {\n    const list = [];\n    for (let i = 0; i < accessList.length; i++) {\n        const [address, storageKeys] = accessList[i];\n        if (address)\n            _Address_js__WEBPACK_IMPORTED_MODULE_0__.assert(address, { strict: false });\n        list.push({\n            address: address,\n            storageKeys: storageKeys.map((key) => _Hash_js__WEBPACK_IMPORTED_MODULE_1__.validate(key) ? key : _Hex_js__WEBPACK_IMPORTED_MODULE_2__.trimLeft(key)),\n        });\n    }\n    return list;\n}\n/**\n * Converts a structured Access List into a list of tuples.\n *\n * @example\n * ```ts twoslash\n * import { AccessList } from 'ox'\n *\n * const accessList = AccessList.toTupleList([\n *   {\n *     address: '0x0000000000000000000000000000000000000000',\n *     storageKeys: [\n *       '0x0000000000000000000000000000000000000000000000000000000000000001',\n *       '0x60fdd29ff912ce880cd3edaf9f932dc61d3dae823ea77e0323f94adb9f6a72fe'],\n *   },\n * ])\n * // @log: [\n * // @log:   [\n * // @log:     '0x0000000000000000000000000000000000000000',\n * // @log:     [\n * // @log:       '0x0000000000000000000000000000000000000000000000000000000000000001',\n * // @log:       '0x60fdd29ff912ce880cd3edaf9f932dc61d3dae823ea77e0323f94adb9f6a72fe',\n * // @log:     ],\n * // @log:   ],\n * // @log: ]\n * ```\n *\n * @param accessList - Access list.\n * @returns List of tuples.\n */\nfunction toTupleList(accessList) {\n    if (!accessList || accessList.length === 0)\n        return [];\n    const tuple = [];\n    for (const { address, storageKeys } of accessList) {\n        for (let j = 0; j < storageKeys.length; j++)\n            if (_Hex_js__WEBPACK_IMPORTED_MODULE_2__.size(storageKeys[j]) !== 32)\n                throw new InvalidStorageKeySizeError({\n                    storageKey: storageKeys[j],\n                });\n        if (address)\n            _Address_js__WEBPACK_IMPORTED_MODULE_0__.assert(address, { strict: false });\n        tuple.push([address, storageKeys]);\n    }\n    return tuple;\n}\n/** Thrown when the size of a storage key is invalid. */\nclass InvalidStorageKeySizeError extends _Errors_js__WEBPACK_IMPORTED_MODULE_3__.BaseError {\n    constructor({ storageKey }) {\n        super(`Size for storage key \"${storageKey}\" is invalid. Expected 32 bytes. Got ${_Hex_js__WEBPACK_IMPORTED_MODULE_2__.size(storageKey)} bytes.`);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'AccessList.InvalidStorageKeySizeError'\n        });\n    }\n}\n//# sourceMappingURL=AccessList.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9veC9fZXNtL2NvcmUvQWNjZXNzTGlzdC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQXdDO0FBQ0Y7QUFDSjtBQUNGO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLGFBQWE7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0Esb0JBQW9CLHVCQUF1QjtBQUMzQztBQUNBO0FBQ0EsWUFBWSwrQ0FBYyxZQUFZLGVBQWU7QUFDckQ7QUFDQTtBQUNBLGtEQUFrRCw4Q0FBYSxjQUFjLDZDQUFZO0FBQ3pGLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxhQUFhO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLHVCQUF1QjtBQUN4Qyx3QkFBd0Isd0JBQXdCO0FBQ2hELGdCQUFnQix5Q0FBUTtBQUN4QjtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsWUFBWSwrQ0FBYyxZQUFZLGVBQWU7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLHlDQUF5QyxpREFBZ0I7QUFDaEUsa0JBQWtCLFlBQVk7QUFDOUIsdUNBQXVDLFdBQVcsdUNBQXVDLHlDQUFRLGNBQWM7QUFDL0c7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcY2hhbmRcXERvd25sb2Fkc1xcam9obndyaWNoa2lkaW50b3JpenpcXG5vZGVfbW9kdWxlc1xcb3hcXF9lc21cXGNvcmVcXEFjY2Vzc0xpc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgQWRkcmVzcyBmcm9tICcuL0FkZHJlc3MuanMnO1xuaW1wb3J0ICogYXMgRXJyb3JzIGZyb20gJy4vRXJyb3JzLmpzJztcbmltcG9ydCAqIGFzIEhhc2ggZnJvbSAnLi9IYXNoLmpzJztcbmltcG9ydCAqIGFzIEhleCBmcm9tICcuL0hleC5qcyc7XG4vKipcbiAqIENvbnZlcnRzIGEgbGlzdCBvZiBBY2Nlc3MgTGlzdCB0dXBsZXMgaW50byBhIG9iamVjdC1mb3JtYXR0ZWQgbGlzdC5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgdHMgdHdvc2xhc2hcbiAqIGltcG9ydCB7IEFjY2Vzc0xpc3QgfSBmcm9tICdveCdcbiAqXG4gKiBjb25zdCBhY2Nlc3NMaXN0ID0gQWNjZXNzTGlzdC5mcm9tVHVwbGVMaXN0KFtcbiAqICAgW1xuICogICAgICcweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAnLFxuICogICAgIFtcbiAqICAgICAgICcweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDEnLFxuICogICAgICAgJzB4NjBmZGQyOWZmOTEyY2U4ODBjZDNlZGFmOWY5MzJkYzYxZDNkYWU4MjNlYTc3ZTAzMjNmOTRhZGI5ZjZhNzJmZScsXG4gKiAgICAgXSxcbiAqICAgXSxcbiAqIF0pXG4gKiAvLyBAbG9nOiBbXG4gKiAvLyBAbG9nOiAgIHtcbiAqIC8vIEBsb2c6ICAgICBhZGRyZXNzOiAnMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAqIC8vIEBsb2c6ICAgICBzdG9yYWdlS2V5czogW1xuICogLy8gQGxvZzogICAgICAgJzB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMScsXG4gKiAvLyBAbG9nOiAgICAgICAnMHg2MGZkZDI5ZmY5MTJjZTg4MGNkM2VkYWY5ZjkzMmRjNjFkM2RhZTgyM2VhNzdlMDMyM2Y5NGFkYjlmNmE3MmZlJyxcbiAqIC8vIEBsb2c6ICAgICBdLFxuICogLy8gQGxvZzogICB9LFxuICogLy8gQGxvZzogXVxuICogYGBgXG4gKlxuICogQHBhcmFtIGFjY2Vzc0xpc3QgLSBMaXN0IG9mIHR1cGxlcy5cbiAqIEByZXR1cm5zIEFjY2VzcyBsaXN0LlxuICovXG5leHBvcnQgZnVuY3Rpb24gZnJvbVR1cGxlTGlzdChhY2Nlc3NMaXN0KSB7XG4gICAgY29uc3QgbGlzdCA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYWNjZXNzTGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBbYWRkcmVzcywgc3RvcmFnZUtleXNdID0gYWNjZXNzTGlzdFtpXTtcbiAgICAgICAgaWYgKGFkZHJlc3MpXG4gICAgICAgICAgICBBZGRyZXNzLmFzc2VydChhZGRyZXNzLCB7IHN0cmljdDogZmFsc2UgfSk7XG4gICAgICAgIGxpc3QucHVzaCh7XG4gICAgICAgICAgICBhZGRyZXNzOiBhZGRyZXNzLFxuICAgICAgICAgICAgc3RvcmFnZUtleXM6IHN0b3JhZ2VLZXlzLm1hcCgoa2V5KSA9PiBIYXNoLnZhbGlkYXRlKGtleSkgPyBrZXkgOiBIZXgudHJpbUxlZnQoa2V5KSksXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gbGlzdDtcbn1cbi8qKlxuICogQ29udmVydHMgYSBzdHJ1Y3R1cmVkIEFjY2VzcyBMaXN0IGludG8gYSBsaXN0IG9mIHR1cGxlcy5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgdHMgdHdvc2xhc2hcbiAqIGltcG9ydCB7IEFjY2Vzc0xpc3QgfSBmcm9tICdveCdcbiAqXG4gKiBjb25zdCBhY2Nlc3NMaXN0ID0gQWNjZXNzTGlzdC50b1R1cGxlTGlzdChbXG4gKiAgIHtcbiAqICAgICBhZGRyZXNzOiAnMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAqICAgICBzdG9yYWdlS2V5czogW1xuICogICAgICAgJzB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMScsXG4gKiAgICAgICAnMHg2MGZkZDI5ZmY5MTJjZTg4MGNkM2VkYWY5ZjkzMmRjNjFkM2RhZTgyM2VhNzdlMDMyM2Y5NGFkYjlmNmE3MmZlJ10sXG4gKiAgIH0sXG4gKiBdKVxuICogLy8gQGxvZzogW1xuICogLy8gQGxvZzogICBbXG4gKiAvLyBAbG9nOiAgICAgJzB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gKiAvLyBAbG9nOiAgICAgW1xuICogLy8gQGxvZzogICAgICAgJzB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMScsXG4gKiAvLyBAbG9nOiAgICAgICAnMHg2MGZkZDI5ZmY5MTJjZTg4MGNkM2VkYWY5ZjkzMmRjNjFkM2RhZTgyM2VhNzdlMDMyM2Y5NGFkYjlmNmE3MmZlJyxcbiAqIC8vIEBsb2c6ICAgICBdLFxuICogLy8gQGxvZzogICBdLFxuICogLy8gQGxvZzogXVxuICogYGBgXG4gKlxuICogQHBhcmFtIGFjY2Vzc0xpc3QgLSBBY2Nlc3MgbGlzdC5cbiAqIEByZXR1cm5zIExpc3Qgb2YgdHVwbGVzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdG9UdXBsZUxpc3QoYWNjZXNzTGlzdCkge1xuICAgIGlmICghYWNjZXNzTGlzdCB8fCBhY2Nlc3NMaXN0Lmxlbmd0aCA9PT0gMClcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIGNvbnN0IHR1cGxlID0gW107XG4gICAgZm9yIChjb25zdCB7IGFkZHJlc3MsIHN0b3JhZ2VLZXlzIH0gb2YgYWNjZXNzTGlzdCkge1xuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHN0b3JhZ2VLZXlzLmxlbmd0aDsgaisrKVxuICAgICAgICAgICAgaWYgKEhleC5zaXplKHN0b3JhZ2VLZXlzW2pdKSAhPT0gMzIpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRTdG9yYWdlS2V5U2l6ZUVycm9yKHtcbiAgICAgICAgICAgICAgICAgICAgc3RvcmFnZUtleTogc3RvcmFnZUtleXNbal0sXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIGlmIChhZGRyZXNzKVxuICAgICAgICAgICAgQWRkcmVzcy5hc3NlcnQoYWRkcmVzcywgeyBzdHJpY3Q6IGZhbHNlIH0pO1xuICAgICAgICB0dXBsZS5wdXNoKFthZGRyZXNzLCBzdG9yYWdlS2V5c10pO1xuICAgIH1cbiAgICByZXR1cm4gdHVwbGU7XG59XG4vKiogVGhyb3duIHdoZW4gdGhlIHNpemUgb2YgYSBzdG9yYWdlIGtleSBpcyBpbnZhbGlkLiAqL1xuZXhwb3J0IGNsYXNzIEludmFsaWRTdG9yYWdlS2V5U2l6ZUVycm9yIGV4dGVuZHMgRXJyb3JzLkJhc2VFcnJvciB7XG4gICAgY29uc3RydWN0b3IoeyBzdG9yYWdlS2V5IH0pIHtcbiAgICAgICAgc3VwZXIoYFNpemUgZm9yIHN0b3JhZ2Uga2V5IFwiJHtzdG9yYWdlS2V5fVwiIGlzIGludmFsaWQuIEV4cGVjdGVkIDMyIGJ5dGVzLiBHb3QgJHtIZXguc2l6ZShzdG9yYWdlS2V5KX0gYnl0ZXMuYCk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIm5hbWVcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6ICdBY2Nlc3NMaXN0LkludmFsaWRTdG9yYWdlS2V5U2l6ZUVycm9yJ1xuICAgICAgICB9KTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1BY2Nlc3NMaXN0LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ox/_esm/core/AccessList.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ox/_esm/core/AccountProof.js":
/*!***************************************************!*\
  !*** ./node_modules/ox/_esm/core/AccountProof.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n\n//# sourceMappingURL=AccountProof.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9veC9fZXNtL2NvcmUvQWNjb3VudFByb29mLmpzIiwibWFwcGluZ3MiOiI7QUFBVTtBQUNWIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGNoYW5kXFxEb3dubG9hZHNcXGpvaG53cmljaGtpZGludG9yaXp6XFxub2RlX21vZHVsZXNcXG94XFxfZXNtXFxjb3JlXFxBY2NvdW50UHJvb2YuanMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHt9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QWNjb3VudFByb29mLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ox/_esm/core/AccountProof.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ox/_esm/core/AesGcm.js":
/*!*********************************************!*\
  !*** ./node_modules/ox/_esm/core/AesGcm.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decrypt: () => (/* binding */ decrypt),\n/* harmony export */   encrypt: () => (/* binding */ encrypt),\n/* harmony export */   getKey: () => (/* binding */ getKey),\n/* harmony export */   ivLength: () => (/* binding */ ivLength),\n/* harmony export */   randomSalt: () => (/* binding */ randomSalt)\n/* harmony export */ });\n/* harmony import */ var _Bytes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Bytes.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Bytes.js\");\n/* harmony import */ var _Hex_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Hex.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Hex.js\");\n\n\nconst ivLength = 16;\n/**\n * Decrypts encrypted data using AES-GCM.\n *\n * @example\n * ```ts twoslash\n * import { AesGcm, Hex } from 'ox'\n *\n * const key = await AesGcm.getKey({ password: 'qwerty' })\n * const secret = Hex.fromString('i am a secret message')\n *\n * const encrypted = await AesGcm.encrypt(secret, key)\n *\n * const decrypted = await AesGcm.decrypt(encrypted, key) // [!code focus]\n * // @log: Hex.fromString('i am a secret message')\n * ```\n *\n * @param value - The data to encrypt.\n * @param key - The `CryptoKey` to use for encryption.\n * @param options - Decryption options.\n * @returns The decrypted data.\n */\nasync function decrypt(value, key, options = {}) {\n    const { as = typeof value === 'string' ? 'Hex' : 'Bytes' } = options;\n    const encrypted = _Bytes_js__WEBPACK_IMPORTED_MODULE_0__.from(value);\n    const iv = encrypted.slice(0, ivLength);\n    const data = encrypted.slice(ivLength);\n    const decrypted = await globalThis.crypto.subtle.decrypt({\n        name: 'AES-GCM',\n        iv,\n    }, key, _Bytes_js__WEBPACK_IMPORTED_MODULE_0__.from(data));\n    const result = new Uint8Array(decrypted);\n    if (as === 'Bytes')\n        return result;\n    return _Hex_js__WEBPACK_IMPORTED_MODULE_1__.from(result);\n}\n/**\n * Encrypts data using AES-GCM.\n *\n * @example\n * ```ts twoslash\n * import { AesGcm, Hex } from 'ox'\n *\n * const key = await AesGcm.getKey({ password: 'qwerty' })\n * const secret = Hex.fromString('i am a secret message')\n *\n * const encrypted = await AesGcm.encrypt(secret, key) // [!code focus]\n * // @log: '0x5e257b25bcf53d5431e54e5a68ca0138306d31bb6154f35a97bb8ea18111e7d82bcf619d3c76c4650688bc5310eed80b8fc86d1e3e'\n * ```\n *\n * @param value - The data to encrypt.\n * @param key - The `CryptoKey` to use for encryption.\n * @param options - Encryption options.\n * @returns The encrypted data.\n */\nasync function encrypt(value, key, options = {}) {\n    const { as = typeof value === 'string' ? 'Hex' : 'Bytes' } = options;\n    const iv = _Bytes_js__WEBPACK_IMPORTED_MODULE_0__.random(ivLength);\n    const encrypted = await globalThis.crypto.subtle.encrypt({\n        name: 'AES-GCM',\n        iv,\n    }, key, _Bytes_js__WEBPACK_IMPORTED_MODULE_0__.from(value));\n    const result = _Bytes_js__WEBPACK_IMPORTED_MODULE_0__.concat(iv, new Uint8Array(encrypted));\n    if (as === 'Bytes')\n        return result;\n    return _Hex_js__WEBPACK_IMPORTED_MODULE_1__.from(result);\n}\n/**\n * Derives an AES-GCM key from a password using PBKDF2.\n *\n * @example\n * ```ts twoslash\n * import { AesGcm } from 'ox'\n *\n * const key = await AesGcm.getKey({ password: 'qwerty' })\n * // @log: CryptoKey {}\n * ```\n *\n * @param options - Options for key derivation.\n * @returns The derived key.\n */\nasync function getKey(options) {\n    const { iterations = 900_000, password, salt = randomSalt(32) } = options;\n    const baseKey = await globalThis.crypto.subtle.importKey('raw', _Bytes_js__WEBPACK_IMPORTED_MODULE_0__.fromString(password), { name: 'PBKDF2' }, false, ['deriveBits', 'deriveKey']);\n    const key = await globalThis.crypto.subtle.deriveKey({\n        name: 'PBKDF2',\n        salt,\n        iterations,\n        hash: 'SHA-256',\n    }, baseKey, { name: 'AES-GCM', length: 256 }, false, ['encrypt', 'decrypt']);\n    return key;\n}\n/**\n * Generates a random salt of the specified size.\n *\n * @example\n * ```ts twoslash\n * import { AesGcm } from 'ox'\n *\n * const salt = AesGcm.randomSalt()\n * // @log: Uint8Array [123, 79, 183, 167, 163, 136, 136, 16, 168, 126, 13, 165, 170, 166, 136, 136, 16, 168, 126, 13, 165, 170, 166, 136, 136, 16, 168, 126, 13, 165, 170, 166]\n * ```\n *\n * @param size - The size of the salt to generate. Defaults to `32`.\n * @returns A random salt of the specified size.\n */\nfunction randomSalt(size = 32) {\n    return _Bytes_js__WEBPACK_IMPORTED_MODULE_0__.random(size);\n}\n//# sourceMappingURL=AesGcm.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9veC9fZXNtL2NvcmUvQWVzR2NtLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBb0M7QUFDSjtBQUN6QjtBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLGNBQWM7QUFDMUI7QUFDQSxxQ0FBcUMsb0JBQW9CO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sK0NBQStDO0FBQ3RELFlBQVksbURBQW1EO0FBQy9ELHNCQUFzQiwyQ0FBVTtBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSyxPQUFPLDJDQUFVO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBLFdBQVcseUNBQVE7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxjQUFjO0FBQzFCO0FBQ0EscUNBQXFDLG9CQUFvQjtBQUN6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sK0NBQStDO0FBQ3RELFlBQVksbURBQW1EO0FBQy9ELGVBQWUsNkNBQVk7QUFDM0I7QUFDQTtBQUNBO0FBQ0EsS0FBSyxPQUFPLDJDQUFVO0FBQ3RCLG1CQUFtQiw2Q0FBWTtBQUMvQjtBQUNBO0FBQ0EsV0FBVyx5Q0FBUTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLFNBQVM7QUFDckI7QUFDQSxxQ0FBcUMsb0JBQW9CO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AsWUFBWSx3REFBd0Q7QUFDcEUsb0VBQW9FLGlEQUFnQixjQUFjLGdCQUFnQjtBQUNsSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSyxhQUFhLDhCQUE4QjtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksU0FBUztBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCxXQUFXLDZDQUFZO0FBQ3ZCO0FBQ0EiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcY2hhbmRcXERvd25sb2Fkc1xcam9obndyaWNoa2lkaW50b3JpenpcXG5vZGVfbW9kdWxlc1xcb3hcXF9lc21cXGNvcmVcXEFlc0djbS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBCeXRlcyBmcm9tICcuL0J5dGVzLmpzJztcbmltcG9ydCAqIGFzIEhleCBmcm9tICcuL0hleC5qcyc7XG5leHBvcnQgY29uc3QgaXZMZW5ndGggPSAxNjtcbi8qKlxuICogRGVjcnlwdHMgZW5jcnlwdGVkIGRhdGEgdXNpbmcgQUVTLUdDTS5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgdHMgdHdvc2xhc2hcbiAqIGltcG9ydCB7IEFlc0djbSwgSGV4IH0gZnJvbSAnb3gnXG4gKlxuICogY29uc3Qga2V5ID0gYXdhaXQgQWVzR2NtLmdldEtleSh7IHBhc3N3b3JkOiAncXdlcnR5JyB9KVxuICogY29uc3Qgc2VjcmV0ID0gSGV4LmZyb21TdHJpbmcoJ2kgYW0gYSBzZWNyZXQgbWVzc2FnZScpXG4gKlxuICogY29uc3QgZW5jcnlwdGVkID0gYXdhaXQgQWVzR2NtLmVuY3J5cHQoc2VjcmV0LCBrZXkpXG4gKlxuICogY29uc3QgZGVjcnlwdGVkID0gYXdhaXQgQWVzR2NtLmRlY3J5cHQoZW5jcnlwdGVkLCBrZXkpIC8vIFshY29kZSBmb2N1c11cbiAqIC8vIEBsb2c6IEhleC5mcm9tU3RyaW5nKCdpIGFtIGEgc2VjcmV0IG1lc3NhZ2UnKVxuICogYGBgXG4gKlxuICogQHBhcmFtIHZhbHVlIC0gVGhlIGRhdGEgdG8gZW5jcnlwdC5cbiAqIEBwYXJhbSBrZXkgLSBUaGUgYENyeXB0b0tleWAgdG8gdXNlIGZvciBlbmNyeXB0aW9uLlxuICogQHBhcmFtIG9wdGlvbnMgLSBEZWNyeXB0aW9uIG9wdGlvbnMuXG4gKiBAcmV0dXJucyBUaGUgZGVjcnlwdGVkIGRhdGEuXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBkZWNyeXB0KHZhbHVlLCBrZXksIG9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IHsgYXMgPSB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnID8gJ0hleCcgOiAnQnl0ZXMnIH0gPSBvcHRpb25zO1xuICAgIGNvbnN0IGVuY3J5cHRlZCA9IEJ5dGVzLmZyb20odmFsdWUpO1xuICAgIGNvbnN0IGl2ID0gZW5jcnlwdGVkLnNsaWNlKDAsIGl2TGVuZ3RoKTtcbiAgICBjb25zdCBkYXRhID0gZW5jcnlwdGVkLnNsaWNlKGl2TGVuZ3RoKTtcbiAgICBjb25zdCBkZWNyeXB0ZWQgPSBhd2FpdCBnbG9iYWxUaGlzLmNyeXB0by5zdWJ0bGUuZGVjcnlwdCh7XG4gICAgICAgIG5hbWU6ICdBRVMtR0NNJyxcbiAgICAgICAgaXYsXG4gICAgfSwga2V5LCBCeXRlcy5mcm9tKGRhdGEpKTtcbiAgICBjb25zdCByZXN1bHQgPSBuZXcgVWludDhBcnJheShkZWNyeXB0ZWQpO1xuICAgIGlmIChhcyA9PT0gJ0J5dGVzJylcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICByZXR1cm4gSGV4LmZyb20ocmVzdWx0KTtcbn1cbi8qKlxuICogRW5jcnlwdHMgZGF0YSB1c2luZyBBRVMtR0NNLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGB0cyB0d29zbGFzaFxuICogaW1wb3J0IHsgQWVzR2NtLCBIZXggfSBmcm9tICdveCdcbiAqXG4gKiBjb25zdCBrZXkgPSBhd2FpdCBBZXNHY20uZ2V0S2V5KHsgcGFzc3dvcmQ6ICdxd2VydHknIH0pXG4gKiBjb25zdCBzZWNyZXQgPSBIZXguZnJvbVN0cmluZygnaSBhbSBhIHNlY3JldCBtZXNzYWdlJylcbiAqXG4gKiBjb25zdCBlbmNyeXB0ZWQgPSBhd2FpdCBBZXNHY20uZW5jcnlwdChzZWNyZXQsIGtleSkgLy8gWyFjb2RlIGZvY3VzXVxuICogLy8gQGxvZzogJzB4NWUyNTdiMjViY2Y1M2Q1NDMxZTU0ZTVhNjhjYTAxMzgzMDZkMzFiYjYxNTRmMzVhOTdiYjhlYTE4MTExZTdkODJiY2Y2MTlkM2M3NmM0NjUwNjg4YmM1MzEwZWVkODBiOGZjODZkMWUzZSdcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB2YWx1ZSAtIFRoZSBkYXRhIHRvIGVuY3J5cHQuXG4gKiBAcGFyYW0ga2V5IC0gVGhlIGBDcnlwdG9LZXlgIHRvIHVzZSBmb3IgZW5jcnlwdGlvbi5cbiAqIEBwYXJhbSBvcHRpb25zIC0gRW5jcnlwdGlvbiBvcHRpb25zLlxuICogQHJldHVybnMgVGhlIGVuY3J5cHRlZCBkYXRhLlxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZW5jcnlwdCh2YWx1ZSwga2V5LCBvcHRpb25zID0ge30pIHtcbiAgICBjb25zdCB7IGFzID0gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyA/ICdIZXgnIDogJ0J5dGVzJyB9ID0gb3B0aW9ucztcbiAgICBjb25zdCBpdiA9IEJ5dGVzLnJhbmRvbShpdkxlbmd0aCk7XG4gICAgY29uc3QgZW5jcnlwdGVkID0gYXdhaXQgZ2xvYmFsVGhpcy5jcnlwdG8uc3VidGxlLmVuY3J5cHQoe1xuICAgICAgICBuYW1lOiAnQUVTLUdDTScsXG4gICAgICAgIGl2LFxuICAgIH0sIGtleSwgQnl0ZXMuZnJvbSh2YWx1ZSkpO1xuICAgIGNvbnN0IHJlc3VsdCA9IEJ5dGVzLmNvbmNhdChpdiwgbmV3IFVpbnQ4QXJyYXkoZW5jcnlwdGVkKSk7XG4gICAgaWYgKGFzID09PSAnQnl0ZXMnKVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIHJldHVybiBIZXguZnJvbShyZXN1bHQpO1xufVxuLyoqXG4gKiBEZXJpdmVzIGFuIEFFUy1HQ00ga2V5IGZyb20gYSBwYXNzd29yZCB1c2luZyBQQktERjIuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHRzIHR3b3NsYXNoXG4gKiBpbXBvcnQgeyBBZXNHY20gfSBmcm9tICdveCdcbiAqXG4gKiBjb25zdCBrZXkgPSBhd2FpdCBBZXNHY20uZ2V0S2V5KHsgcGFzc3dvcmQ6ICdxd2VydHknIH0pXG4gKiAvLyBAbG9nOiBDcnlwdG9LZXkge31cbiAqIGBgYFxuICpcbiAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9ucyBmb3Iga2V5IGRlcml2YXRpb24uXG4gKiBAcmV0dXJucyBUaGUgZGVyaXZlZCBrZXkuXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRLZXkob3B0aW9ucykge1xuICAgIGNvbnN0IHsgaXRlcmF0aW9ucyA9IDkwMF8wMDAsIHBhc3N3b3JkLCBzYWx0ID0gcmFuZG9tU2FsdCgzMikgfSA9IG9wdGlvbnM7XG4gICAgY29uc3QgYmFzZUtleSA9IGF3YWl0IGdsb2JhbFRoaXMuY3J5cHRvLnN1YnRsZS5pbXBvcnRLZXkoJ3JhdycsIEJ5dGVzLmZyb21TdHJpbmcocGFzc3dvcmQpLCB7IG5hbWU6ICdQQktERjInIH0sIGZhbHNlLCBbJ2Rlcml2ZUJpdHMnLCAnZGVyaXZlS2V5J10pO1xuICAgIGNvbnN0IGtleSA9IGF3YWl0IGdsb2JhbFRoaXMuY3J5cHRvLnN1YnRsZS5kZXJpdmVLZXkoe1xuICAgICAgICBuYW1lOiAnUEJLREYyJyxcbiAgICAgICAgc2FsdCxcbiAgICAgICAgaXRlcmF0aW9ucyxcbiAgICAgICAgaGFzaDogJ1NIQS0yNTYnLFxuICAgIH0sIGJhc2VLZXksIHsgbmFtZTogJ0FFUy1HQ00nLCBsZW5ndGg6IDI1NiB9LCBmYWxzZSwgWydlbmNyeXB0JywgJ2RlY3J5cHQnXSk7XG4gICAgcmV0dXJuIGtleTtcbn1cbi8qKlxuICogR2VuZXJhdGVzIGEgcmFuZG9tIHNhbHQgb2YgdGhlIHNwZWNpZmllZCBzaXplLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGB0cyB0d29zbGFzaFxuICogaW1wb3J0IHsgQWVzR2NtIH0gZnJvbSAnb3gnXG4gKlxuICogY29uc3Qgc2FsdCA9IEFlc0djbS5yYW5kb21TYWx0KClcbiAqIC8vIEBsb2c6IFVpbnQ4QXJyYXkgWzEyMywgNzksIDE4MywgMTY3LCAxNjMsIDEzNiwgMTM2LCAxNiwgMTY4LCAxMjYsIDEzLCAxNjUsIDE3MCwgMTY2LCAxMzYsIDEzNiwgMTYsIDE2OCwgMTI2LCAxMywgMTY1LCAxNzAsIDE2NiwgMTM2LCAxMzYsIDE2LCAxNjgsIDEyNiwgMTMsIDE2NSwgMTcwLCAxNjZdXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gc2l6ZSAtIFRoZSBzaXplIG9mIHRoZSBzYWx0IHRvIGdlbmVyYXRlLiBEZWZhdWx0cyB0byBgMzJgLlxuICogQHJldHVybnMgQSByYW5kb20gc2FsdCBvZiB0aGUgc3BlY2lmaWVkIHNpemUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByYW5kb21TYWx0KHNpemUgPSAzMikge1xuICAgIHJldHVybiBCeXRlcy5yYW5kb20oc2l6ZSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1BZXNHY20uanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ox/_esm/core/AesGcm.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ox/_esm/core/Authorization.js":
/*!****************************************************!*\
  !*** ./node_modules/ox/_esm/core/Authorization.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   from: () => (/* binding */ from),\n/* harmony export */   fromRpc: () => (/* binding */ fromRpc),\n/* harmony export */   fromRpcList: () => (/* binding */ fromRpcList),\n/* harmony export */   fromTuple: () => (/* binding */ fromTuple),\n/* harmony export */   fromTupleList: () => (/* binding */ fromTupleList),\n/* harmony export */   getSignPayload: () => (/* binding */ getSignPayload),\n/* harmony export */   hash: () => (/* binding */ hash),\n/* harmony export */   toRpc: () => (/* binding */ toRpc),\n/* harmony export */   toRpcList: () => (/* binding */ toRpcList),\n/* harmony export */   toTuple: () => (/* binding */ toTuple),\n/* harmony export */   toTupleList: () => (/* binding */ toTupleList)\n/* harmony export */ });\n/* harmony import */ var _Hash_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Hash.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Hash.js\");\n/* harmony import */ var _Hex_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Hex.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Hex.js\");\n/* harmony import */ var _Rlp_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Rlp.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Rlp.js\");\n/* harmony import */ var _Signature_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Signature.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Signature.js\");\n\n\n\n\n/**\n * Converts an [EIP-7702](https://eips.ethereum.org/EIPS/eip-7702) Authorization object into a typed {@link ox#Authorization.Authorization}.\n *\n * @example\n * An Authorization can be instantiated from an [EIP-7702](https://eips.ethereum.org/EIPS/eip-7702) Authorization tuple in object format.\n *\n * ```ts twoslash\n * import { Authorization } from 'ox'\n *\n * const authorization = Authorization.from({\n *   address: '0x1234567890abcdef1234567890abcdef12345678',\n *   chainId: 1,\n *   nonce: 69n,\n * })\n * ```\n *\n * @example\n * ### Attaching Signatures\n *\n * A {@link ox#Signature.Signature} can be attached with the `signature` option. The example below demonstrates signing\n * an Authorization with {@link ox#Secp256k1.(sign:function)}.\n *\n * ```ts twoslash\n * import { Authorization, Secp256k1 } from 'ox'\n *\n * const authorization = Authorization.from({\n *   address: '0xbe95c3f554e9fc85ec51be69a3d807a0d55bcf2c',\n *   chainId: 1,\n *   nonce: 40n,\n * })\n *\n * const signature = Secp256k1.sign({\n *   payload: Authorization.getSignPayload(authorization),\n *   privateKey: '0x...',\n * })\n *\n * const authorization_signed = Authorization.from(authorization, { signature }) // [!code focus]\n * ```\n *\n * @param authorization - An [EIP-7702](https://eips.ethereum.org/EIPS/eip-7702) Authorization tuple in object format.\n * @param options - Authorization options.\n * @returns The {@link ox#Authorization.Authorization}.\n */\nfunction from(authorization, options = {}) {\n    if (typeof authorization.chainId === 'string')\n        return fromRpc(authorization);\n    return { ...authorization, ...options.signature };\n}\n/**\n * Converts an {@link ox#Authorization.Rpc} to an {@link ox#Authorization.Authorization}.\n *\n * @example\n * ```ts twoslash\n * import { Authorization } from 'ox'\n *\n * const authorization = Authorization.fromRpc({\n *   address: '0x0000000000000000000000000000000000000000',\n *   chainId: '0x1',\n *   nonce: '0x1',\n *   r: '0x635dc2033e60185bb36709c29c75d64ea51dfbd91c32ef4be198e4ceb169fb4d',\n *   s: '0x50c2667ac4c771072746acfdcf1f1483336dcca8bd2df47cd83175dbe60f0540',\n *   yParity: '0x0',\n * })\n * ```\n *\n * @param authorization - The RPC-formatted Authorization.\n * @returns A signed {@link ox#Authorization.Authorization}.\n */\nfunction fromRpc(authorization) {\n    const { address, chainId, nonce } = authorization;\n    const signature = _Signature_js__WEBPACK_IMPORTED_MODULE_0__.extract(authorization);\n    return {\n        address,\n        chainId: Number(chainId),\n        nonce: BigInt(nonce),\n        ...signature,\n    };\n}\n/**\n * Converts an {@link ox#Authorization.ListRpc} to an {@link ox#Authorization.List}.\n *\n * @example\n * ```ts twoslash\n * import { Authorization } from 'ox'\n *\n * const authorizationList = Authorization.fromRpcList([{\n *   address: '0x0000000000000000000000000000000000000000',\n *   chainId: '0x1',\n *   nonce: '0x1',\n *   r: '0x635dc2033e60185bb36709c29c75d64ea51dfbd91c32ef4be198e4ceb169fb4d',\n *   s: '0x50c2667ac4c771072746acfdcf1f1483336dcca8bd2df47cd83175dbe60f0540',\n *   yParity: '0x0',\n * }])\n * ```\n *\n * @param authorizationList - The RPC-formatted Authorization list.\n * @returns A signed {@link ox#Authorization.List}.\n */\nfunction fromRpcList(authorizationList) {\n    return authorizationList.map(fromRpc);\n}\n/**\n * Converts an {@link ox#Authorization.Tuple} to an {@link ox#Authorization.Authorization}.\n *\n * @example\n * ```ts twoslash\n * import { Authorization } from 'ox'\n *\n * const authorization = Authorization.fromTuple([\n *   '0x1',\n *   '0xbe95c3f554e9fc85ec51be69a3d807a0d55bcf2c',\n *   '0x3'\n * ])\n * // @log: {\n * // @log:   address: '0xbe95c3f554e9fc85ec51be69a3d807a0d55bcf2c',\n * // @log:   chainId: 1,\n * // @log:   nonce: 3n\n * // @log: }\n * ```\n *\n * @example\n * It is also possible to append a Signature tuple to the end of an Authorization tuple.\n *\n * ```ts twoslash\n * import { Authorization } from 'ox'\n *\n * const authorization = Authorization.fromTuple([\n *   '0x1',\n *   '0xbe95c3f554e9fc85ec51be69a3d807a0d55bcf2c',\n *   '0x3',\n *   '0x1',\n *   '0x68a020a209d3d56c46f38cc50a33f704f4a9a10a59377f8dd762ac66910e9b90',\n *   '0x7e865ad05c4035ab5792787d4a0297a43617ae897930a6fe4d822b8faea52064',\n * ])\n * // @log: {\n * // @log:   address: '0xbe95c3f554e9fc85ec51be69a3d807a0d55bcf2c',\n * // @log:   chainId: 1,\n * // @log:   nonce: 3n\n * // @log:   r: BigInt('0x68a020a209d3d56c46f38cc50a33f704f4a9a10a59377f8dd762ac66910e9b90'),\n * // @log:   s: BigInt('0x7e865ad05c4035ab5792787d4a0297a43617ae897930a6fe4d822b8faea52064'),\n * // @log:   yParity: 0,\n * // @log: }\n * ```\n *\n * @param tuple - The [EIP-7702](https://eips.ethereum.org/EIPS/eip-7702) Authorization tuple.\n * @returns The {@link ox#Authorization.Authorization}.\n */\nfunction fromTuple(tuple) {\n    const [chainId, address, nonce, yParity, r, s] = tuple;\n    const signature = yParity && r && s ? _Signature_js__WEBPACK_IMPORTED_MODULE_0__.fromTuple([yParity, r, s]) : undefined;\n    return from({\n        address,\n        chainId: Number(chainId),\n        nonce: BigInt(nonce),\n        ...signature,\n    });\n}\n/**\n * Converts an {@link ox#Authorization.TupleList} to an {@link ox#Authorization.List}.\n *\n * @example\n * ```ts twoslash\n * import { Authorization } from 'ox'\n *\n * const authorizationList = Authorization.fromTupleList([\n *   ['0x1', '0xbe95c3f554e9fc85ec51be69a3d807a0d55bcf2c', '0x3'],\n *   ['0x3', '0xbe95c3f554e9fc85ec51be69a3d807a0d55bcf2c', '0x14'],\n * ])\n * // @log: [\n * // @log:   {\n * // @log:     address: '0xbe95c3f554e9fc85ec51be69a3d807a0d55bcf2c',\n * // @log:     chainId: 1,\n * // @log:     nonce: 3n,\n * // @log:   },\n * // @log:   {\n * // @log:     address: '0xbe95c3f554e9fc85ec51be69a3d807a0d55bcf2c',\n * // @log:     chainId: 3,\n * // @log:     nonce: 20n,\n * // @log:   },\n * // @log: ]\n * ```\n *\n * @example\n * It is also possible to append a Signature tuple to the end of an Authorization tuple.\n *\n * ```ts twoslash\n * import { Authorization } from 'ox'\n *\n * const authorizationList = Authorization.fromTupleList([\n *   ['0x1', '0xbe95c3f554e9fc85ec51be69a3d807a0d55bcf2c', '0x3', '0x1', '0x68a020a209d3d56c46f38cc50a33f704f4a9a10a59377f8dd762ac66910e9b90', '0x7e865ad05c4035ab5792787d4a0297a43617ae897930a6fe4d822b8faea52064'],\n *   ['0x3', '0xbe95c3f554e9fc85ec51be69a3d807a0d55bcf2c', '0x14', '0x1', '0x68a020a209d3d56c46f38cc50a33f704f4a9a10a59377f8dd762ac66910e9b90', '0x7e865ad05c4035ab5792787d4a0297a43617ae897930a6fe4d822b8faea52064'],\n * ])\n * // @log: [\n * // @log:   {\n * // @log:     address: '0xbe95c3f554e9fc85ec51be69a3d807a0d55bcf2c',\n * // @log:     chainId: 1,\n * // @log:     nonce: 3n,\n * // @log:     r: BigInt('0x68a020a209d3d56c46f38cc50a33f704f4a9a10a59377f8dd762ac66910e9b90'),\n * // @log:     s: BigInt('0x7e865ad05c4035ab5792787d4a0297a43617ae897930a6fe4d822b8faea52064'),\n * // @log:     yParity: 0,\n * // @log:   },\n * // @log:   {\n * // @log:     address: '0xbe95c3f554e9fc85ec51be69a3d807a0d55bcf2c',\n * // @log:     chainId: 3,\n * // @log:     nonce: 20n,\n * // @log:     r: BigInt('0x68a020a209d3d56c46f38cc50a33f704f4a9a10a59377f8dd762ac66910e9b90'),\n * // @log:     s: BigInt('0x7e865ad05c4035ab5792787d4a0297a43617ae897930a6fe4d822b8faea52064'),\n * // @log:     yParity: 0,\n * // @log:   },\n * // @log: ]\n * ```\n *\n * @param tupleList - The [EIP-7702](https://eips.ethereum.org/EIPS/eip-7702) Authorization tuple list.\n * @returns An {@link ox#Authorization.List}.\n */\nfunction fromTupleList(tupleList) {\n    const list = [];\n    for (const tuple of tupleList)\n        list.push(fromTuple(tuple));\n    return list;\n}\n/**\n * Computes the sign payload for an {@link ox#Authorization.Authorization} in [EIP-7702 format](https://eips.ethereum.org/EIPS/eip-7702): `keccak256('0x05' || rlp([chain_id, address, nonce]))`.\n *\n * @example\n * The example below demonstrates computing the sign payload for an {@link ox#Authorization.Authorization}. This payload\n * can then be passed to signing functions like {@link ox#Secp256k1.(sign:function)}.\n *\n * ```ts twoslash\n * import { Authorization, Secp256k1 } from 'ox'\n *\n * const authorization = Authorization.from({\n *   address: '0x1234567890abcdef1234567890abcdef12345678',\n *   chainId: 1,\n *   nonce: 69n,\n * })\n *\n * const payload = Authorization.getSignPayload(authorization) // [!code focus]\n *\n * const signature = Secp256k1.sign({\n *   payload,\n *   privateKey: '0x...',\n * })\n * ```\n *\n * @param authorization - The {@link ox#Authorization.Authorization}.\n * @returns The sign payload.\n */\nfunction getSignPayload(authorization) {\n    return hash(authorization);\n}\n/**\n * Computes the hash for an {@link ox#Authorization.Authorization} in [EIP-7702 format](https://eips.ethereum.org/EIPS/eip-7702): `keccak256('0x05' || rlp([chain_id, address, nonce]))`.\n *\n * @example\n * ```ts twoslash\n * import { Authorization } from 'ox'\n *\n * const authorization = Authorization.from({\n *   address: '0x1234567890abcdef1234567890abcdef12345678',\n *   chainId: 1,\n *   nonce: 69n,\n * })\n *\n * const hash = Authorization.hash(authorization) // [!code focus]\n * ```\n *\n * @param authorization - The {@link ox#Authorization.Authorization}.\n * @returns The hash.\n */\nfunction hash(authorization) {\n    return _Hash_js__WEBPACK_IMPORTED_MODULE_1__.keccak256(_Hex_js__WEBPACK_IMPORTED_MODULE_2__.concat('0x05', _Rlp_js__WEBPACK_IMPORTED_MODULE_3__.fromHex(toTuple(authorization))));\n}\n/**\n * Converts an {@link ox#Authorization.Authorization} to an {@link ox#Authorization.Rpc}.\n *\n * @example\n * ```ts twoslash\n * import { Authorization } from 'ox'\n *\n * const authorization = Authorization.toRpc({\n *   address: '0x0000000000000000000000000000000000000000',\n *   chainId: 1,\n *   nonce: 1n,\n *   r: 44944627813007772897391531230081695102703289123332187696115181104739239197517n,\n *   s: 36528503505192438307355164441104001310566505351980369085208178712678799181120n,\n *   yParity: 0,\n * })\n * ```\n *\n * @param authorization - An Authorization.\n * @returns An RPC-formatted Authorization.\n */\nfunction toRpc(authorization) {\n    const { address, chainId, nonce, ...signature } = authorization;\n    return {\n        address,\n        chainId: _Hex_js__WEBPACK_IMPORTED_MODULE_2__.fromNumber(chainId),\n        nonce: _Hex_js__WEBPACK_IMPORTED_MODULE_2__.fromNumber(nonce),\n        ..._Signature_js__WEBPACK_IMPORTED_MODULE_0__.toRpc(signature),\n    };\n}\n/**\n * Converts an {@link ox#Authorization.List} to an {@link ox#Authorization.ListRpc}.\n *\n * @example\n * ```ts twoslash\n * import { Authorization } from 'ox'\n *\n * const authorization = Authorization.toRpcList([{\n *   address: '0x0000000000000000000000000000000000000000',\n *   chainId: 1,\n *   nonce: 1n,\n *   r: 44944627813007772897391531230081695102703289123332187696115181104739239197517n,\n *   s: 36528503505192438307355164441104001310566505351980369085208178712678799181120n,\n *   yParity: 0,\n * }])\n * ```\n *\n * @param authorizationList - An Authorization List.\n * @returns An RPC-formatted Authorization List.\n */\nfunction toRpcList(authorizationList) {\n    return authorizationList.map(toRpc);\n}\n/**\n * Converts an {@link ox#Authorization.Authorization} to an {@link ox#Authorization.Tuple}.\n *\n * @example\n * ```ts twoslash\n * import { Authorization } from 'ox'\n *\n * const authorization = Authorization.from({\n *   address: '0x1234567890abcdef1234567890abcdef12345678',\n *   chainId: 1,\n *   nonce: 69n,\n * })\n *\n * const tuple = Authorization.toTuple(authorization) // [!code focus]\n * // @log: [\n * // @log:   address: '0x1234567890abcdef1234567890abcdef12345678',\n * // @log:   chainId: 1,\n * // @log:   nonce: 69n,\n * // @log: ]\n * ```\n *\n * @param authorization - The {@link ox#Authorization.Authorization}.\n * @returns An [EIP-7702](https://eips.ethereum.org/EIPS/eip-7702) Authorization tuple.\n */\nfunction toTuple(authorization) {\n    const { address, chainId, nonce } = authorization;\n    const signature = _Signature_js__WEBPACK_IMPORTED_MODULE_0__.extract(authorization);\n    return [\n        chainId ? _Hex_js__WEBPACK_IMPORTED_MODULE_2__.fromNumber(chainId) : '0x',\n        address,\n        nonce ? _Hex_js__WEBPACK_IMPORTED_MODULE_2__.fromNumber(nonce) : '0x',\n        ...(signature ? _Signature_js__WEBPACK_IMPORTED_MODULE_0__.toTuple(signature) : []),\n    ];\n}\n/**\n * Converts an {@link ox#Authorization.List} to an {@link ox#Authorization.TupleList}.\n *\n * @example\n * ```ts twoslash\n * import { Authorization } from 'ox'\n *\n * const authorization_1 = Authorization.from({\n *   address: '0x1234567890abcdef1234567890abcdef12345678',\n *   chainId: 1,\n *   nonce: 69n,\n * })\n * const authorization_2 = Authorization.from({\n *   address: '0x1234567890abcdef1234567890abcdef12345678',\n *   chainId: 3,\n *   nonce: 20n,\n * })\n *\n * const tuple = Authorization.toTupleList([authorization_1, authorization_2]) // [!code focus]\n * // @log: [\n * // @log:   [\n * // @log:     address: '0x1234567890abcdef1234567890abcdef12345678',\n * // @log:     chainId: 1,\n * // @log:     nonce: 69n,\n * // @log:   ],\n * // @log:   [\n * // @log:     address: '0x1234567890abcdef1234567890abcdef12345678',\n * // @log:     chainId: 3,\n * // @log:     nonce: 20n,\n * // @log:   ],\n * // @log: ]\n * ```\n *\n * @param list - An {@link ox#Authorization.List}.\n * @returns An [EIP-7702](https://eips.ethereum.org/EIPS/eip-7702) Authorization tuple list.\n */\nfunction toTupleList(list) {\n    if (!list || list.length === 0)\n        return [];\n    const tupleList = [];\n    for (const authorization of list)\n        tupleList.push(toTuple(authorization));\n    return tupleList;\n}\n//# sourceMappingURL=Authorization.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ox/_esm/core/Authorization.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ox/_esm/core/Base58.js":
/*!*********************************************!*\
  !*** ./node_modules/ox/_esm/core/Base58.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fromBytes: () => (/* binding */ fromBytes),\n/* harmony export */   fromHex: () => (/* binding */ fromHex),\n/* harmony export */   fromString: () => (/* binding */ fromString),\n/* harmony export */   toBytes: () => (/* binding */ toBytes),\n/* harmony export */   toHex: () => (/* binding */ toHex),\n/* harmony export */   toString: () => (/* binding */ toString)\n/* harmony export */ });\n/* harmony import */ var _Bytes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Bytes.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Bytes.js\");\n/* harmony import */ var _Hex_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Hex.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Hex.js\");\n/* harmony import */ var _internal_base58_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/base58.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/internal/base58.js\");\n\n\n\n/**\n * Encodes a {@link ox#Bytes.Bytes} to a Base58-encoded string.\n *\n * @example\n * ```ts twoslash\n * import { Base58, Bytes } from 'ox'\n *\n * const value = Base58.fromBytes(Bytes.fromString('Hello World!'))\n * // @log: '2NEpo7TZRRrLZSi2U'\n * ```\n *\n * @param value - The byte array to encode.\n * @returns The Base58 encoded string.\n */\nfunction fromBytes(value) {\n    return _internal_base58_js__WEBPACK_IMPORTED_MODULE_0__.from(value);\n}\n/**\n * Encodes a {@link ox#Hex.Hex} to a Base58-encoded string.\n *\n * @example\n * ```ts twoslash\n * import { Base58, Hex } from 'ox'\n *\n * const value = Base58.fromHex(Hex.fromString('Hello World!'))\n * // @log: '2NEpo7TZRRrLZSi2U'\n * ```\n *\n * @param value - The byte array to encode.\n * @returns The Base58 encoded string.\n */\nfunction fromHex(value) {\n    return _internal_base58_js__WEBPACK_IMPORTED_MODULE_0__.from(value);\n}\n/**\n * Encodes a string to a Base58-encoded string.\n *\n * @example\n * ```ts twoslash\n * import { Base58 } from 'ox'\n *\n * const value = Base58.fromString('Hello World!')\n * // @log: '2NEpo7TZRRrLZSi2U'\n * ```\n *\n * @param value - The string to encode.\n * @returns The Base58 encoded string.\n */\nfunction fromString(value) {\n    return _internal_base58_js__WEBPACK_IMPORTED_MODULE_0__.from(_Bytes_js__WEBPACK_IMPORTED_MODULE_1__.fromString(value));\n}\n/**\n * Decodes a Base58-encoded string to a {@link ox#Bytes.Bytes}.\n *\n * @example\n * ```ts twoslash\n * import { Base58 } from 'ox'\n *\n * const value = Base58.toBytes('2NEpo7TZRRrLZSi2U')\n * // @log: Uint8Array [ 72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33 ]\n * ```\n *\n * @param value - The Base58 encoded string.\n * @returns The decoded byte array.\n */\nfunction toBytes(value) {\n    return _Bytes_js__WEBPACK_IMPORTED_MODULE_1__.fromHex(toHex(value));\n}\n/**\n * Decodes a Base58-encoded string to {@link ox#Hex.Hex}.\n *\n * @example\n * ```ts twoslash\n * import { Base58 } from 'ox'\n *\n * const value = Base58.toHex('2NEpo7TZRRrLZSi2U')\n * // @log: '0x48656c6c6f20576f726c6421'\n * ```\n *\n * @param value - The Base58 encoded string.\n * @returns The decoded hex string.\n */\nfunction toHex(value) {\n    let integer = BigInt(0);\n    let pad = 0;\n    let checkPad = true;\n    for (let i = 0; i < value.length; i++) {\n        const char = value[i];\n        // check for leading 1s\n        if (checkPad && char === '1')\n            pad++;\n        else\n            checkPad = false;\n        // check for invalid characters\n        if (typeof _internal_base58_js__WEBPACK_IMPORTED_MODULE_0__.alphabetToInteger[char] !== 'bigint')\n            throw new Error('invalid base58 character: ' + char);\n        integer = integer * 58n;\n        integer = integer + _internal_base58_js__WEBPACK_IMPORTED_MODULE_0__.alphabetToInteger[char];\n    }\n    if (!pad)\n        return `0x${integer.toString(16)}`;\n    return `0x${'0'.repeat(pad * 2)}${integer.toString(16)}`;\n}\n/**\n * Decodes a Base58-encoded string to a string.\n *\n * @example\n * ```ts twoslash\n * import { Base58 } from 'ox'\n *\n * const value = Base58.toString('2NEpo7TZRRrLZSi2U')\n * // @log: 'Hello World!'\n * ```\n *\n * @param value - The Base58 encoded string.\n * @returns The decoded string.\n */\nfunction toString(value) {\n    return _Hex_js__WEBPACK_IMPORTED_MODULE_2__.toString(toHex(value));\n}\n//# sourceMappingURL=Base58.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9veC9fZXNtL2NvcmUvQmFzZTU4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFvQztBQUNKO0FBQ2lCO0FBQ2pEO0FBQ0EsY0FBYyxzQkFBc0I7QUFDcEM7QUFDQTtBQUNBO0FBQ0EsWUFBWSxnQkFBZ0I7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AsV0FBVyxxREFBYTtBQUN4QjtBQUNBO0FBQ0EsY0FBYyxrQkFBa0I7QUFDaEM7QUFDQTtBQUNBO0FBQ0EsWUFBWSxjQUFjO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQLFdBQVcscURBQWE7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxTQUFTO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQLFdBQVcscURBQWEsQ0FBQyxpREFBZ0I7QUFDekM7QUFDQTtBQUNBLHlDQUF5QyxxQkFBcUI7QUFDOUQ7QUFDQTtBQUNBO0FBQ0EsWUFBWSxTQUFTO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQLFdBQVcsOENBQWE7QUFDeEI7QUFDQTtBQUNBLHVDQUF1QyxpQkFBaUI7QUFDeEQ7QUFDQTtBQUNBO0FBQ0EsWUFBWSxTQUFTO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixrQkFBa0I7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsa0VBQTBCO0FBQzdDO0FBQ0E7QUFDQSw0QkFBNEIsa0VBQTBCO0FBQ3REO0FBQ0E7QUFDQSxvQkFBb0IscUJBQXFCO0FBQ3pDLGdCQUFnQixvQkFBb0IsRUFBRSxxQkFBcUI7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxTQUFTO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQLFdBQVcsNkNBQVk7QUFDdkI7QUFDQSIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxjaGFuZFxcRG93bmxvYWRzXFxqb2hud3JpY2hraWRpbnRvcml6elxcbm9kZV9tb2R1bGVzXFxveFxcX2VzbVxcY29yZVxcQmFzZTU4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIEJ5dGVzIGZyb20gJy4vQnl0ZXMuanMnO1xuaW1wb3J0ICogYXMgSGV4IGZyb20gJy4vSGV4LmpzJztcbmltcG9ydCAqIGFzIGludGVybmFsIGZyb20gJy4vaW50ZXJuYWwvYmFzZTU4LmpzJztcbi8qKlxuICogRW5jb2RlcyBhIHtAbGluayBveCNCeXRlcy5CeXRlc30gdG8gYSBCYXNlNTgtZW5jb2RlZCBzdHJpbmcuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHRzIHR3b3NsYXNoXG4gKiBpbXBvcnQgeyBCYXNlNTgsIEJ5dGVzIH0gZnJvbSAnb3gnXG4gKlxuICogY29uc3QgdmFsdWUgPSBCYXNlNTguZnJvbUJ5dGVzKEJ5dGVzLmZyb21TdHJpbmcoJ0hlbGxvIFdvcmxkIScpKVxuICogLy8gQGxvZzogJzJORXBvN1RaUlJyTFpTaTJVJ1xuICogYGBgXG4gKlxuICogQHBhcmFtIHZhbHVlIC0gVGhlIGJ5dGUgYXJyYXkgdG8gZW5jb2RlLlxuICogQHJldHVybnMgVGhlIEJhc2U1OCBlbmNvZGVkIHN0cmluZy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZyb21CeXRlcyh2YWx1ZSkge1xuICAgIHJldHVybiBpbnRlcm5hbC5mcm9tKHZhbHVlKTtcbn1cbi8qKlxuICogRW5jb2RlcyBhIHtAbGluayBveCNIZXguSGV4fSB0byBhIEJhc2U1OC1lbmNvZGVkIHN0cmluZy5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgdHMgdHdvc2xhc2hcbiAqIGltcG9ydCB7IEJhc2U1OCwgSGV4IH0gZnJvbSAnb3gnXG4gKlxuICogY29uc3QgdmFsdWUgPSBCYXNlNTguZnJvbUhleChIZXguZnJvbVN0cmluZygnSGVsbG8gV29ybGQhJykpXG4gKiAvLyBAbG9nOiAnMk5FcG83VFpSUnJMWlNpMlUnXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gdmFsdWUgLSBUaGUgYnl0ZSBhcnJheSB0byBlbmNvZGUuXG4gKiBAcmV0dXJucyBUaGUgQmFzZTU4IGVuY29kZWQgc3RyaW5nLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZnJvbUhleCh2YWx1ZSkge1xuICAgIHJldHVybiBpbnRlcm5hbC5mcm9tKHZhbHVlKTtcbn1cbi8qKlxuICogRW5jb2RlcyBhIHN0cmluZyB0byBhIEJhc2U1OC1lbmNvZGVkIHN0cmluZy5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgdHMgdHdvc2xhc2hcbiAqIGltcG9ydCB7IEJhc2U1OCB9IGZyb20gJ294J1xuICpcbiAqIGNvbnN0IHZhbHVlID0gQmFzZTU4LmZyb21TdHJpbmcoJ0hlbGxvIFdvcmxkIScpXG4gKiAvLyBAbG9nOiAnMk5FcG83VFpSUnJMWlNpMlUnXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gdmFsdWUgLSBUaGUgc3RyaW5nIHRvIGVuY29kZS5cbiAqIEByZXR1cm5zIFRoZSBCYXNlNTggZW5jb2RlZCBzdHJpbmcuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmcm9tU3RyaW5nKHZhbHVlKSB7XG4gICAgcmV0dXJuIGludGVybmFsLmZyb20oQnl0ZXMuZnJvbVN0cmluZyh2YWx1ZSkpO1xufVxuLyoqXG4gKiBEZWNvZGVzIGEgQmFzZTU4LWVuY29kZWQgc3RyaW5nIHRvIGEge0BsaW5rIG94I0J5dGVzLkJ5dGVzfS5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgdHMgdHdvc2xhc2hcbiAqIGltcG9ydCB7IEJhc2U1OCB9IGZyb20gJ294J1xuICpcbiAqIGNvbnN0IHZhbHVlID0gQmFzZTU4LnRvQnl0ZXMoJzJORXBvN1RaUlJyTFpTaTJVJylcbiAqIC8vIEBsb2c6IFVpbnQ4QXJyYXkgWyA3MiwgMTAxLCAxMDgsIDEwOCwgMTExLCAzMiwgODcsIDExMSwgMTE0LCAxMDgsIDEwMCwgMzMgXVxuICogYGBgXG4gKlxuICogQHBhcmFtIHZhbHVlIC0gVGhlIEJhc2U1OCBlbmNvZGVkIHN0cmluZy5cbiAqIEByZXR1cm5zIFRoZSBkZWNvZGVkIGJ5dGUgYXJyYXkuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0b0J5dGVzKHZhbHVlKSB7XG4gICAgcmV0dXJuIEJ5dGVzLmZyb21IZXgodG9IZXgodmFsdWUpKTtcbn1cbi8qKlxuICogRGVjb2RlcyBhIEJhc2U1OC1lbmNvZGVkIHN0cmluZyB0byB7QGxpbmsgb3gjSGV4LkhleH0uXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHRzIHR3b3NsYXNoXG4gKiBpbXBvcnQgeyBCYXNlNTggfSBmcm9tICdveCdcbiAqXG4gKiBjb25zdCB2YWx1ZSA9IEJhc2U1OC50b0hleCgnMk5FcG83VFpSUnJMWlNpMlUnKVxuICogLy8gQGxvZzogJzB4NDg2NTZjNmM2ZjIwNTc2ZjcyNmM2NDIxJ1xuICogYGBgXG4gKlxuICogQHBhcmFtIHZhbHVlIC0gVGhlIEJhc2U1OCBlbmNvZGVkIHN0cmluZy5cbiAqIEByZXR1cm5zIFRoZSBkZWNvZGVkIGhleCBzdHJpbmcuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0b0hleCh2YWx1ZSkge1xuICAgIGxldCBpbnRlZ2VyID0gQmlnSW50KDApO1xuICAgIGxldCBwYWQgPSAwO1xuICAgIGxldCBjaGVja1BhZCA9IHRydWU7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YWx1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBjaGFyID0gdmFsdWVbaV07XG4gICAgICAgIC8vIGNoZWNrIGZvciBsZWFkaW5nIDFzXG4gICAgICAgIGlmIChjaGVja1BhZCAmJiBjaGFyID09PSAnMScpXG4gICAgICAgICAgICBwYWQrKztcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgY2hlY2tQYWQgPSBmYWxzZTtcbiAgICAgICAgLy8gY2hlY2sgZm9yIGludmFsaWQgY2hhcmFjdGVyc1xuICAgICAgICBpZiAodHlwZW9mIGludGVybmFsLmFscGhhYmV0VG9JbnRlZ2VyW2NoYXJdICE9PSAnYmlnaW50JylcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBiYXNlNTggY2hhcmFjdGVyOiAnICsgY2hhcik7XG4gICAgICAgIGludGVnZXIgPSBpbnRlZ2VyICogNThuO1xuICAgICAgICBpbnRlZ2VyID0gaW50ZWdlciArIGludGVybmFsLmFscGhhYmV0VG9JbnRlZ2VyW2NoYXJdO1xuICAgIH1cbiAgICBpZiAoIXBhZClcbiAgICAgICAgcmV0dXJuIGAweCR7aW50ZWdlci50b1N0cmluZygxNil9YDtcbiAgICByZXR1cm4gYDB4JHsnMCcucmVwZWF0KHBhZCAqIDIpfSR7aW50ZWdlci50b1N0cmluZygxNil9YDtcbn1cbi8qKlxuICogRGVjb2RlcyBhIEJhc2U1OC1lbmNvZGVkIHN0cmluZyB0byBhIHN0cmluZy5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgdHMgdHdvc2xhc2hcbiAqIGltcG9ydCB7IEJhc2U1OCB9IGZyb20gJ294J1xuICpcbiAqIGNvbnN0IHZhbHVlID0gQmFzZTU4LnRvU3RyaW5nKCcyTkVwbzdUWlJSckxaU2kyVScpXG4gKiAvLyBAbG9nOiAnSGVsbG8gV29ybGQhJ1xuICogYGBgXG4gKlxuICogQHBhcmFtIHZhbHVlIC0gVGhlIEJhc2U1OCBlbmNvZGVkIHN0cmluZy5cbiAqIEByZXR1cm5zIFRoZSBkZWNvZGVkIHN0cmluZy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRvU3RyaW5nKHZhbHVlKSB7XG4gICAgcmV0dXJuIEhleC50b1N0cmluZyh0b0hleCh2YWx1ZSkpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QmFzZTU4LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ox/_esm/core/Base58.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ox/_esm/core/Base64.js":
/*!*********************************************!*\
  !*** ./node_modules/ox/_esm/core/Base64.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fromBytes: () => (/* binding */ fromBytes),\n/* harmony export */   fromHex: () => (/* binding */ fromHex),\n/* harmony export */   fromString: () => (/* binding */ fromString),\n/* harmony export */   toBytes: () => (/* binding */ toBytes),\n/* harmony export */   toHex: () => (/* binding */ toHex),\n/* harmony export */   toString: () => (/* binding */ toString)\n/* harmony export */ });\n/* harmony import */ var _Bytes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Bytes.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Bytes.js\");\n/* harmony import */ var _Hex_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Hex.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Hex.js\");\n\n\nconst encoder = /*#__PURE__*/ new TextEncoder();\nconst decoder = /*#__PURE__*/ new TextDecoder();\nconst integerToCharacter = /*#__PURE__*/ Object.fromEntries(Array.from('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/').map((a, i) => [i, a.charCodeAt(0)]));\nconst characterToInteger = /*#__PURE__*/ {\n    ...Object.fromEntries(Array.from('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/').map((a, i) => [a.charCodeAt(0), i])),\n    ['='.charCodeAt(0)]: 0,\n    ['-'.charCodeAt(0)]: 62,\n    ['_'.charCodeAt(0)]: 63,\n};\n/**\n * Encodes a {@link ox#Bytes.Bytes} to a Base64-encoded string (with optional padding and/or URL-safe characters).\n *\n * @example\n * ```ts twoslash\n * import { Base64, Bytes } from 'ox'\n *\n * const value = Base64.fromBytes(Bytes.fromString('hello world'))\n * // @log: 'aGVsbG8gd29ybGQ='\n * ```\n *\n * @example\n * ### No Padding\n *\n * Turn off [padding of encoded data](https://datatracker.ietf.org/doc/html/rfc4648#section-3.2) with the `pad` option:\n *\n * ```ts twoslash\n * import { Base64, Bytes } from 'ox'\n *\n * const value = Base64.fromBytes(Bytes.fromString('hello world'), { pad: false })\n * // @log: 'aGVsbG8gd29ybGQ'\n * ```\n *\n * ### URL-safe Encoding\n *\n * Turn on [URL-safe encoding](https://datatracker.ietf.org/doc/html/rfc4648#section-5) (Base64 URL) with the `url` option:\n *\n * ```ts twoslash\n * import { Base64, Bytes } from 'ox'\n *\n * const value = Base64.fromBytes(Bytes.fromString('hello wod'), { url: true })\n * // @log: 'aGVsbG8gd29_77-9ZA=='\n * ```\n *\n * @param value - The byte array to encode.\n * @param options - Encoding options.\n * @returns The Base64 encoded string.\n */\nfunction fromBytes(value, options = {}) {\n    const { pad = true, url = false } = options;\n    const encoded = new Uint8Array(Math.ceil(value.length / 3) * 4);\n    for (let i = 0, j = 0; j < value.length; i += 4, j += 3) {\n        const y = (value[j] << 16) + (value[j + 1] << 8) + (value[j + 2] | 0);\n        encoded[i] = integerToCharacter[y >> 18];\n        encoded[i + 1] = integerToCharacter[(y >> 12) & 0x3f];\n        encoded[i + 2] = integerToCharacter[(y >> 6) & 0x3f];\n        encoded[i + 3] = integerToCharacter[y & 0x3f];\n    }\n    const k = value.length % 3;\n    const end = Math.floor(value.length / 3) * 4 + (k && k + 1);\n    let base64 = decoder.decode(new Uint8Array(encoded.buffer, 0, end));\n    if (pad && k === 1)\n        base64 += '==';\n    if (pad && k === 2)\n        base64 += '=';\n    if (url)\n        base64 = base64.replaceAll('+', '-').replaceAll('/', '_');\n    return base64;\n}\n/**\n * Encodes a {@link ox#Hex.Hex} to a Base64-encoded string (with optional padding and/or URL-safe characters).\n *\n * @example\n * ```ts twoslash\n * import { Base64, Hex } from 'ox'\n *\n * const value = Base64.fromHex(Hex.fromString('hello world'))\n * // @log: 'aGVsbG8gd29ybGQ='\n * ```\n *\n * @example\n * ### No Padding\n *\n * Turn off [padding of encoded data](https://datatracker.ietf.org/doc/html/rfc4648#section-3.2) with the `pad` option:\n *\n * ```ts twoslash\n * import { Base64, Hex } from 'ox'\n *\n * const value = Base64.fromHex(Hex.fromString('hello world'), { pad: false })\n * // @log: 'aGVsbG8gd29ybGQ'\n * ```\n *\n * ### URL-safe Encoding\n *\n * Turn on [URL-safe encoding](https://datatracker.ietf.org/doc/html/rfc4648#section-5) (Base64 URL) with the `url` option:\n *\n * ```ts twoslash\n * import { Base64, Hex } from 'ox'\n *\n * const value = Base64.fromHex(Hex.fromString('hello wod'), { url: true })\n * // @log: 'aGVsbG8gd29_77-9ZA=='\n * ```\n *\n * @param value - The hex value to encode.\n * @param options - Encoding options.\n * @returns The Base64 encoded string.\n */\nfunction fromHex(value, options = {}) {\n    return fromBytes(_Bytes_js__WEBPACK_IMPORTED_MODULE_0__.fromHex(value), options);\n}\n/**\n * Encodes a string to a Base64-encoded string (with optional padding and/or URL-safe characters).\n *\n * @example\n * ```ts twoslash\n * import { Base64 } from 'ox'\n *\n * const value = Base64.fromString('hello world')\n * // @log: 'aGVsbG8gd29ybGQ='\n * ```\n *\n * @example\n * ### No Padding\n *\n * Turn off [padding of encoded data](https://datatracker.ietf.org/doc/html/rfc4648#section-3.2) with the `pad` option:\n *\n * ```ts twoslash\n * import { Base64 } from 'ox'\n *\n * const value = Base64.fromString('hello world', { pad: false })\n * // @log: 'aGVsbG8gd29ybGQ'\n * ```\n *\n * ### URL-safe Encoding\n *\n * Turn on [URL-safe encoding](https://datatracker.ietf.org/doc/html/rfc4648#section-5) (Base64 URL) with the `url` option:\n *\n * ```ts twoslash\n * import { Base64 } from 'ox'\n *\n * const value = Base64.fromString('hello wod', { url: true })\n * // @log: 'aGVsbG8gd29_77-9ZA=='\n * ```\n *\n * @param value - The string to encode.\n * @param options - Encoding options.\n * @returns The Base64 encoded string.\n */\nfunction fromString(value, options = {}) {\n    return fromBytes(_Bytes_js__WEBPACK_IMPORTED_MODULE_0__.fromString(value), options);\n}\n/**\n * Decodes a Base64-encoded string (with optional padding and/or URL-safe characters) to {@link ox#Bytes.Bytes}.\n *\n * @example\n * ```ts twoslash\n * import { Base64, Bytes } from 'ox'\n *\n * const value = Base64.toBytes('aGVsbG8gd29ybGQ=')\n * // @log: Uint8Array([104, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100])\n * ```\n *\n * @param value - The string, hex value, or byte array to encode.\n * @returns The Base64 decoded {@link ox#Bytes.Bytes}.\n */\nfunction toBytes(value) {\n    const base64 = value.replace(/=+$/, '');\n    const size = base64.length;\n    const decoded = new Uint8Array(size + 3);\n    encoder.encodeInto(base64 + '===', decoded);\n    for (let i = 0, j = 0; i < base64.length; i += 4, j += 3) {\n        const x = (characterToInteger[decoded[i]] << 18) +\n            (characterToInteger[decoded[i + 1]] << 12) +\n            (characterToInteger[decoded[i + 2]] << 6) +\n            characterToInteger[decoded[i + 3]];\n        decoded[j] = x >> 16;\n        decoded[j + 1] = (x >> 8) & 0xff;\n        decoded[j + 2] = x & 0xff;\n    }\n    const decodedSize = (size >> 2) * 3 + (size % 4 && (size % 4) - 1);\n    return new Uint8Array(decoded.buffer, 0, decodedSize);\n}\n/**\n * Decodes a Base64-encoded string (with optional padding and/or URL-safe characters) to {@link ox#Hex.Hex}.\n *\n * @example\n * ```ts twoslash\n * import { Base64, Hex } from 'ox'\n *\n * const value = Base64.toHex('aGVsbG8gd29ybGQ=')\n * // @log: 0x68656c6c6f20776f726c64\n * ```\n *\n * @param value - The string, hex value, or byte array to encode.\n * @returns The Base64 decoded {@link ox#Hex.Hex}.\n */\nfunction toHex(value) {\n    return _Hex_js__WEBPACK_IMPORTED_MODULE_1__.fromBytes(toBytes(value));\n}\n/**\n * Decodes a Base64-encoded string (with optional padding and/or URL-safe characters) to a string.\n *\n * @example\n * ```ts twoslash\n * import { Base64 } from 'ox'\n *\n * const value = Base64.toString('aGVsbG8gd29ybGQ=')\n * // @log: 'hello world'\n * ```\n *\n * @param value - The string, hex value, or byte array to encode.\n * @returns The Base64 decoded string.\n */\nfunction toString(value) {\n    return _Bytes_js__WEBPACK_IMPORTED_MODULE_0__.toString(toBytes(value));\n}\n//# sourceMappingURL=Base64.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ox/_esm/core/Base64.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ox/_esm/core/BinaryStateTree.js":
/*!******************************************************!*\
  !*** ./node_modules/ox/_esm/core/BinaryStateTree.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   create: () => (/* binding */ create),\n/* harmony export */   insert: () => (/* binding */ insert),\n/* harmony export */   merkelize: () => (/* binding */ merkelize)\n/* harmony export */ });\n/* harmony import */ var _noble_hashes_blake3__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @noble/hashes/blake3 */ \"(pages-dir-browser)/./node_modules/@noble/hashes/esm/blake3.js\");\n/* harmony import */ var _Bytes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Bytes.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Bytes.js\");\n\n\n/**\n * Creates a new Binary State Tree instance.\n *\n * @example\n * ```ts twoslash\n * import { BinaryStateTree } from 'ox'\n *\n * const tree = BinaryStateTree.create()\n * ```\n *\n * @returns A Binary State Tree.\n */\nfunction create() {\n    return {\n        root: emptyNode(),\n    };\n}\n/**\n * Inserts a key-value pair into the Binary State Tree.\n *\n * @example\n * ```ts twoslash\n * import { BinaryStateTree, Bytes } from 'ox'\n *\n * const tree = BinaryStateTree.create()\n *\n * BinaryStateTree.insert( // [!code focus]\n *   tree, // [!code focus]\n *   Bytes.fromHex('0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54'), // [!code focus]\n *   Bytes.fromHex('0xd4fd4e189132273036449fc9e11198c739161b4c0116a9a2dccdfa1c492006f1') // [!code focus]\n * ) // [!code focus]\n * ```\n *\n * @param tree - Binary State Tree instance.\n * @param key - Key to insert.\n * @param value - Value to insert.\n */\nfunction insert(tree, key, value) {\n    const stem = _Bytes_js__WEBPACK_IMPORTED_MODULE_0__.slice(key, 0, 31);\n    const subIndex = _Bytes_js__WEBPACK_IMPORTED_MODULE_0__.slice(key, 31)[0];\n    if (tree.root.type === 'empty') {\n        tree.root = stemNode(stem);\n        tree.root.values[subIndex] = value;\n        return;\n    }\n    function inner(node_, stem, subIndex, value, depth) {\n        let node = node_;\n        if (node.type === 'empty') {\n            node = stemNode(stem);\n            node.values[subIndex] = value;\n            return node;\n        }\n        const stemBits = bytesToBits(stem);\n        if (node.type === 'stem') {\n            if (_Bytes_js__WEBPACK_IMPORTED_MODULE_0__.isEqual(node.stem, stem)) {\n                node.values[subIndex] = value;\n                return node;\n            }\n            const existingStemBits = bytesToBits(node.stem);\n            return splitLeaf(node, stemBits, existingStemBits, subIndex, value, depth);\n        }\n        if (node.type === 'internal') {\n            const bit = stemBits[depth];\n            if (bit === 0) {\n                node.left = inner(node.left, stem, subIndex, value, depth + 1);\n            }\n            else {\n                node.right = inner(node.right, stem, subIndex, value, depth + 1);\n            }\n            return node;\n        }\n        return emptyNode();\n    }\n    tree.root = inner(tree.root, stem, subIndex, value, 0);\n}\n/**\n * Merkelizes a Binary State Tree.\n *\n * @example\n * ```ts twoslash\n * import { BinaryStateTree, Bytes } from 'ox'\n *\n * const tree = BinaryStateTree.create()\n *\n * BinaryStateTree.insert(\n *   tree,\n *   Bytes.fromHex('0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54'),\n *   Bytes.fromHex('0xd4fd4e189132273036449fc9e11198c739161b4c0116a9a2dccdfa1c492006f1')\n * )\n *\n * const hash = BinaryStateTree.merkelize(tree) // [!code focus]\n * ```\n *\n * @param tree - Binary State Tree instance.\n * @returns Merkle hash.\n */\nfunction merkelize(tree) {\n    function inner(node) {\n        if (node.type === 'empty')\n            return new Uint8Array(32).fill(0);\n        if (node.type === 'internal') {\n            const hash_left = inner(node.left);\n            const hash_right = inner(node.right);\n            return hash(_Bytes_js__WEBPACK_IMPORTED_MODULE_0__.concat(hash_left, hash_right));\n        }\n        let level = node.values.map(hash);\n        while (level.length > 1) {\n            const level_ = [];\n            for (let i = 0; i < level.length; i += 2)\n                level_.push(hash(_Bytes_js__WEBPACK_IMPORTED_MODULE_0__.concat(level[i], level[i + 1])));\n            level = level_;\n        }\n        return hash(_Bytes_js__WEBPACK_IMPORTED_MODULE_0__.concat(node.stem, new Uint8Array(1).fill(0), level[0]));\n    }\n    return inner(tree.root);\n}\n/** @internal */\nfunction splitLeaf(leaf, stemBits, existingStemBits, subIndex, value, depth) {\n    if (stemBits[depth] === existingStemBits[depth]) {\n        const internal = internalNode();\n        const bit = stemBits[depth];\n        if (bit === 0) {\n            internal.left = splitLeaf(leaf, stemBits, existingStemBits, subIndex, value, depth + 1);\n        }\n        else {\n            internal.right = splitLeaf(leaf, stemBits, existingStemBits, subIndex, value, depth + 1);\n        }\n        return internal;\n    }\n    const internal = internalNode();\n    const bit = stemBits[depth];\n    const stem = bitsToBytes(stemBits);\n    if (bit === 0) {\n        internal.left = stemNode(stem);\n        internal.left.values[subIndex] = value;\n        internal.right = leaf;\n    }\n    else {\n        internal.right = stemNode(stem);\n        internal.right.values[subIndex] = value;\n        internal.left = leaf;\n    }\n    return internal;\n}\n/** @internal */\nfunction emptyNode() {\n    return {\n        type: 'empty',\n    };\n}\n/** @internal */\nfunction internalNode() {\n    return {\n        left: emptyNode(),\n        right: emptyNode(),\n        type: 'internal',\n    };\n}\n/** @internal */\nfunction stemNode(stem) {\n    return {\n        stem,\n        values: Array.from({ length: 256 }, () => undefined),\n        type: 'stem',\n    };\n}\n/** @internal */\nfunction bytesToBits(bytes) {\n    const bits = [];\n    for (const byte of bytes)\n        for (let i = 0; i < 8; i++)\n            bits.push((byte >> (7 - i)) & 1);\n    return bits;\n}\n/** @internal */\nfunction bitsToBytes(bits) {\n    const byte_data = new Uint8Array(bits.length / 8);\n    for (let i = 0; i < bits.length; i += 8) {\n        let byte = 0;\n        for (let j = 0; j < 8; j++)\n            byte |= bits[i + j] << (7 - j);\n        byte_data[i / 8] = byte;\n    }\n    return byte_data;\n}\n/** @internal */\nfunction hash(bytes) {\n    if (!bytes)\n        return new Uint8Array(32).fill(0);\n    if (!bytes.some((byte) => byte !== 0))\n        return new Uint8Array(32).fill(0);\n    return (0,_noble_hashes_blake3__WEBPACK_IMPORTED_MODULE_1__.blake3)(bytes);\n}\n//# sourceMappingURL=BinaryStateTree.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ox/_esm/core/BinaryStateTree.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ox/_esm/core/Blobs.js":
/*!********************************************!*\
  !*** ./node_modules/ox/_esm/core/Blobs.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BlobSizeTooLargeError: () => (/* binding */ BlobSizeTooLargeError),\n/* harmony export */   EmptyBlobError: () => (/* binding */ EmptyBlobError),\n/* harmony export */   EmptyBlobVersionedHashesError: () => (/* binding */ EmptyBlobVersionedHashesError),\n/* harmony export */   InvalidVersionedHashSizeError: () => (/* binding */ InvalidVersionedHashSizeError),\n/* harmony export */   InvalidVersionedHashVersionError: () => (/* binding */ InvalidVersionedHashVersionError),\n/* harmony export */   bytesPerBlob: () => (/* binding */ bytesPerBlob),\n/* harmony export */   bytesPerFieldElement: () => (/* binding */ bytesPerFieldElement),\n/* harmony export */   commitmentToVersionedHash: () => (/* binding */ commitmentToVersionedHash),\n/* harmony export */   commitmentsToVersionedHashes: () => (/* binding */ commitmentsToVersionedHashes),\n/* harmony export */   fieldElementsPerBlob: () => (/* binding */ fieldElementsPerBlob),\n/* harmony export */   from: () => (/* binding */ from),\n/* harmony export */   maxBytesPerTransaction: () => (/* binding */ maxBytesPerTransaction),\n/* harmony export */   sidecarsToVersionedHashes: () => (/* binding */ sidecarsToVersionedHashes),\n/* harmony export */   to: () => (/* binding */ to),\n/* harmony export */   toBytes: () => (/* binding */ toBytes),\n/* harmony export */   toCommitments: () => (/* binding */ toCommitments),\n/* harmony export */   toHex: () => (/* binding */ toHex),\n/* harmony export */   toProofs: () => (/* binding */ toProofs),\n/* harmony export */   toSidecars: () => (/* binding */ toSidecars),\n/* harmony export */   toVersionedHashes: () => (/* binding */ toVersionedHashes)\n/* harmony export */ });\n/* harmony import */ var _Bytes_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Bytes.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Bytes.js\");\n/* harmony import */ var _Errors_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Errors.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Errors.js\");\n/* harmony import */ var _Hash_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Hash.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Hash.js\");\n/* harmony import */ var _Hex_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Hex.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Hex.js\");\n/* harmony import */ var _Kzg_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Kzg.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Kzg.js\");\n/* harmony import */ var _internal_cursor_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./internal/cursor.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/internal/cursor.js\");\n\n\n\n\n\n\n/** Blob limit per transaction. */\nconst blobsPerTransaction = 6;\n/** The number of bytes in a BLS scalar field element. */\nconst bytesPerFieldElement = 32;\n/** The number of field elements in a blob. */\nconst fieldElementsPerBlob = 4096;\n/** The number of bytes in a blob. */\nconst bytesPerBlob = bytesPerFieldElement * fieldElementsPerBlob;\n/** Blob bytes limit per transaction. */\nconst maxBytesPerTransaction = bytesPerBlob * blobsPerTransaction -\n    // terminator byte (0x80).\n    1 -\n    // zero byte (0x00) appended to each field element.\n    1 * fieldElementsPerBlob * blobsPerTransaction;\n/**\n * Transform a list of Commitments to Blob Versioned Hashes.\n *\n * @example\n * ```ts twoslash\n * // @noErrors\n * import { Blobs } from 'viem'\n * import { kzg } from './kzg'\n *\n * const blobs = Blobs.from('0xdeadbeef')\n * const commitments = Blobs.toCommitments(blobs, { kzg })\n * const versionedHashes = Blobs.commitmentsToVersionedHashes(commitments) // [!code focus]\n * // @log: ['0x...', '0x...']\n * ```\n *\n * @example\n * ### Configuring Return Type\n *\n * It is possible to configure the return type for the Versioned Hashes with the `as` option.\n *\n * ```ts twoslash\n * // @noErrors\n * import { Blobs } from 'viem'\n * import { kzg } from './kzg'\n *\n * const blobs = Blobs.from('0xdeadbeef')\n * const commitments = Blobs.toCommitments(blobs, { kzg })\n * const versionedHashes = Blobs.commitmentsToVersionedHashes(commitments, {\n *   as: 'Bytes', // [!code focus]\n * })\n * // @log: [Uint8Array [ ... ], Uint8Array [ ... ]]\n * ```\n *\n * @example\n * ### Versioning Hashes\n *\n * It is possible to configure the version for the Versioned Hashes with the `version` option.\n *\n * ```ts twoslash\n * // @noErrors\n * import { Blobs } from 'viem'\n * import { kzg } from './kzg'\n *\n * const blobs = Blobs.from('0xdeadbeef')\n * const commitments = Blobs.toCommitments(blobs, { kzg })\n * const versionedHashes = Blobs.commitmentsToVersionedHashes(commitments, {\n *   version: 2, // [!code focus]\n * })\n * ```\n *\n * @param commitments - A list of commitments.\n * @param options - Options.\n * @returns A list of Blob Versioned Hashes.\n */\nfunction commitmentsToVersionedHashes(commitments, options = {}) {\n    const { version } = options;\n    const as = options.as ?? (typeof commitments[0] === 'string' ? 'Hex' : 'Bytes');\n    const hashes = [];\n    for (const commitment of commitments) {\n        hashes.push(commitmentToVersionedHash(commitment, {\n            as,\n            version,\n        }));\n    }\n    return hashes;\n}\n/**\n * Transform a Commitment to its Blob Versioned Hash.\n *\n * @example\n * ```ts twoslash\n * // @noErrors\n * import { Blobs } from 'ox'\n * import { kzg } from './kzg'\n *\n * const blobs = Blobs.from('0xdeadbeef')\n * const [commitment] = Blobs.toCommitments(blobs, { kzg })\n * const versionedHash = Blobs.commitmentToVersionedHash(commitment) // [!code focus]\n * ```\n *\n * @example\n * ### Configuring Return Type\n *\n * It is possible to configure the return type for the Versioned Hash with the `as` option.\n *\n * ```ts twoslash\n * // @noErrors\n * import { Blobs } from 'viem'\n * import { kzg } from './kzg'\n *\n * const blobs = Blobs.from('0xdeadbeef')\n * const [commitment] = Blobs.toCommitments(blobs, { kzg })\n * const versionedHashes = Blobs.commitmentToVersionedHash(commitment, {\n *   as: 'Bytes', // [!code focus]\n * })\n * // @log: [Uint8Array [ ... ], Uint8Array [ ... ]]\n * ```\n *\n * @example\n * ### Versioning Hashes\n *\n * It is possible to configure the version for the Versioned Hash with the `version` option.\n *\n * ```ts twoslash\n * // @noErrors\n * import { Blobs } from 'viem'\n * import { kzg } from './kzg'\n *\n * const blobs = Blobs.from('0xdeadbeef')\n * const [commitment] = Blobs.toCommitments(blobs, { kzg })\n * const versionedHashes = Blobs.commitmentToVersionedHash(commitment, {\n *   version: 2, // [!code focus]\n * })\n * ```\n *\n * @param commitment - The commitment.\n * @param options - Options.\n * @returns The Blob Versioned Hash.\n */\nfunction commitmentToVersionedHash(commitment, options = {}) {\n    const { version = 1 } = options;\n    const as = options.as ?? (typeof commitment === 'string' ? 'Hex' : 'Bytes');\n    const versionedHash = _Hash_js__WEBPACK_IMPORTED_MODULE_0__.sha256(commitment, { as: 'Bytes' });\n    versionedHash.set([version], 0);\n    return (as === 'Bytes' ? versionedHash : _Hex_js__WEBPACK_IMPORTED_MODULE_1__.fromBytes(versionedHash));\n}\n/**\n * Transforms arbitrary data to {@link ox#Blobs.Blobs}.\n *\n * @example\n * ```ts twoslash\n * import { Blobs } from 'ox'\n *\n * const blobs = Blobs.from('0xdeadbeef')\n * ```\n *\n * @example\n * ### Creating Blobs from a String\n *\n * An example of creating Blobs from a string using  {@link ox#Hex.(from:function)}:\n *\n * ```ts twoslash\n * import { Blobs, Hex } from 'ox'\n *\n * const blobs = Blobs.from(Hex.fromString('Hello world!'))\n * ```\n *\n * @example\n * ### Configuring Return Type\n *\n * It is possible to configure the return type for the Blobs with the `as` option.\n *\n * ```ts twoslash\n * import { Blobs } from 'ox'\n *\n * const blobs = Blobs.from('0xdeadbeef', { as: 'Bytes' })\n * //    ^?\n *\n *\n * ```\n *\n * @param data - The data to convert to {@link ox#Blobs.Blobs}.\n * @param options - Options.\n * @returns The {@link ox#Blobs.Blobs}.\n */\nfunction from(data, options = {}) {\n    const as = options.as ?? (typeof data === 'string' ? 'Hex' : 'Bytes');\n    const data_ = (typeof data === 'string' ? _Bytes_js__WEBPACK_IMPORTED_MODULE_2__.fromHex(data) : data);\n    const size_ = _Bytes_js__WEBPACK_IMPORTED_MODULE_2__.size(data_);\n    if (!size_)\n        throw new EmptyBlobError();\n    if (size_ > maxBytesPerTransaction)\n        throw new BlobSizeTooLargeError({\n            maxSize: maxBytesPerTransaction,\n            size: size_,\n        });\n    const blobs = [];\n    let active = true;\n    let position = 0;\n    while (active) {\n        const blob = _internal_cursor_js__WEBPACK_IMPORTED_MODULE_3__.create(new Uint8Array(bytesPerBlob));\n        let size = 0;\n        while (size < fieldElementsPerBlob) {\n            const bytes = data_.slice(position, position + (bytesPerFieldElement - 1));\n            // Push a zero byte so the field element doesn't overflow the BLS modulus.\n            blob.pushByte(0x00);\n            // Push the current segment of data bytes.\n            blob.pushBytes(bytes);\n            // If we detect that the current segment of data bytes is less than 31 bytes,\n            // we can stop processing and push a terminator byte to indicate the end of the blob.\n            if (bytes.length < 31) {\n                blob.pushByte(0x80);\n                active = false;\n                break;\n            }\n            size++;\n            position += 31;\n        }\n        blobs.push(blob);\n    }\n    return (as === 'Bytes'\n        ? blobs.map((x) => x.bytes)\n        : blobs.map((x) => _Hex_js__WEBPACK_IMPORTED_MODULE_1__.fromBytes(x.bytes)));\n}\n/**\n * Transforms a list of {@link ox#Blobs.BlobSidecars} to their Blob Versioned Hashes.\n *\n * @example\n * ```ts twoslash\n * // @noErrors\n * import { Blobs } from 'ox'\n *\n * const blobs = Blobs.from('0xdeadbeef')\n * const sidecars = Blobs.toSidecars(blobs, { kzg })\n * const versionedHashes = Blobs.sidecarsToVersionedHashes(sidecars) // [!code focus]\n * ```\n *\n * @example\n * ### Configuring Return Type\n *\n * It is possible to configure the return type for the Versioned Hashes with the `as` option.\n *\n * ```ts twoslash\n * // @noErrors\n * import { Blobs } from 'viem'\n * import { kzg } from './kzg'\n *\n * const blobs = Blobs.from('0xdeadbeef')\n * const sidecars = Blobs.toSidecars(blobs, { kzg })\n * const versionedHashes = Blobs.sidecarsToVersionedHashes(sidecars, {\n *   as: 'Bytes', // [!code focus]\n * })\n * // @log: [Uint8Array [ ... ], Uint8Array [ ... ]]\n * ```\n *\n * @example\n * ### Versioning Hashes\n *\n * It is possible to configure the version for the Versioned Hashes with the `version` option.\n *\n * ```ts twoslash\n * // @noErrors\n * import { Blobs } from 'viem'\n * import { kzg } from './kzg'\n *\n * const blobs = Blobs.from('0xdeadbeef')\n * const sidecars = Blobs.toSidecars(blobs, { kzg })\n * const versionedHashes = Blobs.sidecarsToVersionedHashes(sidecars, {\n *   version: 2, // [!code focus]\n * })\n * ```\n *\n * @param sidecars - The {@link ox#Blobs.BlobSidecars} to transform to Blob Versioned Hashes.\n * @param options - Options.\n * @returns The versioned hashes.\n */\nfunction sidecarsToVersionedHashes(sidecars, options = {}) {\n    const { version } = options;\n    const as = options.as ?? (typeof sidecars[0].blob === 'string' ? 'Hex' : 'Bytes');\n    const hashes = [];\n    for (const { commitment } of sidecars) {\n        hashes.push(commitmentToVersionedHash(commitment, {\n            as,\n            version,\n        }));\n    }\n    return hashes;\n}\n/**\n * Transforms Ox-shaped {@link ox#Blobs.Blobs} into the originating data.\n *\n * @example\n * ```ts twoslash\n * import { Blobs, Hex } from 'ox'\n *\n * const blobs = Blobs.from('0xdeadbeef')\n * const data = Blobs.to(blobs) // [!code focus]\n * // @log: '0xdeadbeef'\n * ```\n *\n * @example\n * ### Configuring Return Type\n *\n * It is possible to configure the return type with second argument.\n *\n * ```ts twoslash\n * import { Blobs } from 'ox'\n *\n * const blobs = Blobs.from('0xdeadbeef')\n * const data = Blobs.to(blobs, 'Bytes')\n * // @log: Uint8Array [ 13, 174, 190, 239 ]\n * ```\n *\n * @param blobs - The {@link ox#Blobs.Blobs} to transform.\n * @param to - The type to transform to.\n * @returns The originating data.\n */\nfunction to(blobs, to) {\n    const to_ = to ?? (typeof blobs[0] === 'string' ? 'Hex' : 'Bytes');\n    const blobs_ = (typeof blobs[0] === 'string'\n        ? blobs.map((x) => _Bytes_js__WEBPACK_IMPORTED_MODULE_2__.fromHex(x))\n        : blobs);\n    const length = blobs_.reduce((length, blob) => length + blob.length, 0);\n    const data = _internal_cursor_js__WEBPACK_IMPORTED_MODULE_3__.create(new Uint8Array(length));\n    let active = true;\n    for (const blob of blobs_) {\n        const cursor = _internal_cursor_js__WEBPACK_IMPORTED_MODULE_3__.create(blob);\n        while (active && cursor.position < blob.length) {\n            // First byte will be a zero 0x00 byte – we can skip.\n            cursor.incrementPosition(1);\n            let consume = 31;\n            if (blob.length - cursor.position < 31)\n                consume = blob.length - cursor.position;\n            for (const _ in Array.from({ length: consume })) {\n                const byte = cursor.readByte();\n                const isTerminator = byte === 0x80 && !cursor.inspectBytes(cursor.remaining).includes(0x80);\n                if (isTerminator) {\n                    active = false;\n                    break;\n                }\n                data.pushByte(byte);\n            }\n        }\n    }\n    const trimmedData = data.bytes.slice(0, data.position);\n    return (to_ === 'Hex' ? _Hex_js__WEBPACK_IMPORTED_MODULE_1__.fromBytes(trimmedData) : trimmedData);\n}\n/**\n * Transforms Ox-shaped {@link ox#Blobs.Blobs} into the originating data.\n *\n * @example\n * ```ts twoslash\n * import { Blobs, Hex } from 'ox'\n *\n * const blobs = Blobs.from('0xdeadbeef')\n * const data = Blobs.toHex(blobs) // [!code focus]\n * // @log: '0xdeadbeef'\n * ```\n */\nfunction toHex(blobs) {\n    return to(blobs, 'Hex');\n}\n/**\n * Transforms Ox-shaped {@link ox#Blobs.Blobs} into the originating data.\n *\n * @example\n * ```ts\n * import { Blobs, Hex } from 'ox'\n *\n * const blobs = Blobs.from('0xdeadbeef')\n * const data = Blobs.toBytes(blobs) // [!code focus]\n * // @log: Uint8Array [ 13, 174, 190, 239 ]\n * ```\n */\nfunction toBytes(blobs) {\n    return to(blobs, 'Bytes');\n}\n/**\n * Compute commitments from a list of {@link ox#Blobs.Blobs}.\n *\n * @example\n * ```ts twoslash\n * // @noErrors\n * import { Blobs } from 'ox'\n * import { kzg } from './kzg'\n *\n * const blobs = Blobs.from('0xdeadbeef')\n * const commitments = Blobs.toCommitments(blobs, { kzg }) // [!code focus]\n * ```\n *\n * @example\n * ### Configuring Return Type\n *\n * It is possible to configure the return type with the `as` option.\n *\n * ```ts twoslash\n * // @noErrors\n * import { Blobs } from 'ox'\n * import { kzg } from './kzg'\n *\n * const blobs = Blobs.from('0xdeadbeef')\n * const commitments = Blobs.toCommitments(blobs, {\n *   as: 'Bytes', // [!code focus]\n *   kzg,\n * })\n * // @log: [Uint8Array [ ... ], Uint8Array [ ... ]]\n * ```\n *\n * @param blobs - The {@link ox#Blobs.Blobs} to transform to commitments.\n * @param options - Options.\n * @returns The commitments.\n */\nfunction toCommitments(blobs, options) {\n    const { kzg } = options;\n    const as = options.as ?? (typeof blobs[0] === 'string' ? 'Hex' : 'Bytes');\n    const blobs_ = (typeof blobs[0] === 'string'\n        ? blobs.map((x) => _Bytes_js__WEBPACK_IMPORTED_MODULE_2__.fromHex(x))\n        : blobs);\n    const commitments = [];\n    for (const blob of blobs_)\n        commitments.push(Uint8Array.from(kzg.blobToKzgCommitment(blob)));\n    return (as === 'Bytes' ? commitments : commitments.map((x) => _Hex_js__WEBPACK_IMPORTED_MODULE_1__.fromBytes(x)));\n}\n/**\n * Compute the proofs for a list of {@link ox#Blobs.Blobs} and their commitments.\n *\n * @example\n * ```ts twoslash\n * // @noErrors\n * import { Blobs } from 'viem'\n * import { kzg } from './kzg'\n *\n * const blobs = Blobs.from('0xdeadbeef')\n * const commitments = Blobs.toCommitments(blobs, { kzg })\n * const proofs = Blobs.toProofs(blobs, { commitments, kzg }) // [!code focus]\n * ```\n *\n * @param blobs - The {@link ox#Blobs.Blobs} to compute proofs for.\n * @param options - Options.\n * @returns The Blob proofs.\n */\nfunction toProofs(blobs, options) {\n    const { kzg } = options;\n    const as = options.as ?? (typeof blobs[0] === 'string' ? 'Hex' : 'Bytes');\n    const blobs_ = (typeof blobs[0] === 'string'\n        ? blobs.map((x) => _Bytes_js__WEBPACK_IMPORTED_MODULE_2__.fromHex(x))\n        : blobs);\n    const commitments = (typeof options.commitments[0] === 'string'\n        ? options.commitments.map((x) => _Bytes_js__WEBPACK_IMPORTED_MODULE_2__.fromHex(x))\n        : options.commitments);\n    const proofs = [];\n    for (let i = 0; i < blobs_.length; i++) {\n        const blob = blobs_[i];\n        const commitment = commitments[i];\n        proofs.push(Uint8Array.from(kzg.computeBlobKzgProof(blob, commitment)));\n    }\n    return (as === 'Bytes' ? proofs : proofs.map((x) => _Hex_js__WEBPACK_IMPORTED_MODULE_1__.fromBytes(x)));\n}\n/**\n * Transforms {@link ox#Blobs.Blobs} into a {@link ox#Blobs.BlobSidecars} array.\n *\n * @example\n * ```ts twoslash\n * // @noErrors\n * import { Blobs } from 'ox'\n * import { kzg } from './kzg'\n *\n * const blobs = Blobs.from('0xdeadbeef')\n * const sidecars = Blobs.toSidecars(blobs, { kzg }) // [!code focus]\n * ```\n *\n * @example\n * You can also provide your own commitments and proofs if you do not want `toSidecars`\n * to compute them.\n *\n * ```ts twoslash\n * // @noErrors\n * import { Blobs } from 'ox'\n * import { kzg } from './kzg'\n *\n * const blobs = Blobs.from('0xdeadbeef')\n * const commitments = Blobs.toCommitments(blobs, { kzg })\n * const proofs = Blobs.toProofs(blobs, { commitments, kzg })\n *\n * const sidecars = Blobs.toSidecars(blobs, { commitments, kzg, proofs }) // [!code focus]\n * ```\n *\n * @param blobs - The {@link ox#Blobs.Blobs} to transform into {@link ox#Blobs.BlobSidecars}.\n * @param options - Options.\n * @returns The {@link ox#Blobs.BlobSidecars}.\n */\nfunction toSidecars(blobs, options) {\n    const { kzg } = options;\n    const commitments = options.commitments ?? toCommitments(blobs, { kzg: kzg });\n    const proofs = options.proofs ??\n        toProofs(blobs, { commitments: commitments, kzg: kzg });\n    const sidecars = [];\n    for (let i = 0; i < blobs.length; i++)\n        sidecars.push({\n            blob: blobs[i],\n            commitment: commitments[i],\n            proof: proofs[i],\n        });\n    return sidecars;\n}\n/**\n * Compute Blob Versioned Hashes from a list of {@link ox#Blobs.Blobs}.\n *\n * @example\n * ```ts twoslash\n * // @noErrors\n * import { Blobs } from 'ox'\n * import { kzg } from './kzg'\n *\n * const blobs = Blobs.from('0xdeadbeef')\n * const versionedHashes = Blobs.toVersionedHashes(blobs, { kzg }) // [!code focus]\n * ```\n *\n * @param blobs - The {@link ox#Blobs.Blobs} to transform into Blob Versioned Hashes.\n * @param options - Options.\n * @returns The Blob Versioned Hashes.\n */\nfunction toVersionedHashes(blobs, options) {\n    const commitments = toCommitments(blobs, options);\n    return commitmentsToVersionedHashes(commitments, options);\n}\n/** Thrown when the blob size is too large. */\nclass BlobSizeTooLargeError extends _Errors_js__WEBPACK_IMPORTED_MODULE_4__.BaseError {\n    constructor({ maxSize, size }) {\n        super('Blob size is too large.', {\n            metaMessages: [`Max: ${maxSize} bytes`, `Given: ${size} bytes`],\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'Blobs.BlobSizeTooLargeError'\n        });\n    }\n}\n/** Thrown when the blob is empty. */\nclass EmptyBlobError extends _Errors_js__WEBPACK_IMPORTED_MODULE_4__.BaseError {\n    constructor() {\n        super('Blob data must not be empty.');\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'Blobs.EmptyBlobError'\n        });\n    }\n}\n/** Thrown when the blob versioned hashes are empty. */\nclass EmptyBlobVersionedHashesError extends _Errors_js__WEBPACK_IMPORTED_MODULE_4__.BaseError {\n    constructor() {\n        super('Blob versioned hashes must not be empty.');\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'Blobs.EmptyBlobVersionedHashesError'\n        });\n    }\n}\n/** Thrown when the blob versioned hash size is invalid. */\nclass InvalidVersionedHashSizeError extends _Errors_js__WEBPACK_IMPORTED_MODULE_4__.BaseError {\n    constructor({ hash, size, }) {\n        super(`Versioned hash \"${hash}\" size is invalid.`, {\n            metaMessages: ['Expected: 32', `Received: ${size}`],\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'Blobs.InvalidVersionedHashSizeError'\n        });\n    }\n}\n/** Thrown when the blob versioned hash version is invalid. */\nclass InvalidVersionedHashVersionError extends _Errors_js__WEBPACK_IMPORTED_MODULE_4__.BaseError {\n    constructor({ hash, version, }) {\n        super(`Versioned hash \"${hash}\" version is invalid.`, {\n            metaMessages: [\n                `Expected: ${_Kzg_js__WEBPACK_IMPORTED_MODULE_5__.versionedHashVersion}`,\n                `Received: ${version}`,\n            ],\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'Blobs.InvalidVersionedHashVersionError'\n        });\n    }\n}\n//# sourceMappingURL=Blobs.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ox/_esm/core/Blobs.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ox/_esm/core/Block.js":
/*!********************************************!*\
  !*** ./node_modules/ox/_esm/core/Block.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fromRpc: () => (/* binding */ fromRpc),\n/* harmony export */   toRpc: () => (/* binding */ toRpc)\n/* harmony export */ });\n/* harmony import */ var _Hex_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Hex.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Hex.js\");\n/* harmony import */ var _Transaction_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Transaction.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Transaction.js\");\n/* harmony import */ var _Withdrawal_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Withdrawal.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Withdrawal.js\");\n\n\n\n/**\n * Converts a {@link ox#Block.Block} to an {@link ox#Block.Rpc}.\n *\n * @example\n * ```ts twoslash\n * // @noErrors\n * import { Block } from 'ox'\n *\n * const block = Block.toRpc({\n *   // ...\n *   hash: '0xebc3644804e4040c0a74c5a5bbbc6b46a71a5d4010fe0c92ebb2fdf4a43ea5dd',\n *   number: 19868020n,\n *   size: 520n\n *   timestamp: 1662222222n,\n *   // ...\n * })\n * // @log: {\n * // @log:   // ...\n * // @log:   hash: '0xebc3644804e4040c0a74c5a5bbbc6b46a71a5d4010fe0c92ebb2fdf4a43ea5dd',\n * // @log:   number: '0xec6fc6',\n * // @log:   size: '0x208',\n * // @log:   timestamp: '0x63198f6f',\n * // @log:   // ...\n * // @log: }\n * ```\n *\n * @param block - The Block to convert.\n * @returns An RPC Block.\n */\nfunction toRpc(block, _options = {}) {\n    const transactions = block.transactions.map((transaction) => {\n        if (typeof transaction === 'string')\n            return transaction;\n        return _Transaction_js__WEBPACK_IMPORTED_MODULE_0__.toRpc(transaction);\n    });\n    return {\n        baseFeePerGas: typeof block.baseFeePerGas === 'bigint'\n            ? _Hex_js__WEBPACK_IMPORTED_MODULE_1__.fromNumber(block.baseFeePerGas)\n            : undefined,\n        blobGasUsed: typeof block.blobGasUsed === 'bigint'\n            ? _Hex_js__WEBPACK_IMPORTED_MODULE_1__.fromNumber(block.blobGasUsed)\n            : undefined,\n        excessBlobGas: typeof block.excessBlobGas === 'bigint'\n            ? _Hex_js__WEBPACK_IMPORTED_MODULE_1__.fromNumber(block.excessBlobGas)\n            : undefined,\n        extraData: block.extraData,\n        difficulty: typeof block.difficulty === 'bigint'\n            ? _Hex_js__WEBPACK_IMPORTED_MODULE_1__.fromNumber(block.difficulty)\n            : undefined,\n        gasLimit: _Hex_js__WEBPACK_IMPORTED_MODULE_1__.fromNumber(block.gasLimit),\n        gasUsed: _Hex_js__WEBPACK_IMPORTED_MODULE_1__.fromNumber(block.gasUsed),\n        hash: block.hash,\n        logsBloom: block.logsBloom,\n        miner: block.miner,\n        mixHash: block.mixHash,\n        nonce: block.nonce,\n        number: (typeof block.number === 'bigint'\n            ? _Hex_js__WEBPACK_IMPORTED_MODULE_1__.fromNumber(block.number)\n            : null),\n        parentBeaconBlockRoot: block.parentBeaconBlockRoot,\n        parentHash: block.parentHash,\n        receiptsRoot: block.receiptsRoot,\n        sealFields: block.sealFields,\n        sha3Uncles: block.sha3Uncles,\n        size: _Hex_js__WEBPACK_IMPORTED_MODULE_1__.fromNumber(block.size),\n        stateRoot: block.stateRoot,\n        timestamp: _Hex_js__WEBPACK_IMPORTED_MODULE_1__.fromNumber(block.timestamp),\n        totalDifficulty: typeof block.totalDifficulty === 'bigint'\n            ? _Hex_js__WEBPACK_IMPORTED_MODULE_1__.fromNumber(block.totalDifficulty)\n            : undefined,\n        transactions,\n        transactionsRoot: block.transactionsRoot,\n        uncles: block.uncles,\n        withdrawals: block.withdrawals?.map(_Withdrawal_js__WEBPACK_IMPORTED_MODULE_2__.toRpc),\n        withdrawalsRoot: block.withdrawalsRoot,\n    };\n}\n/**\n * Converts a {@link ox#Block.Rpc} to an {@link ox#Block.Block}.\n *\n * @example\n * ```ts twoslash\n * // @noErrors\n * import { Block } from 'ox'\n *\n * const block = Block.fromRpc({\n *   // ...\n *   hash: '0xebc3644804e4040c0a74c5a5bbbc6b46a71a5d4010fe0c92ebb2fdf4a43ea5dd',\n *   number: '0xec6fc6',\n *   size: '0x208',\n *   timestamp: '0x63198f6f',\n *   // ...\n * })\n * // @log: {\n * // @log:   // ...\n * // @log:   hash: '0xebc3644804e4040c0a74c5a5bbbc6b46a71a5d4010fe0c92ebb2fdf4a43ea5dd',\n * // @log:   number: 19868020n,\n * // @log:   size: 520n,\n * // @log:   timestamp: 1662222222n,\n * // @log:   // ...\n * // @log: }\n * ```\n *\n * @example\n * ### End-to-end\n *\n * Below is an end-to-end example of using `Block.fromRpc` to fetch a block from the network and convert it to an {@link ox#Block.Block}.\n *\n * ```ts twoslash\n * import 'ox/window'\n * import { Block } from 'ox'\n *\n * const block = await window.ethereum!\n *   .request({\n *     method: 'eth_getBlockByNumber',\n *     params: ['latest', false],\n *   })\n *   .then(Block.fromRpc) // [!code hl]\n * // @log: {\n * // @log:   // ...\n * // @log:   hash: '0xebc3644804e4040c0a74c5a5bbbc6b46a71a5d4010fe0c92ebb2fdf4a43ea5dd',\n * // @log:   number: 19868020n,\n * // @log:   size: 520n,\n * // @log:   timestamp: 1662222222n,\n * // @log:   // ...\n * // @log: }\n * ```\n *\n * :::note\n *\n * For simplicity, the above example uses `window.ethereum.request`, but you can use any\n * type of JSON-RPC interface.\n *\n * :::\n *\n * @param block - The RPC block to convert.\n * @returns An instantiated {@link ox#Block.Block}.\n */\nfunction fromRpc(block, _options = {}) {\n    if (!block)\n        return null;\n    const transactions = block.transactions.map((transaction) => {\n        if (typeof transaction === 'string')\n            return transaction;\n        return _Transaction_js__WEBPACK_IMPORTED_MODULE_0__.fromRpc(transaction);\n    });\n    return {\n        ...block,\n        baseFeePerGas: block.baseFeePerGas\n            ? BigInt(block.baseFeePerGas)\n            : undefined,\n        blobGasUsed: block.blobGasUsed ? BigInt(block.blobGasUsed) : undefined,\n        difficulty: block.difficulty ? BigInt(block.difficulty) : undefined,\n        excessBlobGas: block.excessBlobGas\n            ? BigInt(block.excessBlobGas)\n            : undefined,\n        gasLimit: BigInt(block.gasLimit ?? 0n),\n        gasUsed: BigInt(block.gasUsed ?? 0n),\n        number: block.number ? BigInt(block.number) : null,\n        size: BigInt(block.size ?? 0n),\n        stateRoot: block.stateRoot,\n        timestamp: BigInt(block.timestamp ?? 0n),\n        totalDifficulty: BigInt(block.totalDifficulty ?? 0n),\n        transactions,\n        withdrawals: block.withdrawals?.map(_Withdrawal_js__WEBPACK_IMPORTED_MODULE_2__.fromRpc),\n    };\n}\n//# sourceMappingURL=Block.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ox/_esm/core/Block.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ox/_esm/core/Bloom.js":
/*!********************************************!*\
  !*** ./node_modules/ox/_esm/core/Bloom.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   contains: () => (/* binding */ contains),\n/* harmony export */   validate: () => (/* binding */ validate)\n/* harmony export */ });\n/* harmony import */ var _Bytes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Bytes.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Bytes.js\");\n/* harmony import */ var _Hash_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Hash.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Hash.js\");\n/* harmony import */ var _Hex_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Hex.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Hex.js\");\n\n\n\n/**\n * Checks if an input is matched in the bloom filter.\n *\n * @example\n * ```ts twoslash\n * import { Bloom } from 'ox'\n *\n * Bloom.contains(\n *   '0xn *   '0xef2d6d194084c2de36e0dabfce45d046b37d1106',\n * )\n * // @log: true\n * ```\n *\n * @param bloom - Bloom filter value.\n * @param input - Input to check.\n * @returns Whether the input is matched in the bloom filter.\n */\nfunction contains(bloom, input) {\n    const filter = _Bytes_js__WEBPACK_IMPORTED_MODULE_0__.fromHex(bloom);\n    const hash = _Hash_js__WEBPACK_IMPORTED_MODULE_1__.keccak256(input, { as: 'Bytes' });\n    for (const i of [0, 2, 4]) {\n        const bit = (hash[i + 1] + (hash[i] << 8)) & 0x7ff;\n        if ((filter[256 - 1 - Math.floor(bit / 8)] & (1 << (bit % 8))) === 0)\n            return false;\n    }\n    return true;\n}\n/**\n * Checks if a string is a valid bloom filter value.\n *\n * @example\n * ```ts twoslash\n * import { Bloom } from 'ox'\n *\n * Bloom.validate('0x')\n * // @log: false\n *\n * Bloom.validate('0xn * // @log: true\n * ```\n *\n * @param value - Value to check.\n * @returns Whether the value is a valid bloom filter.\n */\nfunction validate(value) {\n    return _Hex_js__WEBPACK_IMPORTED_MODULE_2__.validate(value) && _Hex_js__WEBPACK_IMPORTED_MODULE_2__.size(value) === 256;\n}\n//# sourceMappingURL=Bloom.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9veC9fZXNtL2NvcmUvQmxvb20uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBb0M7QUFDRjtBQUNGO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLFFBQVE7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCxtQkFBbUIsOENBQWE7QUFDaEMsaUJBQWlCLCtDQUFjLFVBQVUsYUFBYTtBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLFFBQVE7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AsV0FBVyw2Q0FBWSxXQUFXLHlDQUFRO0FBQzFDO0FBQ0EiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcY2hhbmRcXERvd25sb2Fkc1xcam9obndyaWNoa2lkaW50b3JpenpcXG5vZGVfbW9kdWxlc1xcb3hcXF9lc21cXGNvcmVcXEJsb29tLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIEJ5dGVzIGZyb20gJy4vQnl0ZXMuanMnO1xuaW1wb3J0ICogYXMgSGFzaCBmcm9tICcuL0hhc2guanMnO1xuaW1wb3J0ICogYXMgSGV4IGZyb20gJy4vSGV4LmpzJztcbi8qKlxuICogQ2hlY2tzIGlmIGFuIGlucHV0IGlzIG1hdGNoZWQgaW4gdGhlIGJsb29tIGZpbHRlci5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgdHMgdHdvc2xhc2hcbiAqIGltcG9ydCB7IEJsb29tIH0gZnJvbSAnb3gnXG4gKlxuICogQmxvb20uY29udGFpbnMoXG4gKiAgICcweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAyMDIwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA4MDAwMDAwMDAxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAqICAgJzB4ZWYyZDZkMTk0MDg0YzJkZTM2ZTBkYWJmY2U0NWQwNDZiMzdkMTEwNicsXG4gKiApXG4gKiAvLyBAbG9nOiB0cnVlXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gYmxvb20gLSBCbG9vbSBmaWx0ZXIgdmFsdWUuXG4gKiBAcGFyYW0gaW5wdXQgLSBJbnB1dCB0byBjaGVjay5cbiAqIEByZXR1cm5zIFdoZXRoZXIgdGhlIGlucHV0IGlzIG1hdGNoZWQgaW4gdGhlIGJsb29tIGZpbHRlci5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbnRhaW5zKGJsb29tLCBpbnB1dCkge1xuICAgIGNvbnN0IGZpbHRlciA9IEJ5dGVzLmZyb21IZXgoYmxvb20pO1xuICAgIGNvbnN0IGhhc2ggPSBIYXNoLmtlY2NhazI1NihpbnB1dCwgeyBhczogJ0J5dGVzJyB9KTtcbiAgICBmb3IgKGNvbnN0IGkgb2YgWzAsIDIsIDRdKSB7XG4gICAgICAgIGNvbnN0IGJpdCA9IChoYXNoW2kgKyAxXSArIChoYXNoW2ldIDw8IDgpKSAmIDB4N2ZmO1xuICAgICAgICBpZiAoKGZpbHRlclsyNTYgLSAxIC0gTWF0aC5mbG9vcihiaXQgLyA4KV0gJiAoMSA8PCAoYml0ICUgOCkpKSA9PT0gMClcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG4vKipcbiAqIENoZWNrcyBpZiBhIHN0cmluZyBpcyBhIHZhbGlkIGJsb29tIGZpbHRlciB2YWx1ZS5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgdHMgdHdvc2xhc2hcbiAqIGltcG9ydCB7IEJsb29tIH0gZnJvbSAnb3gnXG4gKlxuICogQmxvb20udmFsaWRhdGUoJzB4JylcbiAqIC8vIEBsb2c6IGZhbHNlXG4gKlxuICogQmxvb20udmFsaWRhdGUoJzB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwODAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNDQwMDAyMDAwMDAwMDAwMDAwMDAwMDAwMDIwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMjAwMDAwMDAwMDAwMDAwMDAwMDA4MDAwMDAwMDAwMDA4MDAwMDAwMDAwMDA4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDQwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA4MDgwMDIwMDAwMDAwMDA0MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxMDAwMDAwMDAwMDAwMDIwMDAwMDAnKVxuICogLy8gQGxvZzogdHJ1ZVxuICogYGBgXG4gKlxuICogQHBhcmFtIHZhbHVlIC0gVmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyBXaGV0aGVyIHRoZSB2YWx1ZSBpcyBhIHZhbGlkIGJsb29tIGZpbHRlci5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlKHZhbHVlKSB7XG4gICAgcmV0dXJuIEhleC52YWxpZGF0ZSh2YWx1ZSkgJiYgSGV4LnNpemUodmFsdWUpID09PSAyNTY7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1CbG9vbS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ox/_esm/core/Bloom.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ox/_esm/core/Bls.js":
/*!******************************************!*\
  !*** ./node_modules/ox/_esm/core/Bls.js ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   aggregate: () => (/* binding */ aggregate),\n/* harmony export */   getPublicKey: () => (/* binding */ getPublicKey),\n/* harmony export */   noble: () => (/* binding */ noble),\n/* harmony export */   randomPrivateKey: () => (/* binding */ randomPrivateKey),\n/* harmony export */   sign: () => (/* binding */ sign),\n/* harmony export */   verify: () => (/* binding */ verify)\n/* harmony export */ });\n/* harmony import */ var _noble_curves_bls12_381__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @noble/curves/bls12-381 */ \"(pages-dir-browser)/./node_modules/@noble/curves/esm/bls12-381.js\");\n/* harmony import */ var _Bytes_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Bytes.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Bytes.js\");\n/* harmony import */ var _Hex_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Hex.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Hex.js\");\n\n\n\n/** Re-export of noble/curves BLS12-381 utilities. */\nconst noble = _noble_curves_bls12_381__WEBPACK_IMPORTED_MODULE_0__.bls12_381;\n// eslint-disable-next-line jsdoc/require-jsdoc\nfunction aggregate(points) {\n    const group = typeof points[0]?.x === 'bigint' ? _noble_curves_bls12_381__WEBPACK_IMPORTED_MODULE_0__.bls12_381.G1 : _noble_curves_bls12_381__WEBPACK_IMPORTED_MODULE_0__.bls12_381.G2;\n    const point = points.reduce((acc, point) => acc.add(new group.ProjectivePoint(point.x, point.y, point.z)), group.ProjectivePoint.ZERO);\n    return {\n        x: point.px,\n        y: point.py,\n        z: point.pz,\n    };\n}\n// eslint-disable-next-line jsdoc/require-jsdoc\nfunction getPublicKey(options) {\n    const { privateKey, size = 'short-key:long-sig' } = options;\n    const group = size === 'short-key:long-sig' ? _noble_curves_bls12_381__WEBPACK_IMPORTED_MODULE_0__.bls12_381.G1 : _noble_curves_bls12_381__WEBPACK_IMPORTED_MODULE_0__.bls12_381.G2;\n    const { px, py, pz } = group.ProjectivePoint.fromPrivateKey(_Hex_js__WEBPACK_IMPORTED_MODULE_1__.from(privateKey).slice(2));\n    return { x: px, y: py, z: pz };\n}\n/**\n * Generates a random BLS12-381 private key.\n *\n * @example\n * ```ts twoslash\n * import { Bls } from 'ox'\n *\n * const privateKey = Bls.randomPrivateKey()\n * ```\n *\n * @param options - The options to generate the private key.\n * @returns The generated private key.\n */\nfunction randomPrivateKey(options = {}) {\n    const { as = 'Hex' } = options;\n    const bytes = _noble_curves_bls12_381__WEBPACK_IMPORTED_MODULE_0__.bls12_381.utils.randomPrivateKey();\n    if (as === 'Hex')\n        return _Hex_js__WEBPACK_IMPORTED_MODULE_1__.fromBytes(bytes);\n    return bytes;\n}\n// eslint-disable-next-line jsdoc/require-jsdoc\nfunction sign(options) {\n    const { payload, privateKey, suite, size = 'short-key:long-sig' } = options;\n    const payloadGroup = size === 'short-key:long-sig' ? _noble_curves_bls12_381__WEBPACK_IMPORTED_MODULE_0__.bls12_381.G2 : _noble_curves_bls12_381__WEBPACK_IMPORTED_MODULE_0__.bls12_381.G1;\n    const payloadPoint = payloadGroup.hashToCurve(_Bytes_js__WEBPACK_IMPORTED_MODULE_2__.from(payload), suite ? { DST: _Bytes_js__WEBPACK_IMPORTED_MODULE_2__.fromString(suite) } : undefined);\n    const privateKeyGroup = size === 'short-key:long-sig' ? _noble_curves_bls12_381__WEBPACK_IMPORTED_MODULE_0__.bls12_381.G1 : _noble_curves_bls12_381__WEBPACK_IMPORTED_MODULE_0__.bls12_381.G2;\n    const signature = payloadPoint.multiply(privateKeyGroup.normPrivateKeyToScalar(privateKey.slice(2)));\n    return {\n        x: signature.px,\n        y: signature.py,\n        z: signature.pz,\n    };\n}\n/**\n * Verifies a payload was signed by the provided public key(s).\n *\n * @example\n *\n * ```ts twoslash\n * import { Bls, Hex } from 'ox'\n *\n * const payload = Hex.random(32)\n * const privateKey = Bls.randomPrivateKey()\n *\n * const publicKey = Bls.getPublicKey({ privateKey })\n * const signature = Bls.sign({ payload, privateKey })\n *\n * const verified = Bls.verify({ // [!code focus]\n *   payload, // [!code focus]\n *   publicKey, // [!code focus]\n *   signature, // [!code focus]\n * }) // [!code focus]\n * ```\n *\n * @example\n * ### Verify Aggregated Signatures\n *\n * We can also pass a public key and signature that was aggregated with {@link ox#Bls.(aggregate:function)} to `Bls.verify`.\n *\n * ```ts twoslash\n * import { Bls, Hex } from 'ox'\n *\n * const payload = Hex.random(32)\n * const privateKeys = Array.from({ length: 100 }, () => Bls.randomPrivateKey())\n *\n * const publicKeys = privateKeys.map((privateKey) =>\n *   Bls.getPublicKey({ privateKey }),\n * )\n * const signatures = privateKeys.map((privateKey) =>\n *   Bls.sign({ payload, privateKey }),\n * )\n *\n * const publicKey = Bls.aggregate(publicKeys) // [!code focus]\n * const signature = Bls.aggregate(signatures) // [!code focus]\n *\n * const valid = Bls.verify({ payload, publicKey, signature }) // [!code focus]\n * ```\n *\n * @param options - Verification options.\n * @returns Whether the payload was signed by the provided public key.\n */\nfunction verify(options) {\n    const { payload, suite } = options;\n    const publicKey = options.publicKey;\n    const signature = options.signature;\n    const isShortSig = typeof signature.x === 'bigint';\n    const group = isShortSig ? _noble_curves_bls12_381__WEBPACK_IMPORTED_MODULE_0__.bls12_381.G1 : _noble_curves_bls12_381__WEBPACK_IMPORTED_MODULE_0__.bls12_381.G2;\n    const payloadPoint = group.hashToCurve(_Bytes_js__WEBPACK_IMPORTED_MODULE_2__.from(payload), suite ? { DST: _Bytes_js__WEBPACK_IMPORTED_MODULE_2__.fromString(suite) } : undefined);\n    const shortSigPairing = () => _noble_curves_bls12_381__WEBPACK_IMPORTED_MODULE_0__.bls12_381.pairingBatch([\n        {\n            g1: payloadPoint,\n            g2: new _noble_curves_bls12_381__WEBPACK_IMPORTED_MODULE_0__.bls12_381.G2.ProjectivePoint(publicKey.x, publicKey.y, publicKey.z),\n        },\n        {\n            g1: new _noble_curves_bls12_381__WEBPACK_IMPORTED_MODULE_0__.bls12_381.G1.ProjectivePoint(signature.x, signature.y, signature.z),\n            g2: _noble_curves_bls12_381__WEBPACK_IMPORTED_MODULE_0__.bls12_381.G2.ProjectivePoint.BASE.negate(),\n        },\n    ]);\n    const longSigPairing = () => _noble_curves_bls12_381__WEBPACK_IMPORTED_MODULE_0__.bls12_381.pairingBatch([\n        {\n            g1: new _noble_curves_bls12_381__WEBPACK_IMPORTED_MODULE_0__.bls12_381.G1.ProjectivePoint(publicKey.x, publicKey.y, publicKey.z).negate(),\n            g2: payloadPoint,\n        },\n        {\n            g1: _noble_curves_bls12_381__WEBPACK_IMPORTED_MODULE_0__.bls12_381.G1.ProjectivePoint.BASE,\n            g2: new _noble_curves_bls12_381__WEBPACK_IMPORTED_MODULE_0__.bls12_381.G2.ProjectivePoint(signature.x, signature.y, signature.z),\n        },\n    ]);\n    return _noble_curves_bls12_381__WEBPACK_IMPORTED_MODULE_0__.bls12_381.fields.Fp12.eql(isShortSig ? shortSigPairing() : longSigPairing(), _noble_curves_bls12_381__WEBPACK_IMPORTED_MODULE_0__.bls12_381.fields.Fp12.ONE);\n}\n//# sourceMappingURL=Bls.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ox/_esm/core/Bls.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ox/_esm/core/BlsPoint.js":
/*!***********************************************!*\
  !*** ./node_modules/ox/_esm/core/BlsPoint.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fromBytes: () => (/* binding */ fromBytes),\n/* harmony export */   fromHex: () => (/* binding */ fromHex),\n/* harmony export */   toBytes: () => (/* binding */ toBytes),\n/* harmony export */   toHex: () => (/* binding */ toHex)\n/* harmony export */ });\n/* harmony import */ var _noble_curves_bls12_381__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @noble/curves/bls12-381 */ \"(pages-dir-browser)/./node_modules/@noble/curves/esm/bls12-381.js\");\n/* harmony import */ var _Hex_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Hex.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Hex.js\");\n\n\n/**\n * Converts a BLS point to {@link ox#Bytes.Bytes}.\n *\n * @example\n * ### Public Key to Bytes\n * ```ts twoslash\n * import { Bls, BlsPoint } from 'ox'\n *\n * const publicKey = Bls.getPublicKey({ privateKey: '0x...' })\n * const publicKeyBytes = BlsPoint.toBytes(publicKey)\n * // @log: Uint8Array [172, 175, 255, ...]\n * ```\n *\n * @example\n * ### Signature to Bytes\n * ```ts twoslash\n * import { Bls, BlsPoint } from 'ox'\n *\n * const signature = Bls.sign({ payload: '0x...', privateKey: '0x...' })\n * const signatureBytes = BlsPoint.toBytes(signature)\n * // @log: Uint8Array [172, 175, 255, ...]\n * ```\n *\n * @param point - The BLS point to convert.\n * @returns The bytes representation of the BLS point.\n */\nfunction toBytes(point) {\n    const group = typeof point.z === 'bigint' ? _noble_curves_bls12_381__WEBPACK_IMPORTED_MODULE_0__.bls12_381.G1 : _noble_curves_bls12_381__WEBPACK_IMPORTED_MODULE_0__.bls12_381.G2;\n    return new group.ProjectivePoint(point.x, point.y, point.z).toRawBytes();\n}\n// eslint-disable-next-line jsdoc/require-jsdoc\nfunction toHex(point) {\n    return _Hex_js__WEBPACK_IMPORTED_MODULE_1__.fromBytes(toBytes(point));\n}\n// eslint-disable-next-line jsdoc/require-jsdoc\nfunction fromBytes(bytes) {\n    const group = bytes.length === 48 ? _noble_curves_bls12_381__WEBPACK_IMPORTED_MODULE_0__.bls12_381.G1 : _noble_curves_bls12_381__WEBPACK_IMPORTED_MODULE_0__.bls12_381.G2;\n    const point = group.ProjectivePoint.fromHex(bytes);\n    return {\n        x: point.px,\n        y: point.py,\n        z: point.pz,\n    };\n}\n// eslint-disable-next-line jsdoc/require-jsdoc\nfunction fromHex(hex, group) {\n    return fromBytes(_Hex_js__WEBPACK_IMPORTED_MODULE_1__.toBytes(hex), group);\n}\n//# sourceMappingURL=BlsPoint.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9veC9fZXNtL2NvcmUvQmxzUG9pbnQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQTJEO0FBQzNCO0FBQ2hDO0FBQ0EsNEJBQTRCLHFCQUFxQjtBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksZ0JBQWdCO0FBQzVCO0FBQ0Esd0NBQXdDLHFCQUFxQjtBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksZ0JBQWdCO0FBQzVCO0FBQ0EsZ0NBQWdDLHVDQUF1QztBQUN2RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AsZ0RBQWdELDhEQUFHLE1BQU0sOERBQUc7QUFDNUQ7QUFDQTtBQUNBO0FBQ087QUFDUCxXQUFXLDhDQUFhO0FBQ3hCO0FBQ0E7QUFDTztBQUNQLHdDQUF3Qyw4REFBRyxNQUFNLDhEQUFHO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQLHFCQUFxQiw0Q0FBVztBQUNoQztBQUNBIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGNoYW5kXFxEb3dubG9hZHNcXGpvaG53cmljaGtpZGludG9yaXp6XFxub2RlX21vZHVsZXNcXG94XFxfZXNtXFxjb3JlXFxCbHNQb2ludC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBibHMxMl8zODEgYXMgYmxzIH0gZnJvbSAnQG5vYmxlL2N1cnZlcy9ibHMxMi0zODEnO1xuaW1wb3J0ICogYXMgSGV4IGZyb20gJy4vSGV4LmpzJztcbi8qKlxuICogQ29udmVydHMgYSBCTFMgcG9pbnQgdG8ge0BsaW5rIG94I0J5dGVzLkJ5dGVzfS5cbiAqXG4gKiBAZXhhbXBsZVxuICogIyMjIFB1YmxpYyBLZXkgdG8gQnl0ZXNcbiAqIGBgYHRzIHR3b3NsYXNoXG4gKiBpbXBvcnQgeyBCbHMsIEJsc1BvaW50IH0gZnJvbSAnb3gnXG4gKlxuICogY29uc3QgcHVibGljS2V5ID0gQmxzLmdldFB1YmxpY0tleSh7IHByaXZhdGVLZXk6ICcweC4uLicgfSlcbiAqIGNvbnN0IHB1YmxpY0tleUJ5dGVzID0gQmxzUG9pbnQudG9CeXRlcyhwdWJsaWNLZXkpXG4gKiAvLyBAbG9nOiBVaW50OEFycmF5IFsxNzIsIDE3NSwgMjU1LCAuLi5dXG4gKiBgYGBcbiAqXG4gKiBAZXhhbXBsZVxuICogIyMjIFNpZ25hdHVyZSB0byBCeXRlc1xuICogYGBgdHMgdHdvc2xhc2hcbiAqIGltcG9ydCB7IEJscywgQmxzUG9pbnQgfSBmcm9tICdveCdcbiAqXG4gKiBjb25zdCBzaWduYXR1cmUgPSBCbHMuc2lnbih7IHBheWxvYWQ6ICcweC4uLicsIHByaXZhdGVLZXk6ICcweC4uLicgfSlcbiAqIGNvbnN0IHNpZ25hdHVyZUJ5dGVzID0gQmxzUG9pbnQudG9CeXRlcyhzaWduYXR1cmUpXG4gKiAvLyBAbG9nOiBVaW50OEFycmF5IFsxNzIsIDE3NSwgMjU1LCAuLi5dXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gcG9pbnQgLSBUaGUgQkxTIHBvaW50IHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyBUaGUgYnl0ZXMgcmVwcmVzZW50YXRpb24gb2YgdGhlIEJMUyBwb2ludC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRvQnl0ZXMocG9pbnQpIHtcbiAgICBjb25zdCBncm91cCA9IHR5cGVvZiBwb2ludC56ID09PSAnYmlnaW50JyA/IGJscy5HMSA6IGJscy5HMjtcbiAgICByZXR1cm4gbmV3IGdyb3VwLlByb2plY3RpdmVQb2ludChwb2ludC54LCBwb2ludC55LCBwb2ludC56KS50b1Jhd0J5dGVzKCk7XG59XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUganNkb2MvcmVxdWlyZS1qc2RvY1xuZXhwb3J0IGZ1bmN0aW9uIHRvSGV4KHBvaW50KSB7XG4gICAgcmV0dXJuIEhleC5mcm9tQnl0ZXModG9CeXRlcyhwb2ludCkpO1xufVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGpzZG9jL3JlcXVpcmUtanNkb2NcbmV4cG9ydCBmdW5jdGlvbiBmcm9tQnl0ZXMoYnl0ZXMpIHtcbiAgICBjb25zdCBncm91cCA9IGJ5dGVzLmxlbmd0aCA9PT0gNDggPyBibHMuRzEgOiBibHMuRzI7XG4gICAgY29uc3QgcG9pbnQgPSBncm91cC5Qcm9qZWN0aXZlUG9pbnQuZnJvbUhleChieXRlcyk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgeDogcG9pbnQucHgsXG4gICAgICAgIHk6IHBvaW50LnB5LFxuICAgICAgICB6OiBwb2ludC5weixcbiAgICB9O1xufVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGpzZG9jL3JlcXVpcmUtanNkb2NcbmV4cG9ydCBmdW5jdGlvbiBmcm9tSGV4KGhleCwgZ3JvdXApIHtcbiAgICByZXR1cm4gZnJvbUJ5dGVzKEhleC50b0J5dGVzKGhleCksIGdyb3VwKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUJsc1BvaW50LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ox/_esm/core/BlsPoint.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ox/_esm/core/ContractAddress.js":
/*!******************************************************!*\
  !*** ./node_modules/ox/_esm/core/ContractAddress.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   from: () => (/* binding */ from),\n/* harmony export */   fromCreate: () => (/* binding */ fromCreate),\n/* harmony export */   fromCreate2: () => (/* binding */ fromCreate2)\n/* harmony export */ });\n/* harmony import */ var _Address_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Address.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Address.js\");\n/* harmony import */ var _Bytes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Bytes.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Bytes.js\");\n/* harmony import */ var _Hash_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Hash.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Hash.js\");\n/* harmony import */ var _Hex_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Hex.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Hex.js\");\n/* harmony import */ var _Rlp_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Rlp.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Rlp.js\");\n\n\n\n\n\n/**\n * Computes Contract Address generated by the [CREATE](https://ethereum.stackexchange.com/questions/68943/create-opcode-what-does-it-really-do/68945#68945) or [CREATE2](https://eips.ethereum.org/EIPS/eip-1014) opcode.\n *\n * @example\n * ### CREATE\n *\n * Computes via the [CREATE](https://ethereum.stackexchange.com/questions/68943/create-opcode-what-does-it-really-do/68945#68945) opcode. Shorthand for {@link ox#ContractAddress.(fromCreate:function)}.\n *\n * ```ts twoslash\n * import { ContractAddress } from 'ox'\n * ContractAddress.from({\n *   from: '0x1a1e021a302c237453d3d45c7b82b19ceeb7e2e6',\n *   nonce: 0n,\n * })\n * // @log: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2'\n * ```\n *\n * @example\n * ### CREATE2\n *\n * Computes via the [CREATE2](https://eips.ethereum.org/EIPS/eip-1014) opcode. Shorthand for {@link ox#ContractAddress.(fromCreate2:function)}.\n *\n * ```ts twoslash\n * import { ContractAddress, Hex } from 'ox'\n * ContractAddress.from({\n *   from: '0x1a1e021a302c237453d3d45c7b82b19ceeb7e2e6',\n *   bytecode: '0x6394198df16000526103ff60206004601c335afa6040516060f3',\n *   salt: Hex.fromString('hello world'),\n * })\n * // @log: '0x59fbB593ABe27Cb193b6ee5C5DC7bbde312290aB'\n * ```\n *\n * @param options - Options.\n * @returns Contract Address.\n */\nfunction from(options) {\n    if (options.salt)\n        return fromCreate2(options);\n    return fromCreate(options);\n}\n/**\n * Computes contract address via [CREATE](https://ethereum.stackexchange.com/questions/68943/create-opcode-what-does-it-really-do/68945#68945) opcode.\n *\n * @example\n * ```ts twoslash\n * import { ContractAddress } from 'ox'\n *\n * ContractAddress.fromCreate({\n *   from: '0x1a1e021a302c237453d3d45c7b82b19ceeb7e2e6',\n *   nonce: 0n,\n * })\n * // @log: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2'\n * ```\n *\n * @param options - Options for retrieving address.\n * @returns Contract Address.\n */\nfunction fromCreate(options) {\n    const from = _Bytes_js__WEBPACK_IMPORTED_MODULE_0__.fromHex(_Address_js__WEBPACK_IMPORTED_MODULE_1__.from(options.from));\n    let nonce = _Bytes_js__WEBPACK_IMPORTED_MODULE_0__.fromNumber(options.nonce);\n    if (nonce[0] === 0)\n        nonce = new Uint8Array([]);\n    return _Address_js__WEBPACK_IMPORTED_MODULE_1__.from(`0x${_Hash_js__WEBPACK_IMPORTED_MODULE_2__.keccak256(_Rlp_js__WEBPACK_IMPORTED_MODULE_3__.fromBytes([from, nonce], { as: 'Hex' })).slice(26)}`);\n}\n/**\n * Computes contract address via [CREATE2](https://eips.ethereum.org/EIPS/eip-1014) opcode.\n *\n * @example\n * ```ts twoslash\n * import { ContractAddress, Hex } from 'ox'\n *\n * ContractAddress.fromCreate2({\n *   from: '0x1a1e021a302c237453d3d45c7b82b19ceeb7e2e6',\n *   bytecode: '0x6394198df16000526103ff60206004601c335afa6040516060f3',\n *   salt: Hex.fromString('hello world'),\n * })\n * // @log: '0x59fbB593ABe27Cb193b6ee5C5DC7bbde312290aB'\n * ```\n *\n * @param options - Options for retrieving address.\n * @returns Contract Address.\n */\nfunction fromCreate2(options) {\n    const from = _Bytes_js__WEBPACK_IMPORTED_MODULE_0__.fromHex(_Address_js__WEBPACK_IMPORTED_MODULE_1__.from(options.from));\n    const salt = _Bytes_js__WEBPACK_IMPORTED_MODULE_0__.padLeft(_Bytes_js__WEBPACK_IMPORTED_MODULE_0__.validate(options.salt) ? options.salt : _Bytes_js__WEBPACK_IMPORTED_MODULE_0__.fromHex(options.salt), 32);\n    const bytecodeHash = (() => {\n        if ('bytecodeHash' in options) {\n            if (_Bytes_js__WEBPACK_IMPORTED_MODULE_0__.validate(options.bytecodeHash))\n                return options.bytecodeHash;\n            return _Bytes_js__WEBPACK_IMPORTED_MODULE_0__.fromHex(options.bytecodeHash);\n        }\n        return _Hash_js__WEBPACK_IMPORTED_MODULE_2__.keccak256(options.bytecode, { as: 'Bytes' });\n    })();\n    return _Address_js__WEBPACK_IMPORTED_MODULE_1__.from(_Hex_js__WEBPACK_IMPORTED_MODULE_4__.slice(_Hash_js__WEBPACK_IMPORTED_MODULE_2__.keccak256(_Bytes_js__WEBPACK_IMPORTED_MODULE_0__.concat(_Bytes_js__WEBPACK_IMPORTED_MODULE_0__.fromHex('0xff'), from, salt, bytecodeHash), { as: 'Hex' }), 12));\n}\n//# sourceMappingURL=ContractAddress.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9veC9fZXNtL2NvcmUvQ29udHJhY3RBZGRyZXNzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQXdDO0FBQ0o7QUFDRjtBQUNGO0FBQ0E7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUpBQXlKLCtDQUErQztBQUN4TTtBQUNBO0FBQ0EsWUFBWSxrQkFBa0I7QUFDOUI7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhGQUE4RixnREFBZ0Q7QUFDOUk7QUFDQTtBQUNBLFlBQVksdUJBQXVCO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxrQkFBa0I7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCxpQkFBaUIsOENBQWEsQ0FBQyw2Q0FBWTtBQUMzQyxnQkFBZ0IsaURBQWdCO0FBQ2hDO0FBQ0E7QUFDQSxXQUFXLDZDQUFZLE1BQU0sK0NBQWMsQ0FBQyw4Q0FBYSxrQkFBa0IsV0FBVyxhQUFhO0FBQ25HO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksdUJBQXVCO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCxpQkFBaUIsOENBQWEsQ0FBQyw2Q0FBWTtBQUMzQyxpQkFBaUIsOENBQWEsQ0FBQywrQ0FBYyxnQ0FBZ0MsOENBQWE7QUFDMUY7QUFDQTtBQUNBLGdCQUFnQiwrQ0FBYztBQUM5QjtBQUNBLG1CQUFtQiw4Q0FBYTtBQUNoQztBQUNBLGVBQWUsK0NBQWMscUJBQXFCLGFBQWE7QUFDL0QsS0FBSztBQUNMLFdBQVcsNkNBQVksQ0FBQywwQ0FBUyxDQUFDLCtDQUFjLENBQUMsNkNBQVksQ0FBQyw4Q0FBYSx1Q0FBdUMsV0FBVztBQUM3SDtBQUNBIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGNoYW5kXFxEb3dubG9hZHNcXGpvaG53cmljaGtpZGludG9yaXp6XFxub2RlX21vZHVsZXNcXG94XFxfZXNtXFxjb3JlXFxDb250cmFjdEFkZHJlc3MuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgQWRkcmVzcyBmcm9tICcuL0FkZHJlc3MuanMnO1xuaW1wb3J0ICogYXMgQnl0ZXMgZnJvbSAnLi9CeXRlcy5qcyc7XG5pbXBvcnQgKiBhcyBIYXNoIGZyb20gJy4vSGFzaC5qcyc7XG5pbXBvcnQgKiBhcyBIZXggZnJvbSAnLi9IZXguanMnO1xuaW1wb3J0ICogYXMgUmxwIGZyb20gJy4vUmxwLmpzJztcbi8qKlxuICogQ29tcHV0ZXMgQ29udHJhY3QgQWRkcmVzcyBnZW5lcmF0ZWQgYnkgdGhlIFtDUkVBVEVdKGh0dHBzOi8vZXRoZXJldW0uc3RhY2tleGNoYW5nZS5jb20vcXVlc3Rpb25zLzY4OTQzL2NyZWF0ZS1vcGNvZGUtd2hhdC1kb2VzLWl0LXJlYWxseS1kby82ODk0NSM2ODk0NSkgb3IgW0NSRUFURTJdKGh0dHBzOi8vZWlwcy5ldGhlcmV1bS5vcmcvRUlQUy9laXAtMTAxNCkgb3Bjb2RlLlxuICpcbiAqIEBleGFtcGxlXG4gKiAjIyMgQ1JFQVRFXG4gKlxuICogQ29tcHV0ZXMgdmlhIHRoZSBbQ1JFQVRFXShodHRwczovL2V0aGVyZXVtLnN0YWNrZXhjaGFuZ2UuY29tL3F1ZXN0aW9ucy82ODk0My9jcmVhdGUtb3Bjb2RlLXdoYXQtZG9lcy1pdC1yZWFsbHktZG8vNjg5NDUjNjg5NDUpIG9wY29kZS4gU2hvcnRoYW5kIGZvciB7QGxpbmsgb3gjQ29udHJhY3RBZGRyZXNzLihmcm9tQ3JlYXRlOmZ1bmN0aW9uKX0uXG4gKlxuICogYGBgdHMgdHdvc2xhc2hcbiAqIGltcG9ydCB7IENvbnRyYWN0QWRkcmVzcyB9IGZyb20gJ294J1xuICogQ29udHJhY3RBZGRyZXNzLmZyb20oe1xuICogICBmcm9tOiAnMHgxYTFlMDIxYTMwMmMyMzc0NTNkM2Q0NWM3YjgyYjE5Y2VlYjdlMmU2JyxcbiAqICAgbm9uY2U6IDBuLFxuICogfSlcbiAqIC8vIEBsb2c6ICcweEZCQTM5MTJDYTA0ZGQ0NThjODQzZTJFRTA4OTY3ZkMwNGYzNTc5YzInXG4gKiBgYGBcbiAqXG4gKiBAZXhhbXBsZVxuICogIyMjIENSRUFURTJcbiAqXG4gKiBDb21wdXRlcyB2aWEgdGhlIFtDUkVBVEUyXShodHRwczovL2VpcHMuZXRoZXJldW0ub3JnL0VJUFMvZWlwLTEwMTQpIG9wY29kZS4gU2hvcnRoYW5kIGZvciB7QGxpbmsgb3gjQ29udHJhY3RBZGRyZXNzLihmcm9tQ3JlYXRlMjpmdW5jdGlvbil9LlxuICpcbiAqIGBgYHRzIHR3b3NsYXNoXG4gKiBpbXBvcnQgeyBDb250cmFjdEFkZHJlc3MsIEhleCB9IGZyb20gJ294J1xuICogQ29udHJhY3RBZGRyZXNzLmZyb20oe1xuICogICBmcm9tOiAnMHgxYTFlMDIxYTMwMmMyMzc0NTNkM2Q0NWM3YjgyYjE5Y2VlYjdlMmU2JyxcbiAqICAgYnl0ZWNvZGU6ICcweDYzOTQxOThkZjE2MDAwNTI2MTAzZmY2MDIwNjAwNDYwMWMzMzVhZmE2MDQwNTE2MDYwZjMnLFxuICogICBzYWx0OiBIZXguZnJvbVN0cmluZygnaGVsbG8gd29ybGQnKSxcbiAqIH0pXG4gKiAvLyBAbG9nOiAnMHg1OWZiQjU5M0FCZTI3Q2IxOTNiNmVlNUM1REM3YmJkZTMxMjI5MGFCJ1xuICogYGBgXG4gKlxuICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25zLlxuICogQHJldHVybnMgQ29udHJhY3QgQWRkcmVzcy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZyb20ob3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zLnNhbHQpXG4gICAgICAgIHJldHVybiBmcm9tQ3JlYXRlMihvcHRpb25zKTtcbiAgICByZXR1cm4gZnJvbUNyZWF0ZShvcHRpb25zKTtcbn1cbi8qKlxuICogQ29tcHV0ZXMgY29udHJhY3QgYWRkcmVzcyB2aWEgW0NSRUFURV0oaHR0cHM6Ly9ldGhlcmV1bS5zdGFja2V4Y2hhbmdlLmNvbS9xdWVzdGlvbnMvNjg5NDMvY3JlYXRlLW9wY29kZS13aGF0LWRvZXMtaXQtcmVhbGx5LWRvLzY4OTQ1IzY4OTQ1KSBvcGNvZGUuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHRzIHR3b3NsYXNoXG4gKiBpbXBvcnQgeyBDb250cmFjdEFkZHJlc3MgfSBmcm9tICdveCdcbiAqXG4gKiBDb250cmFjdEFkZHJlc3MuZnJvbUNyZWF0ZSh7XG4gKiAgIGZyb206ICcweDFhMWUwMjFhMzAyYzIzNzQ1M2QzZDQ1YzdiODJiMTljZWViN2UyZTYnLFxuICogICBub25jZTogMG4sXG4gKiB9KVxuICogLy8gQGxvZzogJzB4RkJBMzkxMkNhMDRkZDQ1OGM4NDNlMkVFMDg5NjdmQzA0ZjM1NzljMidcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9ucyBmb3IgcmV0cmlldmluZyBhZGRyZXNzLlxuICogQHJldHVybnMgQ29udHJhY3QgQWRkcmVzcy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZyb21DcmVhdGUob3B0aW9ucykge1xuICAgIGNvbnN0IGZyb20gPSBCeXRlcy5mcm9tSGV4KEFkZHJlc3MuZnJvbShvcHRpb25zLmZyb20pKTtcbiAgICBsZXQgbm9uY2UgPSBCeXRlcy5mcm9tTnVtYmVyKG9wdGlvbnMubm9uY2UpO1xuICAgIGlmIChub25jZVswXSA9PT0gMClcbiAgICAgICAgbm9uY2UgPSBuZXcgVWludDhBcnJheShbXSk7XG4gICAgcmV0dXJuIEFkZHJlc3MuZnJvbShgMHgke0hhc2gua2VjY2FrMjU2KFJscC5mcm9tQnl0ZXMoW2Zyb20sIG5vbmNlXSwgeyBhczogJ0hleCcgfSkpLnNsaWNlKDI2KX1gKTtcbn1cbi8qKlxuICogQ29tcHV0ZXMgY29udHJhY3QgYWRkcmVzcyB2aWEgW0NSRUFURTJdKGh0dHBzOi8vZWlwcy5ldGhlcmV1bS5vcmcvRUlQUy9laXAtMTAxNCkgb3Bjb2RlLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGB0cyB0d29zbGFzaFxuICogaW1wb3J0IHsgQ29udHJhY3RBZGRyZXNzLCBIZXggfSBmcm9tICdveCdcbiAqXG4gKiBDb250cmFjdEFkZHJlc3MuZnJvbUNyZWF0ZTIoe1xuICogICBmcm9tOiAnMHgxYTFlMDIxYTMwMmMyMzc0NTNkM2Q0NWM3YjgyYjE5Y2VlYjdlMmU2JyxcbiAqICAgYnl0ZWNvZGU6ICcweDYzOTQxOThkZjE2MDAwNTI2MTAzZmY2MDIwNjAwNDYwMWMzMzVhZmE2MDQwNTE2MDYwZjMnLFxuICogICBzYWx0OiBIZXguZnJvbVN0cmluZygnaGVsbG8gd29ybGQnKSxcbiAqIH0pXG4gKiAvLyBAbG9nOiAnMHg1OWZiQjU5M0FCZTI3Q2IxOTNiNmVlNUM1REM3YmJkZTMxMjI5MGFCJ1xuICogYGBgXG4gKlxuICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25zIGZvciByZXRyaWV2aW5nIGFkZHJlc3MuXG4gKiBAcmV0dXJucyBDb250cmFjdCBBZGRyZXNzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZnJvbUNyZWF0ZTIob3B0aW9ucykge1xuICAgIGNvbnN0IGZyb20gPSBCeXRlcy5mcm9tSGV4KEFkZHJlc3MuZnJvbShvcHRpb25zLmZyb20pKTtcbiAgICBjb25zdCBzYWx0ID0gQnl0ZXMucGFkTGVmdChCeXRlcy52YWxpZGF0ZShvcHRpb25zLnNhbHQpID8gb3B0aW9ucy5zYWx0IDogQnl0ZXMuZnJvbUhleChvcHRpb25zLnNhbHQpLCAzMik7XG4gICAgY29uc3QgYnl0ZWNvZGVIYXNoID0gKCgpID0+IHtcbiAgICAgICAgaWYgKCdieXRlY29kZUhhc2gnIGluIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIGlmIChCeXRlcy52YWxpZGF0ZShvcHRpb25zLmJ5dGVjb2RlSGFzaCkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnMuYnl0ZWNvZGVIYXNoO1xuICAgICAgICAgICAgcmV0dXJuIEJ5dGVzLmZyb21IZXgob3B0aW9ucy5ieXRlY29kZUhhc2gpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBIYXNoLmtlY2NhazI1NihvcHRpb25zLmJ5dGVjb2RlLCB7IGFzOiAnQnl0ZXMnIH0pO1xuICAgIH0pKCk7XG4gICAgcmV0dXJuIEFkZHJlc3MuZnJvbShIZXguc2xpY2UoSGFzaC5rZWNjYWsyNTYoQnl0ZXMuY29uY2F0KEJ5dGVzLmZyb21IZXgoJzB4ZmYnKSwgZnJvbSwgc2FsdCwgYnl0ZWNvZGVIYXNoKSwgeyBhczogJ0hleCcgfSksIDEyKSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Db250cmFjdEFkZHJlc3MuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ox/_esm/core/ContractAddress.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ox/_esm/core/Ens.js":
/*!******************************************!*\
  !*** ./node_modules/ox/_esm/core/Ens.js ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   labelhash: () => (/* binding */ labelhash),\n/* harmony export */   namehash: () => (/* binding */ namehash),\n/* harmony export */   normalize: () => (/* binding */ normalize)\n/* harmony export */ });\n/* harmony import */ var _adraffy_ens_normalize__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @adraffy/ens-normalize */ \"(pages-dir-browser)/./node_modules/@adraffy/ens-normalize/dist/index.mjs\");\n/* harmony import */ var _Bytes_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Bytes.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Bytes.js\");\n/* harmony import */ var _Hash_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Hash.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Hash.js\");\n/* harmony import */ var _Hex_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Hex.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Hex.js\");\n/* harmony import */ var _internal_ens_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./internal/ens.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/internal/ens.js\");\n\n\n\n\n\n/**\n * Hashes ENS label.\n *\n * Since ENS labels prohibit certain forbidden characters (e.g. underscore) and have other validation rules, you likely want to [normalize ENS labels](https://docs.ens.domains/contract-api-reference/name-processing#normalising-names) with [UTS-46 normalization](https://unicode.org/reports/tr46) before passing them to `labelhash`. You can use the built-in {@link ox#Ens.(normalize:function)} function for this.\n *\n * @example\n * ```ts twoslash\n * import { Ens } from 'ox'\n * Ens.labelhash('eth')\n * '0x4f5b812789fc606be1b3b16908db13fc7a9adf7ca72641f84d75b47069d3d7f0'\n * ```\n *\n * @param label - ENS label.\n * @returns ENS labelhash.\n */\nfunction labelhash(label) {\n    const result = new Uint8Array(32).fill(0);\n    if (!label)\n        return _Hex_js__WEBPACK_IMPORTED_MODULE_1__.fromBytes(result);\n    return (_internal_ens_js__WEBPACK_IMPORTED_MODULE_2__.unwrapLabelhash(label) || _Hash_js__WEBPACK_IMPORTED_MODULE_3__.keccak256(_Hex_js__WEBPACK_IMPORTED_MODULE_1__.fromString(label)));\n}\n/**\n * Hashes ENS name.\n *\n * Since ENS names prohibit certain forbidden characters (e.g. underscore) and have other validation rules, you likely want to [normalize ENS names](https://docs.ens.domains/contract-api-reference/name-processing#normalising-names) with [UTS-46 normalization](https://unicode.org/reports/tr46) before passing them to `namehash`. You can use the built-in {@link ox#Ens.(normalize:function)} function for this.\n *\n * @example\n * ```ts twoslash\n * import { Ens } from 'ox'\n * Ens.namehash('wevm.eth')\n * // @log: '0xf246651c1b9a6b141d19c2604e9a58f567973833990f830d882534a747801359'\n * ```\n *\n * @param name - ENS name.\n * @returns ENS namehash.\n */\nfunction namehash(name) {\n    let result = new Uint8Array(32).fill(0);\n    if (!name)\n        return _Hex_js__WEBPACK_IMPORTED_MODULE_1__.fromBytes(result);\n    const labels = name.split('.');\n    // Iterate in reverse order building up hash\n    for (let i = labels.length - 1; i >= 0; i -= 1) {\n        const hashFromEncodedLabel = _internal_ens_js__WEBPACK_IMPORTED_MODULE_2__.unwrapLabelhash(labels[i]);\n        const hashed = hashFromEncodedLabel\n            ? _Bytes_js__WEBPACK_IMPORTED_MODULE_4__.fromHex(hashFromEncodedLabel)\n            : _Hash_js__WEBPACK_IMPORTED_MODULE_3__.keccak256(_Bytes_js__WEBPACK_IMPORTED_MODULE_4__.fromString(labels[i]), { as: 'Bytes' });\n        result = _Hash_js__WEBPACK_IMPORTED_MODULE_3__.keccak256(_Bytes_js__WEBPACK_IMPORTED_MODULE_4__.concat(result, hashed), { as: 'Bytes' });\n    }\n    return _Hex_js__WEBPACK_IMPORTED_MODULE_1__.fromBytes(result);\n}\n/**\n * Normalizes ENS name according to [ENSIP-15](https://github.com/ensdomains/docs/blob/9edf9443de4333a0ea7ec658a870672d5d180d53/ens-improvement-proposals/ensip-15-normalization-standard.md).\n *\n * For more info see [ENS documentation](https://docs.ens.domains/contract-api-reference/name-processing#normalising-names) on name processing.\n *\n * @example\n * ```ts twoslash\n * import { Ens } from 'ox'\n * Ens.normalize('wevm.eth')\n * // @log: 'wevm.eth'\n * ```\n *\n * @param name - ENS name.\n * @returns Normalized ENS name.\n */\nfunction normalize(name) {\n    return (0,_adraffy_ens_normalize__WEBPACK_IMPORTED_MODULE_0__.ens_normalize)(name);\n}\n//# sourceMappingURL=Ens.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9veC9fZXNtL2NvcmUvRW5zLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQXVEO0FBQ25CO0FBQ0Y7QUFDRjtBQUNjO0FBQzlDO0FBQ0E7QUFDQTtBQUNBLHNXQUFzVyxtQ0FBbUM7QUFDelk7QUFDQTtBQUNBO0FBQ0EsWUFBWSxNQUFNO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0EsZUFBZSw4Q0FBYTtBQUM1QixZQUFZLDZEQUF3QixXQUFXLCtDQUFjLENBQUMsK0NBQWM7QUFDNUU7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtV0FBbVcsbUNBQW1DO0FBQ3RZO0FBQ0E7QUFDQTtBQUNBLFlBQVksTUFBTTtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBLGVBQWUsOENBQWE7QUFDNUI7QUFDQTtBQUNBLG9DQUFvQyxRQUFRO0FBQzVDLHFDQUFxQyw2REFBd0I7QUFDN0Q7QUFDQSxjQUFjLDhDQUFhO0FBQzNCLGNBQWMsK0NBQWMsQ0FBQyxpREFBZ0IsZUFBZSxhQUFhO0FBQ3pFLGlCQUFpQiwrQ0FBYyxDQUFDLDZDQUFZLG9CQUFvQixhQUFhO0FBQzdFO0FBQ0EsV0FBVyw4Q0FBYTtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxNQUFNO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCxXQUFXLHFFQUFhO0FBQ3hCO0FBQ0EiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcY2hhbmRcXERvd25sb2Fkc1xcam9obndyaWNoa2lkaW50b3JpenpcXG5vZGVfbW9kdWxlc1xcb3hcXF9lc21cXGNvcmVcXEVucy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBlbnNfbm9ybWFsaXplIH0gZnJvbSAnQGFkcmFmZnkvZW5zLW5vcm1hbGl6ZSc7XG5pbXBvcnQgKiBhcyBCeXRlcyBmcm9tICcuL0J5dGVzLmpzJztcbmltcG9ydCAqIGFzIEhhc2ggZnJvbSAnLi9IYXNoLmpzJztcbmltcG9ydCAqIGFzIEhleCBmcm9tICcuL0hleC5qcyc7XG5pbXBvcnQgKiBhcyBpbnRlcm5hbCBmcm9tICcuL2ludGVybmFsL2Vucy5qcyc7XG4vKipcbiAqIEhhc2hlcyBFTlMgbGFiZWwuXG4gKlxuICogU2luY2UgRU5TIGxhYmVscyBwcm9oaWJpdCBjZXJ0YWluIGZvcmJpZGRlbiBjaGFyYWN0ZXJzIChlLmcuIHVuZGVyc2NvcmUpIGFuZCBoYXZlIG90aGVyIHZhbGlkYXRpb24gcnVsZXMsIHlvdSBsaWtlbHkgd2FudCB0byBbbm9ybWFsaXplIEVOUyBsYWJlbHNdKGh0dHBzOi8vZG9jcy5lbnMuZG9tYWlucy9jb250cmFjdC1hcGktcmVmZXJlbmNlL25hbWUtcHJvY2Vzc2luZyNub3JtYWxpc2luZy1uYW1lcykgd2l0aCBbVVRTLTQ2IG5vcm1hbGl6YXRpb25dKGh0dHBzOi8vdW5pY29kZS5vcmcvcmVwb3J0cy90cjQ2KSBiZWZvcmUgcGFzc2luZyB0aGVtIHRvIGBsYWJlbGhhc2hgLiBZb3UgY2FuIHVzZSB0aGUgYnVpbHQtaW4ge0BsaW5rIG94I0Vucy4obm9ybWFsaXplOmZ1bmN0aW9uKX0gZnVuY3Rpb24gZm9yIHRoaXMuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHRzIHR3b3NsYXNoXG4gKiBpbXBvcnQgeyBFbnMgfSBmcm9tICdveCdcbiAqIEVucy5sYWJlbGhhc2goJ2V0aCcpXG4gKiAnMHg0ZjViODEyNzg5ZmM2MDZiZTFiM2IxNjkwOGRiMTNmYzdhOWFkZjdjYTcyNjQxZjg0ZDc1YjQ3MDY5ZDNkN2YwJ1xuICogYGBgXG4gKlxuICogQHBhcmFtIGxhYmVsIC0gRU5TIGxhYmVsLlxuICogQHJldHVybnMgRU5TIGxhYmVsaGFzaC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGxhYmVsaGFzaChsYWJlbCkge1xuICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBVaW50OEFycmF5KDMyKS5maWxsKDApO1xuICAgIGlmICghbGFiZWwpXG4gICAgICAgIHJldHVybiBIZXguZnJvbUJ5dGVzKHJlc3VsdCk7XG4gICAgcmV0dXJuIChpbnRlcm5hbC51bndyYXBMYWJlbGhhc2gobGFiZWwpIHx8IEhhc2gua2VjY2FrMjU2KEhleC5mcm9tU3RyaW5nKGxhYmVsKSkpO1xufVxuLyoqXG4gKiBIYXNoZXMgRU5TIG5hbWUuXG4gKlxuICogU2luY2UgRU5TIG5hbWVzIHByb2hpYml0IGNlcnRhaW4gZm9yYmlkZGVuIGNoYXJhY3RlcnMgKGUuZy4gdW5kZXJzY29yZSkgYW5kIGhhdmUgb3RoZXIgdmFsaWRhdGlvbiBydWxlcywgeW91IGxpa2VseSB3YW50IHRvIFtub3JtYWxpemUgRU5TIG5hbWVzXShodHRwczovL2RvY3MuZW5zLmRvbWFpbnMvY29udHJhY3QtYXBpLXJlZmVyZW5jZS9uYW1lLXByb2Nlc3Npbmcjbm9ybWFsaXNpbmctbmFtZXMpIHdpdGggW1VUUy00NiBub3JtYWxpemF0aW9uXShodHRwczovL3VuaWNvZGUub3JnL3JlcG9ydHMvdHI0NikgYmVmb3JlIHBhc3NpbmcgdGhlbSB0byBgbmFtZWhhc2hgLiBZb3UgY2FuIHVzZSB0aGUgYnVpbHQtaW4ge0BsaW5rIG94I0Vucy4obm9ybWFsaXplOmZ1bmN0aW9uKX0gZnVuY3Rpb24gZm9yIHRoaXMuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHRzIHR3b3NsYXNoXG4gKiBpbXBvcnQgeyBFbnMgfSBmcm9tICdveCdcbiAqIEVucy5uYW1laGFzaCgnd2V2bS5ldGgnKVxuICogLy8gQGxvZzogJzB4ZjI0NjY1MWMxYjlhNmIxNDFkMTljMjYwNGU5YTU4ZjU2Nzk3MzgzMzk5MGY4MzBkODgyNTM0YTc0NzgwMTM1OSdcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSBuYW1lIC0gRU5TIG5hbWUuXG4gKiBAcmV0dXJucyBFTlMgbmFtZWhhc2guXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBuYW1laGFzaChuYW1lKSB7XG4gICAgbGV0IHJlc3VsdCA9IG5ldyBVaW50OEFycmF5KDMyKS5maWxsKDApO1xuICAgIGlmICghbmFtZSlcbiAgICAgICAgcmV0dXJuIEhleC5mcm9tQnl0ZXMocmVzdWx0KTtcbiAgICBjb25zdCBsYWJlbHMgPSBuYW1lLnNwbGl0KCcuJyk7XG4gICAgLy8gSXRlcmF0ZSBpbiByZXZlcnNlIG9yZGVyIGJ1aWxkaW5nIHVwIGhhc2hcbiAgICBmb3IgKGxldCBpID0gbGFiZWxzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaSAtPSAxKSB7XG4gICAgICAgIGNvbnN0IGhhc2hGcm9tRW5jb2RlZExhYmVsID0gaW50ZXJuYWwudW53cmFwTGFiZWxoYXNoKGxhYmVsc1tpXSk7XG4gICAgICAgIGNvbnN0IGhhc2hlZCA9IGhhc2hGcm9tRW5jb2RlZExhYmVsXG4gICAgICAgICAgICA/IEJ5dGVzLmZyb21IZXgoaGFzaEZyb21FbmNvZGVkTGFiZWwpXG4gICAgICAgICAgICA6IEhhc2gua2VjY2FrMjU2KEJ5dGVzLmZyb21TdHJpbmcobGFiZWxzW2ldKSwgeyBhczogJ0J5dGVzJyB9KTtcbiAgICAgICAgcmVzdWx0ID0gSGFzaC5rZWNjYWsyNTYoQnl0ZXMuY29uY2F0KHJlc3VsdCwgaGFzaGVkKSwgeyBhczogJ0J5dGVzJyB9KTtcbiAgICB9XG4gICAgcmV0dXJuIEhleC5mcm9tQnl0ZXMocmVzdWx0KTtcbn1cbi8qKlxuICogTm9ybWFsaXplcyBFTlMgbmFtZSBhY2NvcmRpbmcgdG8gW0VOU0lQLTE1XShodHRwczovL2dpdGh1Yi5jb20vZW5zZG9tYWlucy9kb2NzL2Jsb2IvOWVkZjk0NDNkZTQzMzNhMGVhN2VjNjU4YTg3MDY3MmQ1ZDE4MGQ1My9lbnMtaW1wcm92ZW1lbnQtcHJvcG9zYWxzL2Vuc2lwLTE1LW5vcm1hbGl6YXRpb24tc3RhbmRhcmQubWQpLlxuICpcbiAqIEZvciBtb3JlIGluZm8gc2VlIFtFTlMgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9kb2NzLmVucy5kb21haW5zL2NvbnRyYWN0LWFwaS1yZWZlcmVuY2UvbmFtZS1wcm9jZXNzaW5nI25vcm1hbGlzaW5nLW5hbWVzKSBvbiBuYW1lIHByb2Nlc3NpbmcuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHRzIHR3b3NsYXNoXG4gKiBpbXBvcnQgeyBFbnMgfSBmcm9tICdveCdcbiAqIEVucy5ub3JtYWxpemUoJ3dldm0uZXRoJylcbiAqIC8vIEBsb2c6ICd3ZXZtLmV0aCdcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSBuYW1lIC0gRU5TIG5hbWUuXG4gKiBAcmV0dXJucyBOb3JtYWxpemVkIEVOUyBuYW1lLlxuICovXG5leHBvcnQgZnVuY3Rpb24gbm9ybWFsaXplKG5hbWUpIHtcbiAgICByZXR1cm4gZW5zX25vcm1hbGl6ZShuYW1lKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUVucy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ox/_esm/core/Ens.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ox/_esm/core/Fee.js":
/*!******************************************!*\
  !*** ./node_modules/ox/_esm/core/Fee.js ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n\n//# sourceMappingURL=Fee.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9veC9fZXNtL2NvcmUvRmVlLmpzIiwibWFwcGluZ3MiOiI7QUFBVTtBQUNWIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGNoYW5kXFxEb3dubG9hZHNcXGpvaG53cmljaGtpZGludG9yaXp6XFxub2RlX21vZHVsZXNcXG94XFxfZXNtXFxjb3JlXFxGZWUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHt9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RmVlLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ox/_esm/core/Fee.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ox/_esm/core/Filter.js":
/*!*********************************************!*\
  !*** ./node_modules/ox/_esm/core/Filter.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fromRpc: () => (/* binding */ fromRpc),\n/* harmony export */   toRpc: () => (/* binding */ toRpc)\n/* harmony export */ });\n/* harmony import */ var _Hex_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Hex.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Hex.js\");\n\n/**\n * Converts a {@link ox#Filter.Rpc} to an {@link ox#Filter.Filter}.\n *\n * @example\n * ```ts twoslash\n * import { Filter } from 'ox'\n *\n * const filter = Filter.fromRpc({\n *   address: '0xd3cda913deb6f67967b99d671a681250403edf27',\n *   fromBlock: 'latest',\n *   toBlock: '0x010f2c',\n *   topics: [\n *     '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef',\n *     null,\n *     '0x0000000000000000000000000c04d9e9278ec5e4d424476d3ebec70cb5d648d1',\n *   ],\n * })\n * // @log: {\n * // @log:   address: '0xd3cda913deb6f67967b99d671a681250403edf27',\n * // @log:   fromBlock: 'latest',\n * // @log:   toBlock: 69420n,\n * // @log:   topics: [\n * // @log:     '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef',\n * // @log:     null,\n * // @log:     '0x0000000000000000000000000c04d9e9278ec5e4d424476d3ebec70cb5d648d1',\n * // @log:   ],\n * // @log: }\n * ```\n *\n * @param filter - The RPC filter to convert.\n * @returns An instantiated {@link ox#Filter.Filter}.\n */\nfunction fromRpc(filter) {\n    const { fromBlock, toBlock } = filter;\n    return {\n        ...filter,\n        ...(fromBlock && {\n            fromBlock: _Hex_js__WEBPACK_IMPORTED_MODULE_0__.validate(fromBlock, { strict: false })\n                ? BigInt(fromBlock)\n                : fromBlock,\n        }),\n        ...(toBlock && {\n            toBlock: _Hex_js__WEBPACK_IMPORTED_MODULE_0__.validate(toBlock, { strict: false })\n                ? BigInt(toBlock)\n                : toBlock,\n        }),\n    };\n}\n/**\n * Converts a {@link ox#Filter.Filter} to a {@link ox#Filter.Rpc}.\n *\n * @example\n * ```ts twoslash\n * import { AbiEvent, Filter } from 'ox'\n *\n * const transfer = AbiEvent.from('event Transfer(address indexed, address indexed, uint256)')\n * const { topics } = AbiEvent.encode(transfer)\n *\n * const filter = Filter.toRpc({\n *   address: '0xfba3912ca04dd458c843e2ee08967fc04f3579c2',\n *   topics,\n * })\n * // @log: {\n * // @log:   address: '0xfba3912ca04dd458c843e2ee08967fc04f3579c2',\n * // @log:   topics: [\n * // @log:     '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef',\n * // @log:   ],\n * // @log: }\n * ```\n *\n * @param filter - The filter to convert.\n * @returns An RPC filter.\n */\nfunction toRpc(filter) {\n    const { address, topics, fromBlock, toBlock } = filter;\n    return {\n        ...(address && { address }),\n        ...(topics && { topics }),\n        ...(typeof fromBlock !== 'undefined'\n            ? {\n                fromBlock: typeof fromBlock === 'bigint'\n                    ? _Hex_js__WEBPACK_IMPORTED_MODULE_0__.fromNumber(fromBlock)\n                    : fromBlock,\n            }\n            : {}),\n        ...(typeof toBlock !== 'undefined'\n            ? {\n                toBlock: typeof toBlock === 'bigint' ? _Hex_js__WEBPACK_IMPORTED_MODULE_0__.fromNumber(toBlock) : toBlock,\n            }\n            : {}),\n    };\n}\n//# sourceMappingURL=Filter.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9veC9fZXNtL2NvcmUvRmlsdGVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFnQztBQUNoQztBQUNBLGVBQWUscUJBQXFCLE9BQU8sdUJBQXVCO0FBQ2xFO0FBQ0E7QUFDQTtBQUNBLFlBQVksU0FBUztBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2Qix1QkFBdUI7QUFDcEQ7QUFDTztBQUNQLFlBQVkscUJBQXFCO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBLHVCQUF1Qiw2Q0FBWSxjQUFjLGVBQWU7QUFDaEU7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLHFCQUFxQiw2Q0FBWSxZQUFZLGVBQWU7QUFDNUQ7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxlQUFlLHdCQUF3QixNQUFNLG9CQUFvQjtBQUNqRTtBQUNBO0FBQ0E7QUFDQSxZQUFZLG1CQUFtQjtBQUMvQjtBQUNBO0FBQ0EsV0FBVyxTQUFTO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQLFlBQVksc0NBQXNDO0FBQ2xEO0FBQ0EseUJBQXlCLFNBQVM7QUFDbEMsd0JBQXdCLFFBQVE7QUFDaEM7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLCtDQUFjO0FBQ3BDO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLHVEQUF1RCwrQ0FBYztBQUNyRTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcY2hhbmRcXERvd25sb2Fkc1xcam9obndyaWNoa2lkaW50b3JpenpcXG5vZGVfbW9kdWxlc1xcb3hcXF9lc21cXGNvcmVcXEZpbHRlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBIZXggZnJvbSAnLi9IZXguanMnO1xuLyoqXG4gKiBDb252ZXJ0cyBhIHtAbGluayBveCNGaWx0ZXIuUnBjfSB0byBhbiB7QGxpbmsgb3gjRmlsdGVyLkZpbHRlcn0uXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHRzIHR3b3NsYXNoXG4gKiBpbXBvcnQgeyBGaWx0ZXIgfSBmcm9tICdveCdcbiAqXG4gKiBjb25zdCBmaWx0ZXIgPSBGaWx0ZXIuZnJvbVJwYyh7XG4gKiAgIGFkZHJlc3M6ICcweGQzY2RhOTEzZGViNmY2Nzk2N2I5OWQ2NzFhNjgxMjUwNDAzZWRmMjcnLFxuICogICBmcm9tQmxvY2s6ICdsYXRlc3QnLFxuICogICB0b0Jsb2NrOiAnMHgwMTBmMmMnLFxuICogICB0b3BpY3M6IFtcbiAqICAgICAnMHhkZGYyNTJhZDFiZTJjODliNjljMmIwNjhmYzM3OGRhYTk1MmJhN2YxNjNjNGExMTYyOGY1NWE0ZGY1MjNiM2VmJyxcbiAqICAgICBudWxsLFxuICogICAgICcweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBjMDRkOWU5Mjc4ZWM1ZTRkNDI0NDc2ZDNlYmVjNzBjYjVkNjQ4ZDEnLFxuICogICBdLFxuICogfSlcbiAqIC8vIEBsb2c6IHtcbiAqIC8vIEBsb2c6ICAgYWRkcmVzczogJzB4ZDNjZGE5MTNkZWI2ZjY3OTY3Yjk5ZDY3MWE2ODEyNTA0MDNlZGYyNycsXG4gKiAvLyBAbG9nOiAgIGZyb21CbG9jazogJ2xhdGVzdCcsXG4gKiAvLyBAbG9nOiAgIHRvQmxvY2s6IDY5NDIwbixcbiAqIC8vIEBsb2c6ICAgdG9waWNzOiBbXG4gKiAvLyBAbG9nOiAgICAgJzB4ZGRmMjUyYWQxYmUyYzg5YjY5YzJiMDY4ZmMzNzhkYWE5NTJiYTdmMTYzYzRhMTE2MjhmNTVhNGRmNTIzYjNlZicsXG4gKiAvLyBAbG9nOiAgICAgbnVsbCxcbiAqIC8vIEBsb2c6ICAgICAnMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwYzA0ZDllOTI3OGVjNWU0ZDQyNDQ3NmQzZWJlYzcwY2I1ZDY0OGQxJyxcbiAqIC8vIEBsb2c6ICAgXSxcbiAqIC8vIEBsb2c6IH1cbiAqIGBgYFxuICpcbiAqIEBwYXJhbSBmaWx0ZXIgLSBUaGUgUlBDIGZpbHRlciB0byBjb252ZXJ0LlxuICogQHJldHVybnMgQW4gaW5zdGFudGlhdGVkIHtAbGluayBveCNGaWx0ZXIuRmlsdGVyfS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZyb21ScGMoZmlsdGVyKSB7XG4gICAgY29uc3QgeyBmcm9tQmxvY2ssIHRvQmxvY2sgfSA9IGZpbHRlcjtcbiAgICByZXR1cm4ge1xuICAgICAgICAuLi5maWx0ZXIsXG4gICAgICAgIC4uLihmcm9tQmxvY2sgJiYge1xuICAgICAgICAgICAgZnJvbUJsb2NrOiBIZXgudmFsaWRhdGUoZnJvbUJsb2NrLCB7IHN0cmljdDogZmFsc2UgfSlcbiAgICAgICAgICAgICAgICA/IEJpZ0ludChmcm9tQmxvY2spXG4gICAgICAgICAgICAgICAgOiBmcm9tQmxvY2ssXG4gICAgICAgIH0pLFxuICAgICAgICAuLi4odG9CbG9jayAmJiB7XG4gICAgICAgICAgICB0b0Jsb2NrOiBIZXgudmFsaWRhdGUodG9CbG9jaywgeyBzdHJpY3Q6IGZhbHNlIH0pXG4gICAgICAgICAgICAgICAgPyBCaWdJbnQodG9CbG9jaylcbiAgICAgICAgICAgICAgICA6IHRvQmxvY2ssXG4gICAgICAgIH0pLFxuICAgIH07XG59XG4vKipcbiAqIENvbnZlcnRzIGEge0BsaW5rIG94I0ZpbHRlci5GaWx0ZXJ9IHRvIGEge0BsaW5rIG94I0ZpbHRlci5ScGN9LlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGB0cyB0d29zbGFzaFxuICogaW1wb3J0IHsgQWJpRXZlbnQsIEZpbHRlciB9IGZyb20gJ294J1xuICpcbiAqIGNvbnN0IHRyYW5zZmVyID0gQWJpRXZlbnQuZnJvbSgnZXZlbnQgVHJhbnNmZXIoYWRkcmVzcyBpbmRleGVkLCBhZGRyZXNzIGluZGV4ZWQsIHVpbnQyNTYpJylcbiAqIGNvbnN0IHsgdG9waWNzIH0gPSBBYmlFdmVudC5lbmNvZGUodHJhbnNmZXIpXG4gKlxuICogY29uc3QgZmlsdGVyID0gRmlsdGVyLnRvUnBjKHtcbiAqICAgYWRkcmVzczogJzB4ZmJhMzkxMmNhMDRkZDQ1OGM4NDNlMmVlMDg5NjdmYzA0ZjM1NzljMicsXG4gKiAgIHRvcGljcyxcbiAqIH0pXG4gKiAvLyBAbG9nOiB7XG4gKiAvLyBAbG9nOiAgIGFkZHJlc3M6ICcweGZiYTM5MTJjYTA0ZGQ0NThjODQzZTJlZTA4OTY3ZmMwNGYzNTc5YzInLFxuICogLy8gQGxvZzogICB0b3BpY3M6IFtcbiAqIC8vIEBsb2c6ICAgICAnMHhkZGYyNTJhZDFiZTJjODliNjljMmIwNjhmYzM3OGRhYTk1MmJhN2YxNjNjNGExMTYyOGY1NWE0ZGY1MjNiM2VmJyxcbiAqIC8vIEBsb2c6ICAgXSxcbiAqIC8vIEBsb2c6IH1cbiAqIGBgYFxuICpcbiAqIEBwYXJhbSBmaWx0ZXIgLSBUaGUgZmlsdGVyIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyBBbiBSUEMgZmlsdGVyLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdG9ScGMoZmlsdGVyKSB7XG4gICAgY29uc3QgeyBhZGRyZXNzLCB0b3BpY3MsIGZyb21CbG9jaywgdG9CbG9jayB9ID0gZmlsdGVyO1xuICAgIHJldHVybiB7XG4gICAgICAgIC4uLihhZGRyZXNzICYmIHsgYWRkcmVzcyB9KSxcbiAgICAgICAgLi4uKHRvcGljcyAmJiB7IHRvcGljcyB9KSxcbiAgICAgICAgLi4uKHR5cGVvZiBmcm9tQmxvY2sgIT09ICd1bmRlZmluZWQnXG4gICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICBmcm9tQmxvY2s6IHR5cGVvZiBmcm9tQmxvY2sgPT09ICdiaWdpbnQnXG4gICAgICAgICAgICAgICAgICAgID8gSGV4LmZyb21OdW1iZXIoZnJvbUJsb2NrKVxuICAgICAgICAgICAgICAgICAgICA6IGZyb21CbG9jayxcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDoge30pLFxuICAgICAgICAuLi4odHlwZW9mIHRvQmxvY2sgIT09ICd1bmRlZmluZWQnXG4gICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICB0b0Jsb2NrOiB0eXBlb2YgdG9CbG9jayA9PT0gJ2JpZ2ludCcgPyBIZXguZnJvbU51bWJlcih0b0Jsb2NrKSA6IHRvQmxvY2ssXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICA6IHt9KSxcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RmlsdGVyLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ox/_esm/core/Filter.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ox/_esm/core/HdKey.js":
/*!********************************************!*\
  !*** ./node_modules/ox/_esm/core/HdKey.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fromExtendedKey: () => (/* binding */ fromExtendedKey),\n/* harmony export */   fromJson: () => (/* binding */ fromJson),\n/* harmony export */   fromSeed: () => (/* binding */ fromSeed),\n/* harmony export */   path: () => (/* binding */ path)\n/* harmony export */ });\n/* harmony import */ var _scure_bip32__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @scure/bip32 */ \"(pages-dir-browser)/./node_modules/ox/node_modules/@scure/bip32/lib/esm/index.js\");\n/* harmony import */ var _Bytes_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Bytes.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Bytes.js\");\n/* harmony import */ var _internal_hdKey_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internal/hdKey.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/internal/hdKey.js\");\n\n\n\n/**\n * Creates a HD Key from an extended private key.\n *\n * @example\n * ```ts twoslash\n * import { HdKey } from 'ox'\n *\n * const hdKey = HdKey.fromExtendedKey('...')\n *\n * console.log(hdKey.privateKey)\n * // @log: '0x...'\n * ```\n *\n * @param extendedKey - The extended private key.\n * @returns The HD Key.\n */\nfunction fromExtendedKey(extendedKey) {\n    const key = _scure_bip32__WEBPACK_IMPORTED_MODULE_0__.HDKey.fromExtendedKey(extendedKey);\n    return _internal_hdKey_js__WEBPACK_IMPORTED_MODULE_1__.fromScure(key);\n}\n/**\n * Creates a HD Key from a JSON object containing an extended private key (`xpriv`).\n *\n * @example\n * ```ts twoslash\n * import { HdKey } from 'ox'\n *\n * const hdKey = HdKey.fromJson({ xpriv: '...' })\n *\n * console.log(hdKey.privateKey)\n * // @log: '0x...'\n * ```\n *\n * @param json - The JSON object containing an extended private key (`xpriv`).\n * @returns The HD Key.\n */\nfunction fromJson(json) {\n    return _internal_hdKey_js__WEBPACK_IMPORTED_MODULE_1__.fromScure(_scure_bip32__WEBPACK_IMPORTED_MODULE_0__.HDKey.fromJSON(json));\n}\n/**\n * Creates a HD Key from a master seed.\n *\n * @example\n * ```ts twoslash\n * import { HdKey, Mnemonic } from 'ox'\n *\n * const seed = Mnemonic.toSeed('test test test test test test test test test test test junk')\n * const hdKey = HdKey.fromSeed(seed)\n * ```\n *\n * @example\n * ### Path Derivation\n *\n * You can derive a HD Key at a specific path using `derive`.\n *\n * ```ts twoslash\n * import { HdKey, Mnemonic } from 'ox'\n *\n * const mnemonic = Mnemonic.toSeed('test test test test test test test test test test test junk')\n * const hdKey = HdKey.fromSeed(mnemonic).derive(HdKey.path())\n *\n * console.log(hdKey.privateKey)\n * // @log: '0x...'\n * ```\n *\n * @param seed - The master seed to create the HD Key from.\n * @param options - Creation options.\n * @returns The HD Key.\n */\nfunction fromSeed(seed, options = {}) {\n    const { versions } = options;\n    const key = _scure_bip32__WEBPACK_IMPORTED_MODULE_0__.HDKey.fromMasterSeed(_Bytes_js__WEBPACK_IMPORTED_MODULE_2__.from(seed), versions);\n    return _internal_hdKey_js__WEBPACK_IMPORTED_MODULE_1__.fromScure(key);\n}\n/**\n * Creates an Ethereum-based BIP-44 HD path.\n *\n * @example\n * ```ts twoslash\n * import { HdKey } from 'ox'\n *\n * const path = HdKey.path({ account: 1, index: 2 })\n * // @log: \"m/44'/60'/1'/0/2\"\n * ```\n *\n * @param options - Path options.\n * @returns The path.\n */\nfunction path(options = {}) {\n    const { account = 0, change = 0, index = 0 } = options;\n    return `m/44'/60'/${account}'/${change}/${index}`;\n}\n//# sourceMappingURL=HdKey.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9veC9fZXNtL2NvcmUvSGRLZXkuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFxQztBQUNEO0FBQ1k7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksUUFBUTtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AsZ0JBQWdCLCtDQUFLO0FBQ3JCLFdBQVcseURBQWtCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksUUFBUTtBQUNwQjtBQUNBLGtDQUFrQyxjQUFjO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQLFdBQVcseURBQWtCLENBQUMsK0NBQUs7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxrQkFBa0I7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksa0JBQWtCO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLG9DQUFvQztBQUMzQyxZQUFZLFdBQVc7QUFDdkIsZ0JBQWdCLCtDQUFLLGdCQUFnQiwyQ0FBVTtBQUMvQyxXQUFXLHlEQUFrQjtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLFFBQVE7QUFDcEI7QUFDQSw2QkFBNkIsc0JBQXNCO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLDBCQUEwQjtBQUNqQyxZQUFZLHFDQUFxQztBQUNqRCx3QkFBd0IsUUFBUSxJQUFJLE9BQU8sR0FBRyxNQUFNO0FBQ3BEO0FBQ0EiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcY2hhbmRcXERvd25sb2Fkc1xcam9obndyaWNoa2lkaW50b3JpenpcXG5vZGVfbW9kdWxlc1xcb3hcXF9lc21cXGNvcmVcXEhkS2V5LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEhES2V5IH0gZnJvbSAnQHNjdXJlL2JpcDMyJztcbmltcG9ydCAqIGFzIEJ5dGVzIGZyb20gJy4vQnl0ZXMuanMnO1xuaW1wb3J0ICogYXMgaW50ZXJuYWwgZnJvbSAnLi9pbnRlcm5hbC9oZEtleS5qcyc7XG4vKipcbiAqIENyZWF0ZXMgYSBIRCBLZXkgZnJvbSBhbiBleHRlbmRlZCBwcml2YXRlIGtleS5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgdHMgdHdvc2xhc2hcbiAqIGltcG9ydCB7IEhkS2V5IH0gZnJvbSAnb3gnXG4gKlxuICogY29uc3QgaGRLZXkgPSBIZEtleS5mcm9tRXh0ZW5kZWRLZXkoJy4uLicpXG4gKlxuICogY29uc29sZS5sb2coaGRLZXkucHJpdmF0ZUtleSlcbiAqIC8vIEBsb2c6ICcweC4uLidcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSBleHRlbmRlZEtleSAtIFRoZSBleHRlbmRlZCBwcml2YXRlIGtleS5cbiAqIEByZXR1cm5zIFRoZSBIRCBLZXkuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmcm9tRXh0ZW5kZWRLZXkoZXh0ZW5kZWRLZXkpIHtcbiAgICBjb25zdCBrZXkgPSBIREtleS5mcm9tRXh0ZW5kZWRLZXkoZXh0ZW5kZWRLZXkpO1xuICAgIHJldHVybiBpbnRlcm5hbC5mcm9tU2N1cmUoa2V5KTtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIEhEIEtleSBmcm9tIGEgSlNPTiBvYmplY3QgY29udGFpbmluZyBhbiBleHRlbmRlZCBwcml2YXRlIGtleSAoYHhwcml2YCkuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHRzIHR3b3NsYXNoXG4gKiBpbXBvcnQgeyBIZEtleSB9IGZyb20gJ294J1xuICpcbiAqIGNvbnN0IGhkS2V5ID0gSGRLZXkuZnJvbUpzb24oeyB4cHJpdjogJy4uLicgfSlcbiAqXG4gKiBjb25zb2xlLmxvZyhoZEtleS5wcml2YXRlS2V5KVxuICogLy8gQGxvZzogJzB4Li4uJ1xuICogYGBgXG4gKlxuICogQHBhcmFtIGpzb24gLSBUaGUgSlNPTiBvYmplY3QgY29udGFpbmluZyBhbiBleHRlbmRlZCBwcml2YXRlIGtleSAoYHhwcml2YCkuXG4gKiBAcmV0dXJucyBUaGUgSEQgS2V5LlxuICovXG5leHBvcnQgZnVuY3Rpb24gZnJvbUpzb24oanNvbikge1xuICAgIHJldHVybiBpbnRlcm5hbC5mcm9tU2N1cmUoSERLZXkuZnJvbUpTT04oanNvbikpO1xufVxuLyoqXG4gKiBDcmVhdGVzIGEgSEQgS2V5IGZyb20gYSBtYXN0ZXIgc2VlZC5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgdHMgdHdvc2xhc2hcbiAqIGltcG9ydCB7IEhkS2V5LCBNbmVtb25pYyB9IGZyb20gJ294J1xuICpcbiAqIGNvbnN0IHNlZWQgPSBNbmVtb25pYy50b1NlZWQoJ3Rlc3QgdGVzdCB0ZXN0IHRlc3QgdGVzdCB0ZXN0IHRlc3QgdGVzdCB0ZXN0IHRlc3QgdGVzdCBqdW5rJylcbiAqIGNvbnN0IGhkS2V5ID0gSGRLZXkuZnJvbVNlZWQoc2VlZClcbiAqIGBgYFxuICpcbiAqIEBleGFtcGxlXG4gKiAjIyMgUGF0aCBEZXJpdmF0aW9uXG4gKlxuICogWW91IGNhbiBkZXJpdmUgYSBIRCBLZXkgYXQgYSBzcGVjaWZpYyBwYXRoIHVzaW5nIGBkZXJpdmVgLlxuICpcbiAqIGBgYHRzIHR3b3NsYXNoXG4gKiBpbXBvcnQgeyBIZEtleSwgTW5lbW9uaWMgfSBmcm9tICdveCdcbiAqXG4gKiBjb25zdCBtbmVtb25pYyA9IE1uZW1vbmljLnRvU2VlZCgndGVzdCB0ZXN0IHRlc3QgdGVzdCB0ZXN0IHRlc3QgdGVzdCB0ZXN0IHRlc3QgdGVzdCB0ZXN0IGp1bmsnKVxuICogY29uc3QgaGRLZXkgPSBIZEtleS5mcm9tU2VlZChtbmVtb25pYykuZGVyaXZlKEhkS2V5LnBhdGgoKSlcbiAqXG4gKiBjb25zb2xlLmxvZyhoZEtleS5wcml2YXRlS2V5KVxuICogLy8gQGxvZzogJzB4Li4uJ1xuICogYGBgXG4gKlxuICogQHBhcmFtIHNlZWQgLSBUaGUgbWFzdGVyIHNlZWQgdG8gY3JlYXRlIHRoZSBIRCBLZXkgZnJvbS5cbiAqIEBwYXJhbSBvcHRpb25zIC0gQ3JlYXRpb24gb3B0aW9ucy5cbiAqIEByZXR1cm5zIFRoZSBIRCBLZXkuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmcm9tU2VlZChzZWVkLCBvcHRpb25zID0ge30pIHtcbiAgICBjb25zdCB7IHZlcnNpb25zIH0gPSBvcHRpb25zO1xuICAgIGNvbnN0IGtleSA9IEhES2V5LmZyb21NYXN0ZXJTZWVkKEJ5dGVzLmZyb20oc2VlZCksIHZlcnNpb25zKTtcbiAgICByZXR1cm4gaW50ZXJuYWwuZnJvbVNjdXJlKGtleSk7XG59XG4vKipcbiAqIENyZWF0ZXMgYW4gRXRoZXJldW0tYmFzZWQgQklQLTQ0IEhEIHBhdGguXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHRzIHR3b3NsYXNoXG4gKiBpbXBvcnQgeyBIZEtleSB9IGZyb20gJ294J1xuICpcbiAqIGNvbnN0IHBhdGggPSBIZEtleS5wYXRoKHsgYWNjb3VudDogMSwgaW5kZXg6IDIgfSlcbiAqIC8vIEBsb2c6IFwibS80NCcvNjAnLzEnLzAvMlwiXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gb3B0aW9ucyAtIFBhdGggb3B0aW9ucy5cbiAqIEByZXR1cm5zIFRoZSBwYXRoLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcGF0aChvcHRpb25zID0ge30pIHtcbiAgICBjb25zdCB7IGFjY291bnQgPSAwLCBjaGFuZ2UgPSAwLCBpbmRleCA9IDAgfSA9IG9wdGlvbnM7XG4gICAgcmV0dXJuIGBtLzQ0Jy82MCcvJHthY2NvdW50fScvJHtjaGFuZ2V9LyR7aW5kZXh9YDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUhkS2V5LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ox/_esm/core/HdKey.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ox/_esm/core/Keystore.js":
/*!***********************************************!*\
  !*** ./node_modules/ox/_esm/core/Keystore.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decrypt: () => (/* binding */ decrypt),\n/* harmony export */   encrypt: () => (/* binding */ encrypt),\n/* harmony export */   pbkdf2: () => (/* binding */ pbkdf2),\n/* harmony export */   pbkdf2Async: () => (/* binding */ pbkdf2Async),\n/* harmony export */   scrypt: () => (/* binding */ scrypt),\n/* harmony export */   scryptAsync: () => (/* binding */ scryptAsync),\n/* harmony export */   toKey: () => (/* binding */ toKey),\n/* harmony export */   toKeyAsync: () => (/* binding */ toKeyAsync)\n/* harmony export */ });\n/* harmony import */ var _noble_ciphers_aes__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @noble/ciphers/aes */ \"(pages-dir-browser)/./node_modules/@noble/ciphers/esm/aes.js\");\n/* harmony import */ var _noble_hashes_pbkdf2__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @noble/hashes/pbkdf2 */ \"(pages-dir-browser)/./node_modules/@noble/hashes/esm/pbkdf2.js\");\n/* harmony import */ var _noble_hashes_scrypt__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @noble/hashes/scrypt */ \"(pages-dir-browser)/./node_modules/@noble/hashes/esm/scrypt.js\");\n/* harmony import */ var _noble_hashes_sha2__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @noble/hashes/sha2 */ \"(pages-dir-browser)/./node_modules/@noble/hashes/esm/sha2.js\");\n/* harmony import */ var _Bytes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Bytes.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Bytes.js\");\n/* harmony import */ var _Hash_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Hash.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Hash.js\");\n\n\n\n\n\n\n/**\n * Decrypts a [JSON keystore](https://ethereum.org/en/developers/docs/data-structures-and-encoding/web3-secret-storage/)\n * into a private key.\n *\n * Supports the following key derivation functions (KDFs):\n * - {@link ox#Keystore.(pbkdf2:function)}\n * - {@link ox#Keystore.(scrypt:function)}\n *\n * @example\n * ```ts twoslash\n * // @noErrors\n * import { Keystore, Secp256k1 } from 'ox'\n *\n * // JSON keystore.\n * const keystore = { crypto: { ... }, id: '...', version: 3 }\n *\n * // Derive the key using your password.\n * const key = Keystore.toKey(keystore, { password: 'hunter2' })\n *\n * // Decrypt the private key.\n * const privateKey = Keystore.decrypt(keystore, key)\n * // @log: \"0x...\"\n * ```\n *\n * @param keystore - JSON keystore.\n * @param key - Key to use for decryption.\n * @param options - Decryption options.\n * @returns Decrypted private key.\n */\nfunction decrypt(keystore, key, options = {}) {\n    const { as = 'Hex' } = options;\n    const key_ = _Bytes_js__WEBPACK_IMPORTED_MODULE_0__.from(typeof key === 'function' ? key() : key);\n    const encKey = _Bytes_js__WEBPACK_IMPORTED_MODULE_0__.slice(key_, 0, 16);\n    const macKey = _Bytes_js__WEBPACK_IMPORTED_MODULE_0__.slice(key_, 16, 32);\n    const ciphertext = _Bytes_js__WEBPACK_IMPORTED_MODULE_0__.from(`0x${keystore.crypto.ciphertext}`);\n    const mac = _Hash_js__WEBPACK_IMPORTED_MODULE_1__.keccak256(_Bytes_js__WEBPACK_IMPORTED_MODULE_0__.concat(macKey, ciphertext));\n    if (!_Bytes_js__WEBPACK_IMPORTED_MODULE_0__.isEqual(mac, _Bytes_js__WEBPACK_IMPORTED_MODULE_0__.from(`0x${keystore.crypto.mac}`)))\n        throw new Error('corrupt keystore');\n    const data = (0,_noble_ciphers_aes__WEBPACK_IMPORTED_MODULE_2__.ctr)(encKey, _Bytes_js__WEBPACK_IMPORTED_MODULE_0__.from(`0x${keystore.crypto.cipherparams.iv}`)).decrypt(ciphertext);\n    if (as === 'Hex')\n        return _Bytes_js__WEBPACK_IMPORTED_MODULE_0__.toHex(data);\n    return data;\n}\n/**\n * Encrypts a private key as a [JSON keystore](https://ethereum.org/en/developers/docs/data-structures-and-encoding/web3-secret-storage/)\n * using a derived key.\n *\n * Supports the following key derivation functions (KDFs):\n * - {@link ox#Keystore.(pbkdf2:function)}\n * - {@link ox#Keystore.(scrypt:function)}\n *\n * @example\n * ```ts twoslash\n * import { Keystore, Secp256k1 } from 'ox'\n *\n * // Generate a random private key.\n * const privateKey = Secp256k1.randomPrivateKey()\n *\n * // Derive key from password.\n * const [key, opts] = Keystore.pbkdf2({ password: 'testpassword' })\n *\n * // Encrypt the private key.\n * const encrypted = Keystore.encrypt(privateKey, key, opts)\n * // @log: {\n * // @log:   \"crypto\": {\n * // @log:     \"cipher\": \"aes-128-ctr\",\n * // @log:     \"ciphertext\": \"...\",\n * // @log:     \"cipherparams\": {\n * // @log:       \"iv\": \"...\",\n * // @log:     },\n * // @log:     \"kdf\": \"pbkdf2\",\n * // @log:     \"kdfparams\": {\n * // @log:       \"salt\": \"...\",\n * // @log:       \"dklen\": 32,\n * // @log:       \"prf\": \"hmac-sha256\",\n * // @log:       \"c\": 262144,\n * // @log:     },\n * // @log:     \"mac\": \"...\",\n * // @log:   },\n * // @log:   \"id\": \"...\",\n * // @log:   \"version\": 3,\n * // @log: }\n * ```\n *\n * @param privateKey - Private key to encrypt.\n * @param key - Key to use for encryption.\n * @param options - Encryption options.\n * @returns Encrypted keystore.\n */\nfunction encrypt(privateKey, key, options) {\n    const { id = crypto.randomUUID(), kdf, kdfparams, iv } = options;\n    const key_ = _Bytes_js__WEBPACK_IMPORTED_MODULE_0__.from(typeof key === 'function' ? key() : key);\n    const value_ = _Bytes_js__WEBPACK_IMPORTED_MODULE_0__.from(privateKey);\n    const encKey = _Bytes_js__WEBPACK_IMPORTED_MODULE_0__.slice(key_, 0, 16);\n    const macKey = _Bytes_js__WEBPACK_IMPORTED_MODULE_0__.slice(key_, 16, 32);\n    const ciphertext = (0,_noble_ciphers_aes__WEBPACK_IMPORTED_MODULE_2__.ctr)(encKey, iv).encrypt(value_);\n    const mac = _Hash_js__WEBPACK_IMPORTED_MODULE_1__.keccak256(_Bytes_js__WEBPACK_IMPORTED_MODULE_0__.concat(macKey, ciphertext));\n    return {\n        crypto: {\n            cipher: 'aes-128-ctr',\n            ciphertext: _Bytes_js__WEBPACK_IMPORTED_MODULE_0__.toHex(ciphertext).slice(2),\n            cipherparams: { iv: _Bytes_js__WEBPACK_IMPORTED_MODULE_0__.toHex(iv).slice(2) },\n            kdf,\n            kdfparams,\n            mac: _Bytes_js__WEBPACK_IMPORTED_MODULE_0__.toHex(mac).slice(2),\n        },\n        id,\n        version: 3,\n    };\n}\n/**\n * Derives a key from a password using [PBKDF2](https://en.wikipedia.org/wiki/PBKDF2).\n *\n * @example\n * ```ts twoslash\n * import { Keystore } from 'ox'\n *\n * const [key, opts] = Keystore.pbkdf2({ password: 'testpassword' })\n * ```\n *\n * @param options - PBKDF2 options.\n * @returns PBKDF2 key.\n */\nfunction pbkdf2(options) {\n    const { iv, iterations = 262_144, password } = options;\n    const salt = options.salt ? _Bytes_js__WEBPACK_IMPORTED_MODULE_0__.from(options.salt) : _Bytes_js__WEBPACK_IMPORTED_MODULE_0__.random(32);\n    const key = _Bytes_js__WEBPACK_IMPORTED_MODULE_0__.toHex((0,_noble_hashes_pbkdf2__WEBPACK_IMPORTED_MODULE_3__.pbkdf2)(_noble_hashes_sha2__WEBPACK_IMPORTED_MODULE_4__.sha256, password, salt, { c: iterations, dkLen: 32 }));\n    return defineKey(() => key, {\n        iv,\n        kdfparams: {\n            c: iterations,\n            dklen: 32,\n            prf: 'hmac-sha256',\n            salt: _Bytes_js__WEBPACK_IMPORTED_MODULE_0__.toHex(salt).slice(2),\n        },\n        kdf: 'pbkdf2',\n    });\n}\n/**\n * Derives a key from a password using [PBKDF2](https://en.wikipedia.org/wiki/PBKDF2).\n *\n * @example\n * ```ts twoslash\n * import { Keystore } from 'ox'\n *\n * const [key, opts] = await Keystore.pbkdf2Async({ password: 'testpassword' })\n * ```\n *\n * @param options - PBKDF2 options.\n * @returns PBKDF2 key.\n */\nasync function pbkdf2Async(options) {\n    const { iv, iterations = 262_144, password } = options;\n    const salt = options.salt ? _Bytes_js__WEBPACK_IMPORTED_MODULE_0__.from(options.salt) : _Bytes_js__WEBPACK_IMPORTED_MODULE_0__.random(32);\n    const key = _Bytes_js__WEBPACK_IMPORTED_MODULE_0__.toHex(await (0,_noble_hashes_pbkdf2__WEBPACK_IMPORTED_MODULE_3__.pbkdf2Async)(_noble_hashes_sha2__WEBPACK_IMPORTED_MODULE_4__.sha256, password, salt, {\n        c: iterations,\n        dkLen: 32,\n    }));\n    return defineKey(() => key, {\n        iv,\n        kdfparams: {\n            c: iterations,\n            dklen: 32,\n            prf: 'hmac-sha256',\n            salt: _Bytes_js__WEBPACK_IMPORTED_MODULE_0__.toHex(salt).slice(2),\n        },\n        kdf: 'pbkdf2',\n    });\n}\n/**\n * Derives a key from a password using [scrypt](https://en.wikipedia.org/wiki/Scrypt).\n *\n * @example\n * ```ts twoslash\n * import { Keystore } from 'ox'\n *\n * const [key, opts] = Keystore.scrypt({ password: 'testpassword' })\n * ```\n *\n * @param options - Scrypt options.\n * @returns Scrypt key.\n */\nfunction scrypt(options) {\n    const { iv, n = 262_144, password, p = 8, r = 1 } = options;\n    const salt = options.salt ? _Bytes_js__WEBPACK_IMPORTED_MODULE_0__.from(options.salt) : _Bytes_js__WEBPACK_IMPORTED_MODULE_0__.random(32);\n    const key = _Bytes_js__WEBPACK_IMPORTED_MODULE_0__.toHex((0,_noble_hashes_scrypt__WEBPACK_IMPORTED_MODULE_5__.scrypt)(password, salt, { N: n, dkLen: 32, r, p }));\n    return defineKey(() => key, {\n        iv,\n        kdfparams: {\n            dklen: 32,\n            n,\n            p,\n            r,\n            salt: _Bytes_js__WEBPACK_IMPORTED_MODULE_0__.toHex(salt).slice(2),\n        },\n        kdf: 'scrypt',\n    });\n}\n/**\n * Derives a key from a password using [scrypt](https://en.wikipedia.org/wiki/Scrypt).\n *\n * @example\n * ```ts twoslash\n * import { Keystore } from 'ox'\n *\n * const [key, opts] = await Keystore.scryptAsync({ password: 'testpassword' })\n * ```\n *\n * @param options - Scrypt options.\n * @returns Scrypt key.\n */\nasync function scryptAsync(options) {\n    const { iv, n = 262_144, password } = options;\n    const p = 8;\n    const r = 1;\n    const salt = options.salt ? _Bytes_js__WEBPACK_IMPORTED_MODULE_0__.from(options.salt) : _Bytes_js__WEBPACK_IMPORTED_MODULE_0__.random(32);\n    const key = _Bytes_js__WEBPACK_IMPORTED_MODULE_0__.toHex(await (0,_noble_hashes_scrypt__WEBPACK_IMPORTED_MODULE_5__.scryptAsync)(password, salt, { N: n, dkLen: 32, r, p }));\n    return defineKey(() => key, {\n        iv,\n        kdfparams: {\n            dklen: 32,\n            n,\n            p,\n            r,\n            salt: _Bytes_js__WEBPACK_IMPORTED_MODULE_0__.toHex(salt).slice(2),\n        },\n        kdf: 'scrypt',\n    });\n}\n/**\n * Extracts a Key from a JSON Keystore to use for decryption.\n *\n * @example\n * ```ts twoslash\n * // @noErrors\n * import { Keystore } from 'ox'\n *\n * // JSON keystore.\n * const keystore = { crypto: { ... }, id: '...', version: 3 }\n *\n * const key = Keystore.toKey(keystore, { password: 'hunter2' }) // [!code focus]\n *\n * const decrypted = Keystore.decrypt(keystore, key)\n * ```\n *\n * @param keystore - JSON Keystore\n * @param options - Options\n * @returns Key\n */\nfunction toKey(keystore, options) {\n    const { crypto } = keystore;\n    const { password } = options;\n    const { cipherparams, kdf, kdfparams } = crypto;\n    const { iv } = cipherparams;\n    const { c, n, p, r, salt } = kdfparams;\n    const [key] = (() => {\n        switch (kdf) {\n            case 'scrypt':\n                return scrypt({\n                    iv: _Bytes_js__WEBPACK_IMPORTED_MODULE_0__.from(`0x${iv}`),\n                    n,\n                    p,\n                    r,\n                    salt: _Bytes_js__WEBPACK_IMPORTED_MODULE_0__.from(`0x${salt}`),\n                    password,\n                });\n            case 'pbkdf2':\n                return pbkdf2({\n                    iv: _Bytes_js__WEBPACK_IMPORTED_MODULE_0__.from(`0x${iv}`),\n                    iterations: c,\n                    password,\n                    salt: _Bytes_js__WEBPACK_IMPORTED_MODULE_0__.from(`0x${salt}`),\n                });\n            default:\n                throw new Error('unsupported kdf');\n        }\n    })();\n    return key;\n}\n/**\n * Extracts a Key asynchronously from a JSON Keystore to use for decryption.\n *\n * @example\n * ```ts twoslash\n * // @noErrors\n * import { Keystore } from 'ox'\n *\n * // JSON keystore.\n * const keystore = { crypto: { ... }, id: '...', version: 3 }\n *\n * const key = await Keystore.toKeyAsync(keystore, { password: 'hunter2' }) // [!code focus]\n *\n * const decrypted = Keystore.decrypt(keystore, key)\n * ```\n *\n * @param keystore - JSON Keystore\n * @param options - Options\n * @returns Key\n */\nasync function toKeyAsync(keystore, options) {\n    const { crypto } = keystore;\n    const { password } = options;\n    const { cipherparams, kdf, kdfparams } = crypto;\n    const { iv } = cipherparams;\n    const { c, n, p, r, salt } = kdfparams;\n    const [key] = await (async () => {\n        switch (kdf) {\n            case 'scrypt':\n                return await scryptAsync({\n                    iv: _Bytes_js__WEBPACK_IMPORTED_MODULE_0__.from(`0x${iv}`),\n                    n,\n                    p,\n                    r,\n                    salt: _Bytes_js__WEBPACK_IMPORTED_MODULE_0__.from(`0x${salt}`),\n                    password,\n                });\n            case 'pbkdf2':\n                return await pbkdf2({\n                    iv: _Bytes_js__WEBPACK_IMPORTED_MODULE_0__.from(`0x${iv}`),\n                    iterations: c,\n                    password,\n                    salt: _Bytes_js__WEBPACK_IMPORTED_MODULE_0__.from(`0x${salt}`),\n                });\n            default:\n                throw new Error('unsupported kdf');\n        }\n    })();\n    return key;\n}\n///////////////////////////////////////////////////////////////////////////\n/** @internal */\nfunction defineKey(key, options) {\n    const iv = options.iv ? _Bytes_js__WEBPACK_IMPORTED_MODULE_0__.from(options.iv) : _Bytes_js__WEBPACK_IMPORTED_MODULE_0__.random(16);\n    return [key, { ...options, iv }];\n}\n//# sourceMappingURL=Keystore.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ox/_esm/core/Keystore.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ox/_esm/core/Kzg.js":
/*!******************************************!*\
  !*** ./node_modules/ox/_esm/core/Kzg.js ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   from: () => (/* binding */ from),\n/* harmony export */   versionedHashVersion: () => (/* binding */ versionedHashVersion)\n/* harmony export */ });\n/** @see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-4844.md#parameters */\nconst versionedHashVersion = 1;\n/**\n * Defines a KZG interface.\n *\n * @example\n * ```ts twoslash\n * // @noErrors\n * import * as cKzg from 'c-kzg'\n * import { Kzg } from 'ox'\n * import { Paths } from 'ox/trusted-setups'\n *\n * cKzg.loadTrustedSetup(Paths.mainnet)\n *\n * const kzg = Kzg.from(cKzg)\n * ```\n *\n * @param value - The KZG object to convert.\n * @returns The KZG interface object.\n */\nfunction from(value) {\n    const { blobToKzgCommitment, computeBlobKzgProof } = value;\n    return {\n        blobToKzgCommitment,\n        computeBlobKzgProof,\n    };\n}\n//# sourceMappingURL=Kzg.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9veC9fZXNtL2NvcmUvS3pnLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxNQUFNO0FBQ2xCLFlBQVksUUFBUTtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQLFlBQVksMkNBQTJDO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxjaGFuZFxcRG93bmxvYWRzXFxqb2hud3JpY2hraWRpbnRvcml6elxcbm9kZV9tb2R1bGVzXFxveFxcX2VzbVxcY29yZVxcS3pnLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2Jsb2IvbWFzdGVyL0VJUFMvZWlwLTQ4NDQubWQjcGFyYW1ldGVycyAqL1xuZXhwb3J0IGNvbnN0IHZlcnNpb25lZEhhc2hWZXJzaW9uID0gMTtcbi8qKlxuICogRGVmaW5lcyBhIEtaRyBpbnRlcmZhY2UuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHRzIHR3b3NsYXNoXG4gKiAvLyBAbm9FcnJvcnNcbiAqIGltcG9ydCAqIGFzIGNLemcgZnJvbSAnYy1remcnXG4gKiBpbXBvcnQgeyBLemcgfSBmcm9tICdveCdcbiAqIGltcG9ydCB7IFBhdGhzIH0gZnJvbSAnb3gvdHJ1c3RlZC1zZXR1cHMnXG4gKlxuICogY0t6Zy5sb2FkVHJ1c3RlZFNldHVwKFBhdGhzLm1haW5uZXQpXG4gKlxuICogY29uc3Qga3pnID0gS3pnLmZyb20oY0t6ZylcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB2YWx1ZSAtIFRoZSBLWkcgb2JqZWN0IHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyBUaGUgS1pHIGludGVyZmFjZSBvYmplY3QuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmcm9tKHZhbHVlKSB7XG4gICAgY29uc3QgeyBibG9iVG9LemdDb21taXRtZW50LCBjb21wdXRlQmxvYkt6Z1Byb29mIH0gPSB2YWx1ZTtcbiAgICByZXR1cm4ge1xuICAgICAgICBibG9iVG9LemdDb21taXRtZW50LFxuICAgICAgICBjb21wdXRlQmxvYkt6Z1Byb29mLFxuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1LemcuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ox/_esm/core/Kzg.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ox/_esm/core/Log.js":
/*!******************************************!*\
  !*** ./node_modules/ox/_esm/core/Log.js ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fromRpc: () => (/* binding */ fromRpc),\n/* harmony export */   toRpc: () => (/* binding */ toRpc)\n/* harmony export */ });\n/* harmony import */ var _Hex_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Hex.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Hex.js\");\n\n/**\n * Converts a {@link ox#Log.Rpc} to an {@link ox#Log.Log}.\n *\n * @example\n * ```ts twoslash\n * import { Log } from 'ox'\n *\n * const log = Log.fromRpc({\n *   address: '0xfba3912ca04dd458c843e2ee08967fc04f3579c2',\n *   topics: [\n *     '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef',\n *     '0x0000000000000000000000000000000000000000000000000000000000000000',\n *     '0x0000000000000000000000000c04d9e9278ec5e4d424476d3ebec70cb5d648d1',\n *     '0x000000000000000000000000000000000000000000000000000000000000025b',\n *   ],\n *   data: '0x',\n *   blockHash:\n *     '0xabe69134e80a12f6a93d0aa18215b5b86c2fb338bae911790ca374a8716e01a4',\n *   blockNumber: '0x12d846c',\n *   transactionHash:\n *     '0xcfa52db0bc2cb5bdcb2c5bd8816df7a2f018a0e3964ab1ef4d794cf327966e93',\n *   transactionIndex: '0x91',\n *   logIndex: '0x10f',\n *   removed: false,\n * })\n * // @log: {\n * // @log:   address: '0xfba3912ca04dd458c843e2ee08967fc04f3579c2',\n * // @log:   blockHash: '0xabe69134e80a12f6a93d0aa18215b5b86c2fb338bae911790ca374a8716e01a4',\n * // @log:   blockNumber: 19760236n,\n * // @log:   data: '0x',\n * // @log:   logIndex: 271,\n * // @log:   removed: false,\n * // @log:   topics: [\n * // @log:     \"0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\",\n * // @log:     \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n * // @log:     \"0x0000000000000000000000000c04d9e9278ec5e4d424476d3ebec70cb5d648d1\",\n * // @log:     \"0x000000000000000000000000000000000000000000000000000000000000025b\",\n * // @log:   transactionHash:\n * // @log:     '0xcfa52db0bc2cb5bdcb2c5bd8816df7a2f018a0e3964ab1ef4d794cf327966e93',\n * // @log:   transactionIndex: 145,\n * // @log: }\n * ```\n *\n * @example\n * ### End-to-end\n *\n * Below is an example of how to use `Log.fromRpc` to instantiate a {@link ox#Log.Log} from an RPC log.\n *\n * ```ts twoslash\n * import 'ox/window'\n * import { AbiEvent, Hex, Log } from 'ox'\n *\n * const transfer = AbiEvent.from(\n *   'event Transfer(address indexed from, address indexed to, uint256 indexed value)',\n * )\n *\n * const { topics } = AbiEvent.encode(transfer)\n *\n * const logs = await window.ethereum!.request({\n *   method: 'eth_getLogs',\n *   params: [\n *     {\n *       address: '0xfba3912ca04dd458c843e2ee08967fc04f3579c2',\n *       fromBlock: Hex.fromNumber(19760235n),\n *       toBlock: Hex.fromNumber(19760240n),\n *       topics,\n *     },\n *   ],\n * })\n *\n * const log = Log.fromRpc(logs[0]) // [!code focus]\n * // @log: {\n * // @log:   address: '0xfba3912ca04dd458c843e2ee08967fc04f3579c2',\n * // @log:   blockHash: '0xabe69134e80a12f6a93d0aa18215b5b86c2fb338bae911790ca374a8716e01a4',\n * // @log:   blockNumber: 19760236n,\n * // @log:   data: '0x',\n * // @log:   logIndex: 271,\n * // @log:   removed: false,\n * // @log:   topics: [\n * // @log:     \"0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\",\n * // @log:     \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n * // @log:     \"0x0000000000000000000000000c04d9e9278ec5e4d424476d3ebec70cb5d648d1\",\n * // @log:     \"0x000000000000000000000000000000000000000000000000000000000000025b\",\n * // @log:   transactionHash:\n * // @log:     '0xcfa52db0bc2cb5bdcb2c5bd8816df7a2f018a0e3964ab1ef4d794cf327966e93',\n * // @log:   transactionIndex: 145,\n * // @log: }\n * ```\n *\n * :::note\n *\n * For simplicity, the above example uses `window.ethereum.request`, but you can use any\n * type of JSON-RPC interface.\n *\n * :::\n *\n * @param log - The RPC log to convert.\n * @returns An instantiated {@link ox#Log.Log}.\n */\nfunction fromRpc(log, _options = {}) {\n    return {\n        ...log,\n        blockNumber: log.blockNumber ? BigInt(log.blockNumber) : null,\n        logIndex: log.logIndex ? Number(log.logIndex) : null,\n        transactionIndex: log.transactionIndex\n            ? Number(log.transactionIndex)\n            : null,\n    };\n}\n/**\n * Converts a {@link ox#Log.Log} to a {@link ox#Log.Rpc}.\n *\n * @example\n * ```ts twoslash\n * import { Log } from 'ox'\n *\n * const log = Log.toRpc({\n *   address: '0xfba3912ca04dd458c843e2ee08967fc04f3579c2',\n *   blockHash:\n *     '0xabe69134e80a12f6a93d0aa18215b5b86c2fb338bae911790ca374a8716e01a4',\n *   blockNumber: 19760236n,\n *   data: '0x',\n *   logIndex: 271,\n *   removed: false,\n *   topics: [\n *     '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef',\n *     '0x0000000000000000000000000000000000000000000000000000000000000000',\n *     '0x0000000000000000000000000c04d9e9278ec5e4d424476d3ebec70cb5d648d1',\n *     '0x000000000000000000000000000000000000000000000000000000000000025b',\n *   ],\n *   transactionHash:\n *     '0xcfa52db0bc2cb5bdcb2c5bd8816df7a2f018a0e3964ab1ef4d794cf327966e93',\n *   transactionIndex: 145,\n * })\n * // @log: {\n * // @log:   address: '0xfba3912ca04dd458c843e2ee08967fc04f3579c2',\n * // @log:   blockHash: '0xabe69134e80a12f6a93d0aa18215b5b86c2fb338bae911790ca374a8716e01a4',\n * // @log:   blockNumber: '0x012d846c',\n * // @log:   data: '0x',\n * // @log:   logIndex: '0x010f',\n * // @log:   removed: false,\n * // @log:   topics: [\n * // @log:     '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef',\n * // @log:     '0x0000000000000000000000000000000000000000000000000000000000000000',\n * // @log:     '0x0000000000000000000000000c04d9e9278ec5e4d424476d3ebec70cb5d648d1',\n * // @log:     '0x000000000000000000000000000000000000000000000000000000000000025b',\n * // @log:   ],\n * // @log:   transactionHash:\n * // @log:     '0xcfa52db0bc2cb5bdcb2c5bd8816df7a2f018a0e3964ab1ef4d794cf327966e93',\n * // @log:   transactionIndex: '0x91',\n * // @log: }\n * ```\n *\n * @param log - The log to convert.\n * @returns An RPC log.\n */\nfunction toRpc(log, _options = {}) {\n    return {\n        address: log.address,\n        blockHash: log.blockHash,\n        blockNumber: typeof log.blockNumber === 'bigint'\n            ? _Hex_js__WEBPACK_IMPORTED_MODULE_0__.fromNumber(log.blockNumber)\n            : null,\n        data: log.data,\n        logIndex: typeof log.logIndex === 'number' ? _Hex_js__WEBPACK_IMPORTED_MODULE_0__.fromNumber(log.logIndex) : null,\n        topics: log.topics,\n        transactionHash: log.transactionHash,\n        transactionIndex: typeof log.transactionIndex === 'number'\n            ? _Hex_js__WEBPACK_IMPORTED_MODULE_0__.fromNumber(log.transactionIndex)\n            : null,\n        removed: log.removed,\n    };\n}\n//# sourceMappingURL=Log.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ox/_esm/core/Log.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ox/_esm/core/Mnemonic.js":
/*!***********************************************!*\
  !*** ./node_modules/ox/_esm/core/Mnemonic.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   czech: () => (/* reexport safe */ _internal_mnemonic_wordlists_js__WEBPACK_IMPORTED_MODULE_2__.czech),\n/* harmony export */   english: () => (/* reexport safe */ _internal_mnemonic_wordlists_js__WEBPACK_IMPORTED_MODULE_2__.english),\n/* harmony export */   french: () => (/* reexport safe */ _internal_mnemonic_wordlists_js__WEBPACK_IMPORTED_MODULE_2__.french),\n/* harmony export */   italian: () => (/* reexport safe */ _internal_mnemonic_wordlists_js__WEBPACK_IMPORTED_MODULE_2__.italian),\n/* harmony export */   japanese: () => (/* reexport safe */ _internal_mnemonic_wordlists_js__WEBPACK_IMPORTED_MODULE_2__.japanese),\n/* harmony export */   korean: () => (/* reexport safe */ _internal_mnemonic_wordlists_js__WEBPACK_IMPORTED_MODULE_2__.korean),\n/* harmony export */   path: () => (/* reexport safe */ _HdKey_js__WEBPACK_IMPORTED_MODULE_1__.path),\n/* harmony export */   portuguese: () => (/* reexport safe */ _internal_mnemonic_wordlists_js__WEBPACK_IMPORTED_MODULE_2__.portuguese),\n/* harmony export */   random: () => (/* binding */ random),\n/* harmony export */   simplifiedChinese: () => (/* reexport safe */ _internal_mnemonic_wordlists_js__WEBPACK_IMPORTED_MODULE_2__.simplifiedChinese),\n/* harmony export */   spanish: () => (/* reexport safe */ _internal_mnemonic_wordlists_js__WEBPACK_IMPORTED_MODULE_2__.spanish),\n/* harmony export */   toHdKey: () => (/* binding */ toHdKey),\n/* harmony export */   toPrivateKey: () => (/* binding */ toPrivateKey),\n/* harmony export */   toSeed: () => (/* binding */ toSeed),\n/* harmony export */   traditionalChinese: () => (/* reexport safe */ _internal_mnemonic_wordlists_js__WEBPACK_IMPORTED_MODULE_2__.traditionalChinese),\n/* harmony export */   validate: () => (/* binding */ validate)\n/* harmony export */ });\n/* harmony import */ var _scure_bip39__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @scure/bip39 */ \"(pages-dir-browser)/./node_modules/ox/node_modules/@scure/bip39/esm/index.js\");\n/* harmony import */ var _Bytes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Bytes.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Bytes.js\");\n/* harmony import */ var _HdKey_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./HdKey.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/HdKey.js\");\n/* harmony import */ var _internal_mnemonic_wordlists_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./internal/mnemonic/wordlists.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/internal/mnemonic/wordlists.js\");\n\n\n\n\n\n/**\n * Generates a random mnemonic.\n *\n * @example\n * ```ts twoslash\n * import { Mnemonic } from 'ox'\n *\n * const mnemonic = Mnemonic.random(Mnemonic.english)\n * // @log: 'buyer zoo end danger ice capable shrug naive twist relief mass bonus'\n * ```\n *\n * @param wordlist - The wordlist to use.\n * @param options - Generation options.\n * @returns The mnemonic.\n */\nfunction random(wordlist, options = {}) {\n    const { strength = 128 } = options;\n    return (0,_scure_bip39__WEBPACK_IMPORTED_MODULE_0__.generateMnemonic)(wordlist, strength);\n}\n/**\n * Converts a mnemonic to a HD Key.\n *\n * @example\n * ```ts twoslash\n * import { Mnemonic } from 'ox'\n *\n * const mnemonic = Mnemonic.random(Mnemonic.english)\n * const hdKey = Mnemonic.toHdKey(mnemonic)\n * ```\n *\n * @example\n * ### Path Derivation\n *\n * You can derive a HD Key at a specific path using `derive`:\n *\n * ```ts twoslash\n * import { Mnemonic } from 'ox'\n *\n * const mnemonic = Mnemonic.random(Mnemonic.english)\n * const hdKey = Mnemonic.toHdKey(mnemonic).derive(Mnemonic.path({ index: 1 }))\n * ```\n *\n * @param mnemonic - The mnemonic to convert.\n * @param options - Conversion options.\n * @returns The HD Key.\n */\nfunction toHdKey(mnemonic, options = {}) {\n    const { passphrase } = options;\n    const seed = toSeed(mnemonic, { passphrase });\n    return _HdKey_js__WEBPACK_IMPORTED_MODULE_1__.fromSeed(seed);\n}\n/**\n * Converts a mnemonic to a private key.\n *\n * @example\n * ```ts twoslash\n * import { Mnemonic } from 'ox'\n *\n * const mnemonic = Mnemonic.random(Mnemonic.english)\n * const privateKey = Mnemonic.toPrivateKey(mnemonic)\n * // @log: '0x...'\n * ```\n *\n * @example\n * ### Paths\n *\n * You can derive a private key at a specific path using the `path` option.\n *\n * ```ts twoslash\n * import { Mnemonic } from 'ox'\n *\n * const mnemonic = Mnemonic.random(Mnemonic.english)\n * const privateKey = Mnemonic.toPrivateKey(mnemonic, {\n *   path: Mnemonic.path({ index: 1 }) // 'm/44'/60'/0'/0/1' // [!code focus]\n * })\n * // @log: '0x...'\n * ```\n *\n * @param mnemonic - The mnemonic to convert.\n * @param options - Conversion options.\n * @returns The private key.\n */\nfunction toPrivateKey(mnemonic, options = {}) {\n    const { path = _HdKey_js__WEBPACK_IMPORTED_MODULE_1__.path(), passphrase } = options;\n    const hdKey = toHdKey(mnemonic, { passphrase }).derive(path);\n    if (options.as === 'Bytes')\n        return _Bytes_js__WEBPACK_IMPORTED_MODULE_3__.from(hdKey.privateKey);\n    return hdKey.privateKey;\n}\n/**\n * Converts a mnemonic to a master seed.\n *\n * @example\n * ```ts twoslash\n * import { Mnemonic } from 'ox'\n *\n * const mnemonic = Mnemonic.random(Mnemonic.english)\n * const seed = Mnemonic.toSeed(mnemonic)\n * // @log: Uint8Array [...64 bytes]\n * ```\n *\n * @param mnemonic - The mnemonic to convert.\n * @param options - Conversion options.\n * @returns The master seed.\n */\nfunction toSeed(mnemonic, options = {}) {\n    const { passphrase } = options;\n    const seed = (0,_scure_bip39__WEBPACK_IMPORTED_MODULE_0__.mnemonicToSeedSync)(mnemonic, passphrase);\n    if (options.as === 'Hex')\n        return _Bytes_js__WEBPACK_IMPORTED_MODULE_3__.toHex(seed);\n    return seed;\n}\n/**\n * Checks if a mnemonic is valid, given a wordlist.\n *\n * @example\n * ```ts twoslash\n * import { Mnemonic } from 'ox'\n *\n * const mnemonic = Mnemonic.validate(\n *   'buyer zoo end danger ice capable shrug naive twist relief mass bonus',\n *   Mnemonic.english\n * )\n * // @log: true\n * ```\n *\n * @param mnemonic - The mnemonic to validate.\n * @param wordlist - The wordlist to use.\n * @returns Whether the mnemonic is valid.\n */\nfunction validate(mnemonic, wordlist) {\n    return (0,_scure_bip39__WEBPACK_IMPORTED_MODULE_0__.validateMnemonic)(mnemonic, wordlist);\n}\n//# sourceMappingURL=Mnemonic.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9veC9fZXNtL2NvcmUvTW5lbW9uaWMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBdUY7QUFDbkQ7QUFDQTtBQUNGO0FBQ2dJO0FBQ2xLO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLFdBQVc7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sc0NBQXNDO0FBQzdDLFlBQVksaUJBQWlCO0FBQzdCLFdBQVcsOERBQWdCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksV0FBVztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxXQUFXO0FBQ3ZCO0FBQ0E7QUFDQSxtRUFBbUUsVUFBVTtBQUM3RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyx1Q0FBdUM7QUFDOUMsWUFBWSxhQUFhO0FBQ3pCLG9DQUFvQyxZQUFZO0FBQ2hELFdBQVcsK0NBQWM7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxXQUFXO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksV0FBVztBQUN2QjtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsVUFBVTtBQUNyQyxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyw0Q0FBNEM7QUFDbkQsWUFBWSxPQUFPLDJDQUFVLGlCQUFpQjtBQUM5QyxzQ0FBc0MsWUFBWTtBQUNsRDtBQUNBLGVBQWUsMkNBQVU7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLFdBQVc7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxzQ0FBc0M7QUFDN0MsWUFBWSxhQUFhO0FBQ3pCLGlCQUFpQixnRUFBa0I7QUFDbkM7QUFDQSxlQUFlLDRDQUFXO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxXQUFXO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AsV0FBVyw4REFBZ0I7QUFDM0I7QUFDQSIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxjaGFuZFxcRG93bmxvYWRzXFxqb2hud3JpY2hraWRpbnRvcml6elxcbm9kZV9tb2R1bGVzXFxveFxcX2VzbVxcY29yZVxcTW5lbW9uaWMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2VuZXJhdGVNbmVtb25pYywgbW5lbW9uaWNUb1NlZWRTeW5jLCB2YWxpZGF0ZU1uZW1vbmljLCB9IGZyb20gJ0BzY3VyZS9iaXAzOSc7XG5pbXBvcnQgKiBhcyBCeXRlcyBmcm9tICcuL0J5dGVzLmpzJztcbmltcG9ydCAqIGFzIEhkS2V5IGZyb20gJy4vSGRLZXkuanMnO1xuZXhwb3J0IHsgcGF0aCB9IGZyb20gJy4vSGRLZXkuanMnO1xuZXhwb3J0IHsgZW5nbGlzaCwgY3plY2gsIGZyZW5jaCwgaXRhbGlhbiwgamFwYW5lc2UsIGtvcmVhbiwgcG9ydHVndWVzZSwgc2ltcGxpZmllZENoaW5lc2UsIHNwYW5pc2gsIHRyYWRpdGlvbmFsQ2hpbmVzZSwgfSBmcm9tICcuL2ludGVybmFsL21uZW1vbmljL3dvcmRsaXN0cy5qcyc7XG4vKipcbiAqIEdlbmVyYXRlcyBhIHJhbmRvbSBtbmVtb25pYy5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgdHMgdHdvc2xhc2hcbiAqIGltcG9ydCB7IE1uZW1vbmljIH0gZnJvbSAnb3gnXG4gKlxuICogY29uc3QgbW5lbW9uaWMgPSBNbmVtb25pYy5yYW5kb20oTW5lbW9uaWMuZW5nbGlzaClcbiAqIC8vIEBsb2c6ICdidXllciB6b28gZW5kIGRhbmdlciBpY2UgY2FwYWJsZSBzaHJ1ZyBuYWl2ZSB0d2lzdCByZWxpZWYgbWFzcyBib251cydcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB3b3JkbGlzdCAtIFRoZSB3b3JkbGlzdCB0byB1c2UuXG4gKiBAcGFyYW0gb3B0aW9ucyAtIEdlbmVyYXRpb24gb3B0aW9ucy5cbiAqIEByZXR1cm5zIFRoZSBtbmVtb25pYy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJhbmRvbSh3b3JkbGlzdCwgb3B0aW9ucyA9IHt9KSB7XG4gICAgY29uc3QgeyBzdHJlbmd0aCA9IDEyOCB9ID0gb3B0aW9ucztcbiAgICByZXR1cm4gZ2VuZXJhdGVNbmVtb25pYyh3b3JkbGlzdCwgc3RyZW5ndGgpO1xufVxuLyoqXG4gKiBDb252ZXJ0cyBhIG1uZW1vbmljIHRvIGEgSEQgS2V5LlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGB0cyB0d29zbGFzaFxuICogaW1wb3J0IHsgTW5lbW9uaWMgfSBmcm9tICdveCdcbiAqXG4gKiBjb25zdCBtbmVtb25pYyA9IE1uZW1vbmljLnJhbmRvbShNbmVtb25pYy5lbmdsaXNoKVxuICogY29uc3QgaGRLZXkgPSBNbmVtb25pYy50b0hkS2V5KG1uZW1vbmljKVxuICogYGBgXG4gKlxuICogQGV4YW1wbGVcbiAqICMjIyBQYXRoIERlcml2YXRpb25cbiAqXG4gKiBZb3UgY2FuIGRlcml2ZSBhIEhEIEtleSBhdCBhIHNwZWNpZmljIHBhdGggdXNpbmcgYGRlcml2ZWA6XG4gKlxuICogYGBgdHMgdHdvc2xhc2hcbiAqIGltcG9ydCB7IE1uZW1vbmljIH0gZnJvbSAnb3gnXG4gKlxuICogY29uc3QgbW5lbW9uaWMgPSBNbmVtb25pYy5yYW5kb20oTW5lbW9uaWMuZW5nbGlzaClcbiAqIGNvbnN0IGhkS2V5ID0gTW5lbW9uaWMudG9IZEtleShtbmVtb25pYykuZGVyaXZlKE1uZW1vbmljLnBhdGgoeyBpbmRleDogMSB9KSlcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSBtbmVtb25pYyAtIFRoZSBtbmVtb25pYyB0byBjb252ZXJ0LlxuICogQHBhcmFtIG9wdGlvbnMgLSBDb252ZXJzaW9uIG9wdGlvbnMuXG4gKiBAcmV0dXJucyBUaGUgSEQgS2V5LlxuICovXG5leHBvcnQgZnVuY3Rpb24gdG9IZEtleShtbmVtb25pYywgb3B0aW9ucyA9IHt9KSB7XG4gICAgY29uc3QgeyBwYXNzcGhyYXNlIH0gPSBvcHRpb25zO1xuICAgIGNvbnN0IHNlZWQgPSB0b1NlZWQobW5lbW9uaWMsIHsgcGFzc3BocmFzZSB9KTtcbiAgICByZXR1cm4gSGRLZXkuZnJvbVNlZWQoc2VlZCk7XG59XG4vKipcbiAqIENvbnZlcnRzIGEgbW5lbW9uaWMgdG8gYSBwcml2YXRlIGtleS5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgdHMgdHdvc2xhc2hcbiAqIGltcG9ydCB7IE1uZW1vbmljIH0gZnJvbSAnb3gnXG4gKlxuICogY29uc3QgbW5lbW9uaWMgPSBNbmVtb25pYy5yYW5kb20oTW5lbW9uaWMuZW5nbGlzaClcbiAqIGNvbnN0IHByaXZhdGVLZXkgPSBNbmVtb25pYy50b1ByaXZhdGVLZXkobW5lbW9uaWMpXG4gKiAvLyBAbG9nOiAnMHguLi4nXG4gKiBgYGBcbiAqXG4gKiBAZXhhbXBsZVxuICogIyMjIFBhdGhzXG4gKlxuICogWW91IGNhbiBkZXJpdmUgYSBwcml2YXRlIGtleSBhdCBhIHNwZWNpZmljIHBhdGggdXNpbmcgdGhlIGBwYXRoYCBvcHRpb24uXG4gKlxuICogYGBgdHMgdHdvc2xhc2hcbiAqIGltcG9ydCB7IE1uZW1vbmljIH0gZnJvbSAnb3gnXG4gKlxuICogY29uc3QgbW5lbW9uaWMgPSBNbmVtb25pYy5yYW5kb20oTW5lbW9uaWMuZW5nbGlzaClcbiAqIGNvbnN0IHByaXZhdGVLZXkgPSBNbmVtb25pYy50b1ByaXZhdGVLZXkobW5lbW9uaWMsIHtcbiAqICAgcGF0aDogTW5lbW9uaWMucGF0aCh7IGluZGV4OiAxIH0pIC8vICdtLzQ0Jy82MCcvMCcvMC8xJyAvLyBbIWNvZGUgZm9jdXNdXG4gKiB9KVxuICogLy8gQGxvZzogJzB4Li4uJ1xuICogYGBgXG4gKlxuICogQHBhcmFtIG1uZW1vbmljIC0gVGhlIG1uZW1vbmljIHRvIGNvbnZlcnQuXG4gKiBAcGFyYW0gb3B0aW9ucyAtIENvbnZlcnNpb24gb3B0aW9ucy5cbiAqIEByZXR1cm5zIFRoZSBwcml2YXRlIGtleS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRvUHJpdmF0ZUtleShtbmVtb25pYywgb3B0aW9ucyA9IHt9KSB7XG4gICAgY29uc3QgeyBwYXRoID0gSGRLZXkucGF0aCgpLCBwYXNzcGhyYXNlIH0gPSBvcHRpb25zO1xuICAgIGNvbnN0IGhkS2V5ID0gdG9IZEtleShtbmVtb25pYywgeyBwYXNzcGhyYXNlIH0pLmRlcml2ZShwYXRoKTtcbiAgICBpZiAob3B0aW9ucy5hcyA9PT0gJ0J5dGVzJylcbiAgICAgICAgcmV0dXJuIEJ5dGVzLmZyb20oaGRLZXkucHJpdmF0ZUtleSk7XG4gICAgcmV0dXJuIGhkS2V5LnByaXZhdGVLZXk7XG59XG4vKipcbiAqIENvbnZlcnRzIGEgbW5lbW9uaWMgdG8gYSBtYXN0ZXIgc2VlZC5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgdHMgdHdvc2xhc2hcbiAqIGltcG9ydCB7IE1uZW1vbmljIH0gZnJvbSAnb3gnXG4gKlxuICogY29uc3QgbW5lbW9uaWMgPSBNbmVtb25pYy5yYW5kb20oTW5lbW9uaWMuZW5nbGlzaClcbiAqIGNvbnN0IHNlZWQgPSBNbmVtb25pYy50b1NlZWQobW5lbW9uaWMpXG4gKiAvLyBAbG9nOiBVaW50OEFycmF5IFsuLi42NCBieXRlc11cbiAqIGBgYFxuICpcbiAqIEBwYXJhbSBtbmVtb25pYyAtIFRoZSBtbmVtb25pYyB0byBjb252ZXJ0LlxuICogQHBhcmFtIG9wdGlvbnMgLSBDb252ZXJzaW9uIG9wdGlvbnMuXG4gKiBAcmV0dXJucyBUaGUgbWFzdGVyIHNlZWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0b1NlZWQobW5lbW9uaWMsIG9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IHsgcGFzc3BocmFzZSB9ID0gb3B0aW9ucztcbiAgICBjb25zdCBzZWVkID0gbW5lbW9uaWNUb1NlZWRTeW5jKG1uZW1vbmljLCBwYXNzcGhyYXNlKTtcbiAgICBpZiAob3B0aW9ucy5hcyA9PT0gJ0hleCcpXG4gICAgICAgIHJldHVybiBCeXRlcy50b0hleChzZWVkKTtcbiAgICByZXR1cm4gc2VlZDtcbn1cbi8qKlxuICogQ2hlY2tzIGlmIGEgbW5lbW9uaWMgaXMgdmFsaWQsIGdpdmVuIGEgd29yZGxpc3QuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHRzIHR3b3NsYXNoXG4gKiBpbXBvcnQgeyBNbmVtb25pYyB9IGZyb20gJ294J1xuICpcbiAqIGNvbnN0IG1uZW1vbmljID0gTW5lbW9uaWMudmFsaWRhdGUoXG4gKiAgICdidXllciB6b28gZW5kIGRhbmdlciBpY2UgY2FwYWJsZSBzaHJ1ZyBuYWl2ZSB0d2lzdCByZWxpZWYgbWFzcyBib251cycsXG4gKiAgIE1uZW1vbmljLmVuZ2xpc2hcbiAqIClcbiAqIC8vIEBsb2c6IHRydWVcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSBtbmVtb25pYyAtIFRoZSBtbmVtb25pYyB0byB2YWxpZGF0ZS5cbiAqIEBwYXJhbSB3b3JkbGlzdCAtIFRoZSB3b3JkbGlzdCB0byB1c2UuXG4gKiBAcmV0dXJucyBXaGV0aGVyIHRoZSBtbmVtb25pYyBpcyB2YWxpZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlKG1uZW1vbmljLCB3b3JkbGlzdCkge1xuICAgIHJldHVybiB2YWxpZGF0ZU1uZW1vbmljKG1uZW1vbmljLCB3b3JkbGlzdCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1NbmVtb25pYy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ox/_esm/core/Mnemonic.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ox/_esm/core/P256.js":
/*!*******************************************!*\
  !*** ./node_modules/ox/_esm/core/P256.js ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getPublicKey: () => (/* binding */ getPublicKey),\n/* harmony export */   noble: () => (/* binding */ noble),\n/* harmony export */   randomPrivateKey: () => (/* binding */ randomPrivateKey),\n/* harmony export */   recoverPublicKey: () => (/* binding */ recoverPublicKey),\n/* harmony export */   sign: () => (/* binding */ sign),\n/* harmony export */   verify: () => (/* binding */ verify)\n/* harmony export */ });\n/* harmony import */ var _noble_curves_p256__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @noble/curves/p256 */ \"(pages-dir-browser)/./node_modules/@noble/curves/esm/p256.js\");\n/* harmony import */ var _Bytes_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Bytes.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Bytes.js\");\n/* harmony import */ var _Hex_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Hex.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Hex.js\");\n/* harmony import */ var _PublicKey_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./PublicKey.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/PublicKey.js\");\n/* harmony import */ var _internal_entropy_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./internal/entropy.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/internal/entropy.js\");\n\n\n\n\n\n/** Re-export of noble/curves P256 utilities. */\nconst noble = _noble_curves_p256__WEBPACK_IMPORTED_MODULE_0__.secp256r1;\n/**\n * Computes the P256 ECDSA public key from a provided private key.\n *\n * @example\n * ```ts twoslash\n * import { P256 } from 'ox'\n *\n * const publicKey = P256.getPublicKey({ privateKey: '0x...' })\n * ```\n *\n * @param options - The options to compute the public key.\n * @returns The computed public key.\n */\nfunction getPublicKey(options) {\n    const { privateKey } = options;\n    const point = _noble_curves_p256__WEBPACK_IMPORTED_MODULE_0__.secp256r1.ProjectivePoint.fromPrivateKey(typeof privateKey === 'string'\n        ? privateKey.slice(2)\n        : _Hex_js__WEBPACK_IMPORTED_MODULE_1__.fromBytes(privateKey).slice(2));\n    return _PublicKey_js__WEBPACK_IMPORTED_MODULE_2__.from(point);\n}\n/**\n * Generates a random P256 ECDSA private key.\n *\n * @example\n * ```ts twoslash\n * import { P256 } from 'ox'\n *\n * const privateKey = P256.randomPrivateKey()\n * ```\n *\n * @param options - The options to generate the private key.\n * @returns The generated private key.\n */\nfunction randomPrivateKey(options = {}) {\n    const { as = 'Hex' } = options;\n    const bytes = _noble_curves_p256__WEBPACK_IMPORTED_MODULE_0__.secp256r1.utils.randomPrivateKey();\n    if (as === 'Hex')\n        return _Hex_js__WEBPACK_IMPORTED_MODULE_1__.fromBytes(bytes);\n    return bytes;\n}\n/**\n * Recovers the signing public key from the signed payload and signature.\n *\n * @example\n * ```ts twoslash\n * import { P256 } from 'ox'\n *\n * const signature = P256.sign({ payload: '0xdeadbeef', privateKey: '0x...' })\n *\n * const publicKey = P256.recoverPublicKey({ // [!code focus]\n *   payload: '0xdeadbeef', // [!code focus]\n *   signature, // [!code focus]\n * }) // [!code focus]\n * ```\n *\n * @param options - The recovery options.\n * @returns The recovered public key.\n */\nfunction recoverPublicKey(options) {\n    const { payload, signature } = options;\n    const { r, s, yParity } = signature;\n    const signature_ = new _noble_curves_p256__WEBPACK_IMPORTED_MODULE_0__.secp256r1.Signature(BigInt(r), BigInt(s)).addRecoveryBit(yParity);\n    const payload_ = payload instanceof Uint8Array ? _Hex_js__WEBPACK_IMPORTED_MODULE_1__.fromBytes(payload) : payload;\n    const point = signature_.recoverPublicKey(payload_.substring(2));\n    return _PublicKey_js__WEBPACK_IMPORTED_MODULE_2__.from(point);\n}\n/**\n * Signs the payload with the provided private key and returns a P256 signature.\n *\n * @example\n * ```ts twoslash\n * import { P256 } from 'ox'\n *\n * const signature = P256.sign({ // [!code focus]\n *   payload: '0xdeadbeef', // [!code focus]\n *   privateKey: '0x...' // [!code focus]\n * }) // [!code focus]\n * ```\n *\n * @param options - The signing options.\n * @returns The ECDSA {@link ox#Signature.Signature}.\n */\nfunction sign(options) {\n    const { extraEntropy = _internal_entropy_js__WEBPACK_IMPORTED_MODULE_3__.extraEntropy, hash, payload, privateKey, } = options;\n    const { r, s, recovery } = _noble_curves_p256__WEBPACK_IMPORTED_MODULE_0__.secp256r1.sign(payload instanceof Uint8Array ? payload : _Bytes_js__WEBPACK_IMPORTED_MODULE_4__.fromHex(payload), privateKey instanceof Uint8Array ? privateKey : _Bytes_js__WEBPACK_IMPORTED_MODULE_4__.fromHex(privateKey), {\n        extraEntropy: typeof extraEntropy === 'boolean'\n            ? extraEntropy\n            : _Hex_js__WEBPACK_IMPORTED_MODULE_1__.from(extraEntropy).slice(2),\n        lowS: true,\n        ...(hash ? { prehash: true } : {}),\n    });\n    return {\n        r,\n        s,\n        yParity: recovery,\n    };\n}\n/**\n * Verifies a payload was signed by the provided public key.\n *\n * @example\n *\n * ```ts twoslash\n * import { P256 } from 'ox'\n *\n * const privateKey = P256.randomPrivateKey()\n * const publicKey = P256.getPublicKey({ privateKey })\n * const signature = P256.sign({ payload: '0xdeadbeef', privateKey })\n *\n * const verified = P256.verify({ // [!code focus]\n *   publicKey, // [!code focus]\n *   payload: '0xdeadbeef', // [!code focus]\n *   signature, // [!code focus]\n * }) // [!code focus]\n * ```\n *\n * @param options - The verification options.\n * @returns Whether the payload was signed by the provided public key.\n */\nfunction verify(options) {\n    const { hash, payload, publicKey, signature } = options;\n    return _noble_curves_p256__WEBPACK_IMPORTED_MODULE_0__.secp256r1.verify(signature, payload instanceof Uint8Array ? payload : _Bytes_js__WEBPACK_IMPORTED_MODULE_4__.fromHex(payload), _PublicKey_js__WEBPACK_IMPORTED_MODULE_2__.toHex(publicKey).substring(2), ...(hash ? [{ prehash: true, lowS: true }] : []));\n}\n//# sourceMappingURL=P256.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9veC9fZXNtL2NvcmUvUDI1Ni5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUErQztBQUNYO0FBQ0o7QUFDWTtBQUNLO0FBQ2pEO0FBQ08sY0FBYyx5REFBUztBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxPQUFPO0FBQ25CO0FBQ0EseUNBQXlDLHFCQUFxQjtBQUM5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCxZQUFZLGFBQWE7QUFDekIsa0JBQWtCLHlEQUFTO0FBQzNCO0FBQ0EsVUFBVSw4Q0FBYTtBQUN2QixXQUFXLCtDQUFjO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksT0FBTztBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLHNDQUFzQztBQUM3QyxZQUFZLGFBQWE7QUFDekIsa0JBQWtCLHlEQUFTO0FBQzNCO0FBQ0EsZUFBZSw4Q0FBYTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksT0FBTztBQUNuQjtBQUNBLGlDQUFpQyw0Q0FBNEM7QUFDN0U7QUFDQSw2Q0FBNkM7QUFDN0M7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCxZQUFZLHFCQUFxQjtBQUNqQyxZQUFZLGdCQUFnQjtBQUM1QiwyQkFBMkIseURBQVM7QUFDcEMscURBQXFELDhDQUFhO0FBQ2xFO0FBQ0EsV0FBVywrQ0FBYztBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLE9BQU87QUFDbkI7QUFDQSxpQ0FBaUM7QUFDakM7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsNkJBQTZCO0FBQ3BEO0FBQ087QUFDUCxZQUFZLGVBQWUsOERBQW9CLCtCQUErQjtBQUM5RSxZQUFZLGlCQUFpQixFQUFFLHlEQUFTLGdEQUFnRCw4Q0FBYSwyREFBMkQsOENBQWE7QUFDN0s7QUFDQTtBQUNBLGNBQWMseUNBQVE7QUFDdEI7QUFDQSxxQkFBcUIsZ0JBQWdCLElBQUk7QUFDekMsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksT0FBTztBQUNuQjtBQUNBO0FBQ0EseUNBQXlDLFlBQVk7QUFDckQsaUNBQWlDLG1DQUFtQztBQUNwRTtBQUNBLGtDQUFrQztBQUNsQztBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AsWUFBWSxzQ0FBc0M7QUFDbEQsV0FBVyx5REFBUyw2REFBNkQsOENBQWEsV0FBVyxnREFBZSx3Q0FBd0MsMkJBQTJCO0FBQzNMO0FBQ0EiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcY2hhbmRcXERvd25sb2Fkc1xcam9obndyaWNoa2lkaW50b3JpenpcXG5vZGVfbW9kdWxlc1xcb3hcXF9lc21cXGNvcmVcXFAyNTYuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgc2VjcDI1NnIxIH0gZnJvbSAnQG5vYmxlL2N1cnZlcy9wMjU2JztcbmltcG9ydCAqIGFzIEJ5dGVzIGZyb20gJy4vQnl0ZXMuanMnO1xuaW1wb3J0ICogYXMgSGV4IGZyb20gJy4vSGV4LmpzJztcbmltcG9ydCAqIGFzIFB1YmxpY0tleSBmcm9tICcuL1B1YmxpY0tleS5qcyc7XG5pbXBvcnQgKiBhcyBFbnRyb3B5IGZyb20gJy4vaW50ZXJuYWwvZW50cm9weS5qcyc7XG4vKiogUmUtZXhwb3J0IG9mIG5vYmxlL2N1cnZlcyBQMjU2IHV0aWxpdGllcy4gKi9cbmV4cG9ydCBjb25zdCBub2JsZSA9IHNlY3AyNTZyMTtcbi8qKlxuICogQ29tcHV0ZXMgdGhlIFAyNTYgRUNEU0EgcHVibGljIGtleSBmcm9tIGEgcHJvdmlkZWQgcHJpdmF0ZSBrZXkuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHRzIHR3b3NsYXNoXG4gKiBpbXBvcnQgeyBQMjU2IH0gZnJvbSAnb3gnXG4gKlxuICogY29uc3QgcHVibGljS2V5ID0gUDI1Ni5nZXRQdWJsaWNLZXkoeyBwcml2YXRlS2V5OiAnMHguLi4nIH0pXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gb3B0aW9ucyAtIFRoZSBvcHRpb25zIHRvIGNvbXB1dGUgdGhlIHB1YmxpYyBrZXkuXG4gKiBAcmV0dXJucyBUaGUgY29tcHV0ZWQgcHVibGljIGtleS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFB1YmxpY0tleShvcHRpb25zKSB7XG4gICAgY29uc3QgeyBwcml2YXRlS2V5IH0gPSBvcHRpb25zO1xuICAgIGNvbnN0IHBvaW50ID0gc2VjcDI1NnIxLlByb2plY3RpdmVQb2ludC5mcm9tUHJpdmF0ZUtleSh0eXBlb2YgcHJpdmF0ZUtleSA9PT0gJ3N0cmluZydcbiAgICAgICAgPyBwcml2YXRlS2V5LnNsaWNlKDIpXG4gICAgICAgIDogSGV4LmZyb21CeXRlcyhwcml2YXRlS2V5KS5zbGljZSgyKSk7XG4gICAgcmV0dXJuIFB1YmxpY0tleS5mcm9tKHBvaW50KTtcbn1cbi8qKlxuICogR2VuZXJhdGVzIGEgcmFuZG9tIFAyNTYgRUNEU0EgcHJpdmF0ZSBrZXkuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHRzIHR3b3NsYXNoXG4gKiBpbXBvcnQgeyBQMjU2IH0gZnJvbSAnb3gnXG4gKlxuICogY29uc3QgcHJpdmF0ZUtleSA9IFAyNTYucmFuZG9tUHJpdmF0ZUtleSgpXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gb3B0aW9ucyAtIFRoZSBvcHRpb25zIHRvIGdlbmVyYXRlIHRoZSBwcml2YXRlIGtleS5cbiAqIEByZXR1cm5zIFRoZSBnZW5lcmF0ZWQgcHJpdmF0ZSBrZXkuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByYW5kb21Qcml2YXRlS2V5KG9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IHsgYXMgPSAnSGV4JyB9ID0gb3B0aW9ucztcbiAgICBjb25zdCBieXRlcyA9IHNlY3AyNTZyMS51dGlscy5yYW5kb21Qcml2YXRlS2V5KCk7XG4gICAgaWYgKGFzID09PSAnSGV4JylcbiAgICAgICAgcmV0dXJuIEhleC5mcm9tQnl0ZXMoYnl0ZXMpO1xuICAgIHJldHVybiBieXRlcztcbn1cbi8qKlxuICogUmVjb3ZlcnMgdGhlIHNpZ25pbmcgcHVibGljIGtleSBmcm9tIHRoZSBzaWduZWQgcGF5bG9hZCBhbmQgc2lnbmF0dXJlLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGB0cyB0d29zbGFzaFxuICogaW1wb3J0IHsgUDI1NiB9IGZyb20gJ294J1xuICpcbiAqIGNvbnN0IHNpZ25hdHVyZSA9IFAyNTYuc2lnbih7IHBheWxvYWQ6ICcweGRlYWRiZWVmJywgcHJpdmF0ZUtleTogJzB4Li4uJyB9KVxuICpcbiAqIGNvbnN0IHB1YmxpY0tleSA9IFAyNTYucmVjb3ZlclB1YmxpY0tleSh7IC8vIFshY29kZSBmb2N1c11cbiAqICAgcGF5bG9hZDogJzB4ZGVhZGJlZWYnLCAvLyBbIWNvZGUgZm9jdXNdXG4gKiAgIHNpZ25hdHVyZSwgLy8gWyFjb2RlIGZvY3VzXVxuICogfSkgLy8gWyFjb2RlIGZvY3VzXVxuICogYGBgXG4gKlxuICogQHBhcmFtIG9wdGlvbnMgLSBUaGUgcmVjb3Zlcnkgb3B0aW9ucy5cbiAqIEByZXR1cm5zIFRoZSByZWNvdmVyZWQgcHVibGljIGtleS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlY292ZXJQdWJsaWNLZXkob3B0aW9ucykge1xuICAgIGNvbnN0IHsgcGF5bG9hZCwgc2lnbmF0dXJlIH0gPSBvcHRpb25zO1xuICAgIGNvbnN0IHsgciwgcywgeVBhcml0eSB9ID0gc2lnbmF0dXJlO1xuICAgIGNvbnN0IHNpZ25hdHVyZV8gPSBuZXcgc2VjcDI1NnIxLlNpZ25hdHVyZShCaWdJbnQociksIEJpZ0ludChzKSkuYWRkUmVjb3ZlcnlCaXQoeVBhcml0eSk7XG4gICAgY29uc3QgcGF5bG9hZF8gPSBwYXlsb2FkIGluc3RhbmNlb2YgVWludDhBcnJheSA/IEhleC5mcm9tQnl0ZXMocGF5bG9hZCkgOiBwYXlsb2FkO1xuICAgIGNvbnN0IHBvaW50ID0gc2lnbmF0dXJlXy5yZWNvdmVyUHVibGljS2V5KHBheWxvYWRfLnN1YnN0cmluZygyKSk7XG4gICAgcmV0dXJuIFB1YmxpY0tleS5mcm9tKHBvaW50KTtcbn1cbi8qKlxuICogU2lnbnMgdGhlIHBheWxvYWQgd2l0aCB0aGUgcHJvdmlkZWQgcHJpdmF0ZSBrZXkgYW5kIHJldHVybnMgYSBQMjU2IHNpZ25hdHVyZS5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgdHMgdHdvc2xhc2hcbiAqIGltcG9ydCB7IFAyNTYgfSBmcm9tICdveCdcbiAqXG4gKiBjb25zdCBzaWduYXR1cmUgPSBQMjU2LnNpZ24oeyAvLyBbIWNvZGUgZm9jdXNdXG4gKiAgIHBheWxvYWQ6ICcweGRlYWRiZWVmJywgLy8gWyFjb2RlIGZvY3VzXVxuICogICBwcml2YXRlS2V5OiAnMHguLi4nIC8vIFshY29kZSBmb2N1c11cbiAqIH0pIC8vIFshY29kZSBmb2N1c11cbiAqIGBgYFxuICpcbiAqIEBwYXJhbSBvcHRpb25zIC0gVGhlIHNpZ25pbmcgb3B0aW9ucy5cbiAqIEByZXR1cm5zIFRoZSBFQ0RTQSB7QGxpbmsgb3gjU2lnbmF0dXJlLlNpZ25hdHVyZX0uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzaWduKG9wdGlvbnMpIHtcbiAgICBjb25zdCB7IGV4dHJhRW50cm9weSA9IEVudHJvcHkuZXh0cmFFbnRyb3B5LCBoYXNoLCBwYXlsb2FkLCBwcml2YXRlS2V5LCB9ID0gb3B0aW9ucztcbiAgICBjb25zdCB7IHIsIHMsIHJlY292ZXJ5IH0gPSBzZWNwMjU2cjEuc2lnbihwYXlsb2FkIGluc3RhbmNlb2YgVWludDhBcnJheSA/IHBheWxvYWQgOiBCeXRlcy5mcm9tSGV4KHBheWxvYWQpLCBwcml2YXRlS2V5IGluc3RhbmNlb2YgVWludDhBcnJheSA/IHByaXZhdGVLZXkgOiBCeXRlcy5mcm9tSGV4KHByaXZhdGVLZXkpLCB7XG4gICAgICAgIGV4dHJhRW50cm9weTogdHlwZW9mIGV4dHJhRW50cm9weSA9PT0gJ2Jvb2xlYW4nXG4gICAgICAgICAgICA/IGV4dHJhRW50cm9weVxuICAgICAgICAgICAgOiBIZXguZnJvbShleHRyYUVudHJvcHkpLnNsaWNlKDIpLFxuICAgICAgICBsb3dTOiB0cnVlLFxuICAgICAgICAuLi4oaGFzaCA/IHsgcHJlaGFzaDogdHJ1ZSB9IDoge30pLFxuICAgIH0pO1xuICAgIHJldHVybiB7XG4gICAgICAgIHIsXG4gICAgICAgIHMsXG4gICAgICAgIHlQYXJpdHk6IHJlY292ZXJ5LFxuICAgIH07XG59XG4vKipcbiAqIFZlcmlmaWVzIGEgcGF5bG9hZCB3YXMgc2lnbmVkIGJ5IHRoZSBwcm92aWRlZCBwdWJsaWMga2V5LlxuICpcbiAqIEBleGFtcGxlXG4gKlxuICogYGBgdHMgdHdvc2xhc2hcbiAqIGltcG9ydCB7IFAyNTYgfSBmcm9tICdveCdcbiAqXG4gKiBjb25zdCBwcml2YXRlS2V5ID0gUDI1Ni5yYW5kb21Qcml2YXRlS2V5KClcbiAqIGNvbnN0IHB1YmxpY0tleSA9IFAyNTYuZ2V0UHVibGljS2V5KHsgcHJpdmF0ZUtleSB9KVxuICogY29uc3Qgc2lnbmF0dXJlID0gUDI1Ni5zaWduKHsgcGF5bG9hZDogJzB4ZGVhZGJlZWYnLCBwcml2YXRlS2V5IH0pXG4gKlxuICogY29uc3QgdmVyaWZpZWQgPSBQMjU2LnZlcmlmeSh7IC8vIFshY29kZSBmb2N1c11cbiAqICAgcHVibGljS2V5LCAvLyBbIWNvZGUgZm9jdXNdXG4gKiAgIHBheWxvYWQ6ICcweGRlYWRiZWVmJywgLy8gWyFjb2RlIGZvY3VzXVxuICogICBzaWduYXR1cmUsIC8vIFshY29kZSBmb2N1c11cbiAqIH0pIC8vIFshY29kZSBmb2N1c11cbiAqIGBgYFxuICpcbiAqIEBwYXJhbSBvcHRpb25zIC0gVGhlIHZlcmlmaWNhdGlvbiBvcHRpb25zLlxuICogQHJldHVybnMgV2hldGhlciB0aGUgcGF5bG9hZCB3YXMgc2lnbmVkIGJ5IHRoZSBwcm92aWRlZCBwdWJsaWMga2V5LlxuICovXG5leHBvcnQgZnVuY3Rpb24gdmVyaWZ5KG9wdGlvbnMpIHtcbiAgICBjb25zdCB7IGhhc2gsIHBheWxvYWQsIHB1YmxpY0tleSwgc2lnbmF0dXJlIH0gPSBvcHRpb25zO1xuICAgIHJldHVybiBzZWNwMjU2cjEudmVyaWZ5KHNpZ25hdHVyZSwgcGF5bG9hZCBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkgPyBwYXlsb2FkIDogQnl0ZXMuZnJvbUhleChwYXlsb2FkKSwgUHVibGljS2V5LnRvSGV4KHB1YmxpY0tleSkuc3Vic3RyaW5nKDIpLCAuLi4oaGFzaCA/IFt7IHByZWhhc2g6IHRydWUsIGxvd1M6IHRydWUgfV0gOiBbXSkpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UDI1Ni5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ox/_esm/core/P256.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ox/_esm/core/PersonalMessage.js":
/*!******************************************************!*\
  !*** ./node_modules/ox/_esm/core/PersonalMessage.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   encode: () => (/* binding */ encode),\n/* harmony export */   getSignPayload: () => (/* binding */ getSignPayload)\n/* harmony export */ });\n/* harmony import */ var _Hash_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Hash.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Hash.js\");\n/* harmony import */ var _Hex_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Hex.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Hex.js\");\n\n\n/**\n * Encodes a personal sign message in [ERC-191 format](https://eips.ethereum.org/EIPS/eip-191#version-0x45-e): `0x19 ‖ \"Ethereum Signed Message:\\n\" + message.length ‖ message`.\n *\n * @example\n * ```ts twoslash\n * import { Hex, PersonalMessage } from 'ox'\n *\n * const data = PersonalMessage.encode(Hex.fromString('hello world'))\n * // @log: '0x19457468657265756d205369676e6564204d6573736167653a0a313168656c6c6f20776f726c64'\n * // @log: (0x19 ‖ 'Ethereum Signed Message:\\n11' ‖ 'hello world')\n * ```\n *\n * @param data - The data to encode.\n * @returns The encoded personal sign message.\n */\nfunction encode(data) {\n    const message = _Hex_js__WEBPACK_IMPORTED_MODULE_0__.from(data);\n    return _Hex_js__WEBPACK_IMPORTED_MODULE_0__.concat(\n    // Personal Sign Format: `0x19 ‖ \"Ethereum Signed Message:\\n\" ‖ message.length ‖ message`\n    '0x19', _Hex_js__WEBPACK_IMPORTED_MODULE_0__.fromString('Ethereum Signed Message:\\n' + _Hex_js__WEBPACK_IMPORTED_MODULE_0__.size(message)), message);\n}\n/**\n * Gets the payload to use for signing an [ERC-191 formatted](https://eips.ethereum.org/EIPS/eip-191#version-0x45-e) personal message.\n *\n * @example\n * ```ts twoslash\n * import { Hex, PersonalMessage, Secp256k1 } from 'ox'\n *\n * const payload = PersonalMessage.getSignPayload(Hex.fromString('hello world')) // [!code focus]\n *\n * const signature = Secp256k1.sign({ payload, privateKey: '0x...' })\n * ```\n *\n * @param data - The data to get the sign payload for.\n * @returns The payload to use for signing.\n */\nfunction getSignPayload(data) {\n    return _Hash_js__WEBPACK_IMPORTED_MODULE_1__.keccak256(encode(data));\n}\n//# sourceMappingURL=PersonalMessage.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9veC9fZXNtL2NvcmUvUGVyc29uYWxNZXNzYWdlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBa0M7QUFDRjtBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSx1QkFBdUI7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCxvQkFBb0IseUNBQVE7QUFDNUIsV0FBVywyQ0FBVTtBQUNyQjtBQUNBLFlBQVksK0NBQWMsZ0NBQWdDLHlDQUFRO0FBQ2xFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksa0NBQWtDO0FBQzlDO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQyw4QkFBOEI7QUFDcEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AsV0FBVywrQ0FBYztBQUN6QjtBQUNBIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGNoYW5kXFxEb3dubG9hZHNcXGpvaG53cmljaGtpZGludG9yaXp6XFxub2RlX21vZHVsZXNcXG94XFxfZXNtXFxjb3JlXFxQZXJzb25hbE1lc3NhZ2UuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgSGFzaCBmcm9tICcuL0hhc2guanMnO1xuaW1wb3J0ICogYXMgSGV4IGZyb20gJy4vSGV4LmpzJztcbi8qKlxuICogRW5jb2RlcyBhIHBlcnNvbmFsIHNpZ24gbWVzc2FnZSBpbiBbRVJDLTE5MSBmb3JtYXRdKGh0dHBzOi8vZWlwcy5ldGhlcmV1bS5vcmcvRUlQUy9laXAtMTkxI3ZlcnNpb24tMHg0NS1lKTogYDB4MTkg4oCWIFwiRXRoZXJldW0gU2lnbmVkIE1lc3NhZ2U6XFxuXCIgKyBtZXNzYWdlLmxlbmd0aCDigJYgbWVzc2FnZWAuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHRzIHR3b3NsYXNoXG4gKiBpbXBvcnQgeyBIZXgsIFBlcnNvbmFsTWVzc2FnZSB9IGZyb20gJ294J1xuICpcbiAqIGNvbnN0IGRhdGEgPSBQZXJzb25hbE1lc3NhZ2UuZW5jb2RlKEhleC5mcm9tU3RyaW5nKCdoZWxsbyB3b3JsZCcpKVxuICogLy8gQGxvZzogJzB4MTk0NTc0Njg2NTcyNjU3NTZkMjA1MzY5Njc2ZTY1NjQyMDRkNjU3MzczNjE2NzY1M2EwYTMxMzE2ODY1NmM2YzZmMjA3NzZmNzI2YzY0J1xuICogLy8gQGxvZzogKDB4MTkg4oCWICdFdGhlcmV1bSBTaWduZWQgTWVzc2FnZTpcXG4xMScg4oCWICdoZWxsbyB3b3JsZCcpXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gZGF0YSAtIFRoZSBkYXRhIHRvIGVuY29kZS5cbiAqIEByZXR1cm5zIFRoZSBlbmNvZGVkIHBlcnNvbmFsIHNpZ24gbWVzc2FnZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVuY29kZShkYXRhKSB7XG4gICAgY29uc3QgbWVzc2FnZSA9IEhleC5mcm9tKGRhdGEpO1xuICAgIHJldHVybiBIZXguY29uY2F0KFxuICAgIC8vIFBlcnNvbmFsIFNpZ24gRm9ybWF0OiBgMHgxOSDigJYgXCJFdGhlcmV1bSBTaWduZWQgTWVzc2FnZTpcXG5cIiDigJYgbWVzc2FnZS5sZW5ndGgg4oCWIG1lc3NhZ2VgXG4gICAgJzB4MTknLCBIZXguZnJvbVN0cmluZygnRXRoZXJldW0gU2lnbmVkIE1lc3NhZ2U6XFxuJyArIEhleC5zaXplKG1lc3NhZ2UpKSwgbWVzc2FnZSk7XG59XG4vKipcbiAqIEdldHMgdGhlIHBheWxvYWQgdG8gdXNlIGZvciBzaWduaW5nIGFuIFtFUkMtMTkxIGZvcm1hdHRlZF0oaHR0cHM6Ly9laXBzLmV0aGVyZXVtLm9yZy9FSVBTL2VpcC0xOTEjdmVyc2lvbi0weDQ1LWUpIHBlcnNvbmFsIG1lc3NhZ2UuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHRzIHR3b3NsYXNoXG4gKiBpbXBvcnQgeyBIZXgsIFBlcnNvbmFsTWVzc2FnZSwgU2VjcDI1NmsxIH0gZnJvbSAnb3gnXG4gKlxuICogY29uc3QgcGF5bG9hZCA9IFBlcnNvbmFsTWVzc2FnZS5nZXRTaWduUGF5bG9hZChIZXguZnJvbVN0cmluZygnaGVsbG8gd29ybGQnKSkgLy8gWyFjb2RlIGZvY3VzXVxuICpcbiAqIGNvbnN0IHNpZ25hdHVyZSA9IFNlY3AyNTZrMS5zaWduKHsgcGF5bG9hZCwgcHJpdmF0ZUtleTogJzB4Li4uJyB9KVxuICogYGBgXG4gKlxuICogQHBhcmFtIGRhdGEgLSBUaGUgZGF0YSB0byBnZXQgdGhlIHNpZ24gcGF5bG9hZCBmb3IuXG4gKiBAcmV0dXJucyBUaGUgcGF5bG9hZCB0byB1c2UgZm9yIHNpZ25pbmcuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRTaWduUGF5bG9hZChkYXRhKSB7XG4gICAgcmV0dXJuIEhhc2gua2VjY2FrMjU2KGVuY29kZShkYXRhKSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1QZXJzb25hbE1lc3NhZ2UuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ox/_esm/core/PersonalMessage.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ox/_esm/core/Provider.js":
/*!***********************************************!*\
  !*** ./node_modules/ox/_esm/core/Provider.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AtomicReadyWalletRejectedUpgradeError: () => (/* binding */ AtomicReadyWalletRejectedUpgradeError),\n/* harmony export */   AtomicityNotSupportedError: () => (/* binding */ AtomicityNotSupportedError),\n/* harmony export */   BundleTooLargeError: () => (/* binding */ BundleTooLargeError),\n/* harmony export */   ChainDisconnectedError: () => (/* binding */ ChainDisconnectedError),\n/* harmony export */   DisconnectedError: () => (/* binding */ DisconnectedError),\n/* harmony export */   DuplicateIdError: () => (/* binding */ DuplicateIdError),\n/* harmony export */   IsUndefinedError: () => (/* binding */ IsUndefinedError),\n/* harmony export */   ProviderRpcError: () => (/* binding */ ProviderRpcError),\n/* harmony export */   SwitchChainError: () => (/* binding */ SwitchChainError),\n/* harmony export */   UnauthorizedError: () => (/* binding */ UnauthorizedError),\n/* harmony export */   UnknownBundleIdError: () => (/* binding */ UnknownBundleIdError),\n/* harmony export */   UnsupportedChainIdError: () => (/* binding */ UnsupportedChainIdError),\n/* harmony export */   UnsupportedMethodError: () => (/* binding */ UnsupportedMethodError),\n/* harmony export */   UnsupportedNonOptionalCapabilityError: () => (/* binding */ UnsupportedNonOptionalCapabilityError),\n/* harmony export */   UserRejectedRequestError: () => (/* binding */ UserRejectedRequestError),\n/* harmony export */   createEmitter: () => (/* binding */ createEmitter),\n/* harmony export */   from: () => (/* binding */ from),\n/* harmony export */   parseError: () => (/* binding */ parseError)\n/* harmony export */ });\n/* harmony import */ var eventemitter3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! eventemitter3 */ \"(pages-dir-browser)/./node_modules/eventemitter3/index.mjs\");\n/* harmony import */ var _Errors_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Errors.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Errors.js\");\n/* harmony import */ var _RpcResponse_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./RpcResponse.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/RpcResponse.js\");\n\n\n\nclass ProviderRpcError extends Error {\n    constructor(code, message) {\n        super(message);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'ProviderRpcError'\n        });\n        Object.defineProperty(this, \"code\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"details\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.code = code;\n        this.details = message;\n    }\n}\n/** The user rejected the request. */\nclass UserRejectedRequestError extends ProviderRpcError {\n    constructor({ message = 'The user rejected the request.', } = {}) {\n        super(4001, message);\n        Object.defineProperty(this, \"code\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 4001\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'Provider.UserRejectedRequestError'\n        });\n    }\n}\nObject.defineProperty(UserRejectedRequestError, \"code\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: 4001\n});\n/** The requested method and/or account has not been authorized by the user. */\nclass UnauthorizedError extends ProviderRpcError {\n    constructor({ message = 'The requested method and/or account has not been authorized by the user.', } = {}) {\n        super(4100, message);\n        Object.defineProperty(this, \"code\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 4100\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'Provider.UnauthorizedError'\n        });\n    }\n}\nObject.defineProperty(UnauthorizedError, \"code\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: 4100\n});\n/** The provider does not support the requested method. */\nclass UnsupportedMethodError extends ProviderRpcError {\n    constructor({ message = 'The provider does not support the requested method.', } = {}) {\n        super(4200, message);\n        Object.defineProperty(this, \"code\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 4200\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'Provider.UnsupportedMethodError'\n        });\n    }\n}\nObject.defineProperty(UnsupportedMethodError, \"code\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: 4200\n});\n/** The provider is disconnected from all chains. */\nclass DisconnectedError extends ProviderRpcError {\n    constructor({ message = 'The provider is disconnected from all chains.', } = {}) {\n        super(4900, message);\n        Object.defineProperty(this, \"code\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 4900\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'Provider.DisconnectedError'\n        });\n    }\n}\nObject.defineProperty(DisconnectedError, \"code\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: 4900\n});\n/** The provider is not connected to the requested chain. */\nclass ChainDisconnectedError extends ProviderRpcError {\n    constructor({ message = 'The provider is not connected to the requested chain.', } = {}) {\n        super(4901, message);\n        Object.defineProperty(this, \"code\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 4901\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'Provider.ChainDisconnectedError'\n        });\n    }\n}\nObject.defineProperty(ChainDisconnectedError, \"code\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: 4901\n});\n/** An error occurred when attempting to switch chain. */\nclass SwitchChainError extends ProviderRpcError {\n    constructor({ message = 'An error occurred when attempting to switch chain.', } = {}) {\n        super(4902, message);\n        Object.defineProperty(this, \"code\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 4902\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'Provider.SwitchChainError'\n        });\n    }\n}\nObject.defineProperty(SwitchChainError, \"code\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: 4902\n});\n/** This Wallet does not support a capability that was not marked as optional. */\nclass UnsupportedNonOptionalCapabilityError extends ProviderRpcError {\n    constructor({ message = 'This Wallet does not support a capability that was not marked as optional.', } = {}) {\n        super(5700, message);\n        Object.defineProperty(this, \"code\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 5700\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'Provider.UnsupportedNonOptionalCapabilityError'\n        });\n    }\n}\nObject.defineProperty(UnsupportedNonOptionalCapabilityError, \"code\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: 5700\n});\n/** This Wallet does not support the requested chain ID. */\nclass UnsupportedChainIdError extends ProviderRpcError {\n    constructor({ message = 'This Wallet does not support the requested chain ID.', } = {}) {\n        super(5710, message);\n        Object.defineProperty(this, \"code\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 5710\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'Provider.UnsupportedChainIdError'\n        });\n    }\n}\nObject.defineProperty(UnsupportedChainIdError, \"code\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: 5710\n});\n/** There is already a bundle submitted with this ID. */\nclass DuplicateIdError extends ProviderRpcError {\n    constructor({ message = 'There is already a bundle submitted with this ID.', } = {}) {\n        super(5720, message);\n        Object.defineProperty(this, \"code\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 5720\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'Provider.DuplicateIdError'\n        });\n    }\n}\nObject.defineProperty(DuplicateIdError, \"code\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: 5720\n});\n/** This bundle id is unknown / has not been submitted. */\nclass UnknownBundleIdError extends ProviderRpcError {\n    constructor({ message = 'This bundle id is unknown / has not been submitted.', } = {}) {\n        super(5730, message);\n        Object.defineProperty(this, \"code\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 5730\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'Provider.UnknownBundleIdError'\n        });\n    }\n}\nObject.defineProperty(UnknownBundleIdError, \"code\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: 5730\n});\n/** The call bundle is too large for the Wallet to process. */\nclass BundleTooLargeError extends ProviderRpcError {\n    constructor({ message = 'The call bundle is too large for the Wallet to process.', } = {}) {\n        super(5740, message);\n        Object.defineProperty(this, \"code\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 5740\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'Provider.BundleTooLargeError'\n        });\n    }\n}\nObject.defineProperty(BundleTooLargeError, \"code\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: 5740\n});\n/** The Wallet can support atomicity after an upgrade, but the user rejected the upgrade. */\nclass AtomicReadyWalletRejectedUpgradeError extends ProviderRpcError {\n    constructor({ message = 'The Wallet can support atomicity after an upgrade, but the user rejected the upgrade.', } = {}) {\n        super(5750, message);\n        Object.defineProperty(this, \"code\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 5750\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'Provider.AtomicReadyWalletRejectedUpgradeError'\n        });\n    }\n}\nObject.defineProperty(AtomicReadyWalletRejectedUpgradeError, \"code\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: 5750\n});\n/** The wallet does not support atomic execution but the request requires it. */\nclass AtomicityNotSupportedError extends ProviderRpcError {\n    constructor({ message = 'The wallet does not support atomic execution but the request requires it.', } = {}) {\n        super(5760, message);\n        Object.defineProperty(this, \"code\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 5760\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'Provider.AtomicityNotSupportedError'\n        });\n    }\n}\nObject.defineProperty(AtomicityNotSupportedError, \"code\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: 5760\n});\n/**\n * Creates an EIP-1193 flavored event emitter to be injected onto a Provider.\n *\n * @example\n * ```ts twoslash\n * // @noErrors\n * import { Provider, RpcRequest, RpcResponse } from 'ox' // [!code focus]\n *\n * // 1. Instantiate a Provider Emitter. // [!code focus]\n * const emitter = Provider.createEmitter() // [!code focus]\n *\n * const store = RpcRequest.createStore()\n *\n * const provider = Provider.from({\n *   // 2. Pass the Emitter to the Provider. // [!code focus]\n *   ...emitter, // [!code focus]\n *   async request(args) {\n *     return await fetch('https://1.rpc.thirdweb.com', {\n *       body: JSON.stringify(store.prepare(args)),\n *       method: 'POST',\n *       headers: {\n *         'Content-Type': 'application/json',\n *       },\n *     })\n *       .then((res) => res.json())\n *       .then(RpcResponse.parse)\n *   },\n * })\n *\n * // 3. Emit Provider Events. // [!code focus]\n * emitter.emit('accountsChanged', ['0x...']) // [!code focus]\n * ```\n *\n * @returns An event emitter.\n */\nfunction createEmitter() {\n    const emitter = new eventemitter3__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();\n    return {\n        get eventNames() {\n            return emitter.eventNames.bind(emitter);\n        },\n        get listenerCount() {\n            return emitter.listenerCount.bind(emitter);\n        },\n        get listeners() {\n            return emitter.listeners.bind(emitter);\n        },\n        addListener: emitter.addListener.bind(emitter),\n        emit: emitter.emit.bind(emitter),\n        off: emitter.off.bind(emitter),\n        on: emitter.on.bind(emitter),\n        once: emitter.once.bind(emitter),\n        removeAllListeners: emitter.removeAllListeners.bind(emitter),\n        removeListener: emitter.removeListener.bind(emitter),\n    };\n}\n// eslint-disable-next-line jsdoc/require-jsdoc\nfunction from(provider, options = {}) {\n    const { includeEvents = true } = options;\n    if (!provider)\n        throw new IsUndefinedError();\n    return {\n        ...(includeEvents\n            ? {\n                on: provider.on?.bind(provider),\n                removeListener: provider.removeListener?.bind(provider),\n            }\n            : {}),\n        async request(args) {\n            try {\n                const result = await provider.request(args);\n                if (result &&\n                    typeof result === 'object' &&\n                    'jsonrpc' in result)\n                    return _RpcResponse_js__WEBPACK_IMPORTED_MODULE_1__.parse(result);\n                return result;\n            }\n            catch (error) {\n                throw parseError(error);\n            }\n        },\n    };\n}\n/**\n * Parses an error into a Provider error instance.\n *\n * @example\n * ```ts twoslash\n * import { Provider } from 'ox'\n *\n * const error = Provider.parseError({ code: 4200, message: 'foo' })\n *\n * error\n * // ^?\n *\n * ```\n *\n * @param error - The error object to parse.\n * @returns An error instance.\n */\nfunction parseError(error) {\n    const error_ = _RpcResponse_js__WEBPACK_IMPORTED_MODULE_1__.parseError(error);\n    if (error_ instanceof _RpcResponse_js__WEBPACK_IMPORTED_MODULE_1__.InternalError) {\n        if (!error_.data)\n            return error_;\n        const { code } = error_.data;\n        if (code === DisconnectedError.code)\n            return new DisconnectedError(error_);\n        if (code === ChainDisconnectedError.code)\n            return new ChainDisconnectedError(error_);\n        if (code === UserRejectedRequestError.code)\n            return new UserRejectedRequestError(error_);\n        if (code === UnauthorizedError.code)\n            return new UnauthorizedError(error_);\n        if (code === UnsupportedMethodError.code)\n            return new UnsupportedMethodError(error_);\n        if (code === SwitchChainError.code)\n            return new SwitchChainError(error_);\n        if (code === AtomicReadyWalletRejectedUpgradeError.code)\n            return new AtomicReadyWalletRejectedUpgradeError(error_);\n        if (code === AtomicityNotSupportedError.code)\n            return new AtomicityNotSupportedError(error_);\n        if (code === BundleTooLargeError.code)\n            return new BundleTooLargeError(error_);\n        if (code === UnknownBundleIdError.code)\n            return new UnknownBundleIdError(error_);\n        if (code === DuplicateIdError.code)\n            return new DuplicateIdError(error_);\n        if (code === UnsupportedChainIdError.code)\n            return new UnsupportedChainIdError(error_);\n        if (code === UnsupportedNonOptionalCapabilityError.code)\n            return new UnsupportedNonOptionalCapabilityError(error_);\n    }\n    return error_;\n}\n/** Thrown when the provider is undefined. */\nclass IsUndefinedError extends _Errors_js__WEBPACK_IMPORTED_MODULE_2__.BaseError {\n    constructor() {\n        super('`provider` is undefined.');\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'Provider.IsUndefinedError'\n        });\n    }\n}\n//# sourceMappingURL=Provider.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9veC9fZXNtL2NvcmUvUHJvdmlkZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQTZDO0FBQ1A7QUFDVTtBQUN6QztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCxrQkFBa0IsOENBQThDLElBQUk7QUFDcEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDTztBQUNQLGtCQUFrQix3RkFBd0YsSUFBSTtBQUM5RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNPO0FBQ1Asa0JBQWtCLG1FQUFtRSxJQUFJO0FBQ3pGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ087QUFDUCxrQkFBa0IsNkRBQTZELElBQUk7QUFDbkY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDTztBQUNQLGtCQUFrQixxRUFBcUUsSUFBSTtBQUMzRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNPO0FBQ1Asa0JBQWtCLGtFQUFrRSxJQUFJO0FBQ3hGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ087QUFDUCxrQkFBa0IsMEZBQTBGLElBQUk7QUFDaEg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDTztBQUNQLGtCQUFrQixvRUFBb0UsSUFBSTtBQUMxRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNPO0FBQ1Asa0JBQWtCLGlFQUFpRSxJQUFJO0FBQ3ZGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ087QUFDUCxrQkFBa0IsbUVBQW1FLElBQUk7QUFDekY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDTztBQUNQLGtCQUFrQix1RUFBdUUsSUFBSTtBQUM3RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNPO0FBQ1Asa0JBQWtCLHFHQUFxRyxJQUFJO0FBQzNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ087QUFDUCxrQkFBa0IseUZBQXlGLElBQUk7QUFDL0c7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxvQ0FBb0M7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWLFFBQVE7QUFDUjtBQUNBO0FBQ0EsTUFBTTtBQUNOLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1Asd0JBQXdCLHVEQUFZO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxvQ0FBb0M7QUFDM0MsWUFBWSx1QkFBdUI7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsa0RBQWlCO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLFdBQVc7QUFDdkI7QUFDQSx1Q0FBdUMsNEJBQTRCO0FBQ25FO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AsbUJBQW1CLHVEQUFzQjtBQUN6QywwQkFBMEIsMERBQXlCO0FBQ25EO0FBQ0E7QUFDQSxnQkFBZ0IsT0FBTztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTywrQkFBK0IsaURBQWdCO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxjaGFuZFxcRG93bmxvYWRzXFxqb2hud3JpY2hraWRpbnRvcml6elxcbm9kZV9tb2R1bGVzXFxveFxcX2VzbVxcY29yZVxcUHJvdmlkZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSAnZXZlbnRlbWl0dGVyMyc7XG5pbXBvcnQgKiBhcyBFcnJvcnMgZnJvbSAnLi9FcnJvcnMuanMnO1xuaW1wb3J0ICogYXMgUnBjUmVzcG9uc2UgZnJvbSAnLi9ScGNSZXNwb25zZS5qcyc7XG5leHBvcnQgY2xhc3MgUHJvdmlkZXJScGNFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3Rvcihjb2RlLCBtZXNzYWdlKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJuYW1lXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiAnUHJvdmlkZXJScGNFcnJvcidcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImNvZGVcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiZGV0YWlsc1wiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmNvZGUgPSBjb2RlO1xuICAgICAgICB0aGlzLmRldGFpbHMgPSBtZXNzYWdlO1xuICAgIH1cbn1cbi8qKiBUaGUgdXNlciByZWplY3RlZCB0aGUgcmVxdWVzdC4gKi9cbmV4cG9ydCBjbGFzcyBVc2VyUmVqZWN0ZWRSZXF1ZXN0RXJyb3IgZXh0ZW5kcyBQcm92aWRlclJwY0Vycm9yIHtcbiAgICBjb25zdHJ1Y3Rvcih7IG1lc3NhZ2UgPSAnVGhlIHVzZXIgcmVqZWN0ZWQgdGhlIHJlcXVlc3QuJywgfSA9IHt9KSB7XG4gICAgICAgIHN1cGVyKDQwMDEsIG1lc3NhZ2UpO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJjb2RlXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiA0MDAxXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJuYW1lXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiAnUHJvdmlkZXIuVXNlclJlamVjdGVkUmVxdWVzdEVycm9yJ1xuICAgICAgICB9KTtcbiAgICB9XG59XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoVXNlclJlamVjdGVkUmVxdWVzdEVycm9yLCBcImNvZGVcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgIHZhbHVlOiA0MDAxXG59KTtcbi8qKiBUaGUgcmVxdWVzdGVkIG1ldGhvZCBhbmQvb3IgYWNjb3VudCBoYXMgbm90IGJlZW4gYXV0aG9yaXplZCBieSB0aGUgdXNlci4gKi9cbmV4cG9ydCBjbGFzcyBVbmF1dGhvcml6ZWRFcnJvciBleHRlbmRzIFByb3ZpZGVyUnBjRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKHsgbWVzc2FnZSA9ICdUaGUgcmVxdWVzdGVkIG1ldGhvZCBhbmQvb3IgYWNjb3VudCBoYXMgbm90IGJlZW4gYXV0aG9yaXplZCBieSB0aGUgdXNlci4nLCB9ID0ge30pIHtcbiAgICAgICAgc3VwZXIoNDEwMCwgbWVzc2FnZSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImNvZGVcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IDQxMDBcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIm5hbWVcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6ICdQcm92aWRlci5VbmF1dGhvcml6ZWRFcnJvcidcbiAgICAgICAgfSk7XG4gICAgfVxufVxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFVuYXV0aG9yaXplZEVycm9yLCBcImNvZGVcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgIHZhbHVlOiA0MTAwXG59KTtcbi8qKiBUaGUgcHJvdmlkZXIgZG9lcyBub3Qgc3VwcG9ydCB0aGUgcmVxdWVzdGVkIG1ldGhvZC4gKi9cbmV4cG9ydCBjbGFzcyBVbnN1cHBvcnRlZE1ldGhvZEVycm9yIGV4dGVuZHMgUHJvdmlkZXJScGNFcnJvciB7XG4gICAgY29uc3RydWN0b3IoeyBtZXNzYWdlID0gJ1RoZSBwcm92aWRlciBkb2VzIG5vdCBzdXBwb3J0IHRoZSByZXF1ZXN0ZWQgbWV0aG9kLicsIH0gPSB7fSkge1xuICAgICAgICBzdXBlcig0MjAwLCBtZXNzYWdlKTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiY29kZVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogNDIwMFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwibmFtZVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogJ1Byb3ZpZGVyLlVuc3VwcG9ydGVkTWV0aG9kRXJyb3InXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShVbnN1cHBvcnRlZE1ldGhvZEVycm9yLCBcImNvZGVcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgIHZhbHVlOiA0MjAwXG59KTtcbi8qKiBUaGUgcHJvdmlkZXIgaXMgZGlzY29ubmVjdGVkIGZyb20gYWxsIGNoYWlucy4gKi9cbmV4cG9ydCBjbGFzcyBEaXNjb25uZWN0ZWRFcnJvciBleHRlbmRzIFByb3ZpZGVyUnBjRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKHsgbWVzc2FnZSA9ICdUaGUgcHJvdmlkZXIgaXMgZGlzY29ubmVjdGVkIGZyb20gYWxsIGNoYWlucy4nLCB9ID0ge30pIHtcbiAgICAgICAgc3VwZXIoNDkwMCwgbWVzc2FnZSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImNvZGVcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IDQ5MDBcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIm5hbWVcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6ICdQcm92aWRlci5EaXNjb25uZWN0ZWRFcnJvcidcbiAgICAgICAgfSk7XG4gICAgfVxufVxuT2JqZWN0LmRlZmluZVByb3BlcnR5KERpc2Nvbm5lY3RlZEVycm9yLCBcImNvZGVcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgIHZhbHVlOiA0OTAwXG59KTtcbi8qKiBUaGUgcHJvdmlkZXIgaXMgbm90IGNvbm5lY3RlZCB0byB0aGUgcmVxdWVzdGVkIGNoYWluLiAqL1xuZXhwb3J0IGNsYXNzIENoYWluRGlzY29ubmVjdGVkRXJyb3IgZXh0ZW5kcyBQcm92aWRlclJwY0Vycm9yIHtcbiAgICBjb25zdHJ1Y3Rvcih7IG1lc3NhZ2UgPSAnVGhlIHByb3ZpZGVyIGlzIG5vdCBjb25uZWN0ZWQgdG8gdGhlIHJlcXVlc3RlZCBjaGFpbi4nLCB9ID0ge30pIHtcbiAgICAgICAgc3VwZXIoNDkwMSwgbWVzc2FnZSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImNvZGVcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IDQ5MDFcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIm5hbWVcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6ICdQcm92aWRlci5DaGFpbkRpc2Nvbm5lY3RlZEVycm9yJ1xuICAgICAgICB9KTtcbiAgICB9XG59XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoQ2hhaW5EaXNjb25uZWN0ZWRFcnJvciwgXCJjb2RlXCIsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICB2YWx1ZTogNDkwMVxufSk7XG4vKiogQW4gZXJyb3Igb2NjdXJyZWQgd2hlbiBhdHRlbXB0aW5nIHRvIHN3aXRjaCBjaGFpbi4gKi9cbmV4cG9ydCBjbGFzcyBTd2l0Y2hDaGFpbkVycm9yIGV4dGVuZHMgUHJvdmlkZXJScGNFcnJvciB7XG4gICAgY29uc3RydWN0b3IoeyBtZXNzYWdlID0gJ0FuIGVycm9yIG9jY3VycmVkIHdoZW4gYXR0ZW1wdGluZyB0byBzd2l0Y2ggY2hhaW4uJywgfSA9IHt9KSB7XG4gICAgICAgIHN1cGVyKDQ5MDIsIG1lc3NhZ2UpO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJjb2RlXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiA0OTAyXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJuYW1lXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiAnUHJvdmlkZXIuU3dpdGNoQ2hhaW5FcnJvcidcbiAgICAgICAgfSk7XG4gICAgfVxufVxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFN3aXRjaENoYWluRXJyb3IsIFwiY29kZVwiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgd3JpdGFibGU6IHRydWUsXG4gICAgdmFsdWU6IDQ5MDJcbn0pO1xuLyoqIFRoaXMgV2FsbGV0IGRvZXMgbm90IHN1cHBvcnQgYSBjYXBhYmlsaXR5IHRoYXQgd2FzIG5vdCBtYXJrZWQgYXMgb3B0aW9uYWwuICovXG5leHBvcnQgY2xhc3MgVW5zdXBwb3J0ZWROb25PcHRpb25hbENhcGFiaWxpdHlFcnJvciBleHRlbmRzIFByb3ZpZGVyUnBjRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKHsgbWVzc2FnZSA9ICdUaGlzIFdhbGxldCBkb2VzIG5vdCBzdXBwb3J0IGEgY2FwYWJpbGl0eSB0aGF0IHdhcyBub3QgbWFya2VkIGFzIG9wdGlvbmFsLicsIH0gPSB7fSkge1xuICAgICAgICBzdXBlcig1NzAwLCBtZXNzYWdlKTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiY29kZVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogNTcwMFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwibmFtZVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogJ1Byb3ZpZGVyLlVuc3VwcG9ydGVkTm9uT3B0aW9uYWxDYXBhYmlsaXR5RXJyb3InXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShVbnN1cHBvcnRlZE5vbk9wdGlvbmFsQ2FwYWJpbGl0eUVycm9yLCBcImNvZGVcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgIHZhbHVlOiA1NzAwXG59KTtcbi8qKiBUaGlzIFdhbGxldCBkb2VzIG5vdCBzdXBwb3J0IHRoZSByZXF1ZXN0ZWQgY2hhaW4gSUQuICovXG5leHBvcnQgY2xhc3MgVW5zdXBwb3J0ZWRDaGFpbklkRXJyb3IgZXh0ZW5kcyBQcm92aWRlclJwY0Vycm9yIHtcbiAgICBjb25zdHJ1Y3Rvcih7IG1lc3NhZ2UgPSAnVGhpcyBXYWxsZXQgZG9lcyBub3Qgc3VwcG9ydCB0aGUgcmVxdWVzdGVkIGNoYWluIElELicsIH0gPSB7fSkge1xuICAgICAgICBzdXBlcig1NzEwLCBtZXNzYWdlKTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiY29kZVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogNTcxMFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwibmFtZVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogJ1Byb3ZpZGVyLlVuc3VwcG9ydGVkQ2hhaW5JZEVycm9yJ1xuICAgICAgICB9KTtcbiAgICB9XG59XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoVW5zdXBwb3J0ZWRDaGFpbklkRXJyb3IsIFwiY29kZVwiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgd3JpdGFibGU6IHRydWUsXG4gICAgdmFsdWU6IDU3MTBcbn0pO1xuLyoqIFRoZXJlIGlzIGFscmVhZHkgYSBidW5kbGUgc3VibWl0dGVkIHdpdGggdGhpcyBJRC4gKi9cbmV4cG9ydCBjbGFzcyBEdXBsaWNhdGVJZEVycm9yIGV4dGVuZHMgUHJvdmlkZXJScGNFcnJvciB7XG4gICAgY29uc3RydWN0b3IoeyBtZXNzYWdlID0gJ1RoZXJlIGlzIGFscmVhZHkgYSBidW5kbGUgc3VibWl0dGVkIHdpdGggdGhpcyBJRC4nLCB9ID0ge30pIHtcbiAgICAgICAgc3VwZXIoNTcyMCwgbWVzc2FnZSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImNvZGVcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IDU3MjBcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIm5hbWVcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6ICdQcm92aWRlci5EdXBsaWNhdGVJZEVycm9yJ1xuICAgICAgICB9KTtcbiAgICB9XG59XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoRHVwbGljYXRlSWRFcnJvciwgXCJjb2RlXCIsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICB2YWx1ZTogNTcyMFxufSk7XG4vKiogVGhpcyBidW5kbGUgaWQgaXMgdW5rbm93biAvIGhhcyBub3QgYmVlbiBzdWJtaXR0ZWQuICovXG5leHBvcnQgY2xhc3MgVW5rbm93bkJ1bmRsZUlkRXJyb3IgZXh0ZW5kcyBQcm92aWRlclJwY0Vycm9yIHtcbiAgICBjb25zdHJ1Y3Rvcih7IG1lc3NhZ2UgPSAnVGhpcyBidW5kbGUgaWQgaXMgdW5rbm93biAvIGhhcyBub3QgYmVlbiBzdWJtaXR0ZWQuJywgfSA9IHt9KSB7XG4gICAgICAgIHN1cGVyKDU3MzAsIG1lc3NhZ2UpO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJjb2RlXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiA1NzMwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJuYW1lXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiAnUHJvdmlkZXIuVW5rbm93bkJ1bmRsZUlkRXJyb3InXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShVbmtub3duQnVuZGxlSWRFcnJvciwgXCJjb2RlXCIsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICB2YWx1ZTogNTczMFxufSk7XG4vKiogVGhlIGNhbGwgYnVuZGxlIGlzIHRvbyBsYXJnZSBmb3IgdGhlIFdhbGxldCB0byBwcm9jZXNzLiAqL1xuZXhwb3J0IGNsYXNzIEJ1bmRsZVRvb0xhcmdlRXJyb3IgZXh0ZW5kcyBQcm92aWRlclJwY0Vycm9yIHtcbiAgICBjb25zdHJ1Y3Rvcih7IG1lc3NhZ2UgPSAnVGhlIGNhbGwgYnVuZGxlIGlzIHRvbyBsYXJnZSBmb3IgdGhlIFdhbGxldCB0byBwcm9jZXNzLicsIH0gPSB7fSkge1xuICAgICAgICBzdXBlcig1NzQwLCBtZXNzYWdlKTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiY29kZVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogNTc0MFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwibmFtZVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogJ1Byb3ZpZGVyLkJ1bmRsZVRvb0xhcmdlRXJyb3InXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShCdW5kbGVUb29MYXJnZUVycm9yLCBcImNvZGVcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgIHZhbHVlOiA1NzQwXG59KTtcbi8qKiBUaGUgV2FsbGV0IGNhbiBzdXBwb3J0IGF0b21pY2l0eSBhZnRlciBhbiB1cGdyYWRlLCBidXQgdGhlIHVzZXIgcmVqZWN0ZWQgdGhlIHVwZ3JhZGUuICovXG5leHBvcnQgY2xhc3MgQXRvbWljUmVhZHlXYWxsZXRSZWplY3RlZFVwZ3JhZGVFcnJvciBleHRlbmRzIFByb3ZpZGVyUnBjRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKHsgbWVzc2FnZSA9ICdUaGUgV2FsbGV0IGNhbiBzdXBwb3J0IGF0b21pY2l0eSBhZnRlciBhbiB1cGdyYWRlLCBidXQgdGhlIHVzZXIgcmVqZWN0ZWQgdGhlIHVwZ3JhZGUuJywgfSA9IHt9KSB7XG4gICAgICAgIHN1cGVyKDU3NTAsIG1lc3NhZ2UpO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJjb2RlXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiA1NzUwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJuYW1lXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiAnUHJvdmlkZXIuQXRvbWljUmVhZHlXYWxsZXRSZWplY3RlZFVwZ3JhZGVFcnJvcidcbiAgICAgICAgfSk7XG4gICAgfVxufVxuT2JqZWN0LmRlZmluZVByb3BlcnR5KEF0b21pY1JlYWR5V2FsbGV0UmVqZWN0ZWRVcGdyYWRlRXJyb3IsIFwiY29kZVwiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgd3JpdGFibGU6IHRydWUsXG4gICAgdmFsdWU6IDU3NTBcbn0pO1xuLyoqIFRoZSB3YWxsZXQgZG9lcyBub3Qgc3VwcG9ydCBhdG9taWMgZXhlY3V0aW9uIGJ1dCB0aGUgcmVxdWVzdCByZXF1aXJlcyBpdC4gKi9cbmV4cG9ydCBjbGFzcyBBdG9taWNpdHlOb3RTdXBwb3J0ZWRFcnJvciBleHRlbmRzIFByb3ZpZGVyUnBjRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKHsgbWVzc2FnZSA9ICdUaGUgd2FsbGV0IGRvZXMgbm90IHN1cHBvcnQgYXRvbWljIGV4ZWN1dGlvbiBidXQgdGhlIHJlcXVlc3QgcmVxdWlyZXMgaXQuJywgfSA9IHt9KSB7XG4gICAgICAgIHN1cGVyKDU3NjAsIG1lc3NhZ2UpO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJjb2RlXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiA1NzYwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJuYW1lXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiAnUHJvdmlkZXIuQXRvbWljaXR5Tm90U3VwcG9ydGVkRXJyb3InXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShBdG9taWNpdHlOb3RTdXBwb3J0ZWRFcnJvciwgXCJjb2RlXCIsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICB2YWx1ZTogNTc2MFxufSk7XG4vKipcbiAqIENyZWF0ZXMgYW4gRUlQLTExOTMgZmxhdm9yZWQgZXZlbnQgZW1pdHRlciB0byBiZSBpbmplY3RlZCBvbnRvIGEgUHJvdmlkZXIuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHRzIHR3b3NsYXNoXG4gKiAvLyBAbm9FcnJvcnNcbiAqIGltcG9ydCB7IFByb3ZpZGVyLCBScGNSZXF1ZXN0LCBScGNSZXNwb25zZSB9IGZyb20gJ294JyAvLyBbIWNvZGUgZm9jdXNdXG4gKlxuICogLy8gMS4gSW5zdGFudGlhdGUgYSBQcm92aWRlciBFbWl0dGVyLiAvLyBbIWNvZGUgZm9jdXNdXG4gKiBjb25zdCBlbWl0dGVyID0gUHJvdmlkZXIuY3JlYXRlRW1pdHRlcigpIC8vIFshY29kZSBmb2N1c11cbiAqXG4gKiBjb25zdCBzdG9yZSA9IFJwY1JlcXVlc3QuY3JlYXRlU3RvcmUoKVxuICpcbiAqIGNvbnN0IHByb3ZpZGVyID0gUHJvdmlkZXIuZnJvbSh7XG4gKiAgIC8vIDIuIFBhc3MgdGhlIEVtaXR0ZXIgdG8gdGhlIFByb3ZpZGVyLiAvLyBbIWNvZGUgZm9jdXNdXG4gKiAgIC4uLmVtaXR0ZXIsIC8vIFshY29kZSBmb2N1c11cbiAqICAgYXN5bmMgcmVxdWVzdChhcmdzKSB7XG4gKiAgICAgcmV0dXJuIGF3YWl0IGZldGNoKCdodHRwczovLzEucnBjLnRoaXJkd2ViLmNvbScsIHtcbiAqICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHN0b3JlLnByZXBhcmUoYXJncykpLFxuICogICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gKiAgICAgICBoZWFkZXJzOiB7XG4gKiAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gKiAgICAgICB9LFxuICogICAgIH0pXG4gKiAgICAgICAudGhlbigocmVzKSA9PiByZXMuanNvbigpKVxuICogICAgICAgLnRoZW4oUnBjUmVzcG9uc2UucGFyc2UpXG4gKiAgIH0sXG4gKiB9KVxuICpcbiAqIC8vIDMuIEVtaXQgUHJvdmlkZXIgRXZlbnRzLiAvLyBbIWNvZGUgZm9jdXNdXG4gKiBlbWl0dGVyLmVtaXQoJ2FjY291bnRzQ2hhbmdlZCcsIFsnMHguLi4nXSkgLy8gWyFjb2RlIGZvY3VzXVxuICogYGBgXG4gKlxuICogQHJldHVybnMgQW4gZXZlbnQgZW1pdHRlci5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUVtaXR0ZXIoKSB7XG4gICAgY29uc3QgZW1pdHRlciA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBnZXQgZXZlbnROYW1lcygpIHtcbiAgICAgICAgICAgIHJldHVybiBlbWl0dGVyLmV2ZW50TmFtZXMuYmluZChlbWl0dGVyKTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0IGxpc3RlbmVyQ291bnQoKSB7XG4gICAgICAgICAgICByZXR1cm4gZW1pdHRlci5saXN0ZW5lckNvdW50LmJpbmQoZW1pdHRlcik7XG4gICAgICAgIH0sXG4gICAgICAgIGdldCBsaXN0ZW5lcnMoKSB7XG4gICAgICAgICAgICByZXR1cm4gZW1pdHRlci5saXN0ZW5lcnMuYmluZChlbWl0dGVyKTtcbiAgICAgICAgfSxcbiAgICAgICAgYWRkTGlzdGVuZXI6IGVtaXR0ZXIuYWRkTGlzdGVuZXIuYmluZChlbWl0dGVyKSxcbiAgICAgICAgZW1pdDogZW1pdHRlci5lbWl0LmJpbmQoZW1pdHRlciksXG4gICAgICAgIG9mZjogZW1pdHRlci5vZmYuYmluZChlbWl0dGVyKSxcbiAgICAgICAgb246IGVtaXR0ZXIub24uYmluZChlbWl0dGVyKSxcbiAgICAgICAgb25jZTogZW1pdHRlci5vbmNlLmJpbmQoZW1pdHRlciksXG4gICAgICAgIHJlbW92ZUFsbExpc3RlbmVyczogZW1pdHRlci5yZW1vdmVBbGxMaXN0ZW5lcnMuYmluZChlbWl0dGVyKSxcbiAgICAgICAgcmVtb3ZlTGlzdGVuZXI6IGVtaXR0ZXIucmVtb3ZlTGlzdGVuZXIuYmluZChlbWl0dGVyKSxcbiAgICB9O1xufVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGpzZG9jL3JlcXVpcmUtanNkb2NcbmV4cG9ydCBmdW5jdGlvbiBmcm9tKHByb3ZpZGVyLCBvcHRpb25zID0ge30pIHtcbiAgICBjb25zdCB7IGluY2x1ZGVFdmVudHMgPSB0cnVlIH0gPSBvcHRpb25zO1xuICAgIGlmICghcHJvdmlkZXIpXG4gICAgICAgIHRocm93IG5ldyBJc1VuZGVmaW5lZEVycm9yKCk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgLi4uKGluY2x1ZGVFdmVudHNcbiAgICAgICAgICAgID8ge1xuICAgICAgICAgICAgICAgIG9uOiBwcm92aWRlci5vbj8uYmluZChwcm92aWRlciksXG4gICAgICAgICAgICAgICAgcmVtb3ZlTGlzdGVuZXI6IHByb3ZpZGVyLnJlbW92ZUxpc3RlbmVyPy5iaW5kKHByb3ZpZGVyKSxcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDoge30pLFxuICAgICAgICBhc3luYyByZXF1ZXN0KGFyZ3MpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcHJvdmlkZXIucmVxdWVzdChhcmdzKTtcbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0ICYmXG4gICAgICAgICAgICAgICAgICAgIHR5cGVvZiByZXN1bHQgPT09ICdvYmplY3QnICYmXG4gICAgICAgICAgICAgICAgICAgICdqc29ucnBjJyBpbiByZXN1bHQpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBScGNSZXNwb25zZS5wYXJzZShyZXN1bHQpO1xuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBwYXJzZUVycm9yKGVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICB9O1xufVxuLyoqXG4gKiBQYXJzZXMgYW4gZXJyb3IgaW50byBhIFByb3ZpZGVyIGVycm9yIGluc3RhbmNlLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGB0cyB0d29zbGFzaFxuICogaW1wb3J0IHsgUHJvdmlkZXIgfSBmcm9tICdveCdcbiAqXG4gKiBjb25zdCBlcnJvciA9IFByb3ZpZGVyLnBhcnNlRXJyb3IoeyBjb2RlOiA0MjAwLCBtZXNzYWdlOiAnZm9vJyB9KVxuICpcbiAqIGVycm9yXG4gKiAvLyBeP1xuICpcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSBlcnJvciAtIFRoZSBlcnJvciBvYmplY3QgdG8gcGFyc2UuXG4gKiBAcmV0dXJucyBBbiBlcnJvciBpbnN0YW5jZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlRXJyb3IoZXJyb3IpIHtcbiAgICBjb25zdCBlcnJvcl8gPSBScGNSZXNwb25zZS5wYXJzZUVycm9yKGVycm9yKTtcbiAgICBpZiAoZXJyb3JfIGluc3RhbmNlb2YgUnBjUmVzcG9uc2UuSW50ZXJuYWxFcnJvcikge1xuICAgICAgICBpZiAoIWVycm9yXy5kYXRhKVxuICAgICAgICAgICAgcmV0dXJuIGVycm9yXztcbiAgICAgICAgY29uc3QgeyBjb2RlIH0gPSBlcnJvcl8uZGF0YTtcbiAgICAgICAgaWYgKGNvZGUgPT09IERpc2Nvbm5lY3RlZEVycm9yLmNvZGUpXG4gICAgICAgICAgICByZXR1cm4gbmV3IERpc2Nvbm5lY3RlZEVycm9yKGVycm9yXyk7XG4gICAgICAgIGlmIChjb2RlID09PSBDaGFpbkRpc2Nvbm5lY3RlZEVycm9yLmNvZGUpXG4gICAgICAgICAgICByZXR1cm4gbmV3IENoYWluRGlzY29ubmVjdGVkRXJyb3IoZXJyb3JfKTtcbiAgICAgICAgaWYgKGNvZGUgPT09IFVzZXJSZWplY3RlZFJlcXVlc3RFcnJvci5jb2RlKVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBVc2VyUmVqZWN0ZWRSZXF1ZXN0RXJyb3IoZXJyb3JfKTtcbiAgICAgICAgaWYgKGNvZGUgPT09IFVuYXV0aG9yaXplZEVycm9yLmNvZGUpXG4gICAgICAgICAgICByZXR1cm4gbmV3IFVuYXV0aG9yaXplZEVycm9yKGVycm9yXyk7XG4gICAgICAgIGlmIChjb2RlID09PSBVbnN1cHBvcnRlZE1ldGhvZEVycm9yLmNvZGUpXG4gICAgICAgICAgICByZXR1cm4gbmV3IFVuc3VwcG9ydGVkTWV0aG9kRXJyb3IoZXJyb3JfKTtcbiAgICAgICAgaWYgKGNvZGUgPT09IFN3aXRjaENoYWluRXJyb3IuY29kZSlcbiAgICAgICAgICAgIHJldHVybiBuZXcgU3dpdGNoQ2hhaW5FcnJvcihlcnJvcl8pO1xuICAgICAgICBpZiAoY29kZSA9PT0gQXRvbWljUmVhZHlXYWxsZXRSZWplY3RlZFVwZ3JhZGVFcnJvci5jb2RlKVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBBdG9taWNSZWFkeVdhbGxldFJlamVjdGVkVXBncmFkZUVycm9yKGVycm9yXyk7XG4gICAgICAgIGlmIChjb2RlID09PSBBdG9taWNpdHlOb3RTdXBwb3J0ZWRFcnJvci5jb2RlKVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBBdG9taWNpdHlOb3RTdXBwb3J0ZWRFcnJvcihlcnJvcl8pO1xuICAgICAgICBpZiAoY29kZSA9PT0gQnVuZGxlVG9vTGFyZ2VFcnJvci5jb2RlKVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBCdW5kbGVUb29MYXJnZUVycm9yKGVycm9yXyk7XG4gICAgICAgIGlmIChjb2RlID09PSBVbmtub3duQnVuZGxlSWRFcnJvci5jb2RlKVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBVbmtub3duQnVuZGxlSWRFcnJvcihlcnJvcl8pO1xuICAgICAgICBpZiAoY29kZSA9PT0gRHVwbGljYXRlSWRFcnJvci5jb2RlKVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBEdXBsaWNhdGVJZEVycm9yKGVycm9yXyk7XG4gICAgICAgIGlmIChjb2RlID09PSBVbnN1cHBvcnRlZENoYWluSWRFcnJvci5jb2RlKVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBVbnN1cHBvcnRlZENoYWluSWRFcnJvcihlcnJvcl8pO1xuICAgICAgICBpZiAoY29kZSA9PT0gVW5zdXBwb3J0ZWROb25PcHRpb25hbENhcGFiaWxpdHlFcnJvci5jb2RlKVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBVbnN1cHBvcnRlZE5vbk9wdGlvbmFsQ2FwYWJpbGl0eUVycm9yKGVycm9yXyk7XG4gICAgfVxuICAgIHJldHVybiBlcnJvcl87XG59XG4vKiogVGhyb3duIHdoZW4gdGhlIHByb3ZpZGVyIGlzIHVuZGVmaW5lZC4gKi9cbmV4cG9ydCBjbGFzcyBJc1VuZGVmaW5lZEVycm9yIGV4dGVuZHMgRXJyb3JzLkJhc2VFcnJvciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCdgcHJvdmlkZXJgIGlzIHVuZGVmaW5lZC4nKTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwibmFtZVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogJ1Byb3ZpZGVyLklzVW5kZWZpbmVkRXJyb3InXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVByb3ZpZGVyLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ox/_esm/core/Provider.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ox/_esm/core/Rlp.js":
/*!******************************************!*\
  !*** ./node_modules/ox/_esm/core/Rlp.js ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decodeRlpCursor: () => (/* binding */ decodeRlpCursor),\n/* harmony export */   from: () => (/* binding */ from),\n/* harmony export */   fromBytes: () => (/* binding */ fromBytes),\n/* harmony export */   fromHex: () => (/* binding */ fromHex),\n/* harmony export */   readLength: () => (/* binding */ readLength),\n/* harmony export */   readList: () => (/* binding */ readList),\n/* harmony export */   to: () => (/* binding */ to),\n/* harmony export */   toBytes: () => (/* binding */ toBytes),\n/* harmony export */   toHex: () => (/* binding */ toHex)\n/* harmony export */ });\n/* harmony import */ var _Bytes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Bytes.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Bytes.js\");\n/* harmony import */ var _Errors_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Errors.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Errors.js\");\n/* harmony import */ var _Hex_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Hex.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Hex.js\");\n/* harmony import */ var _internal_cursor_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./internal/cursor.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/internal/cursor.js\");\n\n\n\n\n/**\n * Decodes a Recursive-Length Prefix (RLP) value into a {@link ox#Bytes.Bytes} value.\n *\n * @example\n * ```ts twoslash\n * import { Rlp } from 'ox'\n * Rlp.toBytes('0x8b68656c6c6f20776f726c64')\n * // Uint8Array([139, 104, 101, 108, 108, 111,  32, 119, 111, 114, 108, 100])\n * ```\n *\n * @param value - The value to decode.\n * @returns The decoded {@link ox#Bytes.Bytes} value.\n */\nfunction toBytes(value) {\n    return to(value, 'Bytes');\n}\n/**\n * Decodes a Recursive-Length Prefix (RLP) value into a {@link ox#Hex.Hex} value.\n *\n * @example\n * ```ts twoslash\n * import { Rlp } from 'ox'\n * Rlp.toHex('0x8b68656c6c6f20776f726c64')\n * // 0x68656c6c6f20776f726c64\n * ```\n *\n * @param value - The value to decode.\n * @returns The decoded {@link ox#Hex.Hex} value.\n */\nfunction toHex(value) {\n    return to(value, 'Hex');\n}\n/////////////////////////////////////////////////////////////////////////////////\n// Internal\n/////////////////////////////////////////////////////////////////////////////////\n/** @internal */\nfunction to(value, to) {\n    const to_ = to ?? (typeof value === 'string' ? 'Hex' : 'Bytes');\n    const bytes = (() => {\n        if (typeof value === 'string') {\n            if (value.length > 3 && value.length % 2 !== 0)\n                throw new _Hex_js__WEBPACK_IMPORTED_MODULE_0__.InvalidLengthError(value);\n            return _Bytes_js__WEBPACK_IMPORTED_MODULE_1__.fromHex(value);\n        }\n        return value;\n    })();\n    const cursor = _internal_cursor_js__WEBPACK_IMPORTED_MODULE_2__.create(bytes, {\n        recursiveReadLimit: Number.POSITIVE_INFINITY,\n    });\n    const result = decodeRlpCursor(cursor, to_);\n    return result;\n}\n/** @internal */\n/** @internal */\nfunction decodeRlpCursor(cursor, to = 'Hex') {\n    if (cursor.bytes.length === 0)\n        return (to === 'Hex' ? _Hex_js__WEBPACK_IMPORTED_MODULE_0__.fromBytes(cursor.bytes) : cursor.bytes);\n    const prefix = cursor.readByte();\n    if (prefix < 0x80)\n        cursor.decrementPosition(1);\n    // bytes\n    if (prefix < 0xc0) {\n        const length = readLength(cursor, prefix, 0x80);\n        const bytes = cursor.readBytes(length);\n        return (to === 'Hex' ? _Hex_js__WEBPACK_IMPORTED_MODULE_0__.fromBytes(bytes) : bytes);\n    }\n    // list\n    const length = readLength(cursor, prefix, 0xc0);\n    return readList(cursor, length, to);\n}\n/** @internal */\nfunction readLength(cursor, prefix, offset) {\n    if (offset === 0x80 && prefix < 0x80)\n        return 1;\n    if (prefix <= offset + 55)\n        return prefix - offset;\n    if (prefix === offset + 55 + 1)\n        return cursor.readUint8();\n    if (prefix === offset + 55 + 2)\n        return cursor.readUint16();\n    if (prefix === offset + 55 + 3)\n        return cursor.readUint24();\n    if (prefix === offset + 55 + 4)\n        return cursor.readUint32();\n    throw new _Errors_js__WEBPACK_IMPORTED_MODULE_3__.BaseError('Invalid RLP prefix');\n}\n/** @internal */\nfunction readList(cursor, length, to) {\n    const position = cursor.position;\n    const value = [];\n    while (cursor.position - position < length)\n        value.push(decodeRlpCursor(cursor, to));\n    return value;\n}\n/**\n * Encodes a {@link ox#Bytes.Bytes} or {@link ox#Hex.Hex} value into a Recursive-Length Prefix (RLP) value.\n *\n * @example\n * ```ts twoslash\n * import { Bytes, Rlp } from 'ox'\n *\n * Rlp.from('0x68656c6c6f20776f726c64', { as: 'Hex' })\n * // @log: 0x8b68656c6c6f20776f726c64\n *\n * Rlp.from(Bytes.from([139, 104, 101, 108, 108, 111,  32, 119, 111, 114, 108, 100]), { as: 'Bytes' })\n * // @log: Uint8Array([104, 101, 108, 108, 111,  32, 119, 111, 114, 108, 100])\n * ```\n *\n * @param value - The {@link ox#Bytes.Bytes} or {@link ox#Hex.Hex} value to encode.\n * @param options - Options.\n * @returns The RLP value.\n */\nfunction from(value, options) {\n    const { as } = options;\n    const encodable = getEncodable(value);\n    const cursor = _internal_cursor_js__WEBPACK_IMPORTED_MODULE_2__.create(new Uint8Array(encodable.length));\n    encodable.encode(cursor);\n    if (as === 'Hex')\n        return _Hex_js__WEBPACK_IMPORTED_MODULE_0__.fromBytes(cursor.bytes);\n    return cursor.bytes;\n}\n/**\n * Encodes a {@link ox#Bytes.Bytes} value into a Recursive-Length Prefix (RLP) value.\n *\n * @example\n * ```ts twoslash\n * import { Bytes, Rlp } from 'ox'\n *\n * Rlp.fromBytes(Bytes.from([139, 104, 101, 108, 108, 111,  32, 119, 111, 114, 108, 100]))\n * // @log: Uint8Array([104, 101, 108, 108, 111,  32, 119, 111, 114, 108, 100])\n * ```\n *\n * @param bytes - The {@link ox#Bytes.Bytes} value to encode.\n * @param options - Options.\n * @returns The RLP value.\n */\nfunction fromBytes(bytes, options = {}) {\n    const { as = 'Bytes' } = options;\n    return from(bytes, { as });\n}\n/**\n * Encodes a {@link ox#Hex.Hex} value into a Recursive-Length Prefix (RLP) value.\n *\n * @example\n * ```ts twoslash\n * import { Rlp } from 'ox'\n *\n * Rlp.fromHex('0x68656c6c6f20776f726c64')\n * // @log: 0x8b68656c6c6f20776f726c64\n * ```\n *\n * @param hex - The {@link ox#Hex.Hex} value to encode.\n * @param options - Options.\n * @returns The RLP value.\n */\nfunction fromHex(hex, options = {}) {\n    const { as = 'Hex' } = options;\n    return from(hex, { as });\n}\n/////////////////////////////////////////////////////////////////////////////////\n// Internal\n/////////////////////////////////////////////////////////////////////////////////\nfunction getEncodable(bytes) {\n    if (Array.isArray(bytes))\n        return getEncodableList(bytes.map((x) => getEncodable(x)));\n    return getEncodableBytes(bytes);\n}\nfunction getEncodableList(list) {\n    const bodyLength = list.reduce((acc, x) => acc + x.length, 0);\n    const sizeOfBodyLength = getSizeOfLength(bodyLength);\n    const length = (() => {\n        if (bodyLength <= 55)\n            return 1 + bodyLength;\n        return 1 + sizeOfBodyLength + bodyLength;\n    })();\n    return {\n        length,\n        encode(cursor) {\n            if (bodyLength <= 55) {\n                cursor.pushByte(0xc0 + bodyLength);\n            }\n            else {\n                cursor.pushByte(0xc0 + 55 + sizeOfBodyLength);\n                if (sizeOfBodyLength === 1)\n                    cursor.pushUint8(bodyLength);\n                else if (sizeOfBodyLength === 2)\n                    cursor.pushUint16(bodyLength);\n                else if (sizeOfBodyLength === 3)\n                    cursor.pushUint24(bodyLength);\n                else\n                    cursor.pushUint32(bodyLength);\n            }\n            for (const { encode } of list) {\n                encode(cursor);\n            }\n        },\n    };\n}\nfunction getEncodableBytes(bytesOrHex) {\n    const bytes = typeof bytesOrHex === 'string' ? _Bytes_js__WEBPACK_IMPORTED_MODULE_1__.fromHex(bytesOrHex) : bytesOrHex;\n    const sizeOfBytesLength = getSizeOfLength(bytes.length);\n    const length = (() => {\n        if (bytes.length === 1 && bytes[0] < 0x80)\n            return 1;\n        if (bytes.length <= 55)\n            return 1 + bytes.length;\n        return 1 + sizeOfBytesLength + bytes.length;\n    })();\n    return {\n        length,\n        encode(cursor) {\n            if (bytes.length === 1 && bytes[0] < 0x80) {\n                cursor.pushBytes(bytes);\n            }\n            else if (bytes.length <= 55) {\n                cursor.pushByte(0x80 + bytes.length);\n                cursor.pushBytes(bytes);\n            }\n            else {\n                cursor.pushByte(0x80 + 55 + sizeOfBytesLength);\n                if (sizeOfBytesLength === 1)\n                    cursor.pushUint8(bytes.length);\n                else if (sizeOfBytesLength === 2)\n                    cursor.pushUint16(bytes.length);\n                else if (sizeOfBytesLength === 3)\n                    cursor.pushUint24(bytes.length);\n                else\n                    cursor.pushUint32(bytes.length);\n                cursor.pushBytes(bytes);\n            }\n        },\n    };\n}\nfunction getSizeOfLength(length) {\n    if (length < 2 ** 8)\n        return 1;\n    if (length < 2 ** 16)\n        return 2;\n    if (length < 2 ** 24)\n        return 3;\n    if (length < 2 ** 32)\n        return 4;\n    throw new _Errors_js__WEBPACK_IMPORTED_MODULE_3__.BaseError('Length is too large.');\n}\n//# sourceMappingURL=Rlp.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ox/_esm/core/Rlp.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ox/_esm/core/RpcRequest.js":
/*!*************************************************!*\
  !*** ./node_modules/ox/_esm/core/RpcRequest.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createStore: () => (/* binding */ createStore),\n/* harmony export */   from: () => (/* binding */ from)\n/* harmony export */ });\n/**\n * Creates a JSON-RPC request store to build requests with an incrementing `id`.\n *\n * Returns a type-safe `prepare` function to build a JSON-RPC request object as per the [JSON-RPC 2.0 specification](https://www.jsonrpc.org/specification#request_object).\n *\n * @example\n * ```ts twoslash\n * import { RpcRequest } from 'ox'\n *\n * const store = RpcRequest.createStore()\n *\n * const request_1 = store.prepare({\n *   method: 'eth_blockNumber',\n * })\n * // @log: { id: 0, jsonrpc: '2.0', method: 'eth_blockNumber' }\n *\n * const request_2 = store.prepare({\n *   method: 'eth_call',\n *   params: [\n *     {\n *       to: '0x0000000000000000000000000000000000000000',\n *       data: '0xdeadbeef',\n *     },\n *   ],\n * })\n * // @log: { id: 1, jsonrpc: '2.0', method: 'eth_call', params: [{ to: '0x0000000000000000000000000000000000000000', data: '0xdeadbeef' }] }\n * ```\n *\n * @example\n * ### Type-safe Custom Schemas\n *\n * It is possible to define your own type-safe schema by using the {@link ox#RpcSchema.From} type.\n *\n * ```ts twoslash\n * import { RpcSchema, RpcRequest } from 'ox'\n *\n * type Schema = RpcSchema.From<{ // [!code focus]\n *   Request: { // [!code focus]\n *     method: 'eth_foobar' // [!code focus]\n *     params: [number] // [!code focus]\n *   } // [!code focus]\n *   ReturnType: string // [!code focus]\n * } | { // [!code focus]\n *   Request: { // [!code focus]\n *     method: 'eth_foobaz' // [!code focus]\n *     params: [string] // [!code focus]\n *   } // [!code focus]\n *   ReturnType: string // [!code focus]\n * }> // [!code focus]\n *\n * const store = RpcRequest.createStore<Schema>() // [!code focus]\n *\n * const request = store.prepare({\n *   method: 'eth_foobar', // [!code focus]\n *   // ^?\n *   params: [42],\n * })\n * ```\n *\n * @param options - Request store options.\n * @returns The request store\n */\nfunction createStore(options = {}) {\n    let id = options.id ?? 0;\n    return {\n        prepare(options) {\n            return from({\n                id: id++,\n                ...options,\n            });\n        },\n        get id() {\n            return id;\n        },\n    };\n}\n/**\n * A type-safe interface to build a JSON-RPC request object as per the [JSON-RPC 2.0 specification](https://www.jsonrpc.org/specification#request_object).\n *\n * :::warning\n *\n * You will likely want to use {@link ox#RpcRequest.(createStore:function)} instead as it will also manage `id`s and uses this function internally.\n *\n * :::\n *\n * @example\n * ```ts twoslash\n * import { RpcRequest, RpcResponse } from 'ox'\n *\n * // 1. Build a request object.\n * const request = RpcRequest.from({ // [!code focus]\n *   id: 0, // [!code focus]\n *   method: 'eth_estimateGas', // [!code focus]\n *   params: [ // [!code focus]\n *     { // [!code focus]\n *       from: '0xd2135CfB216b74109775236E36d4b433F1DF507B', // [!code focus]\n *       to: '0x0D44f617435088c947F00B31160f64b074e412B4', // [!code focus]\n *       value: '0x69420', // [!code focus]\n *     }, // [!code focus]\n *   ], // [!code focus]\n * }) // [!code focus]\n *\n * // 2. Send the JSON-RPC request via HTTP.\n * const gas = await fetch('https://1.rpc.thirdweb.com', {\n *   body: JSON.stringify(request),\n *   headers: {\n *     'Content-Type': 'application/json',\n *   },\n *   method: 'POST',\n * })\n *  .then((response) => response.json())\n *  // 3. Parse the JSON-RPC response into a type-safe result.\n *  .then((response) => RpcResponse.parse(response, { request }))\n * ```\n *\n * @param options - JSON-RPC request options.\n * @returns The fully-formed JSON-RPC request object.\n */\nfunction from(options) {\n    return {\n        ...options,\n        jsonrpc: '2.0',\n    };\n}\n//# sourceMappingURL=RpcRequest.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9veC9fZXNtL2NvcmUvUnBjUmVxdWVzdC5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxhQUFhO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0osY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0EsSUFBSTtBQUNKLGNBQWMsc0RBQXNELHNFQUFzRTtBQUMxSTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0VBQW9FLHlCQUF5QjtBQUM3RjtBQUNBO0FBQ0EsWUFBWSx3QkFBd0I7QUFDcEM7QUFDQSxrQ0FBa0M7QUFDbEMsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSxLQUFLLElBQUk7QUFDVCxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08saUNBQWlDO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQyw0Q0FBNEM7QUFDNUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksMEJBQTBCO0FBQ3RDO0FBQ0E7QUFDQSxxQ0FBcUM7QUFDckM7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLHNEQUFzRCxTQUFTO0FBQy9EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxjaGFuZFxcRG93bmxvYWRzXFxqb2hud3JpY2hraWRpbnRvcml6elxcbm9kZV9tb2R1bGVzXFxveFxcX2VzbVxcY29yZVxcUnBjUmVxdWVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENyZWF0ZXMgYSBKU09OLVJQQyByZXF1ZXN0IHN0b3JlIHRvIGJ1aWxkIHJlcXVlc3RzIHdpdGggYW4gaW5jcmVtZW50aW5nIGBpZGAuXG4gKlxuICogUmV0dXJucyBhIHR5cGUtc2FmZSBgcHJlcGFyZWAgZnVuY3Rpb24gdG8gYnVpbGQgYSBKU09OLVJQQyByZXF1ZXN0IG9iamVjdCBhcyBwZXIgdGhlIFtKU09OLVJQQyAyLjAgc3BlY2lmaWNhdGlvbl0oaHR0cHM6Ly93d3cuanNvbnJwYy5vcmcvc3BlY2lmaWNhdGlvbiNyZXF1ZXN0X29iamVjdCkuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHRzIHR3b3NsYXNoXG4gKiBpbXBvcnQgeyBScGNSZXF1ZXN0IH0gZnJvbSAnb3gnXG4gKlxuICogY29uc3Qgc3RvcmUgPSBScGNSZXF1ZXN0LmNyZWF0ZVN0b3JlKClcbiAqXG4gKiBjb25zdCByZXF1ZXN0XzEgPSBzdG9yZS5wcmVwYXJlKHtcbiAqICAgbWV0aG9kOiAnZXRoX2Jsb2NrTnVtYmVyJyxcbiAqIH0pXG4gKiAvLyBAbG9nOiB7IGlkOiAwLCBqc29ucnBjOiAnMi4wJywgbWV0aG9kOiAnZXRoX2Jsb2NrTnVtYmVyJyB9XG4gKlxuICogY29uc3QgcmVxdWVzdF8yID0gc3RvcmUucHJlcGFyZSh7XG4gKiAgIG1ldGhvZDogJ2V0aF9jYWxsJyxcbiAqICAgcGFyYW1zOiBbXG4gKiAgICAge1xuICogICAgICAgdG86ICcweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAnLFxuICogICAgICAgZGF0YTogJzB4ZGVhZGJlZWYnLFxuICogICAgIH0sXG4gKiAgIF0sXG4gKiB9KVxuICogLy8gQGxvZzogeyBpZDogMSwganNvbnJwYzogJzIuMCcsIG1ldGhvZDogJ2V0aF9jYWxsJywgcGFyYW1zOiBbeyB0bzogJzB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCcsIGRhdGE6ICcweGRlYWRiZWVmJyB9XSB9XG4gKiBgYGBcbiAqXG4gKiBAZXhhbXBsZVxuICogIyMjIFR5cGUtc2FmZSBDdXN0b20gU2NoZW1hc1xuICpcbiAqIEl0IGlzIHBvc3NpYmxlIHRvIGRlZmluZSB5b3VyIG93biB0eXBlLXNhZmUgc2NoZW1hIGJ5IHVzaW5nIHRoZSB7QGxpbmsgb3gjUnBjU2NoZW1hLkZyb219IHR5cGUuXG4gKlxuICogYGBgdHMgdHdvc2xhc2hcbiAqIGltcG9ydCB7IFJwY1NjaGVtYSwgUnBjUmVxdWVzdCB9IGZyb20gJ294J1xuICpcbiAqIHR5cGUgU2NoZW1hID0gUnBjU2NoZW1hLkZyb208eyAvLyBbIWNvZGUgZm9jdXNdXG4gKiAgIFJlcXVlc3Q6IHsgLy8gWyFjb2RlIGZvY3VzXVxuICogICAgIG1ldGhvZDogJ2V0aF9mb29iYXInIC8vIFshY29kZSBmb2N1c11cbiAqICAgICBwYXJhbXM6IFtudW1iZXJdIC8vIFshY29kZSBmb2N1c11cbiAqICAgfSAvLyBbIWNvZGUgZm9jdXNdXG4gKiAgIFJldHVyblR5cGU6IHN0cmluZyAvLyBbIWNvZGUgZm9jdXNdXG4gKiB9IHwgeyAvLyBbIWNvZGUgZm9jdXNdXG4gKiAgIFJlcXVlc3Q6IHsgLy8gWyFjb2RlIGZvY3VzXVxuICogICAgIG1ldGhvZDogJ2V0aF9mb29iYXonIC8vIFshY29kZSBmb2N1c11cbiAqICAgICBwYXJhbXM6IFtzdHJpbmddIC8vIFshY29kZSBmb2N1c11cbiAqICAgfSAvLyBbIWNvZGUgZm9jdXNdXG4gKiAgIFJldHVyblR5cGU6IHN0cmluZyAvLyBbIWNvZGUgZm9jdXNdXG4gKiB9PiAvLyBbIWNvZGUgZm9jdXNdXG4gKlxuICogY29uc3Qgc3RvcmUgPSBScGNSZXF1ZXN0LmNyZWF0ZVN0b3JlPFNjaGVtYT4oKSAvLyBbIWNvZGUgZm9jdXNdXG4gKlxuICogY29uc3QgcmVxdWVzdCA9IHN0b3JlLnByZXBhcmUoe1xuICogICBtZXRob2Q6ICdldGhfZm9vYmFyJywgLy8gWyFjb2RlIGZvY3VzXVxuICogICAvLyBeP1xuICogICBwYXJhbXM6IFs0Ml0sXG4gKiB9KVxuICogYGBgXG4gKlxuICogQHBhcmFtIG9wdGlvbnMgLSBSZXF1ZXN0IHN0b3JlIG9wdGlvbnMuXG4gKiBAcmV0dXJucyBUaGUgcmVxdWVzdCBzdG9yZVxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU3RvcmUob3B0aW9ucyA9IHt9KSB7XG4gICAgbGV0IGlkID0gb3B0aW9ucy5pZCA/PyAwO1xuICAgIHJldHVybiB7XG4gICAgICAgIHByZXBhcmUob3B0aW9ucykge1xuICAgICAgICAgICAgcmV0dXJuIGZyb20oe1xuICAgICAgICAgICAgICAgIGlkOiBpZCsrLFxuICAgICAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0IGlkKCkge1xuICAgICAgICAgICAgcmV0dXJuIGlkO1xuICAgICAgICB9LFxuICAgIH07XG59XG4vKipcbiAqIEEgdHlwZS1zYWZlIGludGVyZmFjZSB0byBidWlsZCBhIEpTT04tUlBDIHJlcXVlc3Qgb2JqZWN0IGFzIHBlciB0aGUgW0pTT04tUlBDIDIuMCBzcGVjaWZpY2F0aW9uXShodHRwczovL3d3dy5qc29ucnBjLm9yZy9zcGVjaWZpY2F0aW9uI3JlcXVlc3Rfb2JqZWN0KS5cbiAqXG4gKiA6Ojp3YXJuaW5nXG4gKlxuICogWW91IHdpbGwgbGlrZWx5IHdhbnQgdG8gdXNlIHtAbGluayBveCNScGNSZXF1ZXN0LihjcmVhdGVTdG9yZTpmdW5jdGlvbil9IGluc3RlYWQgYXMgaXQgd2lsbCBhbHNvIG1hbmFnZSBgaWRgcyBhbmQgdXNlcyB0aGlzIGZ1bmN0aW9uIGludGVybmFsbHkuXG4gKlxuICogOjo6XG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHRzIHR3b3NsYXNoXG4gKiBpbXBvcnQgeyBScGNSZXF1ZXN0LCBScGNSZXNwb25zZSB9IGZyb20gJ294J1xuICpcbiAqIC8vIDEuIEJ1aWxkIGEgcmVxdWVzdCBvYmplY3QuXG4gKiBjb25zdCByZXF1ZXN0ID0gUnBjUmVxdWVzdC5mcm9tKHsgLy8gWyFjb2RlIGZvY3VzXVxuICogICBpZDogMCwgLy8gWyFjb2RlIGZvY3VzXVxuICogICBtZXRob2Q6ICdldGhfZXN0aW1hdGVHYXMnLCAvLyBbIWNvZGUgZm9jdXNdXG4gKiAgIHBhcmFtczogWyAvLyBbIWNvZGUgZm9jdXNdXG4gKiAgICAgeyAvLyBbIWNvZGUgZm9jdXNdXG4gKiAgICAgICBmcm9tOiAnMHhkMjEzNUNmQjIxNmI3NDEwOTc3NTIzNkUzNmQ0YjQzM0YxREY1MDdCJywgLy8gWyFjb2RlIGZvY3VzXVxuICogICAgICAgdG86ICcweDBENDRmNjE3NDM1MDg4Yzk0N0YwMEIzMTE2MGY2NGIwNzRlNDEyQjQnLCAvLyBbIWNvZGUgZm9jdXNdXG4gKiAgICAgICB2YWx1ZTogJzB4Njk0MjAnLCAvLyBbIWNvZGUgZm9jdXNdXG4gKiAgICAgfSwgLy8gWyFjb2RlIGZvY3VzXVxuICogICBdLCAvLyBbIWNvZGUgZm9jdXNdXG4gKiB9KSAvLyBbIWNvZGUgZm9jdXNdXG4gKlxuICogLy8gMi4gU2VuZCB0aGUgSlNPTi1SUEMgcmVxdWVzdCB2aWEgSFRUUC5cbiAqIGNvbnN0IGdhcyA9IGF3YWl0IGZldGNoKCdodHRwczovLzEucnBjLnRoaXJkd2ViLmNvbScsIHtcbiAqICAgYm9keTogSlNPTi5zdHJpbmdpZnkocmVxdWVzdCksXG4gKiAgIGhlYWRlcnM6IHtcbiAqICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICogICB9LFxuICogICBtZXRob2Q6ICdQT1NUJyxcbiAqIH0pXG4gKiAgLnRoZW4oKHJlc3BvbnNlKSA9PiByZXNwb25zZS5qc29uKCkpXG4gKiAgLy8gMy4gUGFyc2UgdGhlIEpTT04tUlBDIHJlc3BvbnNlIGludG8gYSB0eXBlLXNhZmUgcmVzdWx0LlxuICogIC50aGVuKChyZXNwb25zZSkgPT4gUnBjUmVzcG9uc2UucGFyc2UocmVzcG9uc2UsIHsgcmVxdWVzdCB9KSlcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSBvcHRpb25zIC0gSlNPTi1SUEMgcmVxdWVzdCBvcHRpb25zLlxuICogQHJldHVybnMgVGhlIGZ1bGx5LWZvcm1lZCBKU09OLVJQQyByZXF1ZXN0IG9iamVjdC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZyb20ob3B0aW9ucykge1xuICAgIHJldHVybiB7XG4gICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgIGpzb25ycGM6ICcyLjAnLFxuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ScGNSZXF1ZXN0LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ox/_esm/core/RpcRequest.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ox/_esm/core/RpcResponse.js":
/*!**************************************************!*\
  !*** ./node_modules/ox/_esm/core/RpcResponse.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseError: () => (/* binding */ BaseError),\n/* harmony export */   InternalError: () => (/* binding */ InternalError),\n/* harmony export */   InvalidInputError: () => (/* binding */ InvalidInputError),\n/* harmony export */   InvalidParamsError: () => (/* binding */ InvalidParamsError),\n/* harmony export */   InvalidRequestError: () => (/* binding */ InvalidRequestError),\n/* harmony export */   LimitExceededError: () => (/* binding */ LimitExceededError),\n/* harmony export */   MethodNotFoundError: () => (/* binding */ MethodNotFoundError),\n/* harmony export */   MethodNotSupportedError: () => (/* binding */ MethodNotSupportedError),\n/* harmony export */   ParseError: () => (/* binding */ ParseError),\n/* harmony export */   ResourceNotFoundError: () => (/* binding */ ResourceNotFoundError),\n/* harmony export */   ResourceUnavailableError: () => (/* binding */ ResourceUnavailableError),\n/* harmony export */   TransactionRejectedError: () => (/* binding */ TransactionRejectedError),\n/* harmony export */   VersionNotSupportedError: () => (/* binding */ VersionNotSupportedError),\n/* harmony export */   from: () => (/* binding */ from),\n/* harmony export */   parse: () => (/* binding */ parse),\n/* harmony export */   parseError: () => (/* binding */ parseError)\n/* harmony export */ });\n// eslint-disable-next-line jsdoc/require-jsdoc\nfunction from(response, options = {}) {\n    const { request } = options;\n    return {\n        ...response,\n        id: response.id ?? request?.id,\n        jsonrpc: response.jsonrpc ?? request.jsonrpc,\n    };\n}\n/**\n * A type-safe interface to parse a JSON-RPC response object as per the [JSON-RPC 2.0 specification](https://www.jsonrpc.org/specification#response_object), and extract the result.\n *\n * @example\n * ```ts twoslash\n * import { RpcRequest, RpcResponse } from 'ox'\n *\n * // 1. Create a request store.\n * const store = RpcRequest.createStore()\n *\n * // 2. Get a request object.\n * const request = store.prepare({\n *   method: 'eth_getBlockByNumber',\n *   params: ['0x1', false],\n * })\n *\n * // 3. Send the JSON-RPC request via HTTP.\n * const block = await fetch('https://1.rpc.thirdweb.com', {\n *   body: JSON.stringify(request),\n *   headers: {\n *     'Content-Type': 'application/json',\n *   },\n *   method: 'POST',\n * })\n *  .then((response) => response.json())\n *  // 4. Parse the JSON-RPC response into a type-safe result. // [!code focus]\n *  .then((response) => RpcResponse.parse(response, { request })) // [!code focus]\n *\n * block // [!code focus]\n * // ^?\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n * ```\n *\n * :::tip\n *\n * If you don't need the return type, you can omit the options entirely.\n *\n * ```ts twoslash\n * // @noErrors\n * import { RpcResponse } from 'ox'\n *\n * const block = await fetch('https://1.rpc.thirdweb.com', {})\n *  .then((response) => response.json())\n *  .then((response) => RpcResponse.parse(response, { request })) // [!code --]\n *  .then(RpcResponse.parse) // [!code ++]\n * ```\n * :::\n *\n * @example\n * ### Raw Mode\n *\n * If `raw` is `true`, the response will be returned as an object with `result` and `error` properties instead of returning the `result` directly and throwing errors.\n *\n * ```ts twoslash\n * import { RpcRequest, RpcResponse } from 'ox'\n *\n * const store = RpcRequest.createStore()\n *\n * const request = store.prepare({\n *   method: 'eth_blockNumber',\n * })\n *\n * const response = RpcResponse.parse({}, {\n *   request,\n *   raw: true, // [!code hl]\n * })\n *\n * response.result\n * //       ^?\n *\n *\n * response.error\n * //       ^?\n *\n *\n * ```\n *\n * @param response - Opaque JSON-RPC response object.\n * @param options - Parsing options.\n * @returns Typed JSON-RPC result, or response object (if `raw` is `true`).\n */\nfunction parse(response, options = {}) {\n    const { raw = false } = options;\n    const response_ = response;\n    if (raw)\n        return response;\n    if (response_.error)\n        throw parseError(response_.error);\n    return response_.result;\n}\n/**\n * Parses an error into a RPC Error instance.\n *\n * @example\n * ```ts twoslash\n * import { RpcResponse } from 'ox'\n *\n * const error = RpcResponse.parseError({ code: -32000, message: 'unsupported method' })\n *\n * error\n * // ^?\n *\n * ```\n *\n * @param error - Error.\n * @returns RPC Error instance.\n */\nfunction parseError(error) {\n    const error_ = error;\n    if (error_ instanceof Error && !('code' in error_))\n        return new InternalError({\n            cause: error_,\n            data: error_,\n            message: error_.message,\n        });\n    const { code } = error_;\n    if (code === InternalError.code)\n        return new InternalError(error_);\n    if (code === InvalidInputError.code)\n        return new InvalidInputError(error_);\n    if (code === InvalidParamsError.code)\n        return new InvalidParamsError(error_);\n    if (code === InvalidRequestError.code)\n        return new InvalidRequestError(error_);\n    if (code === LimitExceededError.code)\n        return new LimitExceededError(error_);\n    if (code === MethodNotFoundError.code)\n        return new MethodNotFoundError(error_);\n    if (code === MethodNotSupportedError.code)\n        return new MethodNotSupportedError(error_);\n    if (code === ParseError.code)\n        return new ParseError(error_);\n    if (code === ResourceNotFoundError.code)\n        return new ResourceNotFoundError(error_);\n    if (code === ResourceUnavailableError.code)\n        return new ResourceUnavailableError(error_);\n    if (code === TransactionRejectedError.code)\n        return new TransactionRejectedError(error_);\n    if (code === VersionNotSupportedError.code)\n        return new VersionNotSupportedError(error_);\n    return new InternalError({\n        cause: error_ instanceof Error ? error_ : undefined,\n        data: error_,\n        message: error_.message,\n    });\n}\n/** Thrown when a JSON-RPC error has occurred. */\nclass BaseError extends Error {\n    constructor(errorObject) {\n        const { cause, code, message, data } = errorObject;\n        super(message, { cause });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'RpcResponse.BaseError'\n        });\n        Object.defineProperty(this, \"cause\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"code\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"data\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.cause = cause;\n        this.code = code;\n        this.data = data;\n    }\n}\n/** Thrown when the input to a JSON-RPC method is invalid. */\nclass InvalidInputError extends BaseError {\n    constructor(parameters = {}) {\n        super({\n            code: InvalidInputError.code,\n            data: parameters.data,\n            message: parameters.message ?? 'Missing or invalid parameters.',\n        });\n        Object.defineProperty(this, \"code\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: -32000\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'RpcResponse.InvalidInputError'\n        });\n    }\n}\nObject.defineProperty(InvalidInputError, \"code\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: -32000\n});\n/** Thrown when a JSON-RPC resource is not found. */\nclass ResourceNotFoundError extends BaseError {\n    constructor(parameters = {}) {\n        super({\n            code: ResourceNotFoundError.code,\n            data: parameters.data,\n            message: parameters.message ?? 'Requested resource not found.',\n        });\n        Object.defineProperty(this, \"code\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: -32001\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'RpcResponse.ResourceNotFoundError'\n        });\n    }\n}\nObject.defineProperty(ResourceNotFoundError, \"code\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: -32001\n});\n/** Thrown when a JSON-RPC resource is unavailable. */\nclass ResourceUnavailableError extends BaseError {\n    constructor(parameters = {}) {\n        super({\n            code: ResourceUnavailableError.code,\n            data: parameters.data,\n            message: parameters.message ?? 'Requested resource not available.',\n        });\n        Object.defineProperty(this, \"code\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: -32002\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'RpcResponse.ResourceUnavailableError'\n        });\n    }\n}\nObject.defineProperty(ResourceUnavailableError, \"code\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: -32002\n});\n/** Thrown when a JSON-RPC transaction is rejected. */\nclass TransactionRejectedError extends BaseError {\n    constructor(parameters = {}) {\n        super({\n            code: TransactionRejectedError.code,\n            data: parameters.data,\n            message: parameters.message ?? 'Transaction creation failed.',\n        });\n        Object.defineProperty(this, \"code\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: -32003\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'RpcResponse.TransactionRejectedError'\n        });\n    }\n}\nObject.defineProperty(TransactionRejectedError, \"code\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: -32003\n});\n/** Thrown when a JSON-RPC method is not supported. */\nclass MethodNotSupportedError extends BaseError {\n    constructor(parameters = {}) {\n        super({\n            code: MethodNotSupportedError.code,\n            data: parameters.data,\n            message: parameters.message ?? 'Method is not implemented.',\n        });\n        Object.defineProperty(this, \"code\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: -32004\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'RpcResponse.MethodNotSupportedError'\n        });\n    }\n}\nObject.defineProperty(MethodNotSupportedError, \"code\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: -32004\n});\n/** Thrown when a rate-limit is exceeded. */\nclass LimitExceededError extends BaseError {\n    constructor(parameters = {}) {\n        super({\n            code: LimitExceededError.code,\n            data: parameters.data,\n            message: parameters.message ?? 'Rate limit exceeded.',\n        });\n        Object.defineProperty(this, \"code\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: -32005\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'RpcResponse.LimitExceededError'\n        });\n    }\n}\nObject.defineProperty(LimitExceededError, \"code\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: -32005\n});\n/** Thrown when a JSON-RPC version is not supported. */\nclass VersionNotSupportedError extends BaseError {\n    constructor(parameters = {}) {\n        super({\n            code: VersionNotSupportedError.code,\n            data: parameters.data,\n            message: parameters.message ?? 'JSON-RPC version not supported.',\n        });\n        Object.defineProperty(this, \"code\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: -32006\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'RpcResponse.VersionNotSupportedError'\n        });\n    }\n}\nObject.defineProperty(VersionNotSupportedError, \"code\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: -32006\n});\n/** Thrown when a JSON-RPC request is invalid. */\nclass InvalidRequestError extends BaseError {\n    constructor(parameters = {}) {\n        super({\n            code: InvalidRequestError.code,\n            data: parameters.data,\n            message: parameters.message ?? 'Input is not a valid JSON-RPC request.',\n        });\n        Object.defineProperty(this, \"code\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: -32600\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'RpcResponse.InvalidRequestError'\n        });\n    }\n}\nObject.defineProperty(InvalidRequestError, \"code\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: -32600\n});\n/** Thrown when a JSON-RPC method is not found. */\nclass MethodNotFoundError extends BaseError {\n    constructor(parameters = {}) {\n        super({\n            code: MethodNotFoundError.code,\n            data: parameters.data,\n            message: parameters.message ?? 'Method does not exist.',\n        });\n        Object.defineProperty(this, \"code\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: -32601\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'RpcResponse.MethodNotFoundError'\n        });\n    }\n}\nObject.defineProperty(MethodNotFoundError, \"code\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: -32601\n});\n/** Thrown when the parameters to a JSON-RPC method are invalid. */\nclass InvalidParamsError extends BaseError {\n    constructor(parameters = {}) {\n        super({\n            code: InvalidParamsError.code,\n            data: parameters.data,\n            message: parameters.message ?? 'Invalid method parameters.',\n        });\n        Object.defineProperty(this, \"code\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: -32602\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'RpcResponse.InvalidParamsError'\n        });\n    }\n}\nObject.defineProperty(InvalidParamsError, \"code\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: -32602\n});\n/** Thrown when an internal JSON-RPC error has occurred. */\nclass InternalError extends BaseError {\n    constructor(parameters = {}) {\n        super({\n            cause: parameters.cause,\n            code: InternalError.code,\n            data: parameters.data,\n            message: parameters.message ?? 'Internal JSON-RPC error.',\n        });\n        Object.defineProperty(this, \"code\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: -32603\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'RpcResponse.InternalError'\n        });\n    }\n}\nObject.defineProperty(InternalError, \"code\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: -32603\n});\n/** Thrown when a JSON-RPC response is invalid. */\nclass ParseError extends BaseError {\n    constructor(parameters = {}) {\n        super({\n            code: ParseError.code,\n            data: parameters.data,\n            message: parameters.message ?? 'Failed to parse JSON-RPC response.',\n        });\n        Object.defineProperty(this, \"code\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: -32700\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'RpcResponse.ParseError'\n        });\n    }\n}\nObject.defineProperty(ParseError, \"code\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: -32700\n});\n//# sourceMappingURL=RpcResponse.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ox/_esm/core/RpcResponse.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ox/_esm/core/RpcSchema.js":
/*!************************************************!*\
  !*** ./node_modules/ox/_esm/core/RpcSchema.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   from: () => (/* binding */ from)\n/* harmony export */ });\n/**\n * Instantiates a statically typed Schema. This is a runtime-noop function, and is purposed\n * to be used as a type-level tag to be used with {@link ox#Provider.(from:function)} or\n * {@link ox#RpcTransport.(fromHttp:function)}.\n *\n * @example\n * ### Using with `Provider.from`\n *\n * ```ts twoslash\n * // @noErrors\n * import 'ox/window'\n * import { Provider, RpcSchema } from 'ox'\n *\n * const schema = RpcSchema.from<\n *   | RpcSchema.Default\n *   | {\n *       Request: {\n *         method: 'abe_foo',\n *         params: [id: number],\n *       }\n *       ReturnType: string\n *     }\n *   | {\n *       Request: {\n *         method: 'abe_bar',\n *         params: [id: string],\n *       }\n *       ReturnType: string\n *     }\n * >()\n *\n * const provider = Provider.from(window.ethereum, { schema })\n *\n * const blockNumber = await provider.request({ method: 'e' })\n * //                                                    ^|\n *\n *\n *\n *\n *\n * ```\n */\nfunction from() {\n    return null;\n}\n//# sourceMappingURL=RpcSchema.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9veC9fZXNtL2NvcmUvUnBjU2NoZW1hLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0EsbURBQW1ELG1DQUFtQztBQUN0RixJQUFJLDBDQUEwQztBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksc0JBQXNCO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscURBQXFELFFBQVE7QUFDN0Q7QUFDQSxnREFBZ0QsYUFBYTtBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcY2hhbmRcXERvd25sb2Fkc1xcam9obndyaWNoa2lkaW50b3JpenpcXG5vZGVfbW9kdWxlc1xcb3hcXF9lc21cXGNvcmVcXFJwY1NjaGVtYS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEluc3RhbnRpYXRlcyBhIHN0YXRpY2FsbHkgdHlwZWQgU2NoZW1hLiBUaGlzIGlzIGEgcnVudGltZS1ub29wIGZ1bmN0aW9uLCBhbmQgaXMgcHVycG9zZWRcbiAqIHRvIGJlIHVzZWQgYXMgYSB0eXBlLWxldmVsIHRhZyB0byBiZSB1c2VkIHdpdGgge0BsaW5rIG94I1Byb3ZpZGVyLihmcm9tOmZ1bmN0aW9uKX0gb3JcbiAqIHtAbGluayBveCNScGNUcmFuc3BvcnQuKGZyb21IdHRwOmZ1bmN0aW9uKX0uXG4gKlxuICogQGV4YW1wbGVcbiAqICMjIyBVc2luZyB3aXRoIGBQcm92aWRlci5mcm9tYFxuICpcbiAqIGBgYHRzIHR3b3NsYXNoXG4gKiAvLyBAbm9FcnJvcnNcbiAqIGltcG9ydCAnb3gvd2luZG93J1xuICogaW1wb3J0IHsgUHJvdmlkZXIsIFJwY1NjaGVtYSB9IGZyb20gJ294J1xuICpcbiAqIGNvbnN0IHNjaGVtYSA9IFJwY1NjaGVtYS5mcm9tPFxuICogICB8IFJwY1NjaGVtYS5EZWZhdWx0XG4gKiAgIHwge1xuICogICAgICAgUmVxdWVzdDoge1xuICogICAgICAgICBtZXRob2Q6ICdhYmVfZm9vJyxcbiAqICAgICAgICAgcGFyYW1zOiBbaWQ6IG51bWJlcl0sXG4gKiAgICAgICB9XG4gKiAgICAgICBSZXR1cm5UeXBlOiBzdHJpbmdcbiAqICAgICB9XG4gKiAgIHwge1xuICogICAgICAgUmVxdWVzdDoge1xuICogICAgICAgICBtZXRob2Q6ICdhYmVfYmFyJyxcbiAqICAgICAgICAgcGFyYW1zOiBbaWQ6IHN0cmluZ10sXG4gKiAgICAgICB9XG4gKiAgICAgICBSZXR1cm5UeXBlOiBzdHJpbmdcbiAqICAgICB9XG4gKiA+KClcbiAqXG4gKiBjb25zdCBwcm92aWRlciA9IFByb3ZpZGVyLmZyb20od2luZG93LmV0aGVyZXVtLCB7IHNjaGVtYSB9KVxuICpcbiAqIGNvbnN0IGJsb2NrTnVtYmVyID0gYXdhaXQgcHJvdmlkZXIucmVxdWVzdCh7IG1ldGhvZDogJ2UnIH0pXG4gKiAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBefFxuICpcbiAqXG4gKlxuICpcbiAqXG4gKiBgYGBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZyb20oKSB7XG4gICAgcmV0dXJuIG51bGw7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ScGNTY2hlbWEuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ox/_esm/core/RpcSchema.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ox/_esm/core/RpcTransport.js":
/*!***************************************************!*\
  !*** ./node_modules/ox/_esm/core/RpcTransport.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HttpError: () => (/* binding */ HttpError),\n/* harmony export */   MalformedResponseError: () => (/* binding */ MalformedResponseError),\n/* harmony export */   fromHttp: () => (/* binding */ fromHttp)\n/* harmony export */ });\n/* harmony import */ var _Errors_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Errors.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Errors.js\");\n/* harmony import */ var _internal_errors_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./internal/errors.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/internal/errors.js\");\n/* harmony import */ var _internal_promise_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internal/promise.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/internal/promise.js\");\n/* harmony import */ var _internal_rpcTransport_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/rpcTransport.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/internal/rpcTransport.js\");\n\n\n\n\n/**\n * Creates a HTTP JSON-RPC Transport from a URL.\n *\n * @example\n * ```ts twoslash\n * import { RpcTransport } from 'ox'\n *\n * const transport = RpcTransport.fromHttp('https://1.rpc.thirdweb.com')\n *\n * const blockNumber = await transport.request({ method: 'eth_blockNumber' })\n * // @log: '0x1a2b3c'\n * ```\n *\n * @param url - URL to perform the JSON-RPC requests to.\n * @param options - Transport options.\n * @returns HTTP JSON-RPC Transport.\n */\nfunction fromHttp(url, options = {}) {\n    return _internal_rpcTransport_js__WEBPACK_IMPORTED_MODULE_0__.create({\n        async request(body_, options_) {\n            const { fetchFn = options.fetchFn ?? fetch, fetchOptions: fetchOptions_ = options.fetchOptions, timeout = options.timeout ?? 10_000, } = options_;\n            const body = JSON.stringify(body_);\n            const fetchOptions = typeof fetchOptions_ === 'function'\n                ? await fetchOptions_(body_)\n                : fetchOptions_;\n            const response = await _internal_promise_js__WEBPACK_IMPORTED_MODULE_1__.withTimeout(({ signal }) => {\n                const init = {\n                    ...fetchOptions,\n                    body,\n                    headers: {\n                        'Content-Type': 'application/json',\n                        ...fetchOptions?.headers,\n                    },\n                    method: fetchOptions?.method ?? 'POST',\n                    signal: fetchOptions?.signal ?? (timeout > 0 ? signal : null),\n                };\n                const request = new Request(url, init);\n                return fetchFn(request);\n            }, {\n                timeout,\n                signal: true,\n            });\n            const data = await (async () => {\n                if (response.headers.get('Content-Type')?.startsWith('application/json'))\n                    return response.json();\n                return response.text().then((data) => {\n                    try {\n                        return JSON.parse(data || '{}');\n                    }\n                    catch (err) {\n                        if (response.ok)\n                            throw new MalformedResponseError({\n                                response: data,\n                            });\n                        return { error: data };\n                    }\n                });\n            })();\n            if (!response.ok)\n                throw new HttpError({\n                    body,\n                    details: JSON.stringify(data.error) ?? response.statusText,\n                    response,\n                    url,\n                });\n            return data;\n        },\n    }, { raw: options.raw });\n}\n/** Thrown when a HTTP request fails. */\nclass HttpError extends _Errors_js__WEBPACK_IMPORTED_MODULE_2__.BaseError {\n    constructor({ body, details, response, url, }) {\n        super('HTTP request failed.', {\n            details,\n            metaMessages: [\n                `Status: ${response.status}`,\n                `URL: ${(0,_internal_errors_js__WEBPACK_IMPORTED_MODULE_3__.getUrl)(url)}`,\n                body ? `Body: ${JSON.stringify(body)}` : undefined,\n            ],\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'RpcTransport.HttpError'\n        });\n    }\n}\n/** Thrown when a HTTP response is malformed. */\nclass MalformedResponseError extends _Errors_js__WEBPACK_IMPORTED_MODULE_2__.BaseError {\n    constructor({ response }) {\n        super('HTTP Response could not be parsed as JSON.', {\n            metaMessages: [`Response: ${response}`],\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'RpcTransport.MalformedResponseError'\n        });\n    }\n}\n//# sourceMappingURL=RpcTransport.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9veC9fZXNtL2NvcmUvUnBjVHJhbnNwb3J0LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBc0M7QUFDUTtBQUNHO0FBQ007QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksZUFBZTtBQUMzQjtBQUNBO0FBQ0E7QUFDQSxpREFBaUQsMkJBQTJCO0FBQzVFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sbUNBQW1DO0FBQzFDLFdBQVcsNkRBQWU7QUFDMUI7QUFDQSxvQkFBb0IsK0hBQStIO0FBQ25KO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLDZEQUFtQixJQUFJLFFBQVE7QUFDbEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscURBQXFEO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkI7QUFDN0IsaUNBQWlDO0FBQ2pDO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQSxTQUFTO0FBQ1QsS0FBSyxJQUFJLGtCQUFrQjtBQUMzQjtBQUNBO0FBQ08sd0JBQXdCLGlEQUFnQjtBQUMvQyxrQkFBa0IsK0JBQStCO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQixnQkFBZ0I7QUFDM0Msd0JBQXdCLDJEQUFNLE1BQU07QUFDcEMsZ0NBQWdDLHFCQUFxQjtBQUNyRDtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNPLHFDQUFxQyxpREFBZ0I7QUFDNUQsa0JBQWtCLFVBQVU7QUFDNUI7QUFDQSx3Q0FBd0MsU0FBUztBQUNqRCxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcY2hhbmRcXERvd25sb2Fkc1xcam9obndyaWNoa2lkaW50b3JpenpcXG5vZGVfbW9kdWxlc1xcb3hcXF9lc21cXGNvcmVcXFJwY1RyYW5zcG9ydC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBFcnJvcnMgZnJvbSAnLi9FcnJvcnMuanMnO1xuaW1wb3J0IHsgZ2V0VXJsIH0gZnJvbSAnLi9pbnRlcm5hbC9lcnJvcnMuanMnO1xuaW1wb3J0ICogYXMgcHJvbWlzZSBmcm9tICcuL2ludGVybmFsL3Byb21pc2UuanMnO1xuaW1wb3J0ICogYXMgaW50ZXJuYWwgZnJvbSAnLi9pbnRlcm5hbC9ycGNUcmFuc3BvcnQuanMnO1xuLyoqXG4gKiBDcmVhdGVzIGEgSFRUUCBKU09OLVJQQyBUcmFuc3BvcnQgZnJvbSBhIFVSTC5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgdHMgdHdvc2xhc2hcbiAqIGltcG9ydCB7IFJwY1RyYW5zcG9ydCB9IGZyb20gJ294J1xuICpcbiAqIGNvbnN0IHRyYW5zcG9ydCA9IFJwY1RyYW5zcG9ydC5mcm9tSHR0cCgnaHR0cHM6Ly8xLnJwYy50aGlyZHdlYi5jb20nKVxuICpcbiAqIGNvbnN0IGJsb2NrTnVtYmVyID0gYXdhaXQgdHJhbnNwb3J0LnJlcXVlc3QoeyBtZXRob2Q6ICdldGhfYmxvY2tOdW1iZXInIH0pXG4gKiAvLyBAbG9nOiAnMHgxYTJiM2MnXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gdXJsIC0gVVJMIHRvIHBlcmZvcm0gdGhlIEpTT04tUlBDIHJlcXVlc3RzIHRvLlxuICogQHBhcmFtIG9wdGlvbnMgLSBUcmFuc3BvcnQgb3B0aW9ucy5cbiAqIEByZXR1cm5zIEhUVFAgSlNPTi1SUEMgVHJhbnNwb3J0LlxuICovXG5leHBvcnQgZnVuY3Rpb24gZnJvbUh0dHAodXJsLCBvcHRpb25zID0ge30pIHtcbiAgICByZXR1cm4gaW50ZXJuYWwuY3JlYXRlKHtcbiAgICAgICAgYXN5bmMgcmVxdWVzdChib2R5Xywgb3B0aW9uc18pIHtcbiAgICAgICAgICAgIGNvbnN0IHsgZmV0Y2hGbiA9IG9wdGlvbnMuZmV0Y2hGbiA/PyBmZXRjaCwgZmV0Y2hPcHRpb25zOiBmZXRjaE9wdGlvbnNfID0gb3B0aW9ucy5mZXRjaE9wdGlvbnMsIHRpbWVvdXQgPSBvcHRpb25zLnRpbWVvdXQgPz8gMTBfMDAwLCB9ID0gb3B0aW9uc187XG4gICAgICAgICAgICBjb25zdCBib2R5ID0gSlNPTi5zdHJpbmdpZnkoYm9keV8pO1xuICAgICAgICAgICAgY29uc3QgZmV0Y2hPcHRpb25zID0gdHlwZW9mIGZldGNoT3B0aW9uc18gPT09ICdmdW5jdGlvbidcbiAgICAgICAgICAgICAgICA/IGF3YWl0IGZldGNoT3B0aW9uc18oYm9keV8pXG4gICAgICAgICAgICAgICAgOiBmZXRjaE9wdGlvbnNfO1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBwcm9taXNlLndpdGhUaW1lb3V0KCh7IHNpZ25hbCB9KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgaW5pdCA9IHtcbiAgICAgICAgICAgICAgICAgICAgLi4uZmV0Y2hPcHRpb25zLFxuICAgICAgICAgICAgICAgICAgICBib2R5LFxuICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgICAgICAgICAgICAgLi4uZmV0Y2hPcHRpb25zPy5oZWFkZXJzLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBtZXRob2Q6IGZldGNoT3B0aW9ucz8ubWV0aG9kID8/ICdQT1NUJyxcbiAgICAgICAgICAgICAgICAgICAgc2lnbmFsOiBmZXRjaE9wdGlvbnM/LnNpZ25hbCA/PyAodGltZW91dCA+IDAgPyBzaWduYWwgOiBudWxsKSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlcXVlc3QgPSBuZXcgUmVxdWVzdCh1cmwsIGluaXQpO1xuICAgICAgICAgICAgICAgIHJldHVybiBmZXRjaEZuKHJlcXVlc3QpO1xuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIHRpbWVvdXQsXG4gICAgICAgICAgICAgICAgc2lnbmFsOiB0cnVlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UuaGVhZGVycy5nZXQoJ0NvbnRlbnQtVHlwZScpPy5zdGFydHNXaXRoKCdhcHBsaWNhdGlvbi9qc29uJykpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLnRleHQoKS50aGVuKChkYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShkYXRhIHx8ICd7fScpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5vaylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgTWFsZm9ybWVkUmVzcG9uc2VFcnJvcih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlOiBkYXRhLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgZXJyb3I6IGRhdGEgfTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSkoKTtcbiAgICAgICAgICAgIGlmICghcmVzcG9uc2Uub2spXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEh0dHBFcnJvcih7XG4gICAgICAgICAgICAgICAgICAgIGJvZHksXG4gICAgICAgICAgICAgICAgICAgIGRldGFpbHM6IEpTT04uc3RyaW5naWZ5KGRhdGEuZXJyb3IpID8/IHJlc3BvbnNlLnN0YXR1c1RleHQsXG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlLFxuICAgICAgICAgICAgICAgICAgICB1cmwsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgICAgfSxcbiAgICB9LCB7IHJhdzogb3B0aW9ucy5yYXcgfSk7XG59XG4vKiogVGhyb3duIHdoZW4gYSBIVFRQIHJlcXVlc3QgZmFpbHMuICovXG5leHBvcnQgY2xhc3MgSHR0cEVycm9yIGV4dGVuZHMgRXJyb3JzLkJhc2VFcnJvciB7XG4gICAgY29uc3RydWN0b3IoeyBib2R5LCBkZXRhaWxzLCByZXNwb25zZSwgdXJsLCB9KSB7XG4gICAgICAgIHN1cGVyKCdIVFRQIHJlcXVlc3QgZmFpbGVkLicsIHtcbiAgICAgICAgICAgIGRldGFpbHMsXG4gICAgICAgICAgICBtZXRhTWVzc2FnZXM6IFtcbiAgICAgICAgICAgICAgICBgU3RhdHVzOiAke3Jlc3BvbnNlLnN0YXR1c31gLFxuICAgICAgICAgICAgICAgIGBVUkw6ICR7Z2V0VXJsKHVybCl9YCxcbiAgICAgICAgICAgICAgICBib2R5ID8gYEJvZHk6ICR7SlNPTi5zdHJpbmdpZnkoYm9keSl9YCA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIF0sXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJuYW1lXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiAnUnBjVHJhbnNwb3J0Lkh0dHBFcnJvcidcbiAgICAgICAgfSk7XG4gICAgfVxufVxuLyoqIFRocm93biB3aGVuIGEgSFRUUCByZXNwb25zZSBpcyBtYWxmb3JtZWQuICovXG5leHBvcnQgY2xhc3MgTWFsZm9ybWVkUmVzcG9uc2VFcnJvciBleHRlbmRzIEVycm9ycy5CYXNlRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKHsgcmVzcG9uc2UgfSkge1xuICAgICAgICBzdXBlcignSFRUUCBSZXNwb25zZSBjb3VsZCBub3QgYmUgcGFyc2VkIGFzIEpTT04uJywge1xuICAgICAgICAgICAgbWV0YU1lc3NhZ2VzOiBbYFJlc3BvbnNlOiAke3Jlc3BvbnNlfWBdLFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwibmFtZVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogJ1JwY1RyYW5zcG9ydC5NYWxmb3JtZWRSZXNwb25zZUVycm9yJ1xuICAgICAgICB9KTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ScGNUcmFuc3BvcnQuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ox/_esm/core/RpcTransport.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ox/_esm/core/Secp256k1.js":
/*!************************************************!*\
  !*** ./node_modules/ox/_esm/core/Secp256k1.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getPublicKey: () => (/* binding */ getPublicKey),\n/* harmony export */   noble: () => (/* binding */ noble),\n/* harmony export */   randomPrivateKey: () => (/* binding */ randomPrivateKey),\n/* harmony export */   recoverAddress: () => (/* binding */ recoverAddress),\n/* harmony export */   recoverPublicKey: () => (/* binding */ recoverPublicKey),\n/* harmony export */   sign: () => (/* binding */ sign),\n/* harmony export */   verify: () => (/* binding */ verify)\n/* harmony export */ });\n/* harmony import */ var _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @noble/curves/secp256k1 */ \"(pages-dir-browser)/./node_modules/@noble/curves/esm/secp256k1.js\");\n/* harmony import */ var _Address_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Address.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Address.js\");\n/* harmony import */ var _Bytes_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Bytes.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Bytes.js\");\n/* harmony import */ var _Hex_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Hex.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Hex.js\");\n/* harmony import */ var _PublicKey_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./PublicKey.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/PublicKey.js\");\n/* harmony import */ var _internal_entropy_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./internal/entropy.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/internal/entropy.js\");\n\n\n\n\n\n\n/** Re-export of noble/curves secp256k1 utilities. */\nconst noble = _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_0__.secp256k1;\n/**\n * Computes the secp256k1 ECDSA public key from a provided private key.\n *\n * @example\n * ```ts twoslash\n * import { Secp256k1 } from 'ox'\n *\n * const publicKey = Secp256k1.getPublicKey({ privateKey: '0x...' })\n * ```\n *\n * @param options - The options to compute the public key.\n * @returns The computed public key.\n */\nfunction getPublicKey(options) {\n    const { privateKey } = options;\n    const point = _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_0__.secp256k1.ProjectivePoint.fromPrivateKey(_Hex_js__WEBPACK_IMPORTED_MODULE_1__.from(privateKey).slice(2));\n    return _PublicKey_js__WEBPACK_IMPORTED_MODULE_2__.from(point);\n}\n/**\n * Generates a random ECDSA private key on the secp256k1 curve.\n *\n * @example\n * ```ts twoslash\n * import { Secp256k1 } from 'ox'\n *\n * const privateKey = Secp256k1.randomPrivateKey()\n * ```\n *\n * @param options - The options to generate the private key.\n * @returns The generated private key.\n */\nfunction randomPrivateKey(options = {}) {\n    const { as = 'Hex' } = options;\n    const bytes = _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_0__.secp256k1.utils.randomPrivateKey();\n    if (as === 'Hex')\n        return _Hex_js__WEBPACK_IMPORTED_MODULE_1__.fromBytes(bytes);\n    return bytes;\n}\n/**\n * Recovers the signing address from the signed payload and signature.\n *\n * @example\n * ```ts twoslash\n * import { Secp256k1 } from 'ox'\n *\n * const signature = Secp256k1.sign({ payload: '0xdeadbeef', privateKey: '0x...' })\n *\n * const address = Secp256k1.recoverAddress({ // [!code focus]\n *   payload: '0xdeadbeef', // [!code focus]\n *   signature, // [!code focus]\n * }) // [!code focus]\n * ```\n *\n * @param options - The recovery options.\n * @returns The recovered address.\n */\nfunction recoverAddress(options) {\n    return _Address_js__WEBPACK_IMPORTED_MODULE_3__.fromPublicKey(recoverPublicKey(options));\n}\n/**\n * Recovers the signing public key from the signed payload and signature.\n *\n * @example\n * ```ts twoslash\n * import { Secp256k1 } from 'ox'\n *\n * const signature = Secp256k1.sign({ payload: '0xdeadbeef', privateKey: '0x...' })\n *\n * const publicKey = Secp256k1.recoverPublicKey({ // [!code focus]\n *   payload: '0xdeadbeef', // [!code focus]\n *   signature, // [!code focus]\n * }) // [!code focus]\n * ```\n *\n * @param options - The recovery options.\n * @returns The recovered public key.\n */\nfunction recoverPublicKey(options) {\n    const { payload, signature } = options;\n    const { r, s, yParity } = signature;\n    const signature_ = new _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_0__.secp256k1.Signature(BigInt(r), BigInt(s)).addRecoveryBit(yParity);\n    const point = signature_.recoverPublicKey(_Hex_js__WEBPACK_IMPORTED_MODULE_1__.from(payload).substring(2));\n    return _PublicKey_js__WEBPACK_IMPORTED_MODULE_2__.from(point);\n}\n/**\n * Signs the payload with the provided private key.\n *\n * @example\n * ```ts twoslash\n * import { Secp256k1 } from 'ox'\n *\n * const signature = Secp256k1.sign({ // [!code focus]\n *   payload: '0xdeadbeef', // [!code focus]\n *   privateKey: '0x...' // [!code focus]\n * }) // [!code focus]\n * ```\n *\n * @param options - The signing options.\n * @returns The ECDSA {@link ox#Signature.Signature}.\n */\nfunction sign(options) {\n    const { extraEntropy = _internal_entropy_js__WEBPACK_IMPORTED_MODULE_4__.extraEntropy, hash, payload, privateKey, } = options;\n    const { r, s, recovery } = _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_0__.secp256k1.sign(_Bytes_js__WEBPACK_IMPORTED_MODULE_5__.from(payload), _Bytes_js__WEBPACK_IMPORTED_MODULE_5__.from(privateKey), {\n        extraEntropy: typeof extraEntropy === 'boolean'\n            ? extraEntropy\n            : _Hex_js__WEBPACK_IMPORTED_MODULE_1__.from(extraEntropy).slice(2),\n        lowS: true,\n        ...(hash ? { prehash: true } : {}),\n    });\n    return {\n        r,\n        s,\n        yParity: recovery,\n    };\n}\n/**\n * Verifies a payload was signed by the provided address.\n *\n * @example\n * ### Verify with Ethereum Address\n *\n * ```ts twoslash\n * import { Secp256k1 } from 'ox'\n *\n * const signature = Secp256k1.sign({ payload: '0xdeadbeef', privateKey: '0x...' })\n *\n * const verified = Secp256k1.verify({ // [!code focus]\n *   address: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266', // [!code focus]\n *   payload: '0xdeadbeef', // [!code focus]\n *   signature, // [!code focus]\n * }) // [!code focus]\n * ```\n *\n * @example\n * ### Verify with Public Key\n *\n * ```ts twoslash\n * import { Secp256k1 } from 'ox'\n *\n * const privateKey = '0x...'\n * const publicKey = Secp256k1.getPublicKey({ privateKey })\n * const signature = Secp256k1.sign({ payload: '0xdeadbeef', privateKey })\n *\n * const verified = Secp256k1.verify({ // [!code focus]\n *   publicKey, // [!code focus]\n *   payload: '0xdeadbeef', // [!code focus]\n *   signature, // [!code focus]\n * }) // [!code focus]\n * ```\n *\n * @param options - The verification options.\n * @returns Whether the payload was signed by the provided address.\n */\nfunction verify(options) {\n    const { address, hash, payload, publicKey, signature } = options;\n    if (address)\n        return _Address_js__WEBPACK_IMPORTED_MODULE_3__.isEqual(address, recoverAddress({ payload, signature }));\n    return _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_0__.secp256k1.verify(signature, _Bytes_js__WEBPACK_IMPORTED_MODULE_5__.from(payload), _PublicKey_js__WEBPACK_IMPORTED_MODULE_2__.toBytes(publicKey), ...(hash ? [{ prehash: true, lowS: true }] : []));\n}\n//# sourceMappingURL=Secp256k1.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9veC9fZXNtL2NvcmUvU2VjcDI1NmsxLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBb0Q7QUFDWjtBQUNKO0FBQ0o7QUFDWTtBQUNLO0FBQ2pEO0FBQ08sY0FBYyw4REFBUztBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxZQUFZO0FBQ3hCO0FBQ0EsOENBQThDLHFCQUFxQjtBQUNuRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCxZQUFZLGFBQWE7QUFDekIsa0JBQWtCLDhEQUFTLGdDQUFnQyx5Q0FBUTtBQUNuRSxXQUFXLCtDQUFjO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksWUFBWTtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLHNDQUFzQztBQUM3QyxZQUFZLGFBQWE7QUFDekIsa0JBQWtCLDhEQUFTO0FBQzNCO0FBQ0EsZUFBZSw4Q0FBYTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksWUFBWTtBQUN4QjtBQUNBLHNDQUFzQyw0Q0FBNEM7QUFDbEY7QUFDQSw4Q0FBOEM7QUFDOUM7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCxXQUFXLHNEQUFxQjtBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLFlBQVk7QUFDeEI7QUFDQSxzQ0FBc0MsNENBQTRDO0FBQ2xGO0FBQ0Esa0RBQWtEO0FBQ2xEO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AsWUFBWSxxQkFBcUI7QUFDakMsWUFBWSxnQkFBZ0I7QUFDNUIsMkJBQTJCLDhEQUFTO0FBQ3BDLDhDQUE4Qyx5Q0FBUTtBQUN0RCxXQUFXLCtDQUFjO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksWUFBWTtBQUN4QjtBQUNBLHNDQUFzQztBQUN0QztBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBLHVCQUF1Qiw2QkFBNkI7QUFDcEQ7QUFDTztBQUNQLFlBQVksZUFBZSw4REFBb0IsK0JBQStCO0FBQzlFLFlBQVksaUJBQWlCLEVBQUUsOERBQVMsTUFBTSwyQ0FBVSxXQUFXLDJDQUFVO0FBQzdFO0FBQ0E7QUFDQSxjQUFjLHlDQUFRO0FBQ3RCO0FBQ0EscUJBQXFCLGdCQUFnQixJQUFJO0FBQ3pDLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksWUFBWTtBQUN4QjtBQUNBLHNDQUFzQyw0Q0FBNEM7QUFDbEY7QUFDQSx1Q0FBdUM7QUFDdkM7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksWUFBWTtBQUN4QjtBQUNBO0FBQ0EsOENBQThDLFlBQVk7QUFDMUQsc0NBQXNDLG1DQUFtQztBQUN6RTtBQUNBLHVDQUF1QztBQUN2QztBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AsWUFBWSwrQ0FBK0M7QUFDM0Q7QUFDQSxlQUFlLGdEQUFlLDJCQUEyQixvQkFBb0I7QUFDN0UsV0FBVyw4REFBUyxtQkFBbUIsMkNBQVUsV0FBVyxrREFBaUIsMkJBQTJCLDJCQUEyQjtBQUNuSTtBQUNBIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGNoYW5kXFxEb3dubG9hZHNcXGpvaG53cmljaGtpZGludG9yaXp6XFxub2RlX21vZHVsZXNcXG94XFxfZXNtXFxjb3JlXFxTZWNwMjU2azEuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgc2VjcDI1NmsxIH0gZnJvbSAnQG5vYmxlL2N1cnZlcy9zZWNwMjU2azEnO1xuaW1wb3J0ICogYXMgQWRkcmVzcyBmcm9tICcuL0FkZHJlc3MuanMnO1xuaW1wb3J0ICogYXMgQnl0ZXMgZnJvbSAnLi9CeXRlcy5qcyc7XG5pbXBvcnQgKiBhcyBIZXggZnJvbSAnLi9IZXguanMnO1xuaW1wb3J0ICogYXMgUHVibGljS2V5IGZyb20gJy4vUHVibGljS2V5LmpzJztcbmltcG9ydCAqIGFzIEVudHJvcHkgZnJvbSAnLi9pbnRlcm5hbC9lbnRyb3B5LmpzJztcbi8qKiBSZS1leHBvcnQgb2Ygbm9ibGUvY3VydmVzIHNlY3AyNTZrMSB1dGlsaXRpZXMuICovXG5leHBvcnQgY29uc3Qgbm9ibGUgPSBzZWNwMjU2azE7XG4vKipcbiAqIENvbXB1dGVzIHRoZSBzZWNwMjU2azEgRUNEU0EgcHVibGljIGtleSBmcm9tIGEgcHJvdmlkZWQgcHJpdmF0ZSBrZXkuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHRzIHR3b3NsYXNoXG4gKiBpbXBvcnQgeyBTZWNwMjU2azEgfSBmcm9tICdveCdcbiAqXG4gKiBjb25zdCBwdWJsaWNLZXkgPSBTZWNwMjU2azEuZ2V0UHVibGljS2V5KHsgcHJpdmF0ZUtleTogJzB4Li4uJyB9KVxuICogYGBgXG4gKlxuICogQHBhcmFtIG9wdGlvbnMgLSBUaGUgb3B0aW9ucyB0byBjb21wdXRlIHRoZSBwdWJsaWMga2V5LlxuICogQHJldHVybnMgVGhlIGNvbXB1dGVkIHB1YmxpYyBrZXkuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRQdWJsaWNLZXkob3B0aW9ucykge1xuICAgIGNvbnN0IHsgcHJpdmF0ZUtleSB9ID0gb3B0aW9ucztcbiAgICBjb25zdCBwb2ludCA9IHNlY3AyNTZrMS5Qcm9qZWN0aXZlUG9pbnQuZnJvbVByaXZhdGVLZXkoSGV4LmZyb20ocHJpdmF0ZUtleSkuc2xpY2UoMikpO1xuICAgIHJldHVybiBQdWJsaWNLZXkuZnJvbShwb2ludCk7XG59XG4vKipcbiAqIEdlbmVyYXRlcyBhIHJhbmRvbSBFQ0RTQSBwcml2YXRlIGtleSBvbiB0aGUgc2VjcDI1NmsxIGN1cnZlLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGB0cyB0d29zbGFzaFxuICogaW1wb3J0IHsgU2VjcDI1NmsxIH0gZnJvbSAnb3gnXG4gKlxuICogY29uc3QgcHJpdmF0ZUtleSA9IFNlY3AyNTZrMS5yYW5kb21Qcml2YXRlS2V5KClcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSBvcHRpb25zIC0gVGhlIG9wdGlvbnMgdG8gZ2VuZXJhdGUgdGhlIHByaXZhdGUga2V5LlxuICogQHJldHVybnMgVGhlIGdlbmVyYXRlZCBwcml2YXRlIGtleS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJhbmRvbVByaXZhdGVLZXkob3B0aW9ucyA9IHt9KSB7XG4gICAgY29uc3QgeyBhcyA9ICdIZXgnIH0gPSBvcHRpb25zO1xuICAgIGNvbnN0IGJ5dGVzID0gc2VjcDI1NmsxLnV0aWxzLnJhbmRvbVByaXZhdGVLZXkoKTtcbiAgICBpZiAoYXMgPT09ICdIZXgnKVxuICAgICAgICByZXR1cm4gSGV4LmZyb21CeXRlcyhieXRlcyk7XG4gICAgcmV0dXJuIGJ5dGVzO1xufVxuLyoqXG4gKiBSZWNvdmVycyB0aGUgc2lnbmluZyBhZGRyZXNzIGZyb20gdGhlIHNpZ25lZCBwYXlsb2FkIGFuZCBzaWduYXR1cmUuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHRzIHR3b3NsYXNoXG4gKiBpbXBvcnQgeyBTZWNwMjU2azEgfSBmcm9tICdveCdcbiAqXG4gKiBjb25zdCBzaWduYXR1cmUgPSBTZWNwMjU2azEuc2lnbih7IHBheWxvYWQ6ICcweGRlYWRiZWVmJywgcHJpdmF0ZUtleTogJzB4Li4uJyB9KVxuICpcbiAqIGNvbnN0IGFkZHJlc3MgPSBTZWNwMjU2azEucmVjb3ZlckFkZHJlc3MoeyAvLyBbIWNvZGUgZm9jdXNdXG4gKiAgIHBheWxvYWQ6ICcweGRlYWRiZWVmJywgLy8gWyFjb2RlIGZvY3VzXVxuICogICBzaWduYXR1cmUsIC8vIFshY29kZSBmb2N1c11cbiAqIH0pIC8vIFshY29kZSBmb2N1c11cbiAqIGBgYFxuICpcbiAqIEBwYXJhbSBvcHRpb25zIC0gVGhlIHJlY292ZXJ5IG9wdGlvbnMuXG4gKiBAcmV0dXJucyBUaGUgcmVjb3ZlcmVkIGFkZHJlc3MuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZWNvdmVyQWRkcmVzcyhvcHRpb25zKSB7XG4gICAgcmV0dXJuIEFkZHJlc3MuZnJvbVB1YmxpY0tleShyZWNvdmVyUHVibGljS2V5KG9wdGlvbnMpKTtcbn1cbi8qKlxuICogUmVjb3ZlcnMgdGhlIHNpZ25pbmcgcHVibGljIGtleSBmcm9tIHRoZSBzaWduZWQgcGF5bG9hZCBhbmQgc2lnbmF0dXJlLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGB0cyB0d29zbGFzaFxuICogaW1wb3J0IHsgU2VjcDI1NmsxIH0gZnJvbSAnb3gnXG4gKlxuICogY29uc3Qgc2lnbmF0dXJlID0gU2VjcDI1NmsxLnNpZ24oeyBwYXlsb2FkOiAnMHhkZWFkYmVlZicsIHByaXZhdGVLZXk6ICcweC4uLicgfSlcbiAqXG4gKiBjb25zdCBwdWJsaWNLZXkgPSBTZWNwMjU2azEucmVjb3ZlclB1YmxpY0tleSh7IC8vIFshY29kZSBmb2N1c11cbiAqICAgcGF5bG9hZDogJzB4ZGVhZGJlZWYnLCAvLyBbIWNvZGUgZm9jdXNdXG4gKiAgIHNpZ25hdHVyZSwgLy8gWyFjb2RlIGZvY3VzXVxuICogfSkgLy8gWyFjb2RlIGZvY3VzXVxuICogYGBgXG4gKlxuICogQHBhcmFtIG9wdGlvbnMgLSBUaGUgcmVjb3Zlcnkgb3B0aW9ucy5cbiAqIEByZXR1cm5zIFRoZSByZWNvdmVyZWQgcHVibGljIGtleS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlY292ZXJQdWJsaWNLZXkob3B0aW9ucykge1xuICAgIGNvbnN0IHsgcGF5bG9hZCwgc2lnbmF0dXJlIH0gPSBvcHRpb25zO1xuICAgIGNvbnN0IHsgciwgcywgeVBhcml0eSB9ID0gc2lnbmF0dXJlO1xuICAgIGNvbnN0IHNpZ25hdHVyZV8gPSBuZXcgc2VjcDI1NmsxLlNpZ25hdHVyZShCaWdJbnQociksIEJpZ0ludChzKSkuYWRkUmVjb3ZlcnlCaXQoeVBhcml0eSk7XG4gICAgY29uc3QgcG9pbnQgPSBzaWduYXR1cmVfLnJlY292ZXJQdWJsaWNLZXkoSGV4LmZyb20ocGF5bG9hZCkuc3Vic3RyaW5nKDIpKTtcbiAgICByZXR1cm4gUHVibGljS2V5LmZyb20ocG9pbnQpO1xufVxuLyoqXG4gKiBTaWducyB0aGUgcGF5bG9hZCB3aXRoIHRoZSBwcm92aWRlZCBwcml2YXRlIGtleS5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgdHMgdHdvc2xhc2hcbiAqIGltcG9ydCB7IFNlY3AyNTZrMSB9IGZyb20gJ294J1xuICpcbiAqIGNvbnN0IHNpZ25hdHVyZSA9IFNlY3AyNTZrMS5zaWduKHsgLy8gWyFjb2RlIGZvY3VzXVxuICogICBwYXlsb2FkOiAnMHhkZWFkYmVlZicsIC8vIFshY29kZSBmb2N1c11cbiAqICAgcHJpdmF0ZUtleTogJzB4Li4uJyAvLyBbIWNvZGUgZm9jdXNdXG4gKiB9KSAvLyBbIWNvZGUgZm9jdXNdXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gb3B0aW9ucyAtIFRoZSBzaWduaW5nIG9wdGlvbnMuXG4gKiBAcmV0dXJucyBUaGUgRUNEU0Ege0BsaW5rIG94I1NpZ25hdHVyZS5TaWduYXR1cmV9LlxuICovXG5leHBvcnQgZnVuY3Rpb24gc2lnbihvcHRpb25zKSB7XG4gICAgY29uc3QgeyBleHRyYUVudHJvcHkgPSBFbnRyb3B5LmV4dHJhRW50cm9weSwgaGFzaCwgcGF5bG9hZCwgcHJpdmF0ZUtleSwgfSA9IG9wdGlvbnM7XG4gICAgY29uc3QgeyByLCBzLCByZWNvdmVyeSB9ID0gc2VjcDI1NmsxLnNpZ24oQnl0ZXMuZnJvbShwYXlsb2FkKSwgQnl0ZXMuZnJvbShwcml2YXRlS2V5KSwge1xuICAgICAgICBleHRyYUVudHJvcHk6IHR5cGVvZiBleHRyYUVudHJvcHkgPT09ICdib29sZWFuJ1xuICAgICAgICAgICAgPyBleHRyYUVudHJvcHlcbiAgICAgICAgICAgIDogSGV4LmZyb20oZXh0cmFFbnRyb3B5KS5zbGljZSgyKSxcbiAgICAgICAgbG93UzogdHJ1ZSxcbiAgICAgICAgLi4uKGhhc2ggPyB7IHByZWhhc2g6IHRydWUgfSA6IHt9KSxcbiAgICB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgICByLFxuICAgICAgICBzLFxuICAgICAgICB5UGFyaXR5OiByZWNvdmVyeSxcbiAgICB9O1xufVxuLyoqXG4gKiBWZXJpZmllcyBhIHBheWxvYWQgd2FzIHNpZ25lZCBieSB0aGUgcHJvdmlkZWQgYWRkcmVzcy5cbiAqXG4gKiBAZXhhbXBsZVxuICogIyMjIFZlcmlmeSB3aXRoIEV0aGVyZXVtIEFkZHJlc3NcbiAqXG4gKiBgYGB0cyB0d29zbGFzaFxuICogaW1wb3J0IHsgU2VjcDI1NmsxIH0gZnJvbSAnb3gnXG4gKlxuICogY29uc3Qgc2lnbmF0dXJlID0gU2VjcDI1NmsxLnNpZ24oeyBwYXlsb2FkOiAnMHhkZWFkYmVlZicsIHByaXZhdGVLZXk6ICcweC4uLicgfSlcbiAqXG4gKiBjb25zdCB2ZXJpZmllZCA9IFNlY3AyNTZrMS52ZXJpZnkoeyAvLyBbIWNvZGUgZm9jdXNdXG4gKiAgIGFkZHJlc3M6ICcweGYzOWZkNmU1MWFhZDg4ZjZmNGNlNmFiODgyNzI3OWNmZmZiOTIyNjYnLCAvLyBbIWNvZGUgZm9jdXNdXG4gKiAgIHBheWxvYWQ6ICcweGRlYWRiZWVmJywgLy8gWyFjb2RlIGZvY3VzXVxuICogICBzaWduYXR1cmUsIC8vIFshY29kZSBmb2N1c11cbiAqIH0pIC8vIFshY29kZSBmb2N1c11cbiAqIGBgYFxuICpcbiAqIEBleGFtcGxlXG4gKiAjIyMgVmVyaWZ5IHdpdGggUHVibGljIEtleVxuICpcbiAqIGBgYHRzIHR3b3NsYXNoXG4gKiBpbXBvcnQgeyBTZWNwMjU2azEgfSBmcm9tICdveCdcbiAqXG4gKiBjb25zdCBwcml2YXRlS2V5ID0gJzB4Li4uJ1xuICogY29uc3QgcHVibGljS2V5ID0gU2VjcDI1NmsxLmdldFB1YmxpY0tleSh7IHByaXZhdGVLZXkgfSlcbiAqIGNvbnN0IHNpZ25hdHVyZSA9IFNlY3AyNTZrMS5zaWduKHsgcGF5bG9hZDogJzB4ZGVhZGJlZWYnLCBwcml2YXRlS2V5IH0pXG4gKlxuICogY29uc3QgdmVyaWZpZWQgPSBTZWNwMjU2azEudmVyaWZ5KHsgLy8gWyFjb2RlIGZvY3VzXVxuICogICBwdWJsaWNLZXksIC8vIFshY29kZSBmb2N1c11cbiAqICAgcGF5bG9hZDogJzB4ZGVhZGJlZWYnLCAvLyBbIWNvZGUgZm9jdXNdXG4gKiAgIHNpZ25hdHVyZSwgLy8gWyFjb2RlIGZvY3VzXVxuICogfSkgLy8gWyFjb2RlIGZvY3VzXVxuICogYGBgXG4gKlxuICogQHBhcmFtIG9wdGlvbnMgLSBUaGUgdmVyaWZpY2F0aW9uIG9wdGlvbnMuXG4gKiBAcmV0dXJucyBXaGV0aGVyIHRoZSBwYXlsb2FkIHdhcyBzaWduZWQgYnkgdGhlIHByb3ZpZGVkIGFkZHJlc3MuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB2ZXJpZnkob3B0aW9ucykge1xuICAgIGNvbnN0IHsgYWRkcmVzcywgaGFzaCwgcGF5bG9hZCwgcHVibGljS2V5LCBzaWduYXR1cmUgfSA9IG9wdGlvbnM7XG4gICAgaWYgKGFkZHJlc3MpXG4gICAgICAgIHJldHVybiBBZGRyZXNzLmlzRXF1YWwoYWRkcmVzcywgcmVjb3ZlckFkZHJlc3MoeyBwYXlsb2FkLCBzaWduYXR1cmUgfSkpO1xuICAgIHJldHVybiBzZWNwMjU2azEudmVyaWZ5KHNpZ25hdHVyZSwgQnl0ZXMuZnJvbShwYXlsb2FkKSwgUHVibGljS2V5LnRvQnl0ZXMocHVibGljS2V5KSwgLi4uKGhhc2ggPyBbeyBwcmVoYXNoOiB0cnVlLCBsb3dTOiB0cnVlIH1dIDogW10pKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVNlY3AyNTZrMS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ox/_esm/core/Secp256k1.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ox/_esm/core/Signature.js":
/*!************************************************!*\
  !*** ./node_modules/ox/_esm/core/Signature.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InvalidRError: () => (/* binding */ InvalidRError),\n/* harmony export */   InvalidSError: () => (/* binding */ InvalidSError),\n/* harmony export */   InvalidSerializedSizeError: () => (/* binding */ InvalidSerializedSizeError),\n/* harmony export */   InvalidVError: () => (/* binding */ InvalidVError),\n/* harmony export */   InvalidYParityError: () => (/* binding */ InvalidYParityError),\n/* harmony export */   MissingPropertiesError: () => (/* binding */ MissingPropertiesError),\n/* harmony export */   assert: () => (/* binding */ assert),\n/* harmony export */   extract: () => (/* binding */ extract),\n/* harmony export */   from: () => (/* binding */ from),\n/* harmony export */   fromBytes: () => (/* binding */ fromBytes),\n/* harmony export */   fromDerBytes: () => (/* binding */ fromDerBytes),\n/* harmony export */   fromDerHex: () => (/* binding */ fromDerHex),\n/* harmony export */   fromHex: () => (/* binding */ fromHex),\n/* harmony export */   fromLegacy: () => (/* binding */ fromLegacy),\n/* harmony export */   fromRpc: () => (/* binding */ fromRpc),\n/* harmony export */   fromTuple: () => (/* binding */ fromTuple),\n/* harmony export */   toBytes: () => (/* binding */ toBytes),\n/* harmony export */   toDerBytes: () => (/* binding */ toDerBytes),\n/* harmony export */   toDerHex: () => (/* binding */ toDerHex),\n/* harmony export */   toHex: () => (/* binding */ toHex),\n/* harmony export */   toLegacy: () => (/* binding */ toLegacy),\n/* harmony export */   toRpc: () => (/* binding */ toRpc),\n/* harmony export */   toTuple: () => (/* binding */ toTuple),\n/* harmony export */   vToYParity: () => (/* binding */ vToYParity),\n/* harmony export */   validate: () => (/* binding */ validate),\n/* harmony export */   yParityToV: () => (/* binding */ yParityToV)\n/* harmony export */ });\n/* harmony import */ var _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @noble/curves/secp256k1 */ \"(pages-dir-browser)/./node_modules/@noble/curves/esm/secp256k1.js\");\n/* harmony import */ var _Bytes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Bytes.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Bytes.js\");\n/* harmony import */ var _Errors_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Errors.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Errors.js\");\n/* harmony import */ var _Hex_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Hex.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Hex.js\");\n/* harmony import */ var _Json_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Json.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Json.js\");\n/* harmony import */ var _Solidity_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Solidity.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Solidity.js\");\n\n\n\n\n\n\n/**\n * Asserts that a Signature is valid.\n *\n * @example\n * ```ts twoslash\n * import { Signature } from 'ox'\n *\n * Signature.assert({\n *   r: -49782753348462494199823712700004552394425719014458918871452329774910450607807n,\n *   s: 33726695977844476214676913201140481102225469284307016937915595756355928419768n,\n *   yParity: 1,\n * })\n * // @error: InvalidSignatureRError:\n * // @error: Value `-549...n` is an invalid r value.\n * // @error: r must be a positive integer less than 2^256.\n * ```\n *\n * @param signature - The signature object to assert.\n */\nfunction assert(signature, options = {}) {\n    const { recovered } = options;\n    if (typeof signature.r === 'undefined')\n        throw new MissingPropertiesError({ signature });\n    if (typeof signature.s === 'undefined')\n        throw new MissingPropertiesError({ signature });\n    if (recovered && typeof signature.yParity === 'undefined')\n        throw new MissingPropertiesError({ signature });\n    if (signature.r < 0n || signature.r > _Solidity_js__WEBPACK_IMPORTED_MODULE_0__.maxUint256)\n        throw new InvalidRError({ value: signature.r });\n    if (signature.s < 0n || signature.s > _Solidity_js__WEBPACK_IMPORTED_MODULE_0__.maxUint256)\n        throw new InvalidSError({ value: signature.s });\n    if (typeof signature.yParity === 'number' &&\n        signature.yParity !== 0 &&\n        signature.yParity !== 1)\n        throw new InvalidYParityError({ value: signature.yParity });\n}\n/**\n * Deserializes a {@link ox#Bytes.Bytes} signature into a structured {@link ox#Signature.Signature}.\n *\n * @example\n * ```ts twoslash\n * // @noErrors\n * import { Signature } from 'ox'\n *\n * Signature.fromBytes(new Uint8Array([128, 3, 131, ...]))\n * // @log: { r: 5231...n, s: 3522...n, yParity: 0 }\n * ```\n *\n * @param signature - The serialized signature.\n * @returns The deserialized {@link ox#Signature.Signature}.\n */\nfunction fromBytes(signature) {\n    return fromHex(_Hex_js__WEBPACK_IMPORTED_MODULE_1__.fromBytes(signature));\n}\n/**\n * Deserializes a {@link ox#Hex.Hex} signature into a structured {@link ox#Signature.Signature}.\n *\n * @example\n * ```ts twoslash\n * import { Signature } from 'ox'\n *\n * Signature.fromHex('0x6e100a352ec6ad1b70802290e18aeed190704973570f3b8ed42cb9808e2ea6bf4a90a229a244495b41890987806fcbd2d5d23fc0dbe5f5256c2613c039d76db81c')\n * // @log: { r: 5231...n, s: 3522...n, yParity: 0 }\n * ```\n *\n * @param serialized - The serialized signature.\n * @returns The deserialized {@link ox#Signature.Signature}.\n */\nfunction fromHex(signature) {\n    if (signature.length !== 130 && signature.length !== 132)\n        throw new InvalidSerializedSizeError({ signature });\n    const r = BigInt(_Hex_js__WEBPACK_IMPORTED_MODULE_1__.slice(signature, 0, 32));\n    const s = BigInt(_Hex_js__WEBPACK_IMPORTED_MODULE_1__.slice(signature, 32, 64));\n    const yParity = (() => {\n        const yParity = Number(`0x${signature.slice(130)}`);\n        if (Number.isNaN(yParity))\n            return undefined;\n        try {\n            return vToYParity(yParity);\n        }\n        catch {\n            throw new InvalidYParityError({ value: yParity });\n        }\n    })();\n    if (typeof yParity === 'undefined')\n        return {\n            r,\n            s,\n        };\n    return {\n        r,\n        s,\n        yParity,\n    };\n}\n/**\n * Extracts a {@link ox#Signature.Signature} from an arbitrary object that may include signature properties.\n *\n * @example\n * ```ts twoslash\n * // @noErrors\n * import { Signature } from 'ox'\n *\n * Signature.extract({\n *   baz: 'barry',\n *   foo: 'bar',\n *   r: 49782753348462494199823712700004552394425719014458918871452329774910450607807n,\n *   s: 33726695977844476214676913201140481102225469284307016937915595756355928419768n,\n *   yParity: 1,\n *   zebra: 'stripes',\n * })\n * // @log: {\n * // @log:   r: 49782753348462494199823712700004552394425719014458918871452329774910450607807n,\n * // @log:   s: 33726695977844476214676913201140481102225469284307016937915595756355928419768n,\n * // @log:   yParity: 1\n * // @log: }\n * ```\n *\n * @param value - The arbitrary object to extract the signature from.\n * @returns The extracted {@link ox#Signature.Signature}.\n */\nfunction extract(value) {\n    if (typeof value.r === 'undefined')\n        return undefined;\n    if (typeof value.s === 'undefined')\n        return undefined;\n    return from(value);\n}\n/**\n * Instantiates a typed {@link ox#Signature.Signature} object from a {@link ox#Signature.Signature}, {@link ox#Signature.Legacy}, {@link ox#Bytes.Bytes}, or {@link ox#Hex.Hex}.\n *\n * @example\n * ```ts twoslash\n * import { Signature } from 'ox'\n *\n * Signature.from({\n *   r: 49782753348462494199823712700004552394425719014458918871452329774910450607807n,\n *   s: 33726695977844476214676913201140481102225469284307016937915595756355928419768n,\n *   yParity: 1,\n * })\n * // @log: {\n * // @log:   r: 49782753348462494199823712700004552394425719014458918871452329774910450607807n,\n * // @log:   s: 33726695977844476214676913201140481102225469284307016937915595756355928419768n,\n * // @log:   yParity: 1\n * // @log: }\n * ```\n *\n * @example\n * ### From Serialized\n *\n * ```ts twoslash\n * import { Signature } from 'ox'\n *\n * Signature.from('0x6e100a352ec6ad1b70802290e18aeed190704973570f3b8ed42cb9808e2ea6bf4a90a229a244495b41890987806fcbd2d5d23fc0dbe5f5256c2613c039d76db801')\n * // @log: {\n * // @log:   r: 49782753348462494199823712700004552394425719014458918871452329774910450607807n,\n * // @log:   s: 33726695977844476214676913201140481102225469284307016937915595756355928419768n,\n * // @log:   yParity: 1,\n * // @log: }\n * ```\n *\n * @example\n * ### From Legacy\n *\n * ```ts twoslash\n * import { Signature } from 'ox'\n *\n * Signature.from({\n *   r: 47323457007453657207889730243826965761922296599680473886588287015755652701072n,\n *   s: 57228803202727131502949358313456071280488184270258293674242124340113824882788n,\n *   v: 27,\n * })\n * // @log: {\n * // @log:   r: 47323457007453657207889730243826965761922296599680473886588287015755652701072n,\n * // @log:   s: 57228803202727131502949358313456071280488184270258293674242124340113824882788n,\n * // @log:   yParity: 0\n * // @log: }\n * ```\n *\n * @param signature - The signature value to instantiate.\n * @returns The instantiated {@link ox#Signature.Signature}.\n */\nfunction from(signature) {\n    const signature_ = (() => {\n        if (typeof signature === 'string')\n            return fromHex(signature);\n        if (signature instanceof Uint8Array)\n            return fromBytes(signature);\n        if (typeof signature.r === 'string')\n            return fromRpc(signature);\n        if (signature.v)\n            return fromLegacy(signature);\n        return {\n            r: signature.r,\n            s: signature.s,\n            ...(typeof signature.yParity !== 'undefined'\n                ? { yParity: signature.yParity }\n                : {}),\n        };\n    })();\n    assert(signature_);\n    return signature_;\n}\n/**\n * Converts a DER-encoded signature to a {@link ox#Signature.Signature}.\n *\n * @example\n * ```ts twoslash\n * // @noErrors\n * import { Signature } from 'ox'\n *\n * const signature = Signature.fromDerBytes(new Uint8Array([132, 51, 23, ...]))\n * // @log: {\n * // @log:   r: 49782753348462494199823712700004552394425719014458918871452329774910450607807n,\n * // @log:   s: 33726695977844476214676913201140481102225469284307016937915595756355928419768n,\n * // @log: }\n * ```\n *\n * @param signature - The DER-encoded signature to convert.\n * @returns The {@link ox#Signature.Signature}.\n */\nfunction fromDerBytes(signature) {\n    return fromDerHex(_Hex_js__WEBPACK_IMPORTED_MODULE_1__.fromBytes(signature));\n}\n/**\n * Converts a DER-encoded signature to a {@link ox#Signature.Signature}.\n *\n * @example\n * ```ts twoslash\n * import { Signature } from 'ox'\n *\n * const signature = Signature.fromDerHex('0x304402206e100a352ec6ad1b70802290e18aeed190704973570f3b8ed42cb9808e2ea6bf02204a90a229a244495b41890987806fcbd2d5d23fc0dbe5f5256c2613c039d76db8')\n * // @log: {\n * // @log:   r: 49782753348462494199823712700004552394425719014458918871452329774910450607807n,\n * // @log:   s: 33726695977844476214676913201140481102225469284307016937915595756355928419768n,\n * // @log: }\n * ```\n *\n * @param signature - The DER-encoded signature to convert.\n * @returns The {@link ox#Signature.Signature}.\n */\nfunction fromDerHex(signature) {\n    const { r, s } = _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_2__.secp256k1.Signature.fromDER(_Hex_js__WEBPACK_IMPORTED_MODULE_1__.from(signature).slice(2));\n    return { r, s };\n}\n/**\n * Converts a {@link ox#Signature.Legacy} into a {@link ox#Signature.Signature}.\n *\n * @example\n * ```ts twoslash\n * import { Signature } from 'ox'\n *\n * const legacy = Signature.fromLegacy({ r: 1n, s: 2n, v: 28 })\n * // @log: { r: 1n, s: 2n, yParity: 1 }\n * ```\n *\n * @param signature - The {@link ox#Signature.Legacy} to convert.\n * @returns The converted {@link ox#Signature.Signature}.\n */\nfunction fromLegacy(signature) {\n    return {\n        r: signature.r,\n        s: signature.s,\n        yParity: vToYParity(signature.v),\n    };\n}\n/**\n * Converts a {@link ox#Signature.Rpc} into a {@link ox#Signature.Signature}.\n *\n * @example\n * ```ts twoslash\n * import { Signature } from 'ox'\n *\n * const signature = Signature.fromRpc({\n *   r: '0x635dc2033e60185bb36709c29c75d64ea51dfbd91c32ef4be198e4ceb169fb4d',\n *   s: '0x50c2667ac4c771072746acfdcf1f1483336dcca8bd2df47cd83175dbe60f0540',\n *   yParity: '0x0',\n * })\n * ```\n *\n * @param signature - The {@link ox#Signature.Rpc} to convert.\n * @returns The converted {@link ox#Signature.Signature}.\n */\nfunction fromRpc(signature) {\n    const yParity = (() => {\n        const v = signature.v ? Number(signature.v) : undefined;\n        let yParity = signature.yParity ? Number(signature.yParity) : undefined;\n        if (typeof v === 'number' && typeof yParity !== 'number')\n            yParity = vToYParity(v);\n        if (typeof yParity !== 'number')\n            throw new InvalidYParityError({ value: signature.yParity });\n        return yParity;\n    })();\n    return {\n        r: BigInt(signature.r),\n        s: BigInt(signature.s),\n        yParity,\n    };\n}\n/**\n * Converts a {@link ox#Signature.Tuple} to a {@link ox#Signature.Signature}.\n *\n * @example\n * ```ts twoslash\n * import { Signature } from 'ox'\n *\n * const signature = Signature.fromTuple(['0x01', '0x7b', '0x1c8'])\n * // @log: {\n * // @log:   r: 123n,\n * // @log:   s: 456n,\n * // @log:   yParity: 1,\n * // @log: }\n * ```\n *\n * @param tuple - The {@link ox#Signature.Tuple} to convert.\n * @returns The {@link ox#Signature.Signature}.\n */\nfunction fromTuple(tuple) {\n    const [yParity, r, s] = tuple;\n    return from({\n        r: r === '0x' ? 0n : BigInt(r),\n        s: s === '0x' ? 0n : BigInt(s),\n        yParity: yParity === '0x' ? 0 : Number(yParity),\n    });\n}\n/**\n * Serializes a {@link ox#Signature.Signature} to {@link ox#Bytes.Bytes}.\n *\n * @example\n * ```ts twoslash\n * import { Signature } from 'ox'\n *\n * const signature = Signature.toBytes({\n *   r: 49782753348462494199823712700004552394425719014458918871452329774910450607807n,\n *   s: 33726695977844476214676913201140481102225469284307016937915595756355928419768n,\n *   yParity: 1\n * })\n * // @log: Uint8Array [102, 16, 10, ...]\n * ```\n *\n * @param signature - The signature to serialize.\n * @returns The serialized signature.\n */\nfunction toBytes(signature) {\n    return _Bytes_js__WEBPACK_IMPORTED_MODULE_3__.fromHex(toHex(signature));\n}\n/**\n * Serializes a {@link ox#Signature.Signature} to {@link ox#Hex.Hex}.\n *\n * @example\n * ```ts twoslash\n * import { Signature } from 'ox'\n *\n * const signature = Signature.toHex({\n *   r: 49782753348462494199823712700004552394425719014458918871452329774910450607807n,\n *   s: 33726695977844476214676913201140481102225469284307016937915595756355928419768n,\n *   yParity: 1\n * })\n * // @log: '0x6e100a352ec6ad1b70802290e18aeed190704973570f3b8ed42cb9808e2ea6bf4a90a229a244495b41890987806fcbd2d5d23fc0dbe5f5256c2613c039d76db81c'\n * ```\n *\n * @param signature - The signature to serialize.\n * @returns The serialized signature.\n */\nfunction toHex(signature) {\n    assert(signature);\n    const r = signature.r;\n    const s = signature.s;\n    const signature_ = _Hex_js__WEBPACK_IMPORTED_MODULE_1__.concat(_Hex_js__WEBPACK_IMPORTED_MODULE_1__.fromNumber(r, { size: 32 }), _Hex_js__WEBPACK_IMPORTED_MODULE_1__.fromNumber(s, { size: 32 }), \n    // If the signature is recovered, add the recovery byte to the signature.\n    typeof signature.yParity === 'number'\n        ? _Hex_js__WEBPACK_IMPORTED_MODULE_1__.fromNumber(yParityToV(signature.yParity), { size: 1 })\n        : '0x');\n    return signature_;\n}\n/**\n * Converts a {@link ox#Signature.Signature} to DER-encoded format.\n *\n * @example\n * ```ts twoslash\n * import { Signature } from 'ox'\n *\n * const signature = Signature.from({\n *   r: 49782753348462494199823712700004552394425719014458918871452329774910450607807n,\n *   s: 33726695977844476214676913201140481102225469284307016937915595756355928419768n,\n * })\n *\n * const signature_der = Signature.toDerBytes(signature)\n * // @log: Uint8Array [132, 51, 23, ...]\n * ```\n *\n * @param signature - The signature to convert.\n * @returns The DER-encoded signature.\n */\nfunction toDerBytes(signature) {\n    const sig = new _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_2__.secp256k1.Signature(signature.r, signature.s);\n    return sig.toDERRawBytes();\n}\n/**\n * Converts a {@link ox#Signature.Signature} to DER-encoded format.\n *\n * @example\n * ```ts twoslash\n * import { Signature } from 'ox'\n *\n * const signature = Signature.from({\n *   r: 49782753348462494199823712700004552394425719014458918871452329774910450607807n,\n *   s: 33726695977844476214676913201140481102225469284307016937915595756355928419768n,\n * })\n *\n * const signature_der = Signature.toDerHex(signature)\n * // @log: '0x304402206e100a352ec6ad1b70802290e18aeed190704973570f3b8ed42cb9808e2ea6bf02204a90a229a244495b41890987806fcbd2d5d23fc0dbe5f5256c2613c039d76db8'\n * ```\n *\n * @param signature - The signature to convert.\n * @returns The DER-encoded signature.\n */\nfunction toDerHex(signature) {\n    const sig = new _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_2__.secp256k1.Signature(signature.r, signature.s);\n    return `0x${sig.toDERHex()}`;\n}\n/**\n * Converts a {@link ox#Signature.Signature} into a {@link ox#Signature.Legacy}.\n *\n * @example\n * ```ts twoslash\n * import { Signature } from 'ox'\n *\n * const legacy = Signature.toLegacy({ r: 1n, s: 2n, yParity: 1 })\n * // @log: { r: 1n, s: 2n, v: 28 }\n * ```\n *\n * @param signature - The {@link ox#Signature.Signature} to convert.\n * @returns The converted {@link ox#Signature.Legacy}.\n */\nfunction toLegacy(signature) {\n    return {\n        r: signature.r,\n        s: signature.s,\n        v: yParityToV(signature.yParity),\n    };\n}\n/**\n * Converts a {@link ox#Signature.Signature} into a {@link ox#Signature.Rpc}.\n *\n * @example\n * ```ts twoslash\n * import { Signature } from 'ox'\n *\n * const signature = Signature.toRpc({\n *   r: 49782753348462494199823712700004552394425719014458918871452329774910450607807n,\n *   s: 33726695977844476214676913201140481102225469284307016937915595756355928419768n,\n *   yParity: 1\n * })\n * ```\n *\n * @param signature - The {@link ox#Signature.Signature} to convert.\n * @returns The converted {@link ox#Signature.Rpc}.\n */\nfunction toRpc(signature) {\n    const { r, s, yParity } = signature;\n    return {\n        r: _Hex_js__WEBPACK_IMPORTED_MODULE_1__.fromNumber(r, { size: 32 }),\n        s: _Hex_js__WEBPACK_IMPORTED_MODULE_1__.fromNumber(s, { size: 32 }),\n        yParity: yParity === 0 ? '0x0' : '0x1',\n    };\n}\n/**\n * Converts a {@link ox#Signature.Signature} to a serialized {@link ox#Signature.Tuple} to be used for signatures in Transaction Envelopes, EIP-7702 Authorization Lists, etc.\n *\n * @example\n * ```ts twoslash\n * import { Signature } from 'ox'\n *\n * const signatureTuple = Signature.toTuple({\n *   r: 123n,\n *   s: 456n,\n *   yParity: 1,\n * })\n * // @log: [yParity: '0x01', r: '0x7b', s: '0x1c8']\n * ```\n *\n * @param signature - The {@link ox#Signature.Signature} to convert.\n * @returns The {@link ox#Signature.Tuple}.\n */\nfunction toTuple(signature) {\n    const { r, s, yParity } = signature;\n    return [\n        yParity ? '0x01' : '0x',\n        r === 0n ? '0x' : _Hex_js__WEBPACK_IMPORTED_MODULE_1__.trimLeft(_Hex_js__WEBPACK_IMPORTED_MODULE_1__.fromNumber(r)),\n        s === 0n ? '0x' : _Hex_js__WEBPACK_IMPORTED_MODULE_1__.trimLeft(_Hex_js__WEBPACK_IMPORTED_MODULE_1__.fromNumber(s)),\n    ];\n}\n/**\n * Validates a Signature. Returns `true` if the signature is valid, `false` otherwise.\n *\n * @example\n * ```ts twoslash\n * import { Signature } from 'ox'\n *\n * const valid = Signature.validate({\n *   r: -49782753348462494199823712700004552394425719014458918871452329774910450607807n,\n *   s: 33726695977844476214676913201140481102225469284307016937915595756355928419768n,\n *   yParity: 1,\n * })\n * // @log: false\n * ```\n *\n * @param signature - The signature object to assert.\n */\nfunction validate(signature, options = {}) {\n    try {\n        assert(signature, options);\n        return true;\n    }\n    catch {\n        return false;\n    }\n}\n/**\n * Converts a ECDSA `v` value to a `yParity` value.\n *\n * @example\n * ```ts twoslash\n * import { Signature } from 'ox'\n *\n * const yParity = Signature.vToYParity(28)\n * // @log: 1\n * ```\n *\n * @param v - The ECDSA `v` value to convert.\n * @returns The `yParity` value.\n */\nfunction vToYParity(v) {\n    if (v === 0 || v === 27)\n        return 0;\n    if (v === 1 || v === 28)\n        return 1;\n    if (v >= 35)\n        return v % 2 === 0 ? 1 : 0;\n    throw new InvalidVError({ value: v });\n}\n/**\n * Converts a ECDSA `v` value to a `yParity` value.\n *\n * @example\n * ```ts twoslash\n * import { Signature } from 'ox'\n *\n * const v = Signature.yParityToV(1)\n * // @log: 28\n * ```\n *\n * @param yParity - The ECDSA `yParity` value to convert.\n * @returns The `v` value.\n */\nfunction yParityToV(yParity) {\n    if (yParity === 0)\n        return 27;\n    if (yParity === 1)\n        return 28;\n    throw new InvalidYParityError({ value: yParity });\n}\n/** Thrown when the serialized signature is of an invalid size. */\nclass InvalidSerializedSizeError extends _Errors_js__WEBPACK_IMPORTED_MODULE_4__.BaseError {\n    constructor({ signature }) {\n        super(`Value \\`${signature}\\` is an invalid signature size.`, {\n            metaMessages: [\n                'Expected: 64 bytes or 65 bytes.',\n                `Received ${_Hex_js__WEBPACK_IMPORTED_MODULE_1__.size(_Hex_js__WEBPACK_IMPORTED_MODULE_1__.from(signature))} bytes.`,\n            ],\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'Signature.InvalidSerializedSizeError'\n        });\n    }\n}\n/** Thrown when the signature is missing either an `r`, `s`, or `yParity` property. */\nclass MissingPropertiesError extends _Errors_js__WEBPACK_IMPORTED_MODULE_4__.BaseError {\n    constructor({ signature }) {\n        super(`Signature \\`${_Json_js__WEBPACK_IMPORTED_MODULE_5__.stringify(signature)}\\` is missing either an \\`r\\`, \\`s\\`, or \\`yParity\\` property.`);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'Signature.MissingPropertiesError'\n        });\n    }\n}\n/** Thrown when the signature has an invalid `r` value. */\nclass InvalidRError extends _Errors_js__WEBPACK_IMPORTED_MODULE_4__.BaseError {\n    constructor({ value }) {\n        super(`Value \\`${value}\\` is an invalid r value. r must be a positive integer less than 2^256.`);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'Signature.InvalidRError'\n        });\n    }\n}\n/** Thrown when the signature has an invalid `s` value. */\nclass InvalidSError extends _Errors_js__WEBPACK_IMPORTED_MODULE_4__.BaseError {\n    constructor({ value }) {\n        super(`Value \\`${value}\\` is an invalid s value. s must be a positive integer less than 2^256.`);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'Signature.InvalidSError'\n        });\n    }\n}\n/** Thrown when the signature has an invalid `yParity` value. */\nclass InvalidYParityError extends _Errors_js__WEBPACK_IMPORTED_MODULE_4__.BaseError {\n    constructor({ value }) {\n        super(`Value \\`${value}\\` is an invalid y-parity value. Y-parity must be 0 or 1.`);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'Signature.InvalidYParityError'\n        });\n    }\n}\n/** Thrown when the signature has an invalid `v` value. */\nclass InvalidVError extends _Errors_js__WEBPACK_IMPORTED_MODULE_4__.BaseError {\n    constructor({ value }) {\n        super(`Value \\`${value}\\` is an invalid v value. v must be 27, 28 or >=35.`);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'Signature.InvalidVError'\n        });\n    }\n}\n//# sourceMappingURL=Signature.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ox/_esm/core/Signature.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ox/_esm/core/Siwe.js":
/*!*******************************************!*\
  !*** ./node_modules/ox/_esm/core/Siwe.js ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InvalidMessageFieldError: () => (/* binding */ InvalidMessageFieldError),\n/* harmony export */   createMessage: () => (/* binding */ createMessage),\n/* harmony export */   domainRegex: () => (/* binding */ domainRegex),\n/* harmony export */   generateNonce: () => (/* binding */ generateNonce),\n/* harmony export */   ipRegex: () => (/* binding */ ipRegex),\n/* harmony export */   isUri: () => (/* binding */ isUri),\n/* harmony export */   localhostRegex: () => (/* binding */ localhostRegex),\n/* harmony export */   nonceRegex: () => (/* binding */ nonceRegex),\n/* harmony export */   parseMessage: () => (/* binding */ parseMessage),\n/* harmony export */   prefixRegex: () => (/* binding */ prefixRegex),\n/* harmony export */   schemeRegex: () => (/* binding */ schemeRegex),\n/* harmony export */   suffixRegex: () => (/* binding */ suffixRegex),\n/* harmony export */   validateMessage: () => (/* binding */ validateMessage)\n/* harmony export */ });\n/* harmony import */ var _Address_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Address.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Address.js\");\n/* harmony import */ var _Errors_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Errors.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Errors.js\");\n/* harmony import */ var _internal_uid_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internal/uid.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/internal/uid.js\");\n\n\n\nconst domainRegex = /^([a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?\\.)+[a-zA-Z]{2,}(:[0-9]{1,5})?$/;\nconst ipRegex = /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(:[0-9]{1,5})?$/;\nconst localhostRegex = /^localhost(:[0-9]{1,5})?$/;\nconst nonceRegex = /^[a-zA-Z0-9]{8,}$/;\nconst schemeRegex = /^([a-zA-Z][a-zA-Z0-9+-.]*)$/;\n// https://regexr.com/80gdj\nconst prefixRegex = /^(?:(?<scheme>[a-zA-Z][a-zA-Z0-9+-.]*):\\/\\/)?(?<domain>[a-zA-Z0-9+-.]*(?::[0-9]{1,5})?) (?:wants you to sign in with your Ethereum account:\\n)(?<address>0x[a-fA-F0-9]{40})\\n\\n(?:(?<statement>.*)\\n\\n)?/;\n// https://regexr.com/80gf9\nconst suffixRegex = /(?:URI: (?<uri>.+))\\n(?:Version: (?<version>.+))\\n(?:Chain ID: (?<chainId>\\d+))\\n(?:Nonce: (?<nonce>[a-zA-Z0-9]+))\\n(?:Issued At: (?<issuedAt>.+))(?:\\nExpiration Time: (?<expirationTime>.+))?(?:\\nNot Before: (?<notBefore>.+))?(?:\\nRequest ID: (?<requestId>.+))?/;\n/**\n * Creates [EIP-4361](https://eips.ethereum.org/EIPS/eip-4361) formatted message.\n *\n * @example\n * ```ts twoslash\n * import { Siwe } from 'ox'\n *\n * Siwe.createMessage({\n *   address: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n *   chainId: 1,\n *   domain: 'example.com',\n *   nonce: 'foobarbaz',\n *   uri: 'https://example.com/path',\n *   version: '1',\n * })\n * // @log: \"example.com wants you to sign in with your Ethereum account:\n * // @log: 0xA0Cf798816D4b9b9866b5330EEa46a18382f251e\n * // @log:\n * // @log:\n * // @log: URI: https://example.com/path\n * // @log: Version: 1\n * // @log: Chain ID: 1\n * // @log: Nonce: foobarbaz\n * // @log: Issued At: 2023-02-01T00:00:00.000Z\"\n * ```\n *\n * @param value - Values to use when creating EIP-4361 formatted message.\n * @returns EIP-4361 formatted message.\n */\nfunction createMessage(value) {\n    const { chainId, domain, expirationTime, issuedAt = new Date(), nonce, notBefore, requestId, resources, scheme, uri, version, } = value;\n    // Validate fields\n    {\n        // Required fields\n        if (chainId !== Math.floor(chainId))\n            throw new InvalidMessageFieldError({\n                field: 'chainId',\n                metaMessages: [\n                    '- Chain ID must be a EIP-155 chain ID.',\n                    '- See https://eips.ethereum.org/EIPS/eip-155',\n                    '',\n                    `Provided value: ${chainId}`,\n                ],\n            });\n        if (!(domainRegex.test(domain) ||\n            ipRegex.test(domain) ||\n            localhostRegex.test(domain)))\n            throw new InvalidMessageFieldError({\n                field: 'domain',\n                metaMessages: [\n                    '- Domain must be an RFC 3986 authority.',\n                    '- See https://www.rfc-editor.org/rfc/rfc3986',\n                    '',\n                    `Provided value: ${domain}`,\n                ],\n            });\n        if (!nonceRegex.test(nonce))\n            throw new InvalidMessageFieldError({\n                field: 'nonce',\n                metaMessages: [\n                    '- Nonce must be at least 8 characters.',\n                    '- Nonce must be alphanumeric.',\n                    '',\n                    `Provided value: ${nonce}`,\n                ],\n            });\n        if (!isUri(uri))\n            throw new InvalidMessageFieldError({\n                field: 'uri',\n                metaMessages: [\n                    '- URI must be a RFC 3986 URI referring to the resource that is the subject of the signing.',\n                    '- See https://www.rfc-editor.org/rfc/rfc3986',\n                    '',\n                    `Provided value: ${uri}`,\n                ],\n            });\n        if (version !== '1')\n            throw new InvalidMessageFieldError({\n                field: 'version',\n                metaMessages: [\n                    \"- Version must be '1'.\",\n                    '',\n                    `Provided value: ${version}`,\n                ],\n            });\n        // Optional fields\n        if (scheme && !schemeRegex.test(scheme))\n            throw new InvalidMessageFieldError({\n                field: 'scheme',\n                metaMessages: [\n                    '- Scheme must be an RFC 3986 URI scheme.',\n                    '- See https://www.rfc-editor.org/rfc/rfc3986#section-3.1',\n                    '',\n                    `Provided value: ${scheme}`,\n                ],\n            });\n        const statement = value.statement;\n        if (statement?.includes('\\n'))\n            throw new InvalidMessageFieldError({\n                field: 'statement',\n                metaMessages: [\n                    \"- Statement must not include '\\\\n'.\",\n                    '',\n                    `Provided value: ${statement}`,\n                ],\n            });\n    }\n    // Construct message\n    const address = _Address_js__WEBPACK_IMPORTED_MODULE_0__.from(value.address, { checksum: true });\n    const origin = (() => {\n        if (scheme)\n            return `${scheme}://${domain}`;\n        return domain;\n    })();\n    const statement = (() => {\n        if (!value.statement)\n            return '';\n        return `${value.statement}\\n`;\n    })();\n    const prefix = `${origin} wants you to sign in with your Ethereum account:\\n${address}\\n\\n${statement}`;\n    let suffix = `URI: ${uri}\\nVersion: ${version}\\nChain ID: ${chainId}\\nNonce: ${nonce}\\nIssued At: ${issuedAt.toISOString()}`;\n    if (expirationTime)\n        suffix += `\\nExpiration Time: ${expirationTime.toISOString()}`;\n    if (notBefore)\n        suffix += `\\nNot Before: ${notBefore.toISOString()}`;\n    if (requestId)\n        suffix += `\\nRequest ID: ${requestId}`;\n    if (resources) {\n        let content = '\\nResources:';\n        for (const resource of resources) {\n            if (!isUri(resource))\n                throw new InvalidMessageFieldError({\n                    field: 'resources',\n                    metaMessages: [\n                        '- Every resource must be a RFC 3986 URI.',\n                        '- See https://www.rfc-editor.org/rfc/rfc3986',\n                        '',\n                        `Provided value: ${resource}`,\n                    ],\n                });\n            content += `\\n- ${resource}`;\n        }\n        suffix += content;\n    }\n    return `${prefix}\\n${suffix}`;\n}\n/**\n * Generates random [EIP-4361](https://eips.ethereum.org/EIPS/eip-4361) nonce.\n *\n * @example\n * ```ts twoslash\n * import { Siwe } from 'ox'\n *\n * Siwe.generateNonce()\n * // @log: '65ed4681d4efe0270b923ff5f4b097b1c95974dc33aeebecd5724c42fd86dfd25dc70b27ef836b2aa22e68f19ebcccc1'\n * ```\n *\n * @returns Random nonce.\n */\nfunction generateNonce() {\n    return (0,_internal_uid_js__WEBPACK_IMPORTED_MODULE_1__.uid)(96);\n}\n/**\n * Check if the given URI is a valid [RFC 3986](https://www.rfc-editor.org/rfc/rfc3986) URI.\n *\n * @example\n * ```ts twoslash\n * import { Siwe } from 'ox'\n *\n * Siwe.isUri('https://example.com/foo')\n * // @log: true\n * ```\n *\n * @param value - Value to check.\n * @returns `false` if invalid, otherwise the valid URI.\n */\n// based on https://github.com/ogt/valid-url\nfunction isUri(value) {\n    // check for illegal characters\n    if (/[^a-z0-9\\:\\/\\?\\#\\[\\]\\@\\!\\$\\&\\'\\(\\)\\*\\+\\,\\;\\=\\.\\-\\_\\~\\%]/i.test(value))\n        return false;\n    // check for hex escapes that aren't complete\n    if (/%[^0-9a-f]/i.test(value))\n        return false;\n    if (/%[0-9a-f](:?[^0-9a-f]|$)/i.test(value))\n        return false;\n    // from RFC 3986\n    const splitted = splitUri(value);\n    const scheme = splitted[1];\n    const authority = splitted[2];\n    const path = splitted[3];\n    const query = splitted[4];\n    const fragment = splitted[5];\n    // scheme and path are required, though the path can be empty\n    if (!(scheme?.length && path && path.length >= 0))\n        return false;\n    // if authority is present, the path must be empty or begin with a /\n    if (authority?.length) {\n        if (!(path.length === 0 || /^\\//.test(path)))\n            return false;\n    }\n    else {\n        // if authority is not present, the path must not start with //\n        if (/^\\/\\//.test(path))\n            return false;\n    }\n    // scheme must begin with a letter, then consist of letters, digits, +, ., or -\n    if (!/^[a-z][a-z0-9\\+\\-\\.]*$/.test(scheme.toLowerCase()))\n        return false;\n    let out = '';\n    // re-assemble the URL per section 5.3 in RFC 3986\n    out += `${scheme}:`;\n    if (authority?.length)\n        out += `//${authority}`;\n    out += path;\n    if (query?.length)\n        out += `?${query}`;\n    if (fragment?.length)\n        out += `#${fragment}`;\n    return out;\n}\nfunction splitUri(value) {\n    return value.match(/(?:([^:\\/?#]+):)?(?:\\/\\/([^\\/?#]*))?([^?#]*)(?:\\?([^#]*))?(?:#(.*))?/);\n}\n/**\n * [EIP-4361](https://eips.ethereum.org/EIPS/eip-4361) formatted message into message fields object.\n *\n * @example\n * ```ts twoslash\n * import { Siwe } from 'ox'\n *\n * Siwe.parseMessage(`example.com wants you to sign in with your Ethereum account:\n * 0xA0Cf798816D4b9b9866b5330EEa46a18382f251e\n *\n * I accept the ExampleOrg Terms of Service: https://example.com/tos\n *\n * URI: https://example.com/path\n * Version: 1\n * Chain ID: 1\n * Nonce: foobarbaz\n * Issued At: 2023-02-01T00:00:00.000Z`)\n * // @log: {\n * // @log:   address: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n * // @log:   chainId: 1,\n * // @log:   domain: 'example.com',\n * // @log:   issuedAt: '2023-02-01T00:00:00.000Z',\n * // @log:   nonce: 'foobarbaz',\n * // @log:   statement: 'I accept the ExampleOrg Terms of Service: https://example.com/tos',\n * // @log:   uri: 'https://example.com/path',\n * // @log:   version: '1',\n * // @log: }\n * ```\n *\n * @param message - [EIP-4361](https://eips.ethereum.org/EIPS/eip-4361) formatted message.\n * @returns Message fields object.\n */\nfunction parseMessage(message) {\n    const { scheme, statement, ...prefix } = (message.match(prefixRegex)\n        ?.groups ?? {});\n    const { chainId, expirationTime, issuedAt, notBefore, requestId, ...suffix } = (message.match(suffixRegex)?.groups ?? {});\n    const resources = message.split('Resources:')[1]?.split('\\n- ').slice(1);\n    return {\n        ...prefix,\n        ...suffix,\n        ...(chainId ? { chainId: Number(chainId) } : {}),\n        ...(expirationTime ? { expirationTime: new Date(expirationTime) } : {}),\n        ...(issuedAt ? { issuedAt: new Date(issuedAt) } : {}),\n        ...(notBefore ? { notBefore: new Date(notBefore) } : {}),\n        ...(requestId ? { requestId } : {}),\n        ...(resources ? { resources } : {}),\n        ...(scheme ? { scheme } : {}),\n        ...(statement ? { statement } : {}),\n    };\n}\n/**\n * Validates [EIP-4361](https://eips.ethereum.org/EIPS/eip-4361) message.\n *\n * @example\n * ```ts twoslash\n * import { Siwe } from 'ox'\n *\n * Siwe.validateMessage({\n *   address: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n *   domain: 'example.com',\n *   message: {\n *     address: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n *     chainId: 1,\n *     domain: 'example.com',\n *     nonce: 'foobarbaz',\n *     uri: 'https://example.com/path',\n *     version: '1',\n *   },\n *   nonce: 'foobarbaz',\n * })\n * // @log: true\n * ```\n *\n * @param value - Values to use when validating EIP-4361 formatted message.\n * @returns Whether the message is valid.\n */\nfunction validateMessage(value) {\n    const { address, domain, message, nonce, scheme, time = new Date() } = value;\n    if (domain && message.domain !== domain)\n        return false;\n    if (nonce && message.nonce !== nonce)\n        return false;\n    if (scheme && message.scheme !== scheme)\n        return false;\n    if (message.expirationTime && time >= message.expirationTime)\n        return false;\n    if (message.notBefore && time < message.notBefore)\n        return false;\n    try {\n        if (!message.address)\n            return false;\n        if (address && !_Address_js__WEBPACK_IMPORTED_MODULE_0__.isEqual(message.address, address))\n            return false;\n    }\n    catch {\n        return false;\n    }\n    return true;\n}\n/**\n * Thrown when a field in a SIWE Message is invalid.\n *\n * @example\n * ```ts twoslash\n * import { Siwe } from 'ox'\n *\n * Siwe.createMessage({\n *   address: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n *   chainId: 1.1,\n *   domain: 'example.com',\n *   nonce: 'foobarbaz',\n *   uri: 'https://example.com/path',\n *   version: '1',\n * })\n * // @error: Siwe.InvalidMessageFieldError: Invalid Sign-In with Ethereum message field \"chainId\".\n * // @error: - Chain ID must be a EIP-155 chain ID.\n * // @error: - See https://eips.ethereum.org/EIPS/eip-155\n * // @error: Provided value: 1.1\n * ```\n */\nclass InvalidMessageFieldError extends _Errors_js__WEBPACK_IMPORTED_MODULE_2__.BaseError {\n    constructor(parameters) {\n        const { field, metaMessages } = parameters;\n        super(`Invalid Sign-In with Ethereum message field \"${field}\".`, {\n            metaMessages,\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'Siwe.InvalidMessageFieldError'\n        });\n    }\n}\n//# sourceMappingURL=Siwe.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ox/_esm/core/Siwe.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ox/_esm/core/StateOverrides.js":
/*!*****************************************************!*\
  !*** ./node_modules/ox/_esm/core/StateOverrides.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fromRpc: () => (/* binding */ fromRpc),\n/* harmony export */   toRpc: () => (/* binding */ toRpc)\n/* harmony export */ });\n/* harmony import */ var _Hex_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Hex.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Hex.js\");\n\n/**\n * Converts an {@link ox#StateOverrides.Rpc} to an {@link ox#StateOverrides.StateOverrides}.\n *\n * @example\n * ```ts twoslash\n * import { StateOverrides } from 'ox'\n *\n * const stateOverrides = StateOverrides.fromRpc({\n *   '0x0000000000000000000000000000000000000000': {\n *     balance: '0x1',\n *   },\n * })\n * ```\n *\n * @param rpcStateOverrides - The RPC state overrides to convert.\n * @returns An instantiated {@link ox#StateOverrides.StateOverrides}.\n */\nfunction fromRpc(rpcStateOverrides) {\n    const stateOverrides = {};\n    for (const [address, accountOverridesRpc] of Object.entries(rpcStateOverrides)) {\n        const accountOverrides = {};\n        if (accountOverridesRpc.balance)\n            accountOverrides.balance = BigInt(accountOverridesRpc.balance);\n        if (accountOverridesRpc.code)\n            accountOverrides.code = accountOverridesRpc.code;\n        if (accountOverridesRpc.movePrecompileToAddress)\n            accountOverrides.movePrecompileToAddress =\n                accountOverridesRpc.movePrecompileToAddress;\n        if (accountOverridesRpc.nonce)\n            accountOverrides.nonce = BigInt(accountOverridesRpc.nonce);\n        if (accountOverridesRpc.state)\n            accountOverrides.state = accountOverridesRpc.state;\n        if (accountOverridesRpc.stateDiff)\n            accountOverrides.stateDiff = accountOverridesRpc.stateDiff;\n        stateOverrides[address] = accountOverrides;\n    }\n    return stateOverrides;\n}\n/**\n * Converts an {@link ox#StateOverrides.StateOverrides} to an {@link ox#StateOverrides.Rpc}.\n *\n * @example\n * ```ts twoslash\n * import { StateOverrides } from 'ox'\n *\n * const stateOverrides = StateOverrides.toRpc({\n *   '0x0000000000000000000000000000000000000000': {\n *     balance: 1n,\n *   },\n * })\n * ```\n *\n * @param stateOverrides - The state overrides to convert.\n * @returns An instantiated {@link ox#StateOverrides.Rpc}.\n */\nfunction toRpc(stateOverrides) {\n    const rpcStateOverrides = {};\n    for (const [address, accountOverrides] of Object.entries(stateOverrides)) {\n        const accountOverridesRpc = {};\n        if (typeof accountOverrides.balance === 'bigint')\n            accountOverridesRpc.balance = _Hex_js__WEBPACK_IMPORTED_MODULE_0__.fromNumber(accountOverrides.balance);\n        if (accountOverrides.code)\n            accountOverridesRpc.code = accountOverrides.code;\n        if (accountOverrides.movePrecompileToAddress)\n            accountOverridesRpc.movePrecompileToAddress =\n                accountOverrides.movePrecompileToAddress;\n        if (typeof accountOverrides.nonce === 'bigint')\n            accountOverridesRpc.nonce = _Hex_js__WEBPACK_IMPORTED_MODULE_0__.fromNumber(accountOverrides.nonce);\n        if (accountOverrides.state)\n            accountOverridesRpc.state = accountOverrides.state;\n        if (accountOverrides.stateDiff)\n            accountOverridesRpc.stateDiff = accountOverrides.stateDiff;\n        rpcStateOverrides[address] = accountOverridesRpc;\n    }\n    return rpcStateOverrides;\n}\n//# sourceMappingURL=StateOverrides.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9veC9fZXNtL2NvcmUvU3RhdGVPdmVycmlkZXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQWdDO0FBQ2hDO0FBQ0EsZ0JBQWdCLDZCQUE2QixPQUFPLHVDQUF1QztBQUMzRjtBQUNBO0FBQ0E7QUFDQSxZQUFZLGlCQUFpQjtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTixJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLHVDQUF1QztBQUNwRTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLHdDQUF3QyxPQUFPLDRCQUE0QjtBQUMzRjtBQUNBO0FBQ0E7QUFDQSxZQUFZLGlCQUFpQjtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTixJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLDRCQUE0QjtBQUN6RDtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEMsK0NBQWM7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDLCtDQUFjO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxjaGFuZFxcRG93bmxvYWRzXFxqb2hud3JpY2hraWRpbnRvcml6elxcbm9kZV9tb2R1bGVzXFxveFxcX2VzbVxcY29yZVxcU3RhdGVPdmVycmlkZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgSGV4IGZyb20gJy4vSGV4LmpzJztcbi8qKlxuICogQ29udmVydHMgYW4ge0BsaW5rIG94I1N0YXRlT3ZlcnJpZGVzLlJwY30gdG8gYW4ge0BsaW5rIG94I1N0YXRlT3ZlcnJpZGVzLlN0YXRlT3ZlcnJpZGVzfS5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgdHMgdHdvc2xhc2hcbiAqIGltcG9ydCB7IFN0YXRlT3ZlcnJpZGVzIH0gZnJvbSAnb3gnXG4gKlxuICogY29uc3Qgc3RhdGVPdmVycmlkZXMgPSBTdGF0ZU92ZXJyaWRlcy5mcm9tUnBjKHtcbiAqICAgJzB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCc6IHtcbiAqICAgICBiYWxhbmNlOiAnMHgxJyxcbiAqICAgfSxcbiAqIH0pXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gcnBjU3RhdGVPdmVycmlkZXMgLSBUaGUgUlBDIHN0YXRlIG92ZXJyaWRlcyB0byBjb252ZXJ0LlxuICogQHJldHVybnMgQW4gaW5zdGFudGlhdGVkIHtAbGluayBveCNTdGF0ZU92ZXJyaWRlcy5TdGF0ZU92ZXJyaWRlc30uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmcm9tUnBjKHJwY1N0YXRlT3ZlcnJpZGVzKSB7XG4gICAgY29uc3Qgc3RhdGVPdmVycmlkZXMgPSB7fTtcbiAgICBmb3IgKGNvbnN0IFthZGRyZXNzLCBhY2NvdW50T3ZlcnJpZGVzUnBjXSBvZiBPYmplY3QuZW50cmllcyhycGNTdGF0ZU92ZXJyaWRlcykpIHtcbiAgICAgICAgY29uc3QgYWNjb3VudE92ZXJyaWRlcyA9IHt9O1xuICAgICAgICBpZiAoYWNjb3VudE92ZXJyaWRlc1JwYy5iYWxhbmNlKVxuICAgICAgICAgICAgYWNjb3VudE92ZXJyaWRlcy5iYWxhbmNlID0gQmlnSW50KGFjY291bnRPdmVycmlkZXNScGMuYmFsYW5jZSk7XG4gICAgICAgIGlmIChhY2NvdW50T3ZlcnJpZGVzUnBjLmNvZGUpXG4gICAgICAgICAgICBhY2NvdW50T3ZlcnJpZGVzLmNvZGUgPSBhY2NvdW50T3ZlcnJpZGVzUnBjLmNvZGU7XG4gICAgICAgIGlmIChhY2NvdW50T3ZlcnJpZGVzUnBjLm1vdmVQcmVjb21waWxlVG9BZGRyZXNzKVxuICAgICAgICAgICAgYWNjb3VudE92ZXJyaWRlcy5tb3ZlUHJlY29tcGlsZVRvQWRkcmVzcyA9XG4gICAgICAgICAgICAgICAgYWNjb3VudE92ZXJyaWRlc1JwYy5tb3ZlUHJlY29tcGlsZVRvQWRkcmVzcztcbiAgICAgICAgaWYgKGFjY291bnRPdmVycmlkZXNScGMubm9uY2UpXG4gICAgICAgICAgICBhY2NvdW50T3ZlcnJpZGVzLm5vbmNlID0gQmlnSW50KGFjY291bnRPdmVycmlkZXNScGMubm9uY2UpO1xuICAgICAgICBpZiAoYWNjb3VudE92ZXJyaWRlc1JwYy5zdGF0ZSlcbiAgICAgICAgICAgIGFjY291bnRPdmVycmlkZXMuc3RhdGUgPSBhY2NvdW50T3ZlcnJpZGVzUnBjLnN0YXRlO1xuICAgICAgICBpZiAoYWNjb3VudE92ZXJyaWRlc1JwYy5zdGF0ZURpZmYpXG4gICAgICAgICAgICBhY2NvdW50T3ZlcnJpZGVzLnN0YXRlRGlmZiA9IGFjY291bnRPdmVycmlkZXNScGMuc3RhdGVEaWZmO1xuICAgICAgICBzdGF0ZU92ZXJyaWRlc1thZGRyZXNzXSA9IGFjY291bnRPdmVycmlkZXM7XG4gICAgfVxuICAgIHJldHVybiBzdGF0ZU92ZXJyaWRlcztcbn1cbi8qKlxuICogQ29udmVydHMgYW4ge0BsaW5rIG94I1N0YXRlT3ZlcnJpZGVzLlN0YXRlT3ZlcnJpZGVzfSB0byBhbiB7QGxpbmsgb3gjU3RhdGVPdmVycmlkZXMuUnBjfS5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgdHMgdHdvc2xhc2hcbiAqIGltcG9ydCB7IFN0YXRlT3ZlcnJpZGVzIH0gZnJvbSAnb3gnXG4gKlxuICogY29uc3Qgc3RhdGVPdmVycmlkZXMgPSBTdGF0ZU92ZXJyaWRlcy50b1JwYyh7XG4gKiAgICcweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAnOiB7XG4gKiAgICAgYmFsYW5jZTogMW4sXG4gKiAgIH0sXG4gKiB9KVxuICogYGBgXG4gKlxuICogQHBhcmFtIHN0YXRlT3ZlcnJpZGVzIC0gVGhlIHN0YXRlIG92ZXJyaWRlcyB0byBjb252ZXJ0LlxuICogQHJldHVybnMgQW4gaW5zdGFudGlhdGVkIHtAbGluayBveCNTdGF0ZU92ZXJyaWRlcy5ScGN9LlxuICovXG5leHBvcnQgZnVuY3Rpb24gdG9ScGMoc3RhdGVPdmVycmlkZXMpIHtcbiAgICBjb25zdCBycGNTdGF0ZU92ZXJyaWRlcyA9IHt9O1xuICAgIGZvciAoY29uc3QgW2FkZHJlc3MsIGFjY291bnRPdmVycmlkZXNdIG9mIE9iamVjdC5lbnRyaWVzKHN0YXRlT3ZlcnJpZGVzKSkge1xuICAgICAgICBjb25zdCBhY2NvdW50T3ZlcnJpZGVzUnBjID0ge307XG4gICAgICAgIGlmICh0eXBlb2YgYWNjb3VudE92ZXJyaWRlcy5iYWxhbmNlID09PSAnYmlnaW50JylcbiAgICAgICAgICAgIGFjY291bnRPdmVycmlkZXNScGMuYmFsYW5jZSA9IEhleC5mcm9tTnVtYmVyKGFjY291bnRPdmVycmlkZXMuYmFsYW5jZSk7XG4gICAgICAgIGlmIChhY2NvdW50T3ZlcnJpZGVzLmNvZGUpXG4gICAgICAgICAgICBhY2NvdW50T3ZlcnJpZGVzUnBjLmNvZGUgPSBhY2NvdW50T3ZlcnJpZGVzLmNvZGU7XG4gICAgICAgIGlmIChhY2NvdW50T3ZlcnJpZGVzLm1vdmVQcmVjb21waWxlVG9BZGRyZXNzKVxuICAgICAgICAgICAgYWNjb3VudE92ZXJyaWRlc1JwYy5tb3ZlUHJlY29tcGlsZVRvQWRkcmVzcyA9XG4gICAgICAgICAgICAgICAgYWNjb3VudE92ZXJyaWRlcy5tb3ZlUHJlY29tcGlsZVRvQWRkcmVzcztcbiAgICAgICAgaWYgKHR5cGVvZiBhY2NvdW50T3ZlcnJpZGVzLm5vbmNlID09PSAnYmlnaW50JylcbiAgICAgICAgICAgIGFjY291bnRPdmVycmlkZXNScGMubm9uY2UgPSBIZXguZnJvbU51bWJlcihhY2NvdW50T3ZlcnJpZGVzLm5vbmNlKTtcbiAgICAgICAgaWYgKGFjY291bnRPdmVycmlkZXMuc3RhdGUpXG4gICAgICAgICAgICBhY2NvdW50T3ZlcnJpZGVzUnBjLnN0YXRlID0gYWNjb3VudE92ZXJyaWRlcy5zdGF0ZTtcbiAgICAgICAgaWYgKGFjY291bnRPdmVycmlkZXMuc3RhdGVEaWZmKVxuICAgICAgICAgICAgYWNjb3VudE92ZXJyaWRlc1JwYy5zdGF0ZURpZmYgPSBhY2NvdW50T3ZlcnJpZGVzLnN0YXRlRGlmZjtcbiAgICAgICAgcnBjU3RhdGVPdmVycmlkZXNbYWRkcmVzc10gPSBhY2NvdW50T3ZlcnJpZGVzUnBjO1xuICAgIH1cbiAgICByZXR1cm4gcnBjU3RhdGVPdmVycmlkZXM7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TdGF0ZU92ZXJyaWRlcy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ox/_esm/core/StateOverrides.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ox/_esm/core/Transaction.js":
/*!**************************************************!*\
  !*** ./node_modules/ox/_esm/core/Transaction.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fromRpc: () => (/* binding */ fromRpc),\n/* harmony export */   fromRpcType: () => (/* binding */ fromRpcType),\n/* harmony export */   toRpc: () => (/* binding */ toRpc),\n/* harmony export */   toRpcType: () => (/* binding */ toRpcType)\n/* harmony export */ });\n/* harmony import */ var _Authorization_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Authorization.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Authorization.js\");\n/* harmony import */ var _Hex_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Hex.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Hex.js\");\n/* harmony import */ var _Signature_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Signature.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Signature.js\");\n\n\n\n/** Type to RPC Type mapping. */\nconst toRpcType = {\n    legacy: '0x0',\n    eip2930: '0x1',\n    eip1559: '0x2',\n    eip4844: '0x3',\n    eip7702: '0x4',\n};\n/** RPC Type to Type mapping. */\nconst fromRpcType = {\n    '0x0': 'legacy',\n    '0x1': 'eip2930',\n    '0x2': 'eip1559',\n    '0x3': 'eip4844',\n    '0x4': 'eip7702',\n};\n/**\n * Converts an {@link ox#Transaction.Rpc} to an {@link ox#Transaction.Transaction}.\n *\n * @example\n * ```ts twoslash\n * import { Transaction } from 'ox'\n *\n * const transaction = Transaction.fromRpc({\n *   hash: '0x353fdfc38a2f26115daadee9f5b8392ce62b84f410957967e2ed56b35338cdd0',\n *   nonce: '0x357',\n *   blockHash:\n *     '0xc350d807505fb835650f0013632c5515592987ba169bbc6626d9fc54d91f0f0b',\n *   blockNumber: '0x12f296f',\n *   transactionIndex: '0x2',\n *   from: '0x814e5e0e31016b9a7f138c76b7e7b2bb5c1ab6a6',\n *   to: '0x3fc91a3afd70395cd496c647d5a6cc9d4b2b7fad',\n *   value: '0x9b6e64a8ec60000',\n *   gas: '0x43f5d',\n *   maxFeePerGas: '0x2ca6ae494',\n *   maxPriorityFeePerGas: '0x41cc3c0',\n *   input:\n *     '0x3593564c000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000006643504700000000000000000000000000000000000000000000000000000000000000040b080604000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002800000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000009b6e64a8ec600000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000009b6e64a8ec60000000000000000000000000000000000000000000000000000019124bb5ae978c000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000c56c7a0eaa804f854b536a5f3d5f49d2ec4b12b80000000000000000000000000000000000000000000000000000000000000060000000000000000000000000c56c7a0eaa804f854b536a5f3d5f49d2ec4b12b8000000000000000000000000000000fee13a103a10d593b9ae06b3e05f2e7e1c00000000000000000000000000000000000000000000000000000000000000190000000000000000000000000000000000000000000000000000000000000060000000000000000000000000c56c7a0eaa804f854b536a5f3d5f49d2ec4b12b800000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000190240001b9872b',\n *   r: '0x635dc2033e60185bb36709c29c75d64ea51dfbd91c32ef4be198e4ceb169fb4d',\n *   s: '0x50c2667ac4c771072746acfdcf1f1483336dcca8bd2df47cd83175dbe60f0540',\n *   yParity: '0x0',\n *   chainId: '0x1',\n *   accessList: [],\n *   type: '0x2',\n * })\n * ```\n *\n * @param transaction - The RPC transaction to convert.\n * @returns An instantiated {@link ox#Transaction.Transaction}.\n */\nfunction fromRpc(transaction, _options = {}) {\n    if (!transaction)\n        return null;\n    const signature = _Signature_js__WEBPACK_IMPORTED_MODULE_0__.extract(transaction);\n    const transaction_ = {\n        ...transaction,\n        ...signature,\n    };\n    transaction_.blockNumber = transaction.blockNumber\n        ? BigInt(transaction.blockNumber)\n        : null;\n    transaction_.data = transaction.input;\n    transaction_.gas = BigInt(transaction.gas ?? 0n);\n    transaction_.nonce = BigInt(transaction.nonce ?? 0n);\n    transaction_.transactionIndex = transaction.transactionIndex\n        ? Number(transaction.transactionIndex)\n        : null;\n    transaction_.value = BigInt(transaction.value ?? 0n);\n    if (transaction.authorizationList)\n        transaction_.authorizationList = _Authorization_js__WEBPACK_IMPORTED_MODULE_1__.fromRpcList(transaction.authorizationList);\n    if (transaction.chainId)\n        transaction_.chainId = Number(transaction.chainId);\n    if (transaction.gasPrice)\n        transaction_.gasPrice = BigInt(transaction.gasPrice);\n    if (transaction.maxFeePerBlobGas)\n        transaction_.maxFeePerBlobGas = BigInt(transaction.maxFeePerBlobGas);\n    if (transaction.maxFeePerGas)\n        transaction_.maxFeePerGas = BigInt(transaction.maxFeePerGas);\n    if (transaction.maxPriorityFeePerGas)\n        transaction_.maxPriorityFeePerGas = BigInt(transaction.maxPriorityFeePerGas);\n    if (transaction.type)\n        transaction_.type =\n            fromRpcType[transaction.type] ?? transaction.type;\n    if (signature)\n        transaction_.v = _Signature_js__WEBPACK_IMPORTED_MODULE_0__.yParityToV(signature.yParity);\n    return transaction_;\n}\n/**\n * Converts an {@link ox#Transaction.Transaction} to an {@link ox#Transaction.Rpc}.\n *\n * @example\n * ```ts twoslash\n * import { Transaction } from 'ox'\n *\n * const transaction = Transaction.toRpc({\n *   accessList: [],\n *   blockHash:\n *     '0xc350d807505fb835650f0013632c5515592987ba169bbc6626d9fc54d91f0f0b',\n *   blockNumber: 19868015n,\n *   chainId: 1,\n *   from: '0x814e5e0e31016b9a7f138c76b7e7b2bb5c1ab6a6',\n *   gas: 278365n,\n *   hash: '0x353fdfc38a2f26115daadee9f5b8392ce62b84f410957967e2ed56b35338cdd0',\n *   input:\n *     '0x3593564c000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000006643504700000000000000000000000000000000000000000000000000000000000000040b080604000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002800000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000009b6e64a8ec600000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000009b6e64a8ec60000000000000000000000000000000000000000000000000000019124bb5ae978c000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000c56c7a0eaa804f854b536a5f3d5f49d2ec4b12b80000000000000000000000000000000000000000000000000000000000000060000000000000000000000000c56c7a0eaa804f854b536a5f3d5f49d2ec4b12b8000000000000000000000000000000fee13a103a10d593b9ae06b3e05f2e7e1c00000000000000000000000000000000000000000000000000000000000000190000000000000000000000000000000000000000000000000000000000000060000000000000000000000000c56c7a0eaa804f854b536a5f3d5f49d2ec4b12b800000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000190240001b9872b',\n *   maxFeePerGas: 11985937556n,\n *   maxPriorityFeePerGas: 68993984n,\n *   nonce: 855n,\n *   r: 44944627813007772897391531230081695102703289123332187696115181104739239197517n,\n *   s: 36528503505192438307355164441104001310566505351980369085208178712678799181120n,\n *   to: '0x3fc91a3afd70395cd496c647d5a6cc9d4b2b7fad',\n *   transactionIndex: 2,\n *   type: 'eip1559',\n *   v: 27,\n *   value: 700000000000000000n,\n *   yParity: 0,\n * })\n * ```\n *\n * @param transaction - The transaction to convert.\n * @returns An RPC-formatted transaction.\n */\nfunction toRpc(transaction, _options) {\n    const rpc = {};\n    rpc.blockHash = transaction.blockHash;\n    rpc.blockNumber =\n        typeof transaction.blockNumber === 'bigint'\n            ? _Hex_js__WEBPACK_IMPORTED_MODULE_2__.fromNumber(transaction.blockNumber)\n            : null;\n    rpc.from = transaction.from;\n    rpc.gas = _Hex_js__WEBPACK_IMPORTED_MODULE_2__.fromNumber(transaction.gas ?? 0n);\n    rpc.hash = transaction.hash;\n    rpc.input = transaction.input;\n    rpc.nonce = _Hex_js__WEBPACK_IMPORTED_MODULE_2__.fromNumber(transaction.nonce ?? 0n);\n    rpc.to = transaction.to;\n    rpc.transactionIndex = transaction.transactionIndex\n        ? _Hex_js__WEBPACK_IMPORTED_MODULE_2__.fromNumber(transaction.transactionIndex)\n        : null;\n    rpc.type = toRpcType[transaction.type] ?? transaction.type;\n    rpc.value = _Hex_js__WEBPACK_IMPORTED_MODULE_2__.fromNumber(transaction.value ?? 0n);\n    if (transaction.accessList)\n        rpc.accessList = transaction.accessList;\n    if (transaction.authorizationList)\n        rpc.authorizationList = _Authorization_js__WEBPACK_IMPORTED_MODULE_1__.toRpcList(transaction.authorizationList);\n    if (transaction.blobVersionedHashes)\n        rpc.blobVersionedHashes = transaction.blobVersionedHashes;\n    if (transaction.chainId)\n        rpc.chainId = _Hex_js__WEBPACK_IMPORTED_MODULE_2__.fromNumber(transaction.chainId);\n    if (typeof transaction.gasPrice === 'bigint')\n        rpc.gasPrice = _Hex_js__WEBPACK_IMPORTED_MODULE_2__.fromNumber(transaction.gasPrice);\n    if (typeof transaction.maxFeePerBlobGas === 'bigint')\n        rpc.maxFeePerBlobGas = _Hex_js__WEBPACK_IMPORTED_MODULE_2__.fromNumber(transaction.maxFeePerBlobGas);\n    if (typeof transaction.maxFeePerGas === 'bigint')\n        rpc.maxFeePerGas = _Hex_js__WEBPACK_IMPORTED_MODULE_2__.fromNumber(transaction.maxFeePerGas);\n    if (typeof transaction.maxPriorityFeePerGas === 'bigint')\n        rpc.maxPriorityFeePerGas = _Hex_js__WEBPACK_IMPORTED_MODULE_2__.fromNumber(transaction.maxPriorityFeePerGas);\n    if (typeof transaction.r === 'bigint')\n        rpc.r = _Hex_js__WEBPACK_IMPORTED_MODULE_2__.fromNumber(transaction.r, { size: 32 });\n    if (typeof transaction.s === 'bigint')\n        rpc.s = _Hex_js__WEBPACK_IMPORTED_MODULE_2__.fromNumber(transaction.s, { size: 32 });\n    if (typeof transaction.v === 'number')\n        rpc.v = _Hex_js__WEBPACK_IMPORTED_MODULE_2__.fromNumber(transaction.v, { size: 1 });\n    if (typeof transaction.yParity === 'number')\n        rpc.yParity = transaction.yParity === 0 ? '0x0' : '0x1';\n    return rpc;\n}\n//# sourceMappingURL=Transaction.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ox/_esm/core/Transaction.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ox/_esm/core/TransactionEnvelope.js":
/*!**********************************************************!*\
  !*** ./node_modules/ox/_esm/core/TransactionEnvelope.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FeeCapTooHighError: () => (/* binding */ FeeCapTooHighError),\n/* harmony export */   GasPriceTooHighError: () => (/* binding */ GasPriceTooHighError),\n/* harmony export */   InvalidChainIdError: () => (/* binding */ InvalidChainIdError),\n/* harmony export */   InvalidSerializedError: () => (/* binding */ InvalidSerializedError),\n/* harmony export */   TipAboveFeeCapError: () => (/* binding */ TipAboveFeeCapError)\n/* harmony export */ });\n/* harmony import */ var _Errors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Errors.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Errors.js\");\n/* harmony import */ var _Value_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Value.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Value.js\");\n\n\n/**\n * Thrown when a fee cap is too high.\n *\n * @example\n * ```ts twoslash\n * import { TransactionEnvelopeEip1559 } from 'ox'\n *\n * TransactionEnvelopeEip1559.assert({\n *   maxFeePerGas: 2n ** 256n - 1n + 1n,\n *   chainId: 1,\n * })\n * // @error: TransactionEnvelope.FeeCapTooHighError: The fee cap (`maxFeePerGas`/`maxPriorityFeePerGas` = 115792089237316195423570985008687907853269984665640564039457584007913.129639936 gwei) cannot be higher than the maximum allowed value (2^256-1).\n * ```\n */\nclass FeeCapTooHighError extends _Errors_js__WEBPACK_IMPORTED_MODULE_0__.BaseError {\n    constructor({ feeCap, } = {}) {\n        super(`The fee cap (\\`maxFeePerGas\\`/\\`maxPriorityFeePerGas\\`${feeCap ? ` = ${_Value_js__WEBPACK_IMPORTED_MODULE_1__.formatGwei(feeCap)} gwei` : ''}) cannot be higher than the maximum allowed value (2^256-1).`);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'TransactionEnvelope.FeeCapTooHighError'\n        });\n    }\n}\n/**\n * Thrown when a gas price is too high.\n *\n * @example\n * ```ts twoslash\n * import { TransactionEnvelopeLegacy } from 'ox'\n *\n * TransactionEnvelopeLegacy.assert({\n *   gasPrice: 2n ** 256n - 1n + 1n,\n *   chainId: 1,\n * })\n * // @error: TransactionEnvelope.GasPriceTooHighError: The gas price (`gasPrice` = 115792089237316195423570985008687907853269984665640564039457584007913.129639936 gwei) cannot be higher than the maximum allowed value (2^256-1).\n * ```\n */\nclass GasPriceTooHighError extends _Errors_js__WEBPACK_IMPORTED_MODULE_0__.BaseError {\n    constructor({ gasPrice, } = {}) {\n        super(`The gas price (\\`gasPrice\\`${gasPrice ? ` = ${_Value_js__WEBPACK_IMPORTED_MODULE_1__.formatGwei(gasPrice)} gwei` : ''}) cannot be higher than the maximum allowed value (2^256-1).`);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'TransactionEnvelope.GasPriceTooHighError'\n        });\n    }\n}\n/**\n * Thrown when a chain ID is invalid.\n *\n * @example\n * ```ts twoslash\n * import { TransactionEnvelopeEip1559 } from 'ox'\n *\n * TransactionEnvelopeEip1559.assert({ chainId: 0 })\n * // @error: TransactionEnvelope.InvalidChainIdError: Chain ID \"0\" is invalid.\n * ```\n */\nclass InvalidChainIdError extends _Errors_js__WEBPACK_IMPORTED_MODULE_0__.BaseError {\n    constructor({ chainId }) {\n        super(typeof chainId !== 'undefined'\n            ? `Chain ID \"${chainId}\" is invalid.`\n            : 'Chain ID is invalid.');\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'TransactionEnvelope.InvalidChainIdError'\n        });\n    }\n}\n/**\n * Thrown when a serialized transaction is invalid.\n *\n * @example\n * ```ts twoslash\n * import { TransactionEnvelopeEip1559 } from 'ox'\n *\n * TransactionEnvelopeEip1559.deserialize('0x02c0')\n * // @error: TransactionEnvelope.InvalidSerializedError: Invalid serialized transaction of type \"eip1559\" was provided.\n * // @error: Serialized Transaction: \"0x02c0\"\n * // @error: Missing Attributes: chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gas, to, value, data, accessList\n * ```\n */\nclass InvalidSerializedError extends _Errors_js__WEBPACK_IMPORTED_MODULE_0__.BaseError {\n    constructor({ attributes, serialized, type, }) {\n        const missing = Object.entries(attributes)\n            .map(([key, value]) => (typeof value === 'undefined' ? key : undefined))\n            .filter(Boolean);\n        super(`Invalid serialized transaction of type \"${type}\" was provided.`, {\n            metaMessages: [\n                `Serialized Transaction: \"${serialized}\"`,\n                missing.length > 0 ? `Missing Attributes: ${missing.join(', ')}` : '',\n            ].filter(Boolean),\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'TransactionEnvelope.InvalidSerializedError'\n        });\n    }\n}\n/**\n * Thrown when a tip is higher than a fee cap.\n *\n * @example\n * ```ts twoslash\n * import { TransactionEnvelopeEip1559 } from 'ox'\n *\n * TransactionEnvelopeEip1559.assert({\n *   chainId: 1,\n *   maxFeePerGas: 10n,\n *   maxPriorityFeePerGas: 11n,\n * })\n * // @error: TransactionEnvelope.TipAboveFeeCapError: The provided tip (`maxPriorityFeePerGas` = 11 gwei) cannot be higher than the fee cap (`maxFeePerGas` = 10 gwei).\n * ```\n */\nclass TipAboveFeeCapError extends _Errors_js__WEBPACK_IMPORTED_MODULE_0__.BaseError {\n    constructor({ maxPriorityFeePerGas, maxFeePerGas, } = {}) {\n        super([\n            `The provided tip (\\`maxPriorityFeePerGas\\`${maxPriorityFeePerGas\n                ? ` = ${_Value_js__WEBPACK_IMPORTED_MODULE_1__.formatGwei(maxPriorityFeePerGas)} gwei`\n                : ''}) cannot be higher than the fee cap (\\`maxFeePerGas\\`${maxFeePerGas ? ` = ${_Value_js__WEBPACK_IMPORTED_MODULE_1__.formatGwei(maxFeePerGas)} gwei` : ''}).`,\n        ].join('\\n'));\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'TransactionEnvelope.TipAboveFeeCapError'\n        });\n    }\n}\n//# sourceMappingURL=TransactionEnvelope.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ox/_esm/core/TransactionEnvelope.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ox/_esm/core/TransactionEnvelopeEip1559.js":
/*!*****************************************************************!*\
  !*** ./node_modules/ox/_esm/core/TransactionEnvelopeEip1559.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assert: () => (/* binding */ assert),\n/* harmony export */   deserialize: () => (/* binding */ deserialize),\n/* harmony export */   from: () => (/* binding */ from),\n/* harmony export */   getSignPayload: () => (/* binding */ getSignPayload),\n/* harmony export */   hash: () => (/* binding */ hash),\n/* harmony export */   serialize: () => (/* binding */ serialize),\n/* harmony export */   serializedType: () => (/* binding */ serializedType),\n/* harmony export */   toRpc: () => (/* binding */ toRpc),\n/* harmony export */   type: () => (/* binding */ type),\n/* harmony export */   validate: () => (/* binding */ validate)\n/* harmony export */ });\n/* harmony import */ var _AccessList_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./AccessList.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/AccessList.js\");\n/* harmony import */ var _Address_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Address.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Address.js\");\n/* harmony import */ var _Hash_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Hash.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Hash.js\");\n/* harmony import */ var _Hex_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Hex.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Hex.js\");\n/* harmony import */ var _Rlp_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Rlp.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Rlp.js\");\n/* harmony import */ var _Signature_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Signature.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Signature.js\");\n/* harmony import */ var _TransactionEnvelope_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./TransactionEnvelope.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/TransactionEnvelope.js\");\n\n\n\n\n\n\n\nconst serializedType = '0x02';\nconst type = 'eip1559';\n/**\n * Asserts a {@link ox#TransactionEnvelopeEip1559.TransactionEnvelopeEip1559} is valid.\n *\n * @example\n * ```ts twoslash\n * import { TransactionEnvelopeEip1559, Value } from 'ox'\n *\n * TransactionEnvelopeEip1559.assert({\n *   maxFeePerGas: 2n ** 256n - 1n + 1n,\n *   chainId: 1,\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: Value.fromEther('1'),\n * })\n * // @error: FeeCapTooHighError:\n * // @error: The fee cap (`masFeePerGas` = 115792089237316195423570985008687907853269984665640564039457584007913 gwei) cannot be\n * // @error: higher than the maximum allowed value (2^256-1).\n * ```\n *\n * @param envelope - The transaction envelope to assert.\n */\nfunction assert(envelope) {\n    const { chainId, maxPriorityFeePerGas, maxFeePerGas, to } = envelope;\n    if (chainId <= 0)\n        throw new _TransactionEnvelope_js__WEBPACK_IMPORTED_MODULE_0__.InvalidChainIdError({ chainId });\n    if (to)\n        _Address_js__WEBPACK_IMPORTED_MODULE_1__.assert(to, { strict: false });\n    if (maxFeePerGas && BigInt(maxFeePerGas) > 2n ** 256n - 1n)\n        throw new _TransactionEnvelope_js__WEBPACK_IMPORTED_MODULE_0__.FeeCapTooHighError({ feeCap: maxFeePerGas });\n    if (maxPriorityFeePerGas &&\n        maxFeePerGas &&\n        maxPriorityFeePerGas > maxFeePerGas)\n        throw new _TransactionEnvelope_js__WEBPACK_IMPORTED_MODULE_0__.TipAboveFeeCapError({\n            maxFeePerGas,\n            maxPriorityFeePerGas,\n        });\n}\n/**\n * Deserializes a {@link ox#TransactionEnvelopeEip1559.TransactionEnvelopeEip1559} from its serialized form.\n *\n * @example\n * ```ts twoslash\n * import { TransactionEnvelopeEip1559 } from 'ox'\n *\n * const envelope = TransactionEnvelopeEip1559.deserialize('0x02ef0182031184773594008477359400809470997970c51812dc3a010c7d01b50e0d17dc79c8880de0b6b3a764000080c0')\n * // @log: {\n * // @log:   type: 'eip1559',\n * // @log:   nonce: 785n,\n * // @log:   maxFeePerGas: 2000000000n,\n * // @log:   gas: 1000000n,\n * // @log:   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n * // @log:   value: 1000000000000000000n,\n * // @log: }\n * ```\n *\n * @param serialized - The serialized transaction.\n * @returns Deserialized Transaction Envelope.\n */\nfunction deserialize(serialized) {\n    const transactionArray = _Rlp_js__WEBPACK_IMPORTED_MODULE_2__.toHex(_Hex_js__WEBPACK_IMPORTED_MODULE_3__.slice(serialized, 1));\n    const [chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gas, to, value, data, accessList, yParity, r, s,] = transactionArray;\n    if (!(transactionArray.length === 9 || transactionArray.length === 12))\n        throw new _TransactionEnvelope_js__WEBPACK_IMPORTED_MODULE_0__.InvalidSerializedError({\n            attributes: {\n                chainId,\n                nonce,\n                maxPriorityFeePerGas,\n                maxFeePerGas,\n                gas,\n                to,\n                value,\n                data,\n                accessList,\n                ...(transactionArray.length > 9\n                    ? {\n                        yParity,\n                        r,\n                        s,\n                    }\n                    : {}),\n            },\n            serialized,\n            type,\n        });\n    let transaction = {\n        chainId: Number(chainId),\n        type,\n    };\n    if (_Hex_js__WEBPACK_IMPORTED_MODULE_3__.validate(to) && to !== '0x')\n        transaction.to = to;\n    if (_Hex_js__WEBPACK_IMPORTED_MODULE_3__.validate(gas) && gas !== '0x')\n        transaction.gas = BigInt(gas);\n    if (_Hex_js__WEBPACK_IMPORTED_MODULE_3__.validate(data) && data !== '0x')\n        transaction.data = data;\n    if (_Hex_js__WEBPACK_IMPORTED_MODULE_3__.validate(nonce))\n        transaction.nonce = nonce === '0x' ? 0n : BigInt(nonce);\n    if (_Hex_js__WEBPACK_IMPORTED_MODULE_3__.validate(value) && value !== '0x')\n        transaction.value = BigInt(value);\n    if (_Hex_js__WEBPACK_IMPORTED_MODULE_3__.validate(maxFeePerGas) && maxFeePerGas !== '0x')\n        transaction.maxFeePerGas = BigInt(maxFeePerGas);\n    if (_Hex_js__WEBPACK_IMPORTED_MODULE_3__.validate(maxPriorityFeePerGas) && maxPriorityFeePerGas !== '0x')\n        transaction.maxPriorityFeePerGas = BigInt(maxPriorityFeePerGas);\n    if (accessList.length !== 0 && accessList !== '0x')\n        transaction.accessList = _AccessList_js__WEBPACK_IMPORTED_MODULE_4__.fromTupleList(accessList);\n    const signature = r && s && yParity ? _Signature_js__WEBPACK_IMPORTED_MODULE_5__.fromTuple([yParity, r, s]) : undefined;\n    if (signature)\n        transaction = {\n            ...transaction,\n            ...signature,\n        };\n    assert(transaction);\n    return transaction;\n}\n/**\n * Converts an arbitrary transaction object into an EIP-1559 Transaction Envelope.\n *\n * @example\n * ```ts twoslash\n * import { TransactionEnvelopeEip1559, Value } from 'ox'\n *\n * const envelope = TransactionEnvelopeEip1559.from({\n *   chainId: 1,\n *   maxFeePerGas: Value.fromGwei('10'),\n *   maxPriorityFeePerGas: Value.fromGwei('1'),\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: Value.fromEther('1'),\n * })\n * ```\n *\n * @example\n * ### Attaching Signatures\n *\n * It is possible to attach a `signature` to the transaction envelope.\n *\n * ```ts twoslash\n * import { Secp256k1, TransactionEnvelopeEip1559, Value } from 'ox'\n *\n * const envelope = TransactionEnvelopeEip1559.from({\n *   chainId: 1,\n *   maxFeePerGas: Value.fromGwei('10'),\n *   maxPriorityFeePerGas: Value.fromGwei('1'),\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: Value.fromEther('1'),\n * })\n *\n * const signature = Secp256k1.sign({\n *   payload: TransactionEnvelopeEip1559.getSignPayload(envelope),\n *   privateKey: '0x...',\n * })\n *\n * const envelope_signed = TransactionEnvelopeEip1559.from(envelope, { // [!code focus]\n *   signature, // [!code focus]\n * }) // [!code focus]\n * // @log: {\n * // @log:   chainId: 1,\n * // @log:   maxFeePerGas: 10000000000n,\n * // @log:   maxPriorityFeePerGas: 1000000000n,\n * // @log:   to: '0x0000000000000000000000000000000000000000',\n * // @log:   type: 'eip1559',\n * // @log:   value: 1000000000000000000n,\n * // @log:   r: 125...n,\n * // @log:   s: 642...n,\n * // @log:   yParity: 0,\n * // @log: }\n * ```\n *\n * @example\n * ### From Serialized\n *\n * It is possible to instantiate an EIP-1559 Transaction Envelope from a {@link ox#TransactionEnvelopeEip1559.Serialized} value.\n *\n * ```ts twoslash\n * import { TransactionEnvelopeEip1559 } from 'ox'\n *\n * const envelope = TransactionEnvelopeEip1559.from('0x02f858018203118502540be4008504a817c800809470997970c51812dc3a010c7d01b50e0d17dc79c8880de0b6b3a764000080c08477359400e1a001627c687261b0e7f8638af1112efa8a77e23656f6e7945275b19e9deed80261')\n * // @log: {\n * // @log:   chainId: 1,\n * // @log:   maxFeePerGas: 10000000000n,\n * // @log:   maxPriorityFeePerGas: 1000000000n,\n * // @log:   to: '0x0000000000000000000000000000000000000000',\n * // @log:   type: 'eip1559',\n * // @log:   value: 1000000000000000000n,\n * // @log: }\n * ```\n *\n * @param envelope - The transaction object to convert.\n * @param options - Options.\n * @returns An EIP-1559 Transaction Envelope.\n */\nfunction from(envelope, options = {}) {\n    const { signature } = options;\n    const envelope_ = (typeof envelope === 'string' ? deserialize(envelope) : envelope);\n    assert(envelope_);\n    return {\n        ...envelope_,\n        ...(signature ? _Signature_js__WEBPACK_IMPORTED_MODULE_5__.from(signature) : {}),\n        type: 'eip1559',\n    };\n}\n/**\n * Returns the payload to sign for a {@link ox#TransactionEnvelopeEip1559.TransactionEnvelopeEip1559}.\n *\n * @example\n * The example below demonstrates how to compute the sign payload which can be used\n * with ECDSA signing utilities like {@link ox#Secp256k1.(sign:function)}.\n *\n * ```ts twoslash\n * import { Secp256k1, TransactionEnvelopeEip1559 } from 'ox'\n *\n * const envelope = TransactionEnvelopeEip1559.from({\n *   chainId: 1,\n *   nonce: 0n,\n *   maxFeePerGas: 1000000000n,\n *   gas: 21000n,\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: 1000000000000000000n,\n * })\n *\n * const payload = TransactionEnvelopeEip1559.getSignPayload(envelope) // [!code focus]\n * // @log: '0x...'\n *\n * const signature = Secp256k1.sign({ payload, privateKey: '0x...' })\n * ```\n *\n * @param envelope - The transaction envelope to get the sign payload for.\n * @returns The sign payload.\n */\nfunction getSignPayload(envelope) {\n    return hash(envelope, { presign: true });\n}\n/**\n * Hashes a {@link ox#TransactionEnvelopeEip1559.TransactionEnvelopeEip1559}. This is the \"transaction hash\".\n *\n * @example\n * ```ts twoslash\n * import { Secp256k1, TransactionEnvelopeEip1559 } from 'ox'\n *\n * const envelope = TransactionEnvelopeEip1559.from({\n *   chainId: 1,\n *   nonce: 0n,\n *   maxFeePerGas: 1000000000n,\n *   gas: 21000n,\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: 1000000000000000000n,\n * })\n *\n * const signature = Secp256k1.sign({\n *   payload: TransactionEnvelopeEip1559.getSignPayload(envelope),\n *   privateKey: '0x...'\n * })\n *\n * const envelope_signed = TransactionEnvelopeEip1559.from(envelope, { signature })\n *\n * const hash = TransactionEnvelopeEip1559.hash(envelope_signed) // [!code focus]\n * ```\n *\n * @param envelope - The EIP-1559 Transaction Envelope to hash.\n * @param options - Options.\n * @returns The hash of the transaction envelope.\n */\nfunction hash(envelope, options = {}) {\n    const { presign } = options;\n    return _Hash_js__WEBPACK_IMPORTED_MODULE_6__.keccak256(serialize({\n        ...envelope,\n        ...(presign\n            ? {\n                r: undefined,\n                s: undefined,\n                yParity: undefined,\n                v: undefined,\n            }\n            : {}),\n    }));\n}\n/**\n * Serializes a {@link ox#TransactionEnvelopeEip1559.TransactionEnvelopeEip1559}.\n *\n * @example\n * ```ts twoslash\n * import { TransactionEnvelopeEip1559, Value } from 'ox'\n *\n * const envelope = TransactionEnvelopeEip1559.from({\n *   chainId: 1,\n *   maxFeePerGas: Value.fromGwei('10'),\n *   maxPriorityFeePerGas: Value.fromGwei('1'),\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: Value.fromEther('1'),\n * })\n *\n * const serialized = TransactionEnvelopeEip1559.serialize(envelope) // [!code focus]\n * ```\n *\n * @example\n * ### Attaching Signatures\n *\n * It is possible to attach a `signature` to the serialized Transaction Envelope.\n *\n * ```ts twoslash\n * import { Secp256k1, TransactionEnvelopeEip1559, Value } from 'ox'\n *\n * const envelope = TransactionEnvelopeEip1559.from({\n *   chainId: 1,\n *   maxFeePerGas: Value.fromGwei('10'),\n *   maxPriorityFeePerGas: Value.fromGwei('1'),\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: Value.fromEther('1'),\n * })\n *\n * const signature = Secp256k1.sign({\n *   payload: TransactionEnvelopeEip1559.getSignPayload(envelope),\n *   privateKey: '0x...',\n * })\n *\n * const serialized = TransactionEnvelopeEip1559.serialize(envelope, { // [!code focus]\n *   signature, // [!code focus]\n * }) // [!code focus]\n *\n * // ... send `serialized` transaction to JSON-RPC `eth_sendRawTransaction`\n * ```\n *\n * @param envelope - The Transaction Envelope to serialize.\n * @param options - Options.\n * @returns The serialized Transaction Envelope.\n */\nfunction serialize(envelope, options = {}) {\n    const { chainId, gas, nonce, to, value, maxFeePerGas, maxPriorityFeePerGas, accessList, data, input, } = envelope;\n    assert(envelope);\n    const accessTupleList = _AccessList_js__WEBPACK_IMPORTED_MODULE_4__.toTupleList(accessList);\n    const signature = _Signature_js__WEBPACK_IMPORTED_MODULE_5__.extract(options.signature || envelope);\n    const serialized = [\n        _Hex_js__WEBPACK_IMPORTED_MODULE_3__.fromNumber(chainId),\n        nonce ? _Hex_js__WEBPACK_IMPORTED_MODULE_3__.fromNumber(nonce) : '0x',\n        maxPriorityFeePerGas ? _Hex_js__WEBPACK_IMPORTED_MODULE_3__.fromNumber(maxPriorityFeePerGas) : '0x',\n        maxFeePerGas ? _Hex_js__WEBPACK_IMPORTED_MODULE_3__.fromNumber(maxFeePerGas) : '0x',\n        gas ? _Hex_js__WEBPACK_IMPORTED_MODULE_3__.fromNumber(gas) : '0x',\n        to ?? '0x',\n        value ? _Hex_js__WEBPACK_IMPORTED_MODULE_3__.fromNumber(value) : '0x',\n        data ?? input ?? '0x',\n        accessTupleList,\n        ...(signature ? _Signature_js__WEBPACK_IMPORTED_MODULE_5__.toTuple(signature) : []),\n    ];\n    return _Hex_js__WEBPACK_IMPORTED_MODULE_3__.concat(serializedType, _Rlp_js__WEBPACK_IMPORTED_MODULE_2__.fromHex(serialized));\n}\n/**\n * Converts an {@link ox#TransactionEnvelopeEip1559.TransactionEnvelopeEip1559} to an {@link ox#TransactionEnvelopeEip1559.Rpc}.\n *\n * @example\n * ```ts twoslash\n * import { RpcRequest, TransactionEnvelopeEip1559, Value } from 'ox'\n *\n * const envelope = TransactionEnvelopeEip1559.from({\n *   chainId: 1,\n *   nonce: 0n,\n *   gas: 21000n,\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: Value.fromEther('1'),\n * })\n *\n * const envelope_rpc = TransactionEnvelopeEip1559.toRpc(envelope) // [!code focus]\n *\n * const request = RpcRequest.from({\n *   id: 0,\n *   method: 'eth_sendTransaction',\n *   params: [envelope_rpc],\n * })\n * ```\n *\n * @param envelope - The EIP-1559 transaction envelope to convert.\n * @returns An RPC-formatted EIP-1559 transaction envelope.\n */\nfunction toRpc(envelope) {\n    const signature = _Signature_js__WEBPACK_IMPORTED_MODULE_5__.extract(envelope);\n    return {\n        ...envelope,\n        chainId: _Hex_js__WEBPACK_IMPORTED_MODULE_3__.fromNumber(envelope.chainId),\n        data: envelope.data ?? envelope.input,\n        type: '0x2',\n        ...(typeof envelope.gas === 'bigint'\n            ? { gas: _Hex_js__WEBPACK_IMPORTED_MODULE_3__.fromNumber(envelope.gas) }\n            : {}),\n        ...(typeof envelope.nonce === 'bigint'\n            ? { nonce: _Hex_js__WEBPACK_IMPORTED_MODULE_3__.fromNumber(envelope.nonce) }\n            : {}),\n        ...(typeof envelope.value === 'bigint'\n            ? { value: _Hex_js__WEBPACK_IMPORTED_MODULE_3__.fromNumber(envelope.value) }\n            : {}),\n        ...(typeof envelope.maxFeePerGas === 'bigint'\n            ? { maxFeePerGas: _Hex_js__WEBPACK_IMPORTED_MODULE_3__.fromNumber(envelope.maxFeePerGas) }\n            : {}),\n        ...(typeof envelope.maxPriorityFeePerGas === 'bigint'\n            ? {\n                maxPriorityFeePerGas: _Hex_js__WEBPACK_IMPORTED_MODULE_3__.fromNumber(envelope.maxPriorityFeePerGas),\n            }\n            : {}),\n        ...(signature ? _Signature_js__WEBPACK_IMPORTED_MODULE_5__.toRpc(signature) : {}),\n    };\n}\n/**\n * Validates a {@link ox#TransactionEnvelopeEip1559.TransactionEnvelopeEip1559}. Returns `true` if the envelope is valid, `false` otherwise.\n *\n * @example\n * ```ts twoslash\n * import { TransactionEnvelopeEip1559, Value } from 'ox'\n *\n * const valid = TransactionEnvelopeEip1559.assert({\n *   maxFeePerGas: 2n ** 256n - 1n + 1n,\n *   chainId: 1,\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: Value.fromEther('1'),\n * })\n * // @log: false\n * ```\n *\n * @param envelope - The transaction envelope to validate.\n */\nfunction validate(envelope) {\n    try {\n        assert(envelope);\n        return true;\n    }\n    catch {\n        return false;\n    }\n}\n//# sourceMappingURL=TransactionEnvelopeEip1559.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ox/_esm/core/TransactionEnvelopeEip1559.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ox/_esm/core/TransactionEnvelopeEip2930.js":
/*!*****************************************************************!*\
  !*** ./node_modules/ox/_esm/core/TransactionEnvelopeEip2930.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assert: () => (/* binding */ assert),\n/* harmony export */   deserialize: () => (/* binding */ deserialize),\n/* harmony export */   from: () => (/* binding */ from),\n/* harmony export */   getSignPayload: () => (/* binding */ getSignPayload),\n/* harmony export */   hash: () => (/* binding */ hash),\n/* harmony export */   serialize: () => (/* binding */ serialize),\n/* harmony export */   serializedType: () => (/* binding */ serializedType),\n/* harmony export */   toRpc: () => (/* binding */ toRpc),\n/* harmony export */   type: () => (/* binding */ type),\n/* harmony export */   validate: () => (/* binding */ validate)\n/* harmony export */ });\n/* harmony import */ var _AccessList_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./AccessList.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/AccessList.js\");\n/* harmony import */ var _Address_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Address.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Address.js\");\n/* harmony import */ var _Hash_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Hash.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Hash.js\");\n/* harmony import */ var _Hex_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Hex.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Hex.js\");\n/* harmony import */ var _Rlp_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Rlp.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Rlp.js\");\n/* harmony import */ var _Signature_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Signature.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Signature.js\");\n/* harmony import */ var _TransactionEnvelope_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./TransactionEnvelope.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/TransactionEnvelope.js\");\n\n\n\n\n\n\n\nconst serializedType = '0x01';\nconst type = 'eip2930';\n/**\n * Asserts a {@link ox#TransactionEnvelopeEip2930.TransactionEnvelopeEip2930} is valid.\n *\n * @example\n * ```ts twoslash\n * import { TransactionEnvelopeEip2930, Value } from 'ox'\n *\n * TransactionEnvelopeEip2930.assert({\n *   gasPrice: 2n ** 256n - 1n + 1n,\n *   chainId: 1,\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: Value.fromEther('1'),\n * })\n * // @error: GasPriceTooHighError:\n * // @error: The gas price (`gasPrice` = 115792089237316195423570985008687907853269984665640564039457584007913 gwei) cannot be\n * // @error: higher than the maximum allowed value (2^256-1).\n * ```\n *\n * @param envelope - The transaction envelope to assert.\n */\nfunction assert(envelope) {\n    const { chainId, gasPrice, to } = envelope;\n    if (chainId <= 0)\n        throw new _TransactionEnvelope_js__WEBPACK_IMPORTED_MODULE_0__.InvalidChainIdError({ chainId });\n    if (to)\n        _Address_js__WEBPACK_IMPORTED_MODULE_1__.assert(to, { strict: false });\n    if (gasPrice && BigInt(gasPrice) > 2n ** 256n - 1n)\n        throw new _TransactionEnvelope_js__WEBPACK_IMPORTED_MODULE_0__.GasPriceTooHighError({ gasPrice });\n}\n/**\n * Deserializes a {@link ox#TransactionEnvelopeEip2930.TransactionEnvelopeEip2930} from its serialized form.\n *\n * @example\n * ```ts twoslash\n * import { TransactionEnvelopeEip2930 } from 'ox'\n *\n * const envelope = TransactionEnvelopeEip2930.deserialize('0x01ef0182031184773594008477359400809470997970c51812dc3a010c7d01b50e0d17dc79c8880de0b6b3a764000080c0')\n * // @log: {\n * // @log:   type: 'eip2930',\n * // @log:   nonce: 785n,\n * // @log:   gasPrice: 2000000000n,\n * // @log:   gas: 1000000n,\n * // @log:   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n * // @log:   value: 1000000000000000000n,\n * // @log: }\n * ```\n *\n * @param serialized - The serialized transaction.\n * @returns Deserialized Transaction Envelope.\n */\nfunction deserialize(serialized) {\n    const transactionArray = _Rlp_js__WEBPACK_IMPORTED_MODULE_2__.toHex(_Hex_js__WEBPACK_IMPORTED_MODULE_3__.slice(serialized, 1));\n    const [chainId, nonce, gasPrice, gas, to, value, data, accessList, yParity, r, s,] = transactionArray;\n    if (!(transactionArray.length === 8 || transactionArray.length === 11))\n        throw new _TransactionEnvelope_js__WEBPACK_IMPORTED_MODULE_0__.InvalidSerializedError({\n            attributes: {\n                chainId,\n                nonce,\n                gasPrice,\n                gas,\n                to,\n                value,\n                data,\n                accessList,\n                ...(transactionArray.length > 8\n                    ? {\n                        yParity,\n                        r,\n                        s,\n                    }\n                    : {}),\n            },\n            serialized,\n            type,\n        });\n    let transaction = {\n        chainId: Number(chainId),\n        type,\n    };\n    if (_Hex_js__WEBPACK_IMPORTED_MODULE_3__.validate(to) && to !== '0x')\n        transaction.to = to;\n    if (_Hex_js__WEBPACK_IMPORTED_MODULE_3__.validate(gas) && gas !== '0x')\n        transaction.gas = BigInt(gas);\n    if (_Hex_js__WEBPACK_IMPORTED_MODULE_3__.validate(data) && data !== '0x')\n        transaction.data = data;\n    if (_Hex_js__WEBPACK_IMPORTED_MODULE_3__.validate(nonce))\n        transaction.nonce = nonce === '0x' ? 0n : BigInt(nonce);\n    if (_Hex_js__WEBPACK_IMPORTED_MODULE_3__.validate(value) && value !== '0x')\n        transaction.value = BigInt(value);\n    if (_Hex_js__WEBPACK_IMPORTED_MODULE_3__.validate(gasPrice) && gasPrice !== '0x')\n        transaction.gasPrice = BigInt(gasPrice);\n    if (accessList.length !== 0 && accessList !== '0x')\n        transaction.accessList = _AccessList_js__WEBPACK_IMPORTED_MODULE_4__.fromTupleList(accessList);\n    const signature = r && s && yParity ? _Signature_js__WEBPACK_IMPORTED_MODULE_5__.fromTuple([yParity, r, s]) : undefined;\n    if (signature)\n        transaction = {\n            ...transaction,\n            ...signature,\n        };\n    assert(transaction);\n    return transaction;\n}\n/**\n * Converts an arbitrary transaction object into an EIP-2930 Transaction Envelope.\n *\n * @example\n * ```ts twoslash\n * // @noErrors\n * import { TransactionEnvelopeEip2930, Value } from 'ox'\n *\n * const envelope = TransactionEnvelopeEip2930.from({\n *   chainId: 1,\n *   accessList: [...],\n *   gasPrice: Value.fromGwei('10'),\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: Value.fromEther('1'),\n * })\n * ```\n *\n * @example\n * ### Attaching Signatures\n *\n * It is possible to attach a `signature` to the transaction envelope.\n *\n * ```ts twoslash\n * import { Secp256k1, TransactionEnvelopeEip2930, Value } from 'ox'\n *\n * const envelope = TransactionEnvelopeEip2930.from({\n *   chainId: 1,\n *   gasPrice: Value.fromGwei('10'),\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: Value.fromEther('1'),\n * })\n *\n * const signature = Secp256k1.sign({\n *   payload: TransactionEnvelopeEip2930.getSignPayload(envelope),\n *   privateKey: '0x...',\n * })\n *\n * const envelope_signed = TransactionEnvelopeEip2930.from(envelope, { // [!code focus]\n *   signature, // [!code focus]\n * }) // [!code focus]\n * // @log: {\n * // @log:   chainId: 1,\n * // @log:   gasPrice: 10000000000n,\n * // @log:   to: '0x0000000000000000000000000000000000000000',\n * // @log:   type: 'eip2930',\n * // @log:   value: 1000000000000000000n,\n * // @log:   r: 125...n,\n * // @log:   s: 642...n,\n * // @log:   yParity: 0,\n * // @log: }\n * ```\n *\n * @example\n * ### From Serialized\n *\n * It is possible to instantiate an EIP-2930 Transaction Envelope from a {@link ox#TransactionEnvelopeEip2930.Serialized} value.\n *\n * ```ts twoslash\n * import { TransactionEnvelopeEip2930 } from 'ox'\n *\n * const envelope = TransactionEnvelopeEip2930.from('0x01f858018203118502540be4008504a817c800809470997970c51812dc3a010c7d01b50e0d17dc79c8880de0b6b3a764000080c08477359400e1a001627c687261b0e7f8638af1112efa8a77e23656f6e7945275b19e9deed80261')\n * // @log: {\n * // @log:   chainId: 1,\n * // @log:   gasPrice: 10000000000n,\n * // @log:   to: '0x0000000000000000000000000000000000000000',\n * // @log:   type: 'eip2930',\n * // @log:   value: 1000000000000000000n,\n * // @log: }\n * ```\n *\n * @param envelope - The transaction object to convert.\n * @param options - Options.\n * @returns A {@link ox#TransactionEnvelopeEip2930.TransactionEnvelopeEip2930}\n */\nfunction from(envelope, options = {}) {\n    const { signature } = options;\n    const envelope_ = (typeof envelope === 'string' ? deserialize(envelope) : envelope);\n    assert(envelope_);\n    return {\n        ...envelope_,\n        ...(signature ? _Signature_js__WEBPACK_IMPORTED_MODULE_5__.from(signature) : {}),\n        type: 'eip2930',\n    };\n}\n/**\n * Returns the payload to sign for a {@link ox#TransactionEnvelopeEip2930.TransactionEnvelopeEip2930}.\n *\n * @example\n * The example below demonstrates how to compute the sign payload which can be used\n * with ECDSA signing utilities like {@link ox#Secp256k1.(sign:function)}.\n *\n * ```ts twoslash\n * import { Secp256k1, TransactionEnvelopeEip2930 } from 'ox'\n *\n * const envelope = TransactionEnvelopeEip2930.from({\n *   chainId: 1,\n *   nonce: 0n,\n *   gasPrice: 1000000000n,\n *   gas: 21000n,\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: 1000000000000000000n,\n * })\n *\n * const payload = TransactionEnvelopeEip2930.getSignPayload(envelope) // [!code focus]\n * // @log: '0x...'\n *\n * const signature = Secp256k1.sign({ payload, privateKey: '0x...' })\n * ```\n *\n * @param envelope - The transaction envelope to get the sign payload for.\n * @returns The sign payload.\n */\nfunction getSignPayload(envelope) {\n    return hash(envelope, { presign: true });\n}\n/**\n * Hashes a {@link ox#TransactionEnvelopeEip2930.TransactionEnvelopeEip2930}. This is the \"transaction hash\".\n *\n * @example\n * ```ts twoslash\n * import { Secp256k1, TransactionEnvelopeEip2930 } from 'ox'\n *\n * const envelope = TransactionEnvelopeEip2930.from({\n *   chainId: 1,\n *   nonce: 0n,\n *   gasPrice: 1000000000n,\n *   gas: 21000n,\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: 1000000000000000000n,\n * })\n *\n * const signature = Secp256k1.sign({\n *   payload: TransactionEnvelopeEip2930.getSignPayload(envelope),\n *   privateKey: '0x...',\n * })\n *\n * const envelope_signed = TransactionEnvelopeEip2930.from(envelope, {\n *   signature,\n * })\n *\n * const hash = TransactionEnvelopeEip2930.hash(envelope_signed) // [!code focus]\n * ```\n *\n * @param envelope - The EIP-2930 Transaction Envelope to hash.\n * @param options - Options.\n * @returns The hash of the transaction envelope.\n */\nfunction hash(envelope, options = {}) {\n    const { presign } = options;\n    return _Hash_js__WEBPACK_IMPORTED_MODULE_6__.keccak256(serialize({\n        ...envelope,\n        ...(presign\n            ? {\n                r: undefined,\n                s: undefined,\n                yParity: undefined,\n                v: undefined,\n            }\n            : {}),\n    }));\n}\n/**\n * Serializes a {@link ox#TransactionEnvelopeEip2930.TransactionEnvelopeEip2930}.\n *\n * @example\n * ```ts twoslash\n * import { TransactionEnvelopeEip2930, Value } from 'ox'\n *\n * const envelope = TransactionEnvelopeEip2930.from({\n *   chainId: 1,\n *   gasPrice: Value.fromGwei('10'),\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: Value.fromEther('1'),\n * })\n *\n * const serialized = TransactionEnvelopeEip2930.serialize(envelope) // [!code focus]\n * ```\n *\n * @example\n * ### Attaching Signatures\n *\n * It is possible to attach a `signature` to the serialized Transaction Envelope.\n *\n * ```ts twoslash\n * import { Secp256k1, TransactionEnvelopeEip2930, Value } from 'ox'\n *\n * const envelope = TransactionEnvelopeEip2930.from({\n *   chainId: 1,\n *   gasPrice: Value.fromGwei('10'),\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: Value.fromEther('1'),\n * })\n *\n * const signature = Secp256k1.sign({\n *   payload: TransactionEnvelopeEip2930.getSignPayload(envelope),\n *   privateKey: '0x...',\n * })\n *\n * const serialized = TransactionEnvelopeEip2930.serialize(envelope, { // [!code focus]\n *   signature, // [!code focus]\n * }) // [!code focus]\n *\n * // ... send `serialized` transaction to JSON-RPC `eth_sendRawTransaction`\n * ```\n *\n * @param envelope - The Transaction Envelope to serialize.\n * @param options - Options.\n * @returns The serialized Transaction Envelope.\n */\nfunction serialize(envelope, options = {}) {\n    const { chainId, gas, data, input, nonce, to, value, accessList, gasPrice } = envelope;\n    assert(envelope);\n    const accessTupleList = _AccessList_js__WEBPACK_IMPORTED_MODULE_4__.toTupleList(accessList);\n    const signature = _Signature_js__WEBPACK_IMPORTED_MODULE_5__.extract(options.signature || envelope);\n    const serialized = [\n        _Hex_js__WEBPACK_IMPORTED_MODULE_3__.fromNumber(chainId),\n        nonce ? _Hex_js__WEBPACK_IMPORTED_MODULE_3__.fromNumber(nonce) : '0x',\n        gasPrice ? _Hex_js__WEBPACK_IMPORTED_MODULE_3__.fromNumber(gasPrice) : '0x',\n        gas ? _Hex_js__WEBPACK_IMPORTED_MODULE_3__.fromNumber(gas) : '0x',\n        to ?? '0x',\n        value ? _Hex_js__WEBPACK_IMPORTED_MODULE_3__.fromNumber(value) : '0x',\n        data ?? input ?? '0x',\n        accessTupleList,\n        ...(signature ? _Signature_js__WEBPACK_IMPORTED_MODULE_5__.toTuple(signature) : []),\n    ];\n    return _Hex_js__WEBPACK_IMPORTED_MODULE_3__.concat('0x01', _Rlp_js__WEBPACK_IMPORTED_MODULE_2__.fromHex(serialized));\n}\n/**\n * Converts an {@link ox#TransactionEnvelopeEip2930.TransactionEnvelopeEip2930} to an {@link ox#TransactionEnvelopeEip2930.Rpc}.\n *\n * @example\n * ```ts twoslash\n * import { RpcRequest, TransactionEnvelopeEip2930, Value } from 'ox'\n *\n * const envelope = TransactionEnvelopeEip2930.from({\n *   chainId: 1,\n *   nonce: 0n,\n *   gas: 21000n,\n *   maxFeePerGas: Value.fromGwei('20'),\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: Value.fromEther('1'),\n * })\n *\n * const envelope_rpc = TransactionEnvelopeEip2930.toRpc(envelope) // [!code focus]\n *\n * const request = RpcRequest.from({\n *   id: 0,\n *   method: 'eth_sendTransaction',\n *   params: [envelope_rpc],\n * })\n * ```\n *\n * @param envelope - The EIP-2930 transaction envelope to convert.\n * @returns An RPC-formatted EIP-2930 transaction envelope.\n */\nfunction toRpc(envelope) {\n    const signature = _Signature_js__WEBPACK_IMPORTED_MODULE_5__.extract(envelope);\n    return {\n        ...envelope,\n        chainId: _Hex_js__WEBPACK_IMPORTED_MODULE_3__.fromNumber(envelope.chainId),\n        data: envelope.data ?? envelope.input,\n        ...(typeof envelope.gas === 'bigint'\n            ? { gas: _Hex_js__WEBPACK_IMPORTED_MODULE_3__.fromNumber(envelope.gas) }\n            : {}),\n        ...(typeof envelope.nonce === 'bigint'\n            ? { nonce: _Hex_js__WEBPACK_IMPORTED_MODULE_3__.fromNumber(envelope.nonce) }\n            : {}),\n        ...(typeof envelope.value === 'bigint'\n            ? { value: _Hex_js__WEBPACK_IMPORTED_MODULE_3__.fromNumber(envelope.value) }\n            : {}),\n        ...(typeof envelope.gasPrice === 'bigint'\n            ? { gasPrice: _Hex_js__WEBPACK_IMPORTED_MODULE_3__.fromNumber(envelope.gasPrice) }\n            : {}),\n        type: '0x1',\n        ...(signature ? _Signature_js__WEBPACK_IMPORTED_MODULE_5__.toRpc(signature) : {}),\n    };\n}\n/**\n * Validates a {@link ox#TransactionEnvelopeEip2930.TransactionEnvelopeEip2930}. Returns `true` if the envelope is valid, `false` otherwise.\n *\n * @example\n * ```ts twoslash\n * import { TransactionEnvelopeEip2930, Value } from 'ox'\n *\n * const valid = TransactionEnvelopeEip2930.assert({\n *   gasPrice: 2n ** 256n - 1n + 1n,\n *   chainId: 1,\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: Value.fromEther('1'),\n * })\n * // @log: false\n * ```\n *\n * @param envelope - The transaction envelope to validate.\n */\nfunction validate(envelope) {\n    try {\n        assert(envelope);\n        return true;\n    }\n    catch {\n        return false;\n    }\n}\n//# sourceMappingURL=TransactionEnvelopeEip2930.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ox/_esm/core/TransactionEnvelopeEip2930.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ox/_esm/core/TransactionEnvelopeEip4844.js":
/*!*****************************************************************!*\
  !*** ./node_modules/ox/_esm/core/TransactionEnvelopeEip4844.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assert: () => (/* binding */ assert),\n/* harmony export */   deserialize: () => (/* binding */ deserialize),\n/* harmony export */   from: () => (/* binding */ from),\n/* harmony export */   getSignPayload: () => (/* binding */ getSignPayload),\n/* harmony export */   hash: () => (/* binding */ hash),\n/* harmony export */   serialize: () => (/* binding */ serialize),\n/* harmony export */   serializedType: () => (/* binding */ serializedType),\n/* harmony export */   toRpc: () => (/* binding */ toRpc),\n/* harmony export */   type: () => (/* binding */ type),\n/* harmony export */   validate: () => (/* binding */ validate)\n/* harmony export */ });\n/* harmony import */ var _AccessList_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./AccessList.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/AccessList.js\");\n/* harmony import */ var _Blobs_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Blobs.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Blobs.js\");\n/* harmony import */ var _Hash_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./Hash.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Hash.js\");\n/* harmony import */ var _Hex_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Hex.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Hex.js\");\n/* harmony import */ var _Kzg_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Kzg.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Kzg.js\");\n/* harmony import */ var _Rlp_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Rlp.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Rlp.js\");\n/* harmony import */ var _Signature_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Signature.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Signature.js\");\n/* harmony import */ var _TransactionEnvelope_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./TransactionEnvelope.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/TransactionEnvelope.js\");\n/* harmony import */ var _TransactionEnvelopeEip1559_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./TransactionEnvelopeEip1559.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/TransactionEnvelopeEip1559.js\");\n\n\n\n\n\n\n\n\n\nconst serializedType = '0x03';\nconst type = 'eip4844';\n/**\n * Asserts a {@link ox#TransactionEnvelopeEip4844.TransactionEnvelopeEip4844} is valid.\n *\n * @example\n * ```ts twoslash\n * import { TransactionEnvelopeEip4844, Value } from 'ox'\n *\n * TransactionEnvelopeEip4844.assert({\n *   blobVersionedHashes: [],\n *   chainId: 1,\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: Value.fromEther('1'),\n * })\n * // @error: EmptyBlobVersionedHashesError: Blob versioned hashes must not be empty.\n * ```\n *\n * @param envelope - The transaction envelope to assert.\n */\nfunction assert(envelope) {\n    const { blobVersionedHashes } = envelope;\n    if (blobVersionedHashes) {\n        if (blobVersionedHashes.length === 0)\n            throw new _Blobs_js__WEBPACK_IMPORTED_MODULE_0__.EmptyBlobVersionedHashesError();\n        for (const hash of blobVersionedHashes) {\n            const size = _Hex_js__WEBPACK_IMPORTED_MODULE_1__.size(hash);\n            const version = _Hex_js__WEBPACK_IMPORTED_MODULE_1__.toNumber(_Hex_js__WEBPACK_IMPORTED_MODULE_1__.slice(hash, 0, 1));\n            if (size !== 32)\n                throw new _Blobs_js__WEBPACK_IMPORTED_MODULE_0__.InvalidVersionedHashSizeError({ hash, size });\n            if (version !== _Kzg_js__WEBPACK_IMPORTED_MODULE_2__.versionedHashVersion)\n                throw new _Blobs_js__WEBPACK_IMPORTED_MODULE_0__.InvalidVersionedHashVersionError({\n                    hash,\n                    version,\n                });\n        }\n    }\n    _TransactionEnvelopeEip1559_js__WEBPACK_IMPORTED_MODULE_3__.assert(envelope);\n}\n/**\n * Deserializes a {@link ox#TransactionEnvelopeEip4844.TransactionEnvelopeEip4844} from its serialized form.\n *\n * @example\n * ```ts twoslash\n * import { TransactionEnvelopeEip4844 } from 'ox'\n *\n * const envelope = TransactionEnvelopeEip4844.deserialize('0x03ef0182031184773594008477359400809470997970c51812dc3a010c7d01b50e0d17dc79c8880de0b6b3a764000080c0')\n * // @log: {\n * // @log:   blobVersionedHashes: [...],\n * // @log:   type: 'eip4844',\n * // @log:   nonce: 785n,\n * // @log:   maxFeePerGas: 2000000000n,\n * // @log:   gas: 1000000n,\n * // @log:   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n * // @log:   value: 1000000000000000000n,\n * // @log: }\n * ```\n *\n * @param serialized - The serialized transaction.\n * @returns Deserialized Transaction Envelope.\n */\nfunction deserialize(serialized) {\n    const transactionOrWrapperArray = _Rlp_js__WEBPACK_IMPORTED_MODULE_4__.toHex(_Hex_js__WEBPACK_IMPORTED_MODULE_1__.slice(serialized, 1));\n    const hasNetworkWrapper = transactionOrWrapperArray.length === 4;\n    const transactionArray = hasNetworkWrapper\n        ? transactionOrWrapperArray[0]\n        : transactionOrWrapperArray;\n    const wrapperArray = hasNetworkWrapper\n        ? transactionOrWrapperArray.slice(1)\n        : [];\n    const [chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gas, to, value, data, accessList, maxFeePerBlobGas, blobVersionedHashes, yParity, r, s,] = transactionArray;\n    const [blobs, commitments, proofs] = wrapperArray;\n    if (!(transactionArray.length === 11 || transactionArray.length === 14))\n        throw new _TransactionEnvelope_js__WEBPACK_IMPORTED_MODULE_5__.InvalidSerializedError({\n            attributes: {\n                chainId,\n                nonce,\n                maxPriorityFeePerGas,\n                maxFeePerGas,\n                gas,\n                to,\n                value,\n                data,\n                accessList,\n                ...(transactionArray.length > 9\n                    ? {\n                        yParity,\n                        r,\n                        s,\n                    }\n                    : {}),\n            },\n            serialized,\n            type,\n        });\n    let transaction = {\n        blobVersionedHashes: blobVersionedHashes,\n        chainId: Number(chainId),\n        type,\n    };\n    if (_Hex_js__WEBPACK_IMPORTED_MODULE_1__.validate(to) && to !== '0x')\n        transaction.to = to;\n    if (_Hex_js__WEBPACK_IMPORTED_MODULE_1__.validate(gas) && gas !== '0x')\n        transaction.gas = BigInt(gas);\n    if (_Hex_js__WEBPACK_IMPORTED_MODULE_1__.validate(data) && data !== '0x')\n        transaction.data = data;\n    if (_Hex_js__WEBPACK_IMPORTED_MODULE_1__.validate(nonce))\n        transaction.nonce = nonce === '0x' ? 0n : BigInt(nonce);\n    if (_Hex_js__WEBPACK_IMPORTED_MODULE_1__.validate(value) && value !== '0x')\n        transaction.value = BigInt(value);\n    if (_Hex_js__WEBPACK_IMPORTED_MODULE_1__.validate(maxFeePerBlobGas) && maxFeePerBlobGas !== '0x')\n        transaction.maxFeePerBlobGas = BigInt(maxFeePerBlobGas);\n    if (_Hex_js__WEBPACK_IMPORTED_MODULE_1__.validate(maxFeePerGas) && maxFeePerGas !== '0x')\n        transaction.maxFeePerGas = BigInt(maxFeePerGas);\n    if (_Hex_js__WEBPACK_IMPORTED_MODULE_1__.validate(maxPriorityFeePerGas) && maxPriorityFeePerGas !== '0x')\n        transaction.maxPriorityFeePerGas = BigInt(maxPriorityFeePerGas);\n    if (accessList?.length !== 0 && accessList !== '0x')\n        transaction.accessList = _AccessList_js__WEBPACK_IMPORTED_MODULE_6__.fromTupleList(accessList);\n    if (blobs && commitments && proofs)\n        transaction.sidecars = _Blobs_js__WEBPACK_IMPORTED_MODULE_0__.toSidecars(blobs, {\n            commitments: commitments,\n            proofs: proofs,\n        });\n    const signature = r && s && yParity\n        ? _Signature_js__WEBPACK_IMPORTED_MODULE_7__.fromTuple([yParity, r, s])\n        : undefined;\n    if (signature)\n        transaction = {\n            ...transaction,\n            ...signature,\n        };\n    assert(transaction);\n    return transaction;\n}\n/**\n * Converts an arbitrary transaction object into an EIP-4844 Transaction Envelope.\n *\n * @example\n * ```ts twoslash\n * // @noErrors\n * import { Blobs, TransactionEnvelopeEip4844, Value } from 'ox'\n * import { kzg } from './kzg'\n *\n * const blobs = Blobs.from('0xdeadbeef')\n * const blobVersionedHashes = Blobs.toVersionedHashes(blobs, { kzg })\n *\n * const envelope = TransactionEnvelopeEip4844.from({\n *   chainId: 1,\n *   blobVersionedHashes,\n *   maxFeePerBlobGas: Value.fromGwei('3'),\n *   maxFeePerGas: Value.fromGwei('10'),\n *   maxPriorityFeePerGas: Value.fromGwei('1'),\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: Value.fromEther('1'),\n * })\n * ```\n *\n * @example\n * ### Attaching Signatures\n *\n * It is possible to attach a `signature` to the transaction envelope.\n *\n * ```ts twoslash\n * // @noErrors\n * import { Blobs, Secp256k1, TransactionEnvelopeEip4844, Value } from 'ox'\n * import { kzg } from './kzg'\n *\n * const blobs = Blobs.from('0xdeadbeef')\n * const sidecars = Blobs.toSidecars(blobs, { kzg })\n * const blobVersionedHashes = Blobs.sidecarsToVersionedHashes(sidecars)\n *\n * const envelope = TransactionEnvelopeEip4844.from({\n *   blobVersionedHashes,\n *   chainId: 1,\n *   maxFeePerBlobGas: Value.fromGwei('3'),\n *   maxFeePerGas: Value.fromGwei('10'),\n *   maxPriorityFeePerGas: Value.fromGwei('1'),\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: Value.fromEther('1'),\n * })\n *\n * const signature = Secp256k1.sign({\n *   payload: TransactionEnvelopeEip4844.getSignPayload(envelope),\n *   privateKey: '0x...',\n * })\n *\n * const envelope_signed = TransactionEnvelopeEip4844.from(envelope, { // [!code focus]\n *   sidecars, // [!code focus]\n *   signature, // [!code focus]\n * }) // [!code focus]\n * // @log: {\n * // @log:   blobVersionedHashes: [...],\n * // @log:   chainId: 1,\n * // @log:   maxFeePerBlobGas: 3000000000n,\n * // @log:   maxFeePerGas: 10000000000n,\n * // @log:   maxPriorityFeePerGas: 1000000000n,\n * // @log:   to: '0x0000000000000000000000000000000000000000',\n * // @log:   type: 'eip4844',\n * // @log:   value: 1000000000000000000n,\n * // @log:   r: 125...n,\n * // @log:   s: 642...n,\n * // @log:   yParity: 0,\n * // @log: }\n * ```\n *\n * @example\n * ### From Serialized\n *\n * It is possible to instantiate an EIP-4844 Transaction Envelope from a {@link ox#TransactionEnvelopeEip4844.Serialized} value.\n *\n * ```ts twoslash\n * import { TransactionEnvelopeEip4844 } from 'ox'\n *\n * const envelope = TransactionEnvelopeEip4844.from('0x03f858018203118502540be4008504a817c800809470997970c51812dc3a010c7d01b50e0d17dc79c8880de0b6b3a764000080c08477359400e1a001627c687261b0e7f8638af1112efa8a77e23656f6e7945275b19e9deed80261')\n * // @log: {\n * // @log:   blobVersionedHashes: [...],\n * // @log:   chainId: 1,\n * // @log:   maxFeePerGas: 10000000000n,\n * // @log:   to: '0x0000000000000000000000000000000000000000',\n * // @log:   type: 'eip4844',\n * // @log:   value: 1000000000000000000n,\n * // @log: }\n * ```\n *\n * @param envelope - The transaction object to convert.\n * @param options - Options.\n * @returns An EIP-4844 Transaction Envelope.\n */\nfunction from(envelope, options = {}) {\n    const { signature } = options;\n    const envelope_ = (typeof envelope === 'string' ? deserialize(envelope) : envelope);\n    assert(envelope_);\n    return {\n        ...envelope_,\n        ...(signature ? _Signature_js__WEBPACK_IMPORTED_MODULE_7__.from(signature) : {}),\n        type: 'eip4844',\n    };\n}\n/**\n * Returns the payload to sign for a {@link ox#TransactionEnvelopeEip4844.TransactionEnvelopeEip4844}.\n *\n * @example\n * The example below demonstrates how to compute the sign payload which can be used\n * with ECDSA signing utilities like {@link ox#Secp256k1.(sign:function)}.\n *\n * ```ts twoslash\n * // @noErrors\n * import { Blobs, Secp256k1, TransactionEnvelopeEip4844 } from 'ox'\n * import { kzg } from './kzg'\n *\n * const blobs = Blobs.from('0xdeadbeef')\n * const blobVersionedHashes = Blobs.toVersionedHashes(blobs, { kzg })\n *\n * const envelope = TransactionEnvelopeEip4844.from({\n *   blobVersionedHashes,\n *   chainId: 1,\n *   nonce: 0n,\n *   maxFeePerGas: 1000000000n,\n *   gas: 21000n,\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: 1000000000000000000n,\n * })\n *\n * const payload = TransactionEnvelopeEip4844.getSignPayload(envelope) // [!code focus]\n * // @log: '0x...'\n *\n * const signature = Secp256k1.sign({ payload, privateKey: '0x...' })\n * ```\n *\n * @param envelope - The transaction envelope to get the sign payload for.\n * @returns The sign payload.\n */\nfunction getSignPayload(envelope) {\n    return hash(envelope, { presign: true });\n}\n/**\n * Hashes a {@link ox#TransactionEnvelopeEip4844.TransactionEnvelopeEip4844}. This is the \"transaction hash\".\n *\n * @example\n * ```ts twoslash\n * // @noErrors\n * import { Blobs, TransactionEnvelopeEip4844 } from 'ox'\n * import { kzg } from './kzg'\n *\n * const blobs = Blobs.from('0xdeadbeef')\n * const blobVersionedHashes = Blobs.toVersionedHashes(blobs, { kzg })\n *\n * const envelope = TransactionEnvelopeEip4844.from({\n *   blobVersionedHashes,\n *   chainId: 1,\n *   nonce: 0n,\n *   maxFeePerGas: 1000000000n,\n *   gas: 21000n,\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: 1000000000000000000n,\n * })\n *\n * const hash = TransactionEnvelopeEip4844.hash(envelope) // [!code focus]\n * ```\n *\n * @param envelope - The EIP-4844 Transaction Envelope to hash.\n * @param options - Options.\n * @returns The hash of the transaction envelope.\n */\nfunction hash(envelope, options = {}) {\n    const { presign } = options;\n    return _Hash_js__WEBPACK_IMPORTED_MODULE_8__.keccak256(serialize({\n        ...envelope,\n        ...(presign\n            ? {\n                sidecars: undefined,\n                r: undefined,\n                s: undefined,\n                yParity: undefined,\n                v: undefined,\n            }\n            : {}),\n    }));\n}\n/**\n * Serializes a {@link ox#TransactionEnvelopeEip4844.TransactionEnvelopeEip4844}.\n *\n * @example\n * ```ts twoslash\n * // @noErrors\n * import { Blobs, TransactionEnvelopeEip4844 } from 'ox'\n * import { kzg } from './kzg'\n *\n * const blobs = Blobs.from('0xdeadbeef')\n * const blobVersionedHashes = Blobs.toVersionedHashes(blobs, { kzg })\n *\n * const envelope = TransactionEnvelopeEip4844.from({\n *   blobVersionedHashes,\n *   chainId: 1,\n *   maxFeePerGas: Value.fromGwei('10'),\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: Value.fromEther('1'),\n * })\n *\n * const serialized = TransactionEnvelopeEip4844.serialize(envelope) // [!code focus]\n * ```\n *\n * @example\n * ### Attaching Signatures\n *\n * It is possible to attach a `signature` to the serialized Transaction Envelope.\n *\n * ```ts twoslash\n * // @noErrors\n * import { Blobs, Secp256k1, TransactionEnvelopeEip4844, Value } from 'ox'\n * import { kzg } from './kzg'\n *\n * const blobs = Blobs.from('0xdeadbeef')\n * const sidecars = Blobs.toSidecars(blobs, { kzg })\n * const blobVersionedHashes = Blobs.sidecarsToVersionedHashes(blobs)\n *\n * const envelope = TransactionEnvelopeEip4844.from({\n *   blobVersionedHashes,\n *   chainId: 1,\n *   maxFeePerBlobGas: Value.fromGwei('3'),\n *   maxFeePerGas: Value.fromGwei('10'),\n *   maxPriorityFeePerGas: Value.fromGwei('1'),\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: Value.fromEther('1'),\n * })\n *\n * const signature = Secp256k1.sign({\n *   payload: TransactionEnvelopeEip4844.getSignPayload(envelope),\n *   privateKey: '0x...',\n * })\n *\n * const serialized = TransactionEnvelopeEip4844.serialize(envelope, { // [!code focus]\n *   sidecars, // [!code focus]\n *   signature, // [!code focus]\n * }) // [!code focus]\n *\n * // ... send `serialized` transaction to JSON-RPC `eth_sendRawTransaction`\n * ```\n *\n * @param envelope - The Transaction Envelope to serialize.\n * @param options - Options.\n * @returns The serialized Transaction Envelope.\n */\nfunction serialize(envelope, options = {}) {\n    const { blobVersionedHashes, chainId, gas, nonce, to, value, maxFeePerBlobGas, maxFeePerGas, maxPriorityFeePerGas, accessList, data, } = envelope;\n    assert(envelope);\n    const accessTupleList = _AccessList_js__WEBPACK_IMPORTED_MODULE_6__.toTupleList(accessList);\n    const signature = _Signature_js__WEBPACK_IMPORTED_MODULE_7__.extract(options.signature || envelope);\n    const serialized = [\n        _Hex_js__WEBPACK_IMPORTED_MODULE_1__.fromNumber(chainId),\n        nonce ? _Hex_js__WEBPACK_IMPORTED_MODULE_1__.fromNumber(nonce) : '0x',\n        maxPriorityFeePerGas ? _Hex_js__WEBPACK_IMPORTED_MODULE_1__.fromNumber(maxPriorityFeePerGas) : '0x',\n        maxFeePerGas ? _Hex_js__WEBPACK_IMPORTED_MODULE_1__.fromNumber(maxFeePerGas) : '0x',\n        gas ? _Hex_js__WEBPACK_IMPORTED_MODULE_1__.fromNumber(gas) : '0x',\n        to ?? '0x',\n        value ? _Hex_js__WEBPACK_IMPORTED_MODULE_1__.fromNumber(value) : '0x',\n        data ?? '0x',\n        accessTupleList,\n        maxFeePerBlobGas ? _Hex_js__WEBPACK_IMPORTED_MODULE_1__.fromNumber(maxFeePerBlobGas) : '0x',\n        blobVersionedHashes ?? [],\n        ...(signature ? _Signature_js__WEBPACK_IMPORTED_MODULE_7__.toTuple(signature) : []),\n    ];\n    const sidecars = options.sidecars || envelope.sidecars;\n    const blobs = [];\n    const commitments = [];\n    const proofs = [];\n    if (sidecars)\n        for (let i = 0; i < sidecars.length; i++) {\n            const { blob, commitment, proof } = sidecars[i];\n            blobs.push(blob);\n            commitments.push(commitment);\n            proofs.push(proof);\n        }\n    return _Hex_js__WEBPACK_IMPORTED_MODULE_1__.concat('0x03', sidecars\n        ? // If sidecars are provided, envelope turns into a \"network wrapper\":\n            _Rlp_js__WEBPACK_IMPORTED_MODULE_4__.fromHex([serialized, blobs, commitments, proofs])\n        : // Otherwise, standard envelope is used:\n            _Rlp_js__WEBPACK_IMPORTED_MODULE_4__.fromHex(serialized));\n}\n/**\n * Converts an {@link ox#TransactionEnvelopeEip4844.TransactionEnvelopeEip4844} to an {@link ox#TransactionEnvelopeEip4844.Rpc}.\n *\n * @example\n * ```ts twoslash\n * // @noErrors\n * import { Blobs, RpcRequest, TransactionEnvelopeEip4844, Value } from 'ox'\n * import { kzg } from './kzg'\n *\n * const blobs = Blobs.from('0xdeadbeef')\n * const blobVersionedHashes = Blobs.toVersionedHashes(blobs, { kzg })\n *\n * const envelope = TransactionEnvelopeEip4844.from({\n *   blobVersionedHashes,\n *   chainId: 1,\n *   nonce: 0n,\n *   gas: 21000n,\n *   maxFeePerBlobGas: Value.fromGwei('20'),\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: Value.fromEther('1'),\n * })\n *\n * const envelope_rpc = TransactionEnvelopeEip4844.toRpc(envelope) // [!code focus]\n *\n * const request = RpcRequest.from({\n *   id: 0,\n *   method: 'eth_sendTransaction',\n *   params: [envelope_rpc],\n * })\n * ```\n *\n * @param envelope - The EIP-4844 transaction envelope to convert.\n * @returns An RPC-formatted EIP-4844 transaction envelope.\n */\nfunction toRpc(envelope) {\n    const signature = _Signature_js__WEBPACK_IMPORTED_MODULE_7__.extract(envelope);\n    return {\n        ...envelope,\n        chainId: _Hex_js__WEBPACK_IMPORTED_MODULE_1__.fromNumber(envelope.chainId),\n        data: envelope.data ?? envelope.input,\n        ...(typeof envelope.gas === 'bigint'\n            ? { gas: _Hex_js__WEBPACK_IMPORTED_MODULE_1__.fromNumber(envelope.gas) }\n            : {}),\n        ...(typeof envelope.nonce === 'bigint'\n            ? { nonce: _Hex_js__WEBPACK_IMPORTED_MODULE_1__.fromNumber(envelope.nonce) }\n            : {}),\n        ...(typeof envelope.value === 'bigint'\n            ? { value: _Hex_js__WEBPACK_IMPORTED_MODULE_1__.fromNumber(envelope.value) }\n            : {}),\n        ...(typeof envelope.maxFeePerBlobGas === 'bigint'\n            ? { maxFeePerBlobGas: _Hex_js__WEBPACK_IMPORTED_MODULE_1__.fromNumber(envelope.maxFeePerBlobGas) }\n            : {}),\n        ...(typeof envelope.maxFeePerGas === 'bigint'\n            ? { maxFeePerGas: _Hex_js__WEBPACK_IMPORTED_MODULE_1__.fromNumber(envelope.maxFeePerGas) }\n            : {}),\n        ...(typeof envelope.maxPriorityFeePerGas === 'bigint'\n            ? { maxPriorityFeePerGas: _Hex_js__WEBPACK_IMPORTED_MODULE_1__.fromNumber(envelope.maxPriorityFeePerGas) }\n            : {}),\n        type: '0x3',\n        ...(signature ? _Signature_js__WEBPACK_IMPORTED_MODULE_7__.toRpc(signature) : {}),\n    };\n}\n/**\n * Validates a {@link ox#TransactionEnvelopeEip4844.TransactionEnvelopeEip4844}. Returns `true` if the envelope is valid, `false` otherwise.\n *\n * @example\n * ```ts twoslash\n * import { TransactionEnvelopeEip4844, Value } from 'ox'\n *\n * const valid = TransactionEnvelopeEip4844.assert({\n *   blobVersionedHashes: [],\n *   chainId: 1,\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: Value.fromEther('1'),\n * })\n * // @log: false\n * ```\n *\n * @param envelope - The transaction envelope to validate.\n */\nfunction validate(envelope) {\n    try {\n        assert(envelope);\n        return true;\n    }\n    catch {\n        return false;\n    }\n}\n//# sourceMappingURL=TransactionEnvelopeEip4844.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9veC9fZXNtL2NvcmUvVHJhbnNhY3Rpb25FbnZlbG9wZUVpcDQ4NDQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUE4QztBQUNWO0FBQ0Y7QUFDRjtBQUNBO0FBQ0E7QUFDWTtBQUNvQjtBQUNjO0FBQ3ZFO0FBQ0E7QUFDUDtBQUNBLGNBQWMsZ0VBQWdFO0FBQzlFO0FBQ0E7QUFDQTtBQUNBLFlBQVksb0NBQW9DO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCxZQUFZLHNCQUFzQjtBQUNsQztBQUNBO0FBQ0Esc0JBQXNCLG9FQUFtQztBQUN6RDtBQUNBLHlCQUF5Qix5Q0FBUTtBQUNqQyw0QkFBNEIsNkNBQVksQ0FBQywwQ0FBUztBQUNsRDtBQUNBLDBCQUEwQixvRUFBbUMsR0FBRyxZQUFZO0FBQzVFLDRCQUE0Qix5REFBd0I7QUFDcEQsMEJBQTBCLHVFQUFzQztBQUNoRTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQSxJQUFJLGtFQUFpQztBQUNyQztBQUNBO0FBQ0EsbUJBQW1CLGdFQUFnRTtBQUNuRjtBQUNBO0FBQ0E7QUFDQSxZQUFZLDZCQUE2QjtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1Asc0NBQXNDLDBDQUFTLENBQUMsMENBQVM7QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsMkVBQTBDO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCLGFBQWE7QUFDYjtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLDZDQUFZO0FBQ3BCO0FBQ0EsUUFBUSw2Q0FBWTtBQUNwQjtBQUNBLFFBQVEsNkNBQVk7QUFDcEI7QUFDQSxRQUFRLDZDQUFZO0FBQ3BCO0FBQ0EsUUFBUSw2Q0FBWTtBQUNwQjtBQUNBLFFBQVEsNkNBQVk7QUFDcEI7QUFDQSxRQUFRLDZDQUFZO0FBQ3BCO0FBQ0EsUUFBUSw2Q0FBWTtBQUNwQjtBQUNBO0FBQ0EsaUNBQWlDLHlEQUF3QjtBQUN6RDtBQUNBLCtCQUErQixpREFBZ0I7QUFDL0M7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLFVBQVUsb0RBQW1CO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksMkNBQTJDO0FBQ3ZELFlBQVksTUFBTTtBQUNsQjtBQUNBO0FBQ0EsZ0VBQWdFLEtBQUs7QUFDckU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksc0RBQXNEO0FBQ2xFLFlBQVksTUFBTTtBQUNsQjtBQUNBO0FBQ0EsOENBQThDLEtBQUs7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQSx1RUFBdUU7QUFDdkU7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwRUFBMEUsZ0RBQWdEO0FBQzFIO0FBQ0E7QUFDQSxZQUFZLDZCQUE2QjtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLG9DQUFvQztBQUMzQyxZQUFZLFlBQVk7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsK0NBQWMsZ0JBQWdCO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDLCtEQUErRDtBQUNyRztBQUNBO0FBQ0E7QUFDQSxzQ0FBc0MsbUNBQW1DO0FBQ3pFO0FBQ0E7QUFDQTtBQUNBLFlBQVksK0NBQStDO0FBQzNELFlBQVksTUFBTTtBQUNsQjtBQUNBO0FBQ0EsZ0VBQWdFLEtBQUs7QUFDckU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDLDhCQUE4QjtBQUNwRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCw0QkFBNEIsZUFBZTtBQUMzQztBQUNBO0FBQ0EsYUFBYSwrREFBK0Q7QUFDNUU7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLG9DQUFvQztBQUNoRCxZQUFZLE1BQU07QUFDbEI7QUFDQTtBQUNBLGdFQUFnRSxLQUFLO0FBQ3JFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sb0NBQW9DO0FBQzNDLFlBQVksVUFBVTtBQUN0QixXQUFXLCtDQUFjO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQixLQUFLO0FBQ0w7QUFDQTtBQUNBLGlCQUFpQiwrREFBK0Q7QUFDaEY7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLG9DQUFvQztBQUNoRCxZQUFZLE1BQU07QUFDbEI7QUFDQTtBQUNBLGdFQUFnRSxLQUFLO0FBQ3JFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLHNEQUFzRDtBQUNsRSxZQUFZLE1BQU07QUFDbEI7QUFDQTtBQUNBLDhDQUE4QyxLQUFLO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0EsdUVBQXVFO0FBQ3ZFO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLHlDQUF5QztBQUNoRCxZQUFZLCtIQUErSDtBQUMzSTtBQUNBLDRCQUE0Qix1REFBc0I7QUFDbEQsc0JBQXNCLGtEQUFpQjtBQUN2QztBQUNBLFFBQVEsK0NBQWM7QUFDdEIsZ0JBQWdCLCtDQUFjO0FBQzlCLCtCQUErQiwrQ0FBYztBQUM3Qyx1QkFBdUIsK0NBQWM7QUFDckMsY0FBYywrQ0FBYztBQUM1QjtBQUNBLGdCQUFnQiwrQ0FBYztBQUM5QjtBQUNBO0FBQ0EsMkJBQTJCLCtDQUFjO0FBQ3pDO0FBQ0Esd0JBQXdCLGtEQUFpQjtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IscUJBQXFCO0FBQzdDLG9CQUFvQiwwQkFBMEI7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLDJDQUFVO0FBQ3JCO0FBQ0EsWUFBWSw0Q0FBVztBQUN2QjtBQUNBLFlBQVksNENBQVc7QUFDdkI7QUFDQTtBQUNBLGdCQUFnQixnRUFBZ0UsT0FBTyx3Q0FBd0M7QUFDL0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLHVEQUF1RDtBQUNuRSxZQUFZLE1BQU07QUFDbEI7QUFDQTtBQUNBLGdFQUFnRSxLQUFLO0FBQ3JFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCxzQkFBc0Isa0RBQWlCO0FBQ3ZDO0FBQ0E7QUFDQSxpQkFBaUIsK0NBQWM7QUFDL0I7QUFDQTtBQUNBLGdCQUFnQixLQUFLLCtDQUFjO0FBQ25DLGdCQUFnQjtBQUNoQjtBQUNBLGdCQUFnQixPQUFPLCtDQUFjO0FBQ3JDLGdCQUFnQjtBQUNoQjtBQUNBLGdCQUFnQixPQUFPLCtDQUFjO0FBQ3JDLGdCQUFnQjtBQUNoQjtBQUNBLGdCQUFnQixrQkFBa0IsK0NBQWM7QUFDaEQsZ0JBQWdCO0FBQ2hCO0FBQ0EsZ0JBQWdCLGNBQWMsK0NBQWM7QUFDNUMsZ0JBQWdCO0FBQ2hCO0FBQ0EsZ0JBQWdCLHNCQUFzQiwrQ0FBYztBQUNwRCxnQkFBZ0I7QUFDaEI7QUFDQSx3QkFBd0IsZ0RBQWUsZ0JBQWdCO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQiwrREFBK0Q7QUFDL0U7QUFDQTtBQUNBO0FBQ0EsWUFBWSxvQ0FBb0M7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxjaGFuZFxcRG93bmxvYWRzXFxqb2hud3JpY2hraWRpbnRvcml6elxcbm9kZV9tb2R1bGVzXFxveFxcX2VzbVxcY29yZVxcVHJhbnNhY3Rpb25FbnZlbG9wZUVpcDQ4NDQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgQWNjZXNzTGlzdCBmcm9tICcuL0FjY2Vzc0xpc3QuanMnO1xuaW1wb3J0ICogYXMgQmxvYnMgZnJvbSAnLi9CbG9icy5qcyc7XG5pbXBvcnQgKiBhcyBIYXNoIGZyb20gJy4vSGFzaC5qcyc7XG5pbXBvcnQgKiBhcyBIZXggZnJvbSAnLi9IZXguanMnO1xuaW1wb3J0ICogYXMgS3pnIGZyb20gJy4vS3pnLmpzJztcbmltcG9ydCAqIGFzIFJscCBmcm9tICcuL1JscC5qcyc7XG5pbXBvcnQgKiBhcyBTaWduYXR1cmUgZnJvbSAnLi9TaWduYXR1cmUuanMnO1xuaW1wb3J0ICogYXMgVHJhbnNhY3Rpb25FbnZlbG9wZSBmcm9tICcuL1RyYW5zYWN0aW9uRW52ZWxvcGUuanMnO1xuaW1wb3J0ICogYXMgVHJhbnNhY3Rpb25FbnZlbG9wZUVpcDE1NTkgZnJvbSAnLi9UcmFuc2FjdGlvbkVudmVsb3BlRWlwMTU1OS5qcyc7XG5leHBvcnQgY29uc3Qgc2VyaWFsaXplZFR5cGUgPSAnMHgwMyc7XG5leHBvcnQgY29uc3QgdHlwZSA9ICdlaXA0ODQ0Jztcbi8qKlxuICogQXNzZXJ0cyBhIHtAbGluayBveCNUcmFuc2FjdGlvbkVudmVsb3BlRWlwNDg0NC5UcmFuc2FjdGlvbkVudmVsb3BlRWlwNDg0NH0gaXMgdmFsaWQuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHRzIHR3b3NsYXNoXG4gKiBpbXBvcnQgeyBUcmFuc2FjdGlvbkVudmVsb3BlRWlwNDg0NCwgVmFsdWUgfSBmcm9tICdveCdcbiAqXG4gKiBUcmFuc2FjdGlvbkVudmVsb3BlRWlwNDg0NC5hc3NlcnQoe1xuICogICBibG9iVmVyc2lvbmVkSGFzaGVzOiBbXSxcbiAqICAgY2hhaW5JZDogMSxcbiAqICAgdG86ICcweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAnLFxuICogICB2YWx1ZTogVmFsdWUuZnJvbUV0aGVyKCcxJyksXG4gKiB9KVxuICogLy8gQGVycm9yOiBFbXB0eUJsb2JWZXJzaW9uZWRIYXNoZXNFcnJvcjogQmxvYiB2ZXJzaW9uZWQgaGFzaGVzIG11c3Qgbm90IGJlIGVtcHR5LlxuICogYGBgXG4gKlxuICogQHBhcmFtIGVudmVsb3BlIC0gVGhlIHRyYW5zYWN0aW9uIGVudmVsb3BlIHRvIGFzc2VydC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFzc2VydChlbnZlbG9wZSkge1xuICAgIGNvbnN0IHsgYmxvYlZlcnNpb25lZEhhc2hlcyB9ID0gZW52ZWxvcGU7XG4gICAgaWYgKGJsb2JWZXJzaW9uZWRIYXNoZXMpIHtcbiAgICAgICAgaWYgKGJsb2JWZXJzaW9uZWRIYXNoZXMubGVuZ3RoID09PSAwKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEJsb2JzLkVtcHR5QmxvYlZlcnNpb25lZEhhc2hlc0Vycm9yKCk7XG4gICAgICAgIGZvciAoY29uc3QgaGFzaCBvZiBibG9iVmVyc2lvbmVkSGFzaGVzKSB7XG4gICAgICAgICAgICBjb25zdCBzaXplID0gSGV4LnNpemUoaGFzaCk7XG4gICAgICAgICAgICBjb25zdCB2ZXJzaW9uID0gSGV4LnRvTnVtYmVyKEhleC5zbGljZShoYXNoLCAwLCAxKSk7XG4gICAgICAgICAgICBpZiAoc2l6ZSAhPT0gMzIpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEJsb2JzLkludmFsaWRWZXJzaW9uZWRIYXNoU2l6ZUVycm9yKHsgaGFzaCwgc2l6ZSB9KTtcbiAgICAgICAgICAgIGlmICh2ZXJzaW9uICE9PSBLemcudmVyc2lvbmVkSGFzaFZlcnNpb24pXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEJsb2JzLkludmFsaWRWZXJzaW9uZWRIYXNoVmVyc2lvbkVycm9yKHtcbiAgICAgICAgICAgICAgICAgICAgaGFzaCxcbiAgICAgICAgICAgICAgICAgICAgdmVyc2lvbixcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBUcmFuc2FjdGlvbkVudmVsb3BlRWlwMTU1OS5hc3NlcnQoZW52ZWxvcGUpO1xufVxuLyoqXG4gKiBEZXNlcmlhbGl6ZXMgYSB7QGxpbmsgb3gjVHJhbnNhY3Rpb25FbnZlbG9wZUVpcDQ4NDQuVHJhbnNhY3Rpb25FbnZlbG9wZUVpcDQ4NDR9IGZyb20gaXRzIHNlcmlhbGl6ZWQgZm9ybS5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgdHMgdHdvc2xhc2hcbiAqIGltcG9ydCB7IFRyYW5zYWN0aW9uRW52ZWxvcGVFaXA0ODQ0IH0gZnJvbSAnb3gnXG4gKlxuICogY29uc3QgZW52ZWxvcGUgPSBUcmFuc2FjdGlvbkVudmVsb3BlRWlwNDg0NC5kZXNlcmlhbGl6ZSgnMHgwM2VmMDE4MjAzMTE4NDc3MzU5NDAwODQ3NzM1OTQwMDgwOTQ3MDk5Nzk3MGM1MTgxMmRjM2EwMTBjN2QwMWI1MGUwZDE3ZGM3OWM4ODgwZGUwYjZiM2E3NjQwMDAwODBjMCcpXG4gKiAvLyBAbG9nOiB7XG4gKiAvLyBAbG9nOiAgIGJsb2JWZXJzaW9uZWRIYXNoZXM6IFsuLi5dLFxuICogLy8gQGxvZzogICB0eXBlOiAnZWlwNDg0NCcsXG4gKiAvLyBAbG9nOiAgIG5vbmNlOiA3ODVuLFxuICogLy8gQGxvZzogICBtYXhGZWVQZXJHYXM6IDIwMDAwMDAwMDBuLFxuICogLy8gQGxvZzogICBnYXM6IDEwMDAwMDBuLFxuICogLy8gQGxvZzogICB0bzogJzB4NzA5OTc5NzBjNTE4MTJkYzNhMDEwYzdkMDFiNTBlMGQxN2RjNzljOCcsXG4gKiAvLyBAbG9nOiAgIHZhbHVlOiAxMDAwMDAwMDAwMDAwMDAwMDAwbixcbiAqIC8vIEBsb2c6IH1cbiAqIGBgYFxuICpcbiAqIEBwYXJhbSBzZXJpYWxpemVkIC0gVGhlIHNlcmlhbGl6ZWQgdHJhbnNhY3Rpb24uXG4gKiBAcmV0dXJucyBEZXNlcmlhbGl6ZWQgVHJhbnNhY3Rpb24gRW52ZWxvcGUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZXNlcmlhbGl6ZShzZXJpYWxpemVkKSB7XG4gICAgY29uc3QgdHJhbnNhY3Rpb25PcldyYXBwZXJBcnJheSA9IFJscC50b0hleChIZXguc2xpY2Uoc2VyaWFsaXplZCwgMSkpO1xuICAgIGNvbnN0IGhhc05ldHdvcmtXcmFwcGVyID0gdHJhbnNhY3Rpb25PcldyYXBwZXJBcnJheS5sZW5ndGggPT09IDQ7XG4gICAgY29uc3QgdHJhbnNhY3Rpb25BcnJheSA9IGhhc05ldHdvcmtXcmFwcGVyXG4gICAgICAgID8gdHJhbnNhY3Rpb25PcldyYXBwZXJBcnJheVswXVxuICAgICAgICA6IHRyYW5zYWN0aW9uT3JXcmFwcGVyQXJyYXk7XG4gICAgY29uc3Qgd3JhcHBlckFycmF5ID0gaGFzTmV0d29ya1dyYXBwZXJcbiAgICAgICAgPyB0cmFuc2FjdGlvbk9yV3JhcHBlckFycmF5LnNsaWNlKDEpXG4gICAgICAgIDogW107XG4gICAgY29uc3QgW2NoYWluSWQsIG5vbmNlLCBtYXhQcmlvcml0eUZlZVBlckdhcywgbWF4RmVlUGVyR2FzLCBnYXMsIHRvLCB2YWx1ZSwgZGF0YSwgYWNjZXNzTGlzdCwgbWF4RmVlUGVyQmxvYkdhcywgYmxvYlZlcnNpb25lZEhhc2hlcywgeVBhcml0eSwgciwgcyxdID0gdHJhbnNhY3Rpb25BcnJheTtcbiAgICBjb25zdCBbYmxvYnMsIGNvbW1pdG1lbnRzLCBwcm9vZnNdID0gd3JhcHBlckFycmF5O1xuICAgIGlmICghKHRyYW5zYWN0aW9uQXJyYXkubGVuZ3RoID09PSAxMSB8fCB0cmFuc2FjdGlvbkFycmF5Lmxlbmd0aCA9PT0gMTQpKVxuICAgICAgICB0aHJvdyBuZXcgVHJhbnNhY3Rpb25FbnZlbG9wZS5JbnZhbGlkU2VyaWFsaXplZEVycm9yKHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgICAgICAgICBjaGFpbklkLFxuICAgICAgICAgICAgICAgIG5vbmNlLFxuICAgICAgICAgICAgICAgIG1heFByaW9yaXR5RmVlUGVyR2FzLFxuICAgICAgICAgICAgICAgIG1heEZlZVBlckdhcyxcbiAgICAgICAgICAgICAgICBnYXMsXG4gICAgICAgICAgICAgICAgdG8sXG4gICAgICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICAgICAgZGF0YSxcbiAgICAgICAgICAgICAgICBhY2Nlc3NMaXN0LFxuICAgICAgICAgICAgICAgIC4uLih0cmFuc2FjdGlvbkFycmF5Lmxlbmd0aCA+IDlcbiAgICAgICAgICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgICAgICAgICB5UGFyaXR5LFxuICAgICAgICAgICAgICAgICAgICAgICAgcixcbiAgICAgICAgICAgICAgICAgICAgICAgIHMsXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgOiB7fSksXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2VyaWFsaXplZCxcbiAgICAgICAgICAgIHR5cGUsXG4gICAgICAgIH0pO1xuICAgIGxldCB0cmFuc2FjdGlvbiA9IHtcbiAgICAgICAgYmxvYlZlcnNpb25lZEhhc2hlczogYmxvYlZlcnNpb25lZEhhc2hlcyxcbiAgICAgICAgY2hhaW5JZDogTnVtYmVyKGNoYWluSWQpLFxuICAgICAgICB0eXBlLFxuICAgIH07XG4gICAgaWYgKEhleC52YWxpZGF0ZSh0bykgJiYgdG8gIT09ICcweCcpXG4gICAgICAgIHRyYW5zYWN0aW9uLnRvID0gdG87XG4gICAgaWYgKEhleC52YWxpZGF0ZShnYXMpICYmIGdhcyAhPT0gJzB4JylcbiAgICAgICAgdHJhbnNhY3Rpb24uZ2FzID0gQmlnSW50KGdhcyk7XG4gICAgaWYgKEhleC52YWxpZGF0ZShkYXRhKSAmJiBkYXRhICE9PSAnMHgnKVxuICAgICAgICB0cmFuc2FjdGlvbi5kYXRhID0gZGF0YTtcbiAgICBpZiAoSGV4LnZhbGlkYXRlKG5vbmNlKSlcbiAgICAgICAgdHJhbnNhY3Rpb24ubm9uY2UgPSBub25jZSA9PT0gJzB4JyA/IDBuIDogQmlnSW50KG5vbmNlKTtcbiAgICBpZiAoSGV4LnZhbGlkYXRlKHZhbHVlKSAmJiB2YWx1ZSAhPT0gJzB4JylcbiAgICAgICAgdHJhbnNhY3Rpb24udmFsdWUgPSBCaWdJbnQodmFsdWUpO1xuICAgIGlmIChIZXgudmFsaWRhdGUobWF4RmVlUGVyQmxvYkdhcykgJiYgbWF4RmVlUGVyQmxvYkdhcyAhPT0gJzB4JylcbiAgICAgICAgdHJhbnNhY3Rpb24ubWF4RmVlUGVyQmxvYkdhcyA9IEJpZ0ludChtYXhGZWVQZXJCbG9iR2FzKTtcbiAgICBpZiAoSGV4LnZhbGlkYXRlKG1heEZlZVBlckdhcykgJiYgbWF4RmVlUGVyR2FzICE9PSAnMHgnKVxuICAgICAgICB0cmFuc2FjdGlvbi5tYXhGZWVQZXJHYXMgPSBCaWdJbnQobWF4RmVlUGVyR2FzKTtcbiAgICBpZiAoSGV4LnZhbGlkYXRlKG1heFByaW9yaXR5RmVlUGVyR2FzKSAmJiBtYXhQcmlvcml0eUZlZVBlckdhcyAhPT0gJzB4JylcbiAgICAgICAgdHJhbnNhY3Rpb24ubWF4UHJpb3JpdHlGZWVQZXJHYXMgPSBCaWdJbnQobWF4UHJpb3JpdHlGZWVQZXJHYXMpO1xuICAgIGlmIChhY2Nlc3NMaXN0Py5sZW5ndGggIT09IDAgJiYgYWNjZXNzTGlzdCAhPT0gJzB4JylcbiAgICAgICAgdHJhbnNhY3Rpb24uYWNjZXNzTGlzdCA9IEFjY2Vzc0xpc3QuZnJvbVR1cGxlTGlzdChhY2Nlc3NMaXN0KTtcbiAgICBpZiAoYmxvYnMgJiYgY29tbWl0bWVudHMgJiYgcHJvb2ZzKVxuICAgICAgICB0cmFuc2FjdGlvbi5zaWRlY2FycyA9IEJsb2JzLnRvU2lkZWNhcnMoYmxvYnMsIHtcbiAgICAgICAgICAgIGNvbW1pdG1lbnRzOiBjb21taXRtZW50cyxcbiAgICAgICAgICAgIHByb29mczogcHJvb2ZzLFxuICAgICAgICB9KTtcbiAgICBjb25zdCBzaWduYXR1cmUgPSByICYmIHMgJiYgeVBhcml0eVxuICAgICAgICA/IFNpZ25hdHVyZS5mcm9tVHVwbGUoW3lQYXJpdHksIHIsIHNdKVxuICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICBpZiAoc2lnbmF0dXJlKVxuICAgICAgICB0cmFuc2FjdGlvbiA9IHtcbiAgICAgICAgICAgIC4uLnRyYW5zYWN0aW9uLFxuICAgICAgICAgICAgLi4uc2lnbmF0dXJlLFxuICAgICAgICB9O1xuICAgIGFzc2VydCh0cmFuc2FjdGlvbik7XG4gICAgcmV0dXJuIHRyYW5zYWN0aW9uO1xufVxuLyoqXG4gKiBDb252ZXJ0cyBhbiBhcmJpdHJhcnkgdHJhbnNhY3Rpb24gb2JqZWN0IGludG8gYW4gRUlQLTQ4NDQgVHJhbnNhY3Rpb24gRW52ZWxvcGUuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHRzIHR3b3NsYXNoXG4gKiAvLyBAbm9FcnJvcnNcbiAqIGltcG9ydCB7IEJsb2JzLCBUcmFuc2FjdGlvbkVudmVsb3BlRWlwNDg0NCwgVmFsdWUgfSBmcm9tICdveCdcbiAqIGltcG9ydCB7IGt6ZyB9IGZyb20gJy4va3pnJ1xuICpcbiAqIGNvbnN0IGJsb2JzID0gQmxvYnMuZnJvbSgnMHhkZWFkYmVlZicpXG4gKiBjb25zdCBibG9iVmVyc2lvbmVkSGFzaGVzID0gQmxvYnMudG9WZXJzaW9uZWRIYXNoZXMoYmxvYnMsIHsga3pnIH0pXG4gKlxuICogY29uc3QgZW52ZWxvcGUgPSBUcmFuc2FjdGlvbkVudmVsb3BlRWlwNDg0NC5mcm9tKHtcbiAqICAgY2hhaW5JZDogMSxcbiAqICAgYmxvYlZlcnNpb25lZEhhc2hlcyxcbiAqICAgbWF4RmVlUGVyQmxvYkdhczogVmFsdWUuZnJvbUd3ZWkoJzMnKSxcbiAqICAgbWF4RmVlUGVyR2FzOiBWYWx1ZS5mcm9tR3dlaSgnMTAnKSxcbiAqICAgbWF4UHJpb3JpdHlGZWVQZXJHYXM6IFZhbHVlLmZyb21Hd2VpKCcxJyksXG4gKiAgIHRvOiAnMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAqICAgdmFsdWU6IFZhbHVlLmZyb21FdGhlcignMScpLFxuICogfSlcbiAqIGBgYFxuICpcbiAqIEBleGFtcGxlXG4gKiAjIyMgQXR0YWNoaW5nIFNpZ25hdHVyZXNcbiAqXG4gKiBJdCBpcyBwb3NzaWJsZSB0byBhdHRhY2ggYSBgc2lnbmF0dXJlYCB0byB0aGUgdHJhbnNhY3Rpb24gZW52ZWxvcGUuXG4gKlxuICogYGBgdHMgdHdvc2xhc2hcbiAqIC8vIEBub0Vycm9yc1xuICogaW1wb3J0IHsgQmxvYnMsIFNlY3AyNTZrMSwgVHJhbnNhY3Rpb25FbnZlbG9wZUVpcDQ4NDQsIFZhbHVlIH0gZnJvbSAnb3gnXG4gKiBpbXBvcnQgeyBremcgfSBmcm9tICcuL2t6ZydcbiAqXG4gKiBjb25zdCBibG9icyA9IEJsb2JzLmZyb20oJzB4ZGVhZGJlZWYnKVxuICogY29uc3Qgc2lkZWNhcnMgPSBCbG9icy50b1NpZGVjYXJzKGJsb2JzLCB7IGt6ZyB9KVxuICogY29uc3QgYmxvYlZlcnNpb25lZEhhc2hlcyA9IEJsb2JzLnNpZGVjYXJzVG9WZXJzaW9uZWRIYXNoZXMoc2lkZWNhcnMpXG4gKlxuICogY29uc3QgZW52ZWxvcGUgPSBUcmFuc2FjdGlvbkVudmVsb3BlRWlwNDg0NC5mcm9tKHtcbiAqICAgYmxvYlZlcnNpb25lZEhhc2hlcyxcbiAqICAgY2hhaW5JZDogMSxcbiAqICAgbWF4RmVlUGVyQmxvYkdhczogVmFsdWUuZnJvbUd3ZWkoJzMnKSxcbiAqICAgbWF4RmVlUGVyR2FzOiBWYWx1ZS5mcm9tR3dlaSgnMTAnKSxcbiAqICAgbWF4UHJpb3JpdHlGZWVQZXJHYXM6IFZhbHVlLmZyb21Hd2VpKCcxJyksXG4gKiAgIHRvOiAnMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAqICAgdmFsdWU6IFZhbHVlLmZyb21FdGhlcignMScpLFxuICogfSlcbiAqXG4gKiBjb25zdCBzaWduYXR1cmUgPSBTZWNwMjU2azEuc2lnbih7XG4gKiAgIHBheWxvYWQ6IFRyYW5zYWN0aW9uRW52ZWxvcGVFaXA0ODQ0LmdldFNpZ25QYXlsb2FkKGVudmVsb3BlKSxcbiAqICAgcHJpdmF0ZUtleTogJzB4Li4uJyxcbiAqIH0pXG4gKlxuICogY29uc3QgZW52ZWxvcGVfc2lnbmVkID0gVHJhbnNhY3Rpb25FbnZlbG9wZUVpcDQ4NDQuZnJvbShlbnZlbG9wZSwgeyAvLyBbIWNvZGUgZm9jdXNdXG4gKiAgIHNpZGVjYXJzLCAvLyBbIWNvZGUgZm9jdXNdXG4gKiAgIHNpZ25hdHVyZSwgLy8gWyFjb2RlIGZvY3VzXVxuICogfSkgLy8gWyFjb2RlIGZvY3VzXVxuICogLy8gQGxvZzoge1xuICogLy8gQGxvZzogICBibG9iVmVyc2lvbmVkSGFzaGVzOiBbLi4uXSxcbiAqIC8vIEBsb2c6ICAgY2hhaW5JZDogMSxcbiAqIC8vIEBsb2c6ICAgbWF4RmVlUGVyQmxvYkdhczogMzAwMDAwMDAwMG4sXG4gKiAvLyBAbG9nOiAgIG1heEZlZVBlckdhczogMTAwMDAwMDAwMDBuLFxuICogLy8gQGxvZzogICBtYXhQcmlvcml0eUZlZVBlckdhczogMTAwMDAwMDAwMG4sXG4gKiAvLyBAbG9nOiAgIHRvOiAnMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAqIC8vIEBsb2c6ICAgdHlwZTogJ2VpcDQ4NDQnLFxuICogLy8gQGxvZzogICB2YWx1ZTogMTAwMDAwMDAwMDAwMDAwMDAwMG4sXG4gKiAvLyBAbG9nOiAgIHI6IDEyNS4uLm4sXG4gKiAvLyBAbG9nOiAgIHM6IDY0Mi4uLm4sXG4gKiAvLyBAbG9nOiAgIHlQYXJpdHk6IDAsXG4gKiAvLyBAbG9nOiB9XG4gKiBgYGBcbiAqXG4gKiBAZXhhbXBsZVxuICogIyMjIEZyb20gU2VyaWFsaXplZFxuICpcbiAqIEl0IGlzIHBvc3NpYmxlIHRvIGluc3RhbnRpYXRlIGFuIEVJUC00ODQ0IFRyYW5zYWN0aW9uIEVudmVsb3BlIGZyb20gYSB7QGxpbmsgb3gjVHJhbnNhY3Rpb25FbnZlbG9wZUVpcDQ4NDQuU2VyaWFsaXplZH0gdmFsdWUuXG4gKlxuICogYGBgdHMgdHdvc2xhc2hcbiAqIGltcG9ydCB7IFRyYW5zYWN0aW9uRW52ZWxvcGVFaXA0ODQ0IH0gZnJvbSAnb3gnXG4gKlxuICogY29uc3QgZW52ZWxvcGUgPSBUcmFuc2FjdGlvbkVudmVsb3BlRWlwNDg0NC5mcm9tKCcweDAzZjg1ODAxODIwMzExODUwMjU0MGJlNDAwODUwNGE4MTdjODAwODA5NDcwOTk3OTcwYzUxODEyZGMzYTAxMGM3ZDAxYjUwZTBkMTdkYzc5Yzg4ODBkZTBiNmIzYTc2NDAwMDA4MGMwODQ3NzM1OTQwMGUxYTAwMTYyN2M2ODcyNjFiMGU3Zjg2MzhhZjExMTJlZmE4YTc3ZTIzNjU2ZjZlNzk0NTI3NWIxOWU5ZGVlZDgwMjYxJylcbiAqIC8vIEBsb2c6IHtcbiAqIC8vIEBsb2c6ICAgYmxvYlZlcnNpb25lZEhhc2hlczogWy4uLl0sXG4gKiAvLyBAbG9nOiAgIGNoYWluSWQ6IDEsXG4gKiAvLyBAbG9nOiAgIG1heEZlZVBlckdhczogMTAwMDAwMDAwMDBuLFxuICogLy8gQGxvZzogICB0bzogJzB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gKiAvLyBAbG9nOiAgIHR5cGU6ICdlaXA0ODQ0JyxcbiAqIC8vIEBsb2c6ICAgdmFsdWU6IDEwMDAwMDAwMDAwMDAwMDAwMDBuLFxuICogLy8gQGxvZzogfVxuICogYGBgXG4gKlxuICogQHBhcmFtIGVudmVsb3BlIC0gVGhlIHRyYW5zYWN0aW9uIG9iamVjdCB0byBjb252ZXJ0LlxuICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25zLlxuICogQHJldHVybnMgQW4gRUlQLTQ4NDQgVHJhbnNhY3Rpb24gRW52ZWxvcGUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmcm9tKGVudmVsb3BlLCBvcHRpb25zID0ge30pIHtcbiAgICBjb25zdCB7IHNpZ25hdHVyZSB9ID0gb3B0aW9ucztcbiAgICBjb25zdCBlbnZlbG9wZV8gPSAodHlwZW9mIGVudmVsb3BlID09PSAnc3RyaW5nJyA/IGRlc2VyaWFsaXplKGVudmVsb3BlKSA6IGVudmVsb3BlKTtcbiAgICBhc3NlcnQoZW52ZWxvcGVfKTtcbiAgICByZXR1cm4ge1xuICAgICAgICAuLi5lbnZlbG9wZV8sXG4gICAgICAgIC4uLihzaWduYXR1cmUgPyBTaWduYXR1cmUuZnJvbShzaWduYXR1cmUpIDoge30pLFxuICAgICAgICB0eXBlOiAnZWlwNDg0NCcsXG4gICAgfTtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgcGF5bG9hZCB0byBzaWduIGZvciBhIHtAbGluayBveCNUcmFuc2FjdGlvbkVudmVsb3BlRWlwNDg0NC5UcmFuc2FjdGlvbkVudmVsb3BlRWlwNDg0NH0uXG4gKlxuICogQGV4YW1wbGVcbiAqIFRoZSBleGFtcGxlIGJlbG93IGRlbW9uc3RyYXRlcyBob3cgdG8gY29tcHV0ZSB0aGUgc2lnbiBwYXlsb2FkIHdoaWNoIGNhbiBiZSB1c2VkXG4gKiB3aXRoIEVDRFNBIHNpZ25pbmcgdXRpbGl0aWVzIGxpa2Uge0BsaW5rIG94I1NlY3AyNTZrMS4oc2lnbjpmdW5jdGlvbil9LlxuICpcbiAqIGBgYHRzIHR3b3NsYXNoXG4gKiAvLyBAbm9FcnJvcnNcbiAqIGltcG9ydCB7IEJsb2JzLCBTZWNwMjU2azEsIFRyYW5zYWN0aW9uRW52ZWxvcGVFaXA0ODQ0IH0gZnJvbSAnb3gnXG4gKiBpbXBvcnQgeyBremcgfSBmcm9tICcuL2t6ZydcbiAqXG4gKiBjb25zdCBibG9icyA9IEJsb2JzLmZyb20oJzB4ZGVhZGJlZWYnKVxuICogY29uc3QgYmxvYlZlcnNpb25lZEhhc2hlcyA9IEJsb2JzLnRvVmVyc2lvbmVkSGFzaGVzKGJsb2JzLCB7IGt6ZyB9KVxuICpcbiAqIGNvbnN0IGVudmVsb3BlID0gVHJhbnNhY3Rpb25FbnZlbG9wZUVpcDQ4NDQuZnJvbSh7XG4gKiAgIGJsb2JWZXJzaW9uZWRIYXNoZXMsXG4gKiAgIGNoYWluSWQ6IDEsXG4gKiAgIG5vbmNlOiAwbixcbiAqICAgbWF4RmVlUGVyR2FzOiAxMDAwMDAwMDAwbixcbiAqICAgZ2FzOiAyMTAwMG4sXG4gKiAgIHRvOiAnMHg3MDk5Nzk3MGM1MTgxMmRjM2EwMTBjN2QwMWI1MGUwZDE3ZGM3OWM4JyxcbiAqICAgdmFsdWU6IDEwMDAwMDAwMDAwMDAwMDAwMDBuLFxuICogfSlcbiAqXG4gKiBjb25zdCBwYXlsb2FkID0gVHJhbnNhY3Rpb25FbnZlbG9wZUVpcDQ4NDQuZ2V0U2lnblBheWxvYWQoZW52ZWxvcGUpIC8vIFshY29kZSBmb2N1c11cbiAqIC8vIEBsb2c6ICcweC4uLidcbiAqXG4gKiBjb25zdCBzaWduYXR1cmUgPSBTZWNwMjU2azEuc2lnbih7IHBheWxvYWQsIHByaXZhdGVLZXk6ICcweC4uLicgfSlcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSBlbnZlbG9wZSAtIFRoZSB0cmFuc2FjdGlvbiBlbnZlbG9wZSB0byBnZXQgdGhlIHNpZ24gcGF5bG9hZCBmb3IuXG4gKiBAcmV0dXJucyBUaGUgc2lnbiBwYXlsb2FkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0U2lnblBheWxvYWQoZW52ZWxvcGUpIHtcbiAgICByZXR1cm4gaGFzaChlbnZlbG9wZSwgeyBwcmVzaWduOiB0cnVlIH0pO1xufVxuLyoqXG4gKiBIYXNoZXMgYSB7QGxpbmsgb3gjVHJhbnNhY3Rpb25FbnZlbG9wZUVpcDQ4NDQuVHJhbnNhY3Rpb25FbnZlbG9wZUVpcDQ4NDR9LiBUaGlzIGlzIHRoZSBcInRyYW5zYWN0aW9uIGhhc2hcIi5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgdHMgdHdvc2xhc2hcbiAqIC8vIEBub0Vycm9yc1xuICogaW1wb3J0IHsgQmxvYnMsIFRyYW5zYWN0aW9uRW52ZWxvcGVFaXA0ODQ0IH0gZnJvbSAnb3gnXG4gKiBpbXBvcnQgeyBremcgfSBmcm9tICcuL2t6ZydcbiAqXG4gKiBjb25zdCBibG9icyA9IEJsb2JzLmZyb20oJzB4ZGVhZGJlZWYnKVxuICogY29uc3QgYmxvYlZlcnNpb25lZEhhc2hlcyA9IEJsb2JzLnRvVmVyc2lvbmVkSGFzaGVzKGJsb2JzLCB7IGt6ZyB9KVxuICpcbiAqIGNvbnN0IGVudmVsb3BlID0gVHJhbnNhY3Rpb25FbnZlbG9wZUVpcDQ4NDQuZnJvbSh7XG4gKiAgIGJsb2JWZXJzaW9uZWRIYXNoZXMsXG4gKiAgIGNoYWluSWQ6IDEsXG4gKiAgIG5vbmNlOiAwbixcbiAqICAgbWF4RmVlUGVyR2FzOiAxMDAwMDAwMDAwbixcbiAqICAgZ2FzOiAyMTAwMG4sXG4gKiAgIHRvOiAnMHg3MDk5Nzk3MGM1MTgxMmRjM2EwMTBjN2QwMWI1MGUwZDE3ZGM3OWM4JyxcbiAqICAgdmFsdWU6IDEwMDAwMDAwMDAwMDAwMDAwMDBuLFxuICogfSlcbiAqXG4gKiBjb25zdCBoYXNoID0gVHJhbnNhY3Rpb25FbnZlbG9wZUVpcDQ4NDQuaGFzaChlbnZlbG9wZSkgLy8gWyFjb2RlIGZvY3VzXVxuICogYGBgXG4gKlxuICogQHBhcmFtIGVudmVsb3BlIC0gVGhlIEVJUC00ODQ0IFRyYW5zYWN0aW9uIEVudmVsb3BlIHRvIGhhc2guXG4gKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbnMuXG4gKiBAcmV0dXJucyBUaGUgaGFzaCBvZiB0aGUgdHJhbnNhY3Rpb24gZW52ZWxvcGUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBoYXNoKGVudmVsb3BlLCBvcHRpb25zID0ge30pIHtcbiAgICBjb25zdCB7IHByZXNpZ24gfSA9IG9wdGlvbnM7XG4gICAgcmV0dXJuIEhhc2gua2VjY2FrMjU2KHNlcmlhbGl6ZSh7XG4gICAgICAgIC4uLmVudmVsb3BlLFxuICAgICAgICAuLi4ocHJlc2lnblxuICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgc2lkZWNhcnM6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICByOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgczogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIHlQYXJpdHk6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICB2OiB1bmRlZmluZWQsXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICA6IHt9KSxcbiAgICB9KSk7XG59XG4vKipcbiAqIFNlcmlhbGl6ZXMgYSB7QGxpbmsgb3gjVHJhbnNhY3Rpb25FbnZlbG9wZUVpcDQ4NDQuVHJhbnNhY3Rpb25FbnZlbG9wZUVpcDQ4NDR9LlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGB0cyB0d29zbGFzaFxuICogLy8gQG5vRXJyb3JzXG4gKiBpbXBvcnQgeyBCbG9icywgVHJhbnNhY3Rpb25FbnZlbG9wZUVpcDQ4NDQgfSBmcm9tICdveCdcbiAqIGltcG9ydCB7IGt6ZyB9IGZyb20gJy4va3pnJ1xuICpcbiAqIGNvbnN0IGJsb2JzID0gQmxvYnMuZnJvbSgnMHhkZWFkYmVlZicpXG4gKiBjb25zdCBibG9iVmVyc2lvbmVkSGFzaGVzID0gQmxvYnMudG9WZXJzaW9uZWRIYXNoZXMoYmxvYnMsIHsga3pnIH0pXG4gKlxuICogY29uc3QgZW52ZWxvcGUgPSBUcmFuc2FjdGlvbkVudmVsb3BlRWlwNDg0NC5mcm9tKHtcbiAqICAgYmxvYlZlcnNpb25lZEhhc2hlcyxcbiAqICAgY2hhaW5JZDogMSxcbiAqICAgbWF4RmVlUGVyR2FzOiBWYWx1ZS5mcm9tR3dlaSgnMTAnKSxcbiAqICAgdG86ICcweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAnLFxuICogICB2YWx1ZTogVmFsdWUuZnJvbUV0aGVyKCcxJyksXG4gKiB9KVxuICpcbiAqIGNvbnN0IHNlcmlhbGl6ZWQgPSBUcmFuc2FjdGlvbkVudmVsb3BlRWlwNDg0NC5zZXJpYWxpemUoZW52ZWxvcGUpIC8vIFshY29kZSBmb2N1c11cbiAqIGBgYFxuICpcbiAqIEBleGFtcGxlXG4gKiAjIyMgQXR0YWNoaW5nIFNpZ25hdHVyZXNcbiAqXG4gKiBJdCBpcyBwb3NzaWJsZSB0byBhdHRhY2ggYSBgc2lnbmF0dXJlYCB0byB0aGUgc2VyaWFsaXplZCBUcmFuc2FjdGlvbiBFbnZlbG9wZS5cbiAqXG4gKiBgYGB0cyB0d29zbGFzaFxuICogLy8gQG5vRXJyb3JzXG4gKiBpbXBvcnQgeyBCbG9icywgU2VjcDI1NmsxLCBUcmFuc2FjdGlvbkVudmVsb3BlRWlwNDg0NCwgVmFsdWUgfSBmcm9tICdveCdcbiAqIGltcG9ydCB7IGt6ZyB9IGZyb20gJy4va3pnJ1xuICpcbiAqIGNvbnN0IGJsb2JzID0gQmxvYnMuZnJvbSgnMHhkZWFkYmVlZicpXG4gKiBjb25zdCBzaWRlY2FycyA9IEJsb2JzLnRvU2lkZWNhcnMoYmxvYnMsIHsga3pnIH0pXG4gKiBjb25zdCBibG9iVmVyc2lvbmVkSGFzaGVzID0gQmxvYnMuc2lkZWNhcnNUb1ZlcnNpb25lZEhhc2hlcyhibG9icylcbiAqXG4gKiBjb25zdCBlbnZlbG9wZSA9IFRyYW5zYWN0aW9uRW52ZWxvcGVFaXA0ODQ0LmZyb20oe1xuICogICBibG9iVmVyc2lvbmVkSGFzaGVzLFxuICogICBjaGFpbklkOiAxLFxuICogICBtYXhGZWVQZXJCbG9iR2FzOiBWYWx1ZS5mcm9tR3dlaSgnMycpLFxuICogICBtYXhGZWVQZXJHYXM6IFZhbHVlLmZyb21Hd2VpKCcxMCcpLFxuICogICBtYXhQcmlvcml0eUZlZVBlckdhczogVmFsdWUuZnJvbUd3ZWkoJzEnKSxcbiAqICAgdG86ICcweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAnLFxuICogICB2YWx1ZTogVmFsdWUuZnJvbUV0aGVyKCcxJyksXG4gKiB9KVxuICpcbiAqIGNvbnN0IHNpZ25hdHVyZSA9IFNlY3AyNTZrMS5zaWduKHtcbiAqICAgcGF5bG9hZDogVHJhbnNhY3Rpb25FbnZlbG9wZUVpcDQ4NDQuZ2V0U2lnblBheWxvYWQoZW52ZWxvcGUpLFxuICogICBwcml2YXRlS2V5OiAnMHguLi4nLFxuICogfSlcbiAqXG4gKiBjb25zdCBzZXJpYWxpemVkID0gVHJhbnNhY3Rpb25FbnZlbG9wZUVpcDQ4NDQuc2VyaWFsaXplKGVudmVsb3BlLCB7IC8vIFshY29kZSBmb2N1c11cbiAqICAgc2lkZWNhcnMsIC8vIFshY29kZSBmb2N1c11cbiAqICAgc2lnbmF0dXJlLCAvLyBbIWNvZGUgZm9jdXNdXG4gKiB9KSAvLyBbIWNvZGUgZm9jdXNdXG4gKlxuICogLy8gLi4uIHNlbmQgYHNlcmlhbGl6ZWRgIHRyYW5zYWN0aW9uIHRvIEpTT04tUlBDIGBldGhfc2VuZFJhd1RyYW5zYWN0aW9uYFxuICogYGBgXG4gKlxuICogQHBhcmFtIGVudmVsb3BlIC0gVGhlIFRyYW5zYWN0aW9uIEVudmVsb3BlIHRvIHNlcmlhbGl6ZS5cbiAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9ucy5cbiAqIEByZXR1cm5zIFRoZSBzZXJpYWxpemVkIFRyYW5zYWN0aW9uIEVudmVsb3BlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gc2VyaWFsaXplKGVudmVsb3BlLCBvcHRpb25zID0ge30pIHtcbiAgICBjb25zdCB7IGJsb2JWZXJzaW9uZWRIYXNoZXMsIGNoYWluSWQsIGdhcywgbm9uY2UsIHRvLCB2YWx1ZSwgbWF4RmVlUGVyQmxvYkdhcywgbWF4RmVlUGVyR2FzLCBtYXhQcmlvcml0eUZlZVBlckdhcywgYWNjZXNzTGlzdCwgZGF0YSwgfSA9IGVudmVsb3BlO1xuICAgIGFzc2VydChlbnZlbG9wZSk7XG4gICAgY29uc3QgYWNjZXNzVHVwbGVMaXN0ID0gQWNjZXNzTGlzdC50b1R1cGxlTGlzdChhY2Nlc3NMaXN0KTtcbiAgICBjb25zdCBzaWduYXR1cmUgPSBTaWduYXR1cmUuZXh0cmFjdChvcHRpb25zLnNpZ25hdHVyZSB8fCBlbnZlbG9wZSk7XG4gICAgY29uc3Qgc2VyaWFsaXplZCA9IFtcbiAgICAgICAgSGV4LmZyb21OdW1iZXIoY2hhaW5JZCksXG4gICAgICAgIG5vbmNlID8gSGV4LmZyb21OdW1iZXIobm9uY2UpIDogJzB4JyxcbiAgICAgICAgbWF4UHJpb3JpdHlGZWVQZXJHYXMgPyBIZXguZnJvbU51bWJlcihtYXhQcmlvcml0eUZlZVBlckdhcykgOiAnMHgnLFxuICAgICAgICBtYXhGZWVQZXJHYXMgPyBIZXguZnJvbU51bWJlcihtYXhGZWVQZXJHYXMpIDogJzB4JyxcbiAgICAgICAgZ2FzID8gSGV4LmZyb21OdW1iZXIoZ2FzKSA6ICcweCcsXG4gICAgICAgIHRvID8/ICcweCcsXG4gICAgICAgIHZhbHVlID8gSGV4LmZyb21OdW1iZXIodmFsdWUpIDogJzB4JyxcbiAgICAgICAgZGF0YSA/PyAnMHgnLFxuICAgICAgICBhY2Nlc3NUdXBsZUxpc3QsXG4gICAgICAgIG1heEZlZVBlckJsb2JHYXMgPyBIZXguZnJvbU51bWJlcihtYXhGZWVQZXJCbG9iR2FzKSA6ICcweCcsXG4gICAgICAgIGJsb2JWZXJzaW9uZWRIYXNoZXMgPz8gW10sXG4gICAgICAgIC4uLihzaWduYXR1cmUgPyBTaWduYXR1cmUudG9UdXBsZShzaWduYXR1cmUpIDogW10pLFxuICAgIF07XG4gICAgY29uc3Qgc2lkZWNhcnMgPSBvcHRpb25zLnNpZGVjYXJzIHx8IGVudmVsb3BlLnNpZGVjYXJzO1xuICAgIGNvbnN0IGJsb2JzID0gW107XG4gICAgY29uc3QgY29tbWl0bWVudHMgPSBbXTtcbiAgICBjb25zdCBwcm9vZnMgPSBbXTtcbiAgICBpZiAoc2lkZWNhcnMpXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2lkZWNhcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHsgYmxvYiwgY29tbWl0bWVudCwgcHJvb2YgfSA9IHNpZGVjYXJzW2ldO1xuICAgICAgICAgICAgYmxvYnMucHVzaChibG9iKTtcbiAgICAgICAgICAgIGNvbW1pdG1lbnRzLnB1c2goY29tbWl0bWVudCk7XG4gICAgICAgICAgICBwcm9vZnMucHVzaChwcm9vZik7XG4gICAgICAgIH1cbiAgICByZXR1cm4gSGV4LmNvbmNhdCgnMHgwMycsIHNpZGVjYXJzXG4gICAgICAgID8gLy8gSWYgc2lkZWNhcnMgYXJlIHByb3ZpZGVkLCBlbnZlbG9wZSB0dXJucyBpbnRvIGEgXCJuZXR3b3JrIHdyYXBwZXJcIjpcbiAgICAgICAgICAgIFJscC5mcm9tSGV4KFtzZXJpYWxpemVkLCBibG9icywgY29tbWl0bWVudHMsIHByb29mc10pXG4gICAgICAgIDogLy8gT3RoZXJ3aXNlLCBzdGFuZGFyZCBlbnZlbG9wZSBpcyB1c2VkOlxuICAgICAgICAgICAgUmxwLmZyb21IZXgoc2VyaWFsaXplZCkpO1xufVxuLyoqXG4gKiBDb252ZXJ0cyBhbiB7QGxpbmsgb3gjVHJhbnNhY3Rpb25FbnZlbG9wZUVpcDQ4NDQuVHJhbnNhY3Rpb25FbnZlbG9wZUVpcDQ4NDR9IHRvIGFuIHtAbGluayBveCNUcmFuc2FjdGlvbkVudmVsb3BlRWlwNDg0NC5ScGN9LlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGB0cyB0d29zbGFzaFxuICogLy8gQG5vRXJyb3JzXG4gKiBpbXBvcnQgeyBCbG9icywgUnBjUmVxdWVzdCwgVHJhbnNhY3Rpb25FbnZlbG9wZUVpcDQ4NDQsIFZhbHVlIH0gZnJvbSAnb3gnXG4gKiBpbXBvcnQgeyBremcgfSBmcm9tICcuL2t6ZydcbiAqXG4gKiBjb25zdCBibG9icyA9IEJsb2JzLmZyb20oJzB4ZGVhZGJlZWYnKVxuICogY29uc3QgYmxvYlZlcnNpb25lZEhhc2hlcyA9IEJsb2JzLnRvVmVyc2lvbmVkSGFzaGVzKGJsb2JzLCB7IGt6ZyB9KVxuICpcbiAqIGNvbnN0IGVudmVsb3BlID0gVHJhbnNhY3Rpb25FbnZlbG9wZUVpcDQ4NDQuZnJvbSh7XG4gKiAgIGJsb2JWZXJzaW9uZWRIYXNoZXMsXG4gKiAgIGNoYWluSWQ6IDEsXG4gKiAgIG5vbmNlOiAwbixcbiAqICAgZ2FzOiAyMTAwMG4sXG4gKiAgIG1heEZlZVBlckJsb2JHYXM6IFZhbHVlLmZyb21Hd2VpKCcyMCcpLFxuICogICB0bzogJzB4NzA5OTc5NzBjNTE4MTJkYzNhMDEwYzdkMDFiNTBlMGQxN2RjNzljOCcsXG4gKiAgIHZhbHVlOiBWYWx1ZS5mcm9tRXRoZXIoJzEnKSxcbiAqIH0pXG4gKlxuICogY29uc3QgZW52ZWxvcGVfcnBjID0gVHJhbnNhY3Rpb25FbnZlbG9wZUVpcDQ4NDQudG9ScGMoZW52ZWxvcGUpIC8vIFshY29kZSBmb2N1c11cbiAqXG4gKiBjb25zdCByZXF1ZXN0ID0gUnBjUmVxdWVzdC5mcm9tKHtcbiAqICAgaWQ6IDAsXG4gKiAgIG1ldGhvZDogJ2V0aF9zZW5kVHJhbnNhY3Rpb24nLFxuICogICBwYXJhbXM6IFtlbnZlbG9wZV9ycGNdLFxuICogfSlcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSBlbnZlbG9wZSAtIFRoZSBFSVAtNDg0NCB0cmFuc2FjdGlvbiBlbnZlbG9wZSB0byBjb252ZXJ0LlxuICogQHJldHVybnMgQW4gUlBDLWZvcm1hdHRlZCBFSVAtNDg0NCB0cmFuc2FjdGlvbiBlbnZlbG9wZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRvUnBjKGVudmVsb3BlKSB7XG4gICAgY29uc3Qgc2lnbmF0dXJlID0gU2lnbmF0dXJlLmV4dHJhY3QoZW52ZWxvcGUpO1xuICAgIHJldHVybiB7XG4gICAgICAgIC4uLmVudmVsb3BlLFxuICAgICAgICBjaGFpbklkOiBIZXguZnJvbU51bWJlcihlbnZlbG9wZS5jaGFpbklkKSxcbiAgICAgICAgZGF0YTogZW52ZWxvcGUuZGF0YSA/PyBlbnZlbG9wZS5pbnB1dCxcbiAgICAgICAgLi4uKHR5cGVvZiBlbnZlbG9wZS5nYXMgPT09ICdiaWdpbnQnXG4gICAgICAgICAgICA/IHsgZ2FzOiBIZXguZnJvbU51bWJlcihlbnZlbG9wZS5nYXMpIH1cbiAgICAgICAgICAgIDoge30pLFxuICAgICAgICAuLi4odHlwZW9mIGVudmVsb3BlLm5vbmNlID09PSAnYmlnaW50J1xuICAgICAgICAgICAgPyB7IG5vbmNlOiBIZXguZnJvbU51bWJlcihlbnZlbG9wZS5ub25jZSkgfVxuICAgICAgICAgICAgOiB7fSksXG4gICAgICAgIC4uLih0eXBlb2YgZW52ZWxvcGUudmFsdWUgPT09ICdiaWdpbnQnXG4gICAgICAgICAgICA/IHsgdmFsdWU6IEhleC5mcm9tTnVtYmVyKGVudmVsb3BlLnZhbHVlKSB9XG4gICAgICAgICAgICA6IHt9KSxcbiAgICAgICAgLi4uKHR5cGVvZiBlbnZlbG9wZS5tYXhGZWVQZXJCbG9iR2FzID09PSAnYmlnaW50J1xuICAgICAgICAgICAgPyB7IG1heEZlZVBlckJsb2JHYXM6IEhleC5mcm9tTnVtYmVyKGVudmVsb3BlLm1heEZlZVBlckJsb2JHYXMpIH1cbiAgICAgICAgICAgIDoge30pLFxuICAgICAgICAuLi4odHlwZW9mIGVudmVsb3BlLm1heEZlZVBlckdhcyA9PT0gJ2JpZ2ludCdcbiAgICAgICAgICAgID8geyBtYXhGZWVQZXJHYXM6IEhleC5mcm9tTnVtYmVyKGVudmVsb3BlLm1heEZlZVBlckdhcykgfVxuICAgICAgICAgICAgOiB7fSksXG4gICAgICAgIC4uLih0eXBlb2YgZW52ZWxvcGUubWF4UHJpb3JpdHlGZWVQZXJHYXMgPT09ICdiaWdpbnQnXG4gICAgICAgICAgICA/IHsgbWF4UHJpb3JpdHlGZWVQZXJHYXM6IEhleC5mcm9tTnVtYmVyKGVudmVsb3BlLm1heFByaW9yaXR5RmVlUGVyR2FzKSB9XG4gICAgICAgICAgICA6IHt9KSxcbiAgICAgICAgdHlwZTogJzB4MycsXG4gICAgICAgIC4uLihzaWduYXR1cmUgPyBTaWduYXR1cmUudG9ScGMoc2lnbmF0dXJlKSA6IHt9KSxcbiAgICB9O1xufVxuLyoqXG4gKiBWYWxpZGF0ZXMgYSB7QGxpbmsgb3gjVHJhbnNhY3Rpb25FbnZlbG9wZUVpcDQ4NDQuVHJhbnNhY3Rpb25FbnZlbG9wZUVpcDQ4NDR9LiBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW52ZWxvcGUgaXMgdmFsaWQsIGBmYWxzZWAgb3RoZXJ3aXNlLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGB0cyB0d29zbGFzaFxuICogaW1wb3J0IHsgVHJhbnNhY3Rpb25FbnZlbG9wZUVpcDQ4NDQsIFZhbHVlIH0gZnJvbSAnb3gnXG4gKlxuICogY29uc3QgdmFsaWQgPSBUcmFuc2FjdGlvbkVudmVsb3BlRWlwNDg0NC5hc3NlcnQoe1xuICogICBibG9iVmVyc2lvbmVkSGFzaGVzOiBbXSxcbiAqICAgY2hhaW5JZDogMSxcbiAqICAgdG86ICcweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAnLFxuICogICB2YWx1ZTogVmFsdWUuZnJvbUV0aGVyKCcxJyksXG4gKiB9KVxuICogLy8gQGxvZzogZmFsc2VcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSBlbnZlbG9wZSAtIFRoZSB0cmFuc2FjdGlvbiBlbnZlbG9wZSB0byB2YWxpZGF0ZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlKGVudmVsb3BlKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgYXNzZXJ0KGVudmVsb3BlKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGNhdGNoIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVRyYW5zYWN0aW9uRW52ZWxvcGVFaXA0ODQ0LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ox/_esm/core/TransactionEnvelopeEip4844.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ox/_esm/core/TransactionEnvelopeEip7702.js":
/*!*****************************************************************!*\
  !*** ./node_modules/ox/_esm/core/TransactionEnvelopeEip7702.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assert: () => (/* binding */ assert),\n/* harmony export */   deserialize: () => (/* binding */ deserialize),\n/* harmony export */   from: () => (/* binding */ from),\n/* harmony export */   getSignPayload: () => (/* binding */ getSignPayload),\n/* harmony export */   hash: () => (/* binding */ hash),\n/* harmony export */   serialize: () => (/* binding */ serialize),\n/* harmony export */   serializedType: () => (/* binding */ serializedType),\n/* harmony export */   type: () => (/* binding */ type),\n/* harmony export */   validate: () => (/* binding */ validate)\n/* harmony export */ });\n/* harmony import */ var _AccessList_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./AccessList.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/AccessList.js\");\n/* harmony import */ var _Address_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Address.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Address.js\");\n/* harmony import */ var _Authorization_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Authorization.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Authorization.js\");\n/* harmony import */ var _Hash_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./Hash.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Hash.js\");\n/* harmony import */ var _Hex_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Hex.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Hex.js\");\n/* harmony import */ var _Rlp_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Rlp.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Rlp.js\");\n/* harmony import */ var _Signature_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Signature.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Signature.js\");\n/* harmony import */ var _TransactionEnvelope_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./TransactionEnvelope.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/TransactionEnvelope.js\");\n/* harmony import */ var _TransactionEnvelopeEip1559_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./TransactionEnvelopeEip1559.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/TransactionEnvelopeEip1559.js\");\n\n\n\n\n\n\n\n\n\nconst serializedType = '0x04';\nconst type = 'eip7702';\n/**\n * Asserts a {@link ox#TransactionEnvelopeEip7702.TransactionEnvelopeEip7702} is valid.\n *\n * @example\n * ```ts twoslash\n * import { TransactionEnvelopeEip7702, Value } from 'ox'\n *\n * TransactionEnvelopeEip7702.assert({\n *   authorizationList: [],\n *   maxFeePerGas: 2n ** 256n - 1n + 1n,\n *   chainId: 1,\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: Value.fromEther('1'),\n * })\n * // @error: FeeCapTooHighError:\n * // @error: The fee cap (`masFeePerGas` = 115792089237316195423570985008687907853269984665640564039457584007913 gwei) cannot be\n * // @error: higher than the maximum allowed value (2^256-1).\n * ```\n *\n * @param envelope - The transaction envelope to assert.\n */\nfunction assert(envelope) {\n    const { authorizationList } = envelope;\n    if (authorizationList) {\n        for (const authorization of authorizationList) {\n            const { address, chainId } = authorization;\n            if (address)\n                _Address_js__WEBPACK_IMPORTED_MODULE_0__.assert(address, { strict: false });\n            if (Number(chainId) < 0)\n                throw new _TransactionEnvelope_js__WEBPACK_IMPORTED_MODULE_1__.InvalidChainIdError({ chainId });\n        }\n    }\n    _TransactionEnvelopeEip1559_js__WEBPACK_IMPORTED_MODULE_2__.assert(envelope);\n}\n/**\n * Deserializes a {@link ox#TransactionEnvelopeEip7702.TransactionEnvelopeEip7702} from its serialized form.\n *\n * @example\n * ```ts twoslash\n * import { TransactionEnvelopeEip7702 } from 'ox'\n *\n * const envelope = TransactionEnvelopeEip7702.deserialize('0x04ef0182031184773594008477359400809470997970c51812dc3a010c7d01b50e0d17dc79c8880de0b6b3a764000080c0')\n * // @log: {\n * // @log:   authorizationList: [...],\n * // @log:   type: 'eip7702',\n * // @log:   nonce: 785n,\n * // @log:   maxFeePerGas: 2000000000n,\n * // @log:   gas: 1000000n,\n * // @log:   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n * // @log:   value: 1000000000000000000n,\n * // @log: }\n * ```\n *\n * @param serialized - The serialized transaction.\n * @returns Deserialized Transaction Envelope.\n */\nfunction deserialize(serialized) {\n    const transactionArray = _Rlp_js__WEBPACK_IMPORTED_MODULE_3__.toHex(_Hex_js__WEBPACK_IMPORTED_MODULE_4__.slice(serialized, 1));\n    const [chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gas, to, value, data, accessList, authorizationList, yParity, r, s,] = transactionArray;\n    if (!(transactionArray.length === 10 || transactionArray.length === 13))\n        throw new _TransactionEnvelope_js__WEBPACK_IMPORTED_MODULE_1__.InvalidSerializedError({\n            attributes: {\n                chainId,\n                nonce,\n                maxPriorityFeePerGas,\n                maxFeePerGas,\n                gas,\n                to,\n                value,\n                data,\n                accessList,\n                authorizationList,\n                ...(transactionArray.length > 9\n                    ? {\n                        yParity,\n                        r,\n                        s,\n                    }\n                    : {}),\n            },\n            serialized,\n            type,\n        });\n    let transaction = {\n        chainId: Number(chainId),\n        type,\n    };\n    if (_Hex_js__WEBPACK_IMPORTED_MODULE_4__.validate(to) && to !== '0x')\n        transaction.to = to;\n    if (_Hex_js__WEBPACK_IMPORTED_MODULE_4__.validate(gas) && gas !== '0x')\n        transaction.gas = BigInt(gas);\n    if (_Hex_js__WEBPACK_IMPORTED_MODULE_4__.validate(data) && data !== '0x')\n        transaction.data = data;\n    if (_Hex_js__WEBPACK_IMPORTED_MODULE_4__.validate(nonce))\n        transaction.nonce = nonce === '0x' ? 0n : BigInt(nonce);\n    if (_Hex_js__WEBPACK_IMPORTED_MODULE_4__.validate(value) && value !== '0x')\n        transaction.value = BigInt(value);\n    if (_Hex_js__WEBPACK_IMPORTED_MODULE_4__.validate(maxFeePerGas) && maxFeePerGas !== '0x')\n        transaction.maxFeePerGas = BigInt(maxFeePerGas);\n    if (_Hex_js__WEBPACK_IMPORTED_MODULE_4__.validate(maxPriorityFeePerGas) && maxPriorityFeePerGas !== '0x')\n        transaction.maxPriorityFeePerGas = BigInt(maxPriorityFeePerGas);\n    if (accessList.length !== 0 && accessList !== '0x')\n        transaction.accessList = _AccessList_js__WEBPACK_IMPORTED_MODULE_5__.fromTupleList(accessList);\n    if (authorizationList !== '0x')\n        transaction.authorizationList = _Authorization_js__WEBPACK_IMPORTED_MODULE_6__.fromTupleList(authorizationList);\n    const signature = r && s && yParity ? _Signature_js__WEBPACK_IMPORTED_MODULE_7__.fromTuple([yParity, r, s]) : undefined;\n    if (signature)\n        transaction = {\n            ...transaction,\n            ...signature,\n        };\n    assert(transaction);\n    return transaction;\n}\n/**\n * Converts an arbitrary transaction object into an EIP-7702 Transaction Envelope.\n *\n * @example\n * ```ts twoslash\n * import { Authorization, Secp256k1, TransactionEnvelopeEip7702, Value } from 'ox'\n *\n * const authorization = Authorization.from({\n *   address: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   chainId: 1,\n *   nonce: 0n,\n * })\n *\n * const signature = Secp256k1.sign({\n *   payload: Authorization.getSignPayload(authorization),\n *   privateKey: '0x...',\n * })\n *\n * const authorizationList = [Authorization.from(authorization, { signature })]\n *\n * const envelope = TransactionEnvelopeEip7702.from({ // [!code focus]\n *   authorizationList, // [!code focus]\n *   chainId: 1, // [!code focus]\n *   maxFeePerGas: Value.fromGwei('10'), // [!code focus]\n *   maxPriorityFeePerGas: Value.fromGwei('1'), // [!code focus]\n *   to: '0x0000000000000000000000000000000000000000', // [!code focus]\n *   value: Value.fromEther('1'), // [!code focus]\n * }) // [!code focus]\n * ```\n *\n * @example\n * ### Attaching Signatures\n *\n * It is possible to attach a `signature` to the transaction envelope.\n *\n * ```ts twoslash\n * // @noErrors\n * import { Secp256k1, TransactionEnvelopeEip7702, Value } from 'ox'\n *\n * const envelope = TransactionEnvelopeEip7702.from({\n *   authorizationList: [...],\n *   chainId: 1,\n *   maxFeePerGas: Value.fromGwei('10'),\n *   maxPriorityFeePerGas: Value.fromGwei('1'),\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: Value.fromEther('1'),\n * })\n *\n * const signature = Secp256k1.sign({\n *   payload: TransactionEnvelopeEip7702.getSignPayload(envelope),\n *   privateKey: '0x...',\n * })\n *\n * const envelope_signed = TransactionEnvelopeEip7702.from(envelope, { // [!code focus]\n *   signature, // [!code focus]\n * }) // [!code focus]\n * // @log: {\n * // @log:   authorizationList: [...],\n * // @log:   chainId: 1,\n * // @log:   maxFeePerGas: 10000000000n,\n * // @log:   maxPriorityFeePerGas: 1000000000n,\n * // @log:   to: '0x0000000000000000000000000000000000000000',\n * // @log:   type: 'eip7702',\n * // @log:   value: 1000000000000000000n,\n * // @log:   r: 125...n,\n * // @log:   s: 642...n,\n * // @log:   yParity: 0,\n * // @log: }\n * ```\n *\n * @example\n * ### From Serialized\n *\n * It is possible to instantiate an EIP-7702 Transaction Envelope from a {@link ox#TransactionEnvelopeEip7702.Serialized} value.\n *\n * ```ts twoslash\n * import { TransactionEnvelopeEip7702 } from 'ox'\n *\n * const envelope = TransactionEnvelopeEip7702.from('0x04f858018203118502540be4008504a817c800809470997970c51812dc3a010c7d01b50e0d17dc79c8880de0b6b3a764000080c08477359400e1a001627c687261b0e7f8638af1112efa8a77e23656f6e7945275b19e9deed80261')\n * // @log: {\n * // @log:   authorizationList: [...],\n * // @log:   chainId: 1,\n * // @log:   maxFeePerGas: 10000000000n,\n * // @log:   to: '0x0000000000000000000000000000000000000000',\n * // @log:   type: 'eip7702',\n * // @log:   value: 1000000000000000000n,\n * // @log: }\n * ```\n *\n * @param envelope - The transaction object to convert.\n * @param options - Options.\n * @returns An EIP-7702 Transaction Envelope.\n */\nfunction from(envelope, options = {}) {\n    const { signature } = options;\n    const envelope_ = (typeof envelope === 'string' ? deserialize(envelope) : envelope);\n    assert(envelope_);\n    return {\n        ...envelope_,\n        ...(signature ? _Signature_js__WEBPACK_IMPORTED_MODULE_7__.from(signature) : {}),\n        type: 'eip7702',\n    };\n}\n/**\n * Returns the payload to sign for a {@link ox#TransactionEnvelopeEip7702.TransactionEnvelopeEip7702}.\n *\n * @example\n * The example below demonstrates how to compute the sign payload which can be used\n * with ECDSA signing utilities like {@link ox#Secp256k1.(sign:function)}.\n *\n * ```ts twoslash\n * // @noErrors\n * import { Secp256k1, TransactionEnvelopeEip7702 } from 'ox'\n *\n * const envelope = TransactionEnvelopeEip7702.from({\n *   authorizationList: [...],\n *   chainId: 1,\n *   nonce: 0n,\n *   maxFeePerGas: 1000000000n,\n *   gas: 21000n,\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: 1000000000000000000n,\n * })\n *\n * const payload = TransactionEnvelopeEip7702.getSignPayload(envelope) // [!code focus]\n * // @log: '0x...'\n *\n * const signature = Secp256k1.sign({ payload, privateKey: '0x...' })\n * ```\n *\n * @param envelope - The transaction envelope to get the sign payload for.\n * @returns The sign payload.\n */\nfunction getSignPayload(envelope) {\n    return hash(envelope, { presign: true });\n}\n/**\n * Hashes a {@link ox#TransactionEnvelopeEip7702.TransactionEnvelopeEip7702}. This is the \"transaction hash\".\n *\n * @example\n * ```ts twoslash\n * // @noErrors\n * import { Secp256k1, TransactionEnvelopeEip7702 } from 'ox'\n *\n * const envelope = TransactionEnvelopeEip7702.from({\n *   authorizationList: [...],\n *   chainId: 1,\n *   nonce: 0n,\n *   maxFeePerGas: 1000000000n,\n *   gas: 21000n,\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: 1000000000000000000n,\n * })\n *\n * const signature = Secp256k1.sign({\n *   payload: TransactionEnvelopeEip7702.getSignPayload(envelope),\n *   privateKey: '0x...'\n * })\n *\n * const envelope_signed = TransactionEnvelopeEip7702.from(envelope, { signature })\n *\n * const hash = TransactionEnvelopeEip7702.hash(envelope_signed) // [!code focus]\n * ```\n *\n * @param envelope - The EIP-7702 Transaction Envelope to hash.\n * @param options - Options.\n * @returns The hash of the transaction envelope.\n */\nfunction hash(envelope, options = {}) {\n    const { presign } = options;\n    return _Hash_js__WEBPACK_IMPORTED_MODULE_8__.keccak256(serialize({\n        ...envelope,\n        ...(presign\n            ? {\n                r: undefined,\n                s: undefined,\n                yParity: undefined,\n            }\n            : {}),\n    }));\n}\n/**\n * Serializes a {@link ox#TransactionEnvelopeEip7702.TransactionEnvelopeEip7702}.\n *\n * @example\n * ```ts twoslash\n * // @noErrors\n * import { Authorization, Secp256k1, TransactionEnvelopeEip7702, Value } from 'ox'\n *\n * const authorization = Authorization.from({\n *   address: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   chainId: 1,\n *   nonce: 0n,\n * })\n *\n * const signature = Secp256k1.sign({\n *   payload: Authorization.getSignPayload(authorization),\n *   privateKey: '0x...',\n * })\n *\n * const authorizationList = [Authorization.from(authorization, { signature })]\n *\n * const envelope = TransactionEnvelopeEip7702.from({\n *   authorizationList,\n *   chainId: 1,\n *   maxFeePerGas: Value.fromGwei('10'),\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: Value.fromEther('1'),\n * })\n *\n * const serialized = TransactionEnvelopeEip7702.serialize(envelope) // [!code focus]\n * ```\n *\n * @example\n * ### Attaching Signatures\n *\n * It is possible to attach a `signature` to the serialized Transaction Envelope.\n *\n * ```ts twoslash\n * // @noErrors\n * import { Secp256k1, TransactionEnvelopeEip7702, Value } from 'ox'\n *\n * const envelope = TransactionEnvelopeEip7702.from({\n *   authorizationList: [...],\n *   chainId: 1,\n *   maxFeePerGas: Value.fromGwei('10'),\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: Value.fromEther('1'),\n * })\n *\n * const signature = Secp256k1.sign({\n *   payload: TransactionEnvelopeEip7702.getSignPayload(envelope),\n *   privateKey: '0x...',\n * })\n *\n * const serialized = TransactionEnvelopeEip7702.serialize(envelope, { // [!code focus]\n *   signature, // [!code focus]\n * }) // [!code focus]\n *\n * // ... send `serialized` transaction to JSON-RPC `eth_sendRawTransaction`\n * ```\n *\n * @param envelope - The Transaction Envelope to serialize.\n * @param options - Options.\n * @returns The serialized Transaction Envelope.\n */\nfunction serialize(envelope, options = {}) {\n    const { authorizationList, chainId, gas, nonce, to, value, maxFeePerGas, maxPriorityFeePerGas, accessList, data, input, } = envelope;\n    assert(envelope);\n    const accessTupleList = _AccessList_js__WEBPACK_IMPORTED_MODULE_5__.toTupleList(accessList);\n    const authorizationTupleList = _Authorization_js__WEBPACK_IMPORTED_MODULE_6__.toTupleList(authorizationList);\n    const signature = _Signature_js__WEBPACK_IMPORTED_MODULE_7__.extract(options.signature || envelope);\n    const serialized = [\n        _Hex_js__WEBPACK_IMPORTED_MODULE_4__.fromNumber(chainId),\n        nonce ? _Hex_js__WEBPACK_IMPORTED_MODULE_4__.fromNumber(nonce) : '0x',\n        maxPriorityFeePerGas ? _Hex_js__WEBPACK_IMPORTED_MODULE_4__.fromNumber(maxPriorityFeePerGas) : '0x',\n        maxFeePerGas ? _Hex_js__WEBPACK_IMPORTED_MODULE_4__.fromNumber(maxFeePerGas) : '0x',\n        gas ? _Hex_js__WEBPACK_IMPORTED_MODULE_4__.fromNumber(gas) : '0x',\n        to ?? '0x',\n        value ? _Hex_js__WEBPACK_IMPORTED_MODULE_4__.fromNumber(value) : '0x',\n        data ?? input ?? '0x',\n        accessTupleList,\n        authorizationTupleList,\n        ...(signature ? _Signature_js__WEBPACK_IMPORTED_MODULE_7__.toTuple(signature) : []),\n    ];\n    return _Hex_js__WEBPACK_IMPORTED_MODULE_4__.concat(serializedType, _Rlp_js__WEBPACK_IMPORTED_MODULE_3__.fromHex(serialized));\n}\n/**\n * Validates a {@link ox#TransactionEnvelopeEip7702.TransactionEnvelopeEip7702}. Returns `true` if the envelope is valid, `false` otherwise.\n *\n * @example\n * ```ts twoslash\n * import { TransactionEnvelopeEip7702, Value } from 'ox'\n *\n * const valid = TransactionEnvelopeEip7702.validate({\n *   authorizationList: [],\n *   maxFeePerGas: 2n ** 256n - 1n + 1n,\n *   chainId: 1,\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: Value.fromEther('1'),\n * })\n * // @log: false\n * ```\n *\n * @param envelope - The transaction envelope to validate.\n */\nfunction validate(envelope) {\n    try {\n        assert(envelope);\n        return true;\n    }\n    catch {\n        return false;\n    }\n}\n//# sourceMappingURL=TransactionEnvelopeEip7702.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ox/_esm/core/TransactionEnvelopeEip7702.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ox/_esm/core/TransactionEnvelopeLegacy.js":
/*!****************************************************************!*\
  !*** ./node_modules/ox/_esm/core/TransactionEnvelopeLegacy.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assert: () => (/* binding */ assert),\n/* harmony export */   deserialize: () => (/* binding */ deserialize),\n/* harmony export */   from: () => (/* binding */ from),\n/* harmony export */   getSignPayload: () => (/* binding */ getSignPayload),\n/* harmony export */   hash: () => (/* binding */ hash),\n/* harmony export */   serialize: () => (/* binding */ serialize),\n/* harmony export */   toRpc: () => (/* binding */ toRpc),\n/* harmony export */   type: () => (/* binding */ type),\n/* harmony export */   validate: () => (/* binding */ validate)\n/* harmony export */ });\n/* harmony import */ var _Address_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Address.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Address.js\");\n/* harmony import */ var _Hash_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Hash.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Hash.js\");\n/* harmony import */ var _Hex_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Hex.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Hex.js\");\n/* harmony import */ var _Rlp_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Rlp.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Rlp.js\");\n/* harmony import */ var _Signature_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Signature.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Signature.js\");\n/* harmony import */ var _TransactionEnvelope_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./TransactionEnvelope.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/TransactionEnvelope.js\");\n\n\n\n\n\n\nconst type = 'legacy';\n/**\n * Asserts a {@link ox#TransactionEnvelopeLegacy.TransactionEnvelopeLegacy} is valid.\n *\n * @example\n * ```ts twoslash\n * import { TransactionEnvelopeLegacy, Value } from 'ox'\n *\n * TransactionEnvelopeLegacy.assert({\n *   gasPrice: 2n ** 256n - 1n + 1n,\n *   chainId: 1,\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: Value.fromEther('1'),\n * })\n * // @error: GasPriceTooHighError:\n * // @error: The gas price (`gasPrice` = 115792089237316195423570985008687907853269984665640564039457584007913 gwei) cannot be\n * // @error: higher than the maximum allowed value (2^256-1).\n * ```\n *\n * @param envelope - The transaction envelope to assert.\n */\nfunction assert(envelope) {\n    const { chainId, gasPrice, to } = envelope;\n    if (to)\n        _Address_js__WEBPACK_IMPORTED_MODULE_0__.assert(to, { strict: false });\n    if (typeof chainId !== 'undefined' && chainId <= 0)\n        throw new _TransactionEnvelope_js__WEBPACK_IMPORTED_MODULE_1__.InvalidChainIdError({ chainId });\n    if (gasPrice && BigInt(gasPrice) > 2n ** 256n - 1n)\n        throw new _TransactionEnvelope_js__WEBPACK_IMPORTED_MODULE_1__.GasPriceTooHighError({ gasPrice });\n}\n/**\n * Deserializes a {@link ox#TransactionEnvelopeLegacy.TransactionEnvelopeLegacy} from its serialized form.\n *\n * @example\n * ```ts twoslash\n * import { TransactionEnvelopeLegacy } from 'ox'\n *\n * const envelope = TransactionEnvelopeLegacy.deserialize('0x01ef0182031184773594008477359400809470997970c51812dc3a010c7d01b50e0d17dc79c8880de0b6b3a764000080c0')\n * // @log: {\n * // @log:   type: 'legacy',\n * // @log:   nonce: 785n,\n * // @log:   gasPrice: 2000000000n,\n * // @log:   gas: 1000000n,\n * // @log:   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n * // @log:   value: 1000000000000000000n,\n * // @log: }\n * ```\n *\n * @param serialized - The serialized transaction.\n * @returns Deserialized Transaction Envelope.\n */\nfunction deserialize(serialized) {\n    const tuple = _Rlp_js__WEBPACK_IMPORTED_MODULE_2__.toHex(serialized);\n    const [nonce, gasPrice, gas, to, value, data, chainIdOrV_, r, s] = tuple;\n    if (!(tuple.length === 6 || tuple.length === 9))\n        throw new _TransactionEnvelope_js__WEBPACK_IMPORTED_MODULE_1__.InvalidSerializedError({\n            attributes: {\n                nonce,\n                gasPrice,\n                gas,\n                to,\n                value,\n                data,\n                ...(tuple.length > 6\n                    ? {\n                        v: chainIdOrV_,\n                        r,\n                        s,\n                    }\n                    : {}),\n            },\n            serialized,\n            type,\n        });\n    const transaction = {\n        type,\n    };\n    if (_Hex_js__WEBPACK_IMPORTED_MODULE_3__.validate(to) && to !== '0x')\n        transaction.to = to;\n    if (_Hex_js__WEBPACK_IMPORTED_MODULE_3__.validate(gas) && gas !== '0x')\n        transaction.gas = BigInt(gas);\n    if (_Hex_js__WEBPACK_IMPORTED_MODULE_3__.validate(data) && data !== '0x')\n        transaction.data = data;\n    if (_Hex_js__WEBPACK_IMPORTED_MODULE_3__.validate(nonce))\n        transaction.nonce = nonce === '0x' ? 0n : BigInt(nonce);\n    if (_Hex_js__WEBPACK_IMPORTED_MODULE_3__.validate(value) && value !== '0x')\n        transaction.value = BigInt(value);\n    if (_Hex_js__WEBPACK_IMPORTED_MODULE_3__.validate(gasPrice) && gasPrice !== '0x')\n        transaction.gasPrice = BigInt(gasPrice);\n    if (tuple.length === 6)\n        return transaction;\n    const chainIdOrV = _Hex_js__WEBPACK_IMPORTED_MODULE_3__.validate(chainIdOrV_) && chainIdOrV_ !== '0x'\n        ? Number(chainIdOrV_)\n        : 0;\n    if (s === '0x' && r === '0x') {\n        if (chainIdOrV > 0)\n            transaction.chainId = Number(chainIdOrV);\n        return transaction;\n    }\n    const v = chainIdOrV;\n    const chainId = Math.floor((v - 35) / 2);\n    if (chainId > 0)\n        transaction.chainId = chainId;\n    else if (v !== 27 && v !== 28)\n        throw new _Signature_js__WEBPACK_IMPORTED_MODULE_4__.InvalidVError({ value: v });\n    transaction.yParity = _Signature_js__WEBPACK_IMPORTED_MODULE_4__.vToYParity(v);\n    transaction.v = v;\n    transaction.s = s === '0x' ? 0n : BigInt(s);\n    transaction.r = r === '0x' ? 0n : BigInt(r);\n    assert(transaction);\n    return transaction;\n}\n/**\n * Converts an arbitrary transaction object into a legacy Transaction Envelope.\n *\n * @example\n * ```ts twoslash\n * import { TransactionEnvelopeLegacy, Value } from 'ox'\n *\n * const envelope = TransactionEnvelopeLegacy.from({\n *   gasPrice: Value.fromGwei('10'),\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: Value.fromEther('1'),\n * })\n * ```\n *\n * @example\n * ### Attaching Signatures\n *\n * It is possible to attach a `signature` to the transaction envelope.\n *\n * ```ts twoslash\n * import { Secp256k1, TransactionEnvelopeLegacy, Value } from 'ox'\n *\n * const envelope = TransactionEnvelopeLegacy.from({\n *   chainId: 1,\n *   gasPrice: Value.fromGwei('10'),\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: Value.fromEther('1'),\n * })\n *\n * const signature = Secp256k1.sign({\n *   payload: TransactionEnvelopeLegacy.getSignPayload(envelope),\n *   privateKey: '0x...',\n * })\n *\n * const envelope_signed = TransactionEnvelopeLegacy.from(envelope, { // [!code focus]\n *   signature, // [!code focus]\n * }) // [!code focus]\n * // @log: {\n * // @log:   authorizationList: [...],\n * // @log:   chainId: 1,\n * // @log:   gasPrice: 10000000000n,\n * // @log:   to: '0x0000000000000000000000000000000000000000',\n * // @log:   type: 'eip7702',\n * // @log:   value: 1000000000000000000n,\n * // @log:   r: 125...n,\n * // @log:   s: 642...n,\n * // @log:   yParity: 0,\n * // @log: }\n * ```\n *\n * @example\n * ### From Serialized\n *\n * It is possible to instantiate an legacy Transaction Envelope from a {@link ox#TransactionEnvelopeLegacy.Serialized} value.\n *\n * ```ts twoslash\n * import { TransactionEnvelopeLegacy } from 'ox'\n *\n * const envelope = TransactionEnvelopeLegacy.from('0xf858018203118502540be4008504a817c800809470997970c51812dc3a010c7d01b50e0d17dc79c8880de0b6b3a764000080c08477359400e1a001627c687261b0e7f8638af1112efa8a77e23656f6e7945275b19e9deed80261')\n * // @log: {\n * // @log:   chainId: 1,\n * // @log:   gasPrice: 10000000000n,\n * // @log:   to: '0x0000000000000000000000000000000000000000',\n * // @log:   type: 'legacy',\n * // @log:   value: 1000000000000000000n,\n * // @log: }\n * ```\n *\n * @param envelope - The transaction object to convert.\n * @param options - Options.\n * @returns A legacy Transaction Envelope.\n */\nfunction from(envelope, options = {}) {\n    const { signature } = options;\n    const envelope_ = (typeof envelope === 'string' ? deserialize(envelope) : envelope);\n    assert(envelope_);\n    const signature_ = (() => {\n        if (!signature)\n            return {};\n        const s = _Signature_js__WEBPACK_IMPORTED_MODULE_4__.from(signature);\n        s.v = _Signature_js__WEBPACK_IMPORTED_MODULE_4__.yParityToV(s.yParity);\n        return s;\n    })();\n    return {\n        ...envelope_,\n        ...signature_,\n        type: 'legacy',\n    };\n}\n/**\n * Returns the payload to sign for a {@link ox#TransactionEnvelopeLegacy.TransactionEnvelopeLegacy}.\n *\n * @example\n * The example below demonstrates how to compute the sign payload which can be used\n * with ECDSA signing utilities like {@link ox#Secp256k1.(sign:function)}.\n *\n * ```ts twoslash\n * // @noErrors\n * import { Secp256k1, TransactionEnvelopeLegacy } from 'ox'\n *\n * const envelope = TransactionEnvelopeLegacy.from({\n *   nonce: 0n,\n *   gasPrice: 1000000000n,\n *   gas: 21000n,\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: 1000000000000000000n,\n * })\n *\n * const payload = TransactionEnvelopeLegacy.getSignPayload(envelope) // [!code focus]\n * // @log: '0x...'\n *\n * const signature = Secp256k1.sign({ payload, privateKey: '0x...' })\n * ```\n *\n * @param envelope - The transaction envelope to get the sign payload for.\n * @returns The sign payload.\n */\nfunction getSignPayload(envelope) {\n    return hash(envelope, { presign: true });\n}\n/**\n * Hashes a {@link ox#TransactionEnvelopeLegacy.TransactionEnvelopeLegacy}. This is the \"transaction hash\".\n *\n * @example\n * ```ts twoslash\n * import { Secp256k1, TransactionEnvelopeLegacy } from 'ox'\n *\n * const envelope = TransactionEnvelopeLegacy.from({\n *   chainId: 1,\n *   nonce: 0n,\n *   gasPrice: 1000000000n,\n *   gas: 21000n,\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: 1000000000000000000n,\n * })\n *\n * const signature = Secp256k1.sign({\n *   payload: TransactionEnvelopeLegacy.getSignPayload(envelope),\n *   privateKey: '0x...'\n * })\n *\n * const envelope_signed = TransactionEnvelopeLegacy.from(envelope, { signature })\n *\n * const hash = TransactionEnvelopeLegacy.hash(envelope_signed) // [!code focus]\n * ```\n *\n * @param envelope - The Legacy Transaction Envelope to hash.\n * @param options - Options.\n * @returns The hash of the transaction envelope.\n */\nfunction hash(envelope, options = {}) {\n    const { presign } = options;\n    return _Hash_js__WEBPACK_IMPORTED_MODULE_5__.keccak256(serialize({\n        ...envelope,\n        ...(presign\n            ? {\n                r: undefined,\n                s: undefined,\n                yParity: undefined,\n                v: undefined,\n            }\n            : {}),\n    }));\n}\n/**\n * Serializes a {@link ox#TransactionEnvelopeLegacy.TransactionEnvelopeLegacy}.\n *\n * @example\n * ```ts twoslash\n * // @noErrors\n * import { TransactionEnvelopeLegacy } from 'ox'\n *\n * const envelope = TransactionEnvelopeLegacy.from({\n *   chainId: 1,\n *   gasPrice: Value.fromGwei('10'),\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: Value.fromEther('1'),\n * })\n *\n * const serialized = TransactionEnvelopeLegacy.serialize(envelope) // [!code focus]\n * ```\n *\n * @example\n * ### Attaching Signatures\n *\n * It is possible to attach a `signature` to the serialized Transaction Envelope.\n *\n * ```ts twoslash\n * // @noErrors\n * import { Secp256k1, TransactionEnvelopeLegacy, Value } from 'ox'\n *\n * const envelope = TransactionEnvelopeLegacy.from({\n *   chainId: 1,\n *   gasPrice: Value.fromGwei('10'),\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: Value.fromEther('1'),\n * })\n *\n * const signature = Secp256k1.sign({\n *   payload: TransactionEnvelopeLegacy.getSignPayload(envelope),\n *   privateKey: '0x...',\n * })\n *\n * const serialized = TransactionEnvelopeLegacy.serialize(envelope, { // [!code focus]\n *   signature, // [!code focus]\n * }) // [!code focus]\n *\n * // ... send `serialized` transaction to JSON-RPC `eth_sendRawTransaction`\n * ```\n *\n * @param envelope - The Transaction Envelope to serialize.\n * @param options - Options.\n * @returns The serialized Transaction Envelope.\n */\nfunction serialize(envelope, options = {}) {\n    const { chainId = 0, gas, data, input, nonce, to, value, gasPrice } = envelope;\n    assert(envelope);\n    let serialized = [\n        nonce ? _Hex_js__WEBPACK_IMPORTED_MODULE_3__.fromNumber(nonce) : '0x',\n        gasPrice ? _Hex_js__WEBPACK_IMPORTED_MODULE_3__.fromNumber(gasPrice) : '0x',\n        gas ? _Hex_js__WEBPACK_IMPORTED_MODULE_3__.fromNumber(gas) : '0x',\n        to ?? '0x',\n        value ? _Hex_js__WEBPACK_IMPORTED_MODULE_3__.fromNumber(value) : '0x',\n        data ?? input ?? '0x',\n    ];\n    const signature = (() => {\n        if (options.signature)\n            return {\n                r: options.signature.r,\n                s: options.signature.s,\n                v: _Signature_js__WEBPACK_IMPORTED_MODULE_4__.yParityToV(options.signature.yParity),\n            };\n        if (typeof envelope.r === 'undefined' || typeof envelope.s === 'undefined')\n            return undefined;\n        return {\n            r: envelope.r,\n            s: envelope.s,\n            v: envelope.v,\n        };\n    })();\n    if (signature) {\n        const v = (() => {\n            // EIP-155 (inferred chainId)\n            if (signature.v >= 35) {\n                const inferredChainId = Math.floor((signature.v - 35) / 2);\n                if (inferredChainId > 0)\n                    return signature.v;\n                return 27 + (signature.v === 35 ? 0 : 1);\n            }\n            // EIP-155 (explicit chainId)\n            if (chainId > 0)\n                return chainId * 2 + 35 + signature.v - 27;\n            // Pre-EIP-155 (no chainId)\n            const v = 27 + (signature.v === 27 ? 0 : 1);\n            if (signature.v !== v)\n                throw new _Signature_js__WEBPACK_IMPORTED_MODULE_4__.InvalidVError({ value: signature.v });\n            return v;\n        })();\n        serialized = [\n            ...serialized,\n            _Hex_js__WEBPACK_IMPORTED_MODULE_3__.fromNumber(v),\n            signature.r === 0n ? '0x' : _Hex_js__WEBPACK_IMPORTED_MODULE_3__.trimLeft(_Hex_js__WEBPACK_IMPORTED_MODULE_3__.fromNumber(signature.r)),\n            signature.s === 0n ? '0x' : _Hex_js__WEBPACK_IMPORTED_MODULE_3__.trimLeft(_Hex_js__WEBPACK_IMPORTED_MODULE_3__.fromNumber(signature.s)),\n        ];\n    }\n    else if (chainId > 0)\n        serialized = [...serialized, _Hex_js__WEBPACK_IMPORTED_MODULE_3__.fromNumber(chainId), '0x', '0x'];\n    return _Rlp_js__WEBPACK_IMPORTED_MODULE_2__.fromHex(serialized);\n}\n/**\n * Converts an {@link ox#TransactionEnvelopeLegacy.TransactionEnvelopeLegacy} to an {@link ox#TransactionEnvelopeLegacy.Rpc}.\n *\n * @example\n * ```ts twoslash\n * import { RpcRequest, TransactionEnvelopeLegacy, Value } from 'ox'\n *\n * const envelope = TransactionEnvelopeLegacy.from({\n *   chainId: 1,\n *   nonce: 0n,\n *   gas: 21000n,\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: Value.fromEther('1'),\n * })\n *\n * const envelope_rpc = TransactionEnvelopeLegacy.toRpc(envelope) // [!code focus]\n *\n * const request = RpcRequest.from({\n *   id: 0,\n *   method: 'eth_sendTransaction',\n *   params: [envelope_rpc],\n * })\n * ```\n *\n * @param envelope - The legacy transaction envelope to convert.\n * @returns An RPC-formatted legacy transaction envelope.\n */\nfunction toRpc(envelope) {\n    const signature = _Signature_js__WEBPACK_IMPORTED_MODULE_4__.extract(envelope);\n    return {\n        ...envelope,\n        chainId: typeof envelope.chainId === 'number'\n            ? _Hex_js__WEBPACK_IMPORTED_MODULE_3__.fromNumber(envelope.chainId)\n            : undefined,\n        data: envelope.data ?? envelope.input,\n        type: '0x0',\n        ...(typeof envelope.gas === 'bigint'\n            ? { gas: _Hex_js__WEBPACK_IMPORTED_MODULE_3__.fromNumber(envelope.gas) }\n            : {}),\n        ...(typeof envelope.nonce === 'bigint'\n            ? { nonce: _Hex_js__WEBPACK_IMPORTED_MODULE_3__.fromNumber(envelope.nonce) }\n            : {}),\n        ...(typeof envelope.value === 'bigint'\n            ? { value: _Hex_js__WEBPACK_IMPORTED_MODULE_3__.fromNumber(envelope.value) }\n            : {}),\n        ...(typeof envelope.gasPrice === 'bigint'\n            ? { gasPrice: _Hex_js__WEBPACK_IMPORTED_MODULE_3__.fromNumber(envelope.gasPrice) }\n            : {}),\n        ...(signature\n            ? {\n                ..._Signature_js__WEBPACK_IMPORTED_MODULE_4__.toRpc(signature),\n                v: signature.yParity === 0 ? '0x1b' : '0x1c',\n            }\n            : {}),\n    };\n}\n/**\n * Validates a {@link ox#TransactionEnvelopeLegacy.TransactionEnvelopeLegacy}. Returns `true` if the envelope is valid, `false` otherwise.\n *\n * @example\n * ```ts twoslash\n * import { TransactionEnvelopeLegacy, Value } from 'ox'\n *\n * const valid = TransactionEnvelopeLegacy.assert({\n *   gasPrice: 2n ** 256n - 1n + 1n,\n *   chainId: 1,\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: Value.fromEther('1'),\n * })\n * // @log: false\n * ```\n *\n * @param envelope - The transaction envelope to validate.\n */\nfunction validate(envelope) {\n    try {\n        assert(envelope);\n        return true;\n    }\n    catch {\n        return false;\n    }\n}\n//# sourceMappingURL=TransactionEnvelopeLegacy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9veC9fZXNtL2NvcmUvVHJhbnNhY3Rpb25FbnZlbG9wZUxlZ2FjeS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBd0M7QUFDTjtBQUNGO0FBQ0E7QUFDWTtBQUNvQjtBQUN6RDtBQUNQO0FBQ0EsY0FBYyw4REFBOEQ7QUFDNUU7QUFDQTtBQUNBO0FBQ0EsWUFBWSxtQ0FBbUM7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCxZQUFZLHdCQUF3QjtBQUNwQztBQUNBLFFBQVEsK0NBQWMsT0FBTyxlQUFlO0FBQzVDO0FBQ0Esa0JBQWtCLHdFQUF1QyxHQUFHLFNBQVM7QUFDckU7QUFDQSxrQkFBa0IseUVBQXdDLEdBQUcsVUFBVTtBQUN2RTtBQUNBO0FBQ0EsbUJBQW1CLDhEQUE4RDtBQUNqRjtBQUNBO0FBQ0E7QUFDQSxZQUFZLDRCQUE0QjtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQLGtCQUFrQiwwQ0FBUztBQUMzQjtBQUNBO0FBQ0Esa0JBQWtCLDJFQUEwQztBQUM1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QixhQUFhO0FBQ2I7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxRQUFRLDZDQUFZO0FBQ3BCO0FBQ0EsUUFBUSw2Q0FBWTtBQUNwQjtBQUNBLFFBQVEsNkNBQVk7QUFDcEI7QUFDQSxRQUFRLDZDQUFZO0FBQ3BCO0FBQ0EsUUFBUSw2Q0FBWTtBQUNwQjtBQUNBLFFBQVEsNkNBQVk7QUFDcEI7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLDZDQUFZO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQix3REFBdUIsR0FBRyxVQUFVO0FBQ3RELDBCQUEwQixxREFBb0I7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksbUNBQW1DO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksOENBQThDO0FBQzFEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBLHNFQUFzRTtBQUN0RTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdFQUF3RSwrQ0FBK0M7QUFDdkg7QUFDQTtBQUNBLFlBQVksNEJBQTRCO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLG9DQUFvQztBQUMzQyxZQUFZLFlBQVk7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQiwrQ0FBYztBQUNoQyxjQUFjLHFEQUFvQjtBQUNsQztBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQyw2REFBNkQ7QUFDbkc7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDLG1DQUFtQztBQUN6RTtBQUNBO0FBQ0E7QUFDQSxZQUFZLHVDQUF1QztBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQyw4QkFBOEI7QUFDcEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AsNEJBQTRCLGVBQWU7QUFDM0M7QUFDQTtBQUNBLGFBQWEsNkRBQTZEO0FBQzFFO0FBQ0E7QUFDQTtBQUNBLFlBQVksdUNBQXVDO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQSxzRUFBc0UsV0FBVztBQUNqRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sb0NBQW9DO0FBQzNDLFlBQVksVUFBVTtBQUN0QixXQUFXLCtDQUFjO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEIsS0FBSztBQUNMO0FBQ0E7QUFDQSxpQkFBaUIsNkRBQTZEO0FBQzlFO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSw0QkFBNEI7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLDhDQUE4QztBQUMxRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQSxzRUFBc0U7QUFDdEU7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLHlDQUF5QztBQUNoRCxZQUFZLDREQUE0RDtBQUN4RTtBQUNBO0FBQ0EsZ0JBQWdCLCtDQUFjO0FBQzlCLG1CQUFtQiwrQ0FBYztBQUNqQyxjQUFjLCtDQUFjO0FBQzVCO0FBQ0EsZ0JBQWdCLCtDQUFjO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLHFEQUFvQjtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQix3REFBdUIsR0FBRyxvQkFBb0I7QUFDeEU7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFlBQVksK0NBQWM7QUFDMUIsd0NBQXdDLDZDQUFZLENBQUMsK0NBQWM7QUFDbkUsd0NBQXdDLDZDQUFZLENBQUMsK0NBQWM7QUFDbkU7QUFDQTtBQUNBO0FBQ0EscUNBQXFDLCtDQUFjO0FBQ25ELFdBQVcsNENBQVc7QUFDdEI7QUFDQTtBQUNBLGdCQUFnQiw4REFBOEQsT0FBTyx1Q0FBdUM7QUFDNUg7QUFDQTtBQUNBO0FBQ0EsWUFBWSwrQ0FBK0M7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1Asc0JBQXNCLGtEQUFpQjtBQUN2QztBQUNBO0FBQ0E7QUFDQSxjQUFjLCtDQUFjO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLEtBQUssK0NBQWM7QUFDbkMsZ0JBQWdCO0FBQ2hCO0FBQ0EsZ0JBQWdCLE9BQU8sK0NBQWM7QUFDckMsZ0JBQWdCO0FBQ2hCO0FBQ0EsZ0JBQWdCLE9BQU8sK0NBQWM7QUFDckMsZ0JBQWdCO0FBQ2hCO0FBQ0EsZ0JBQWdCLFVBQVUsK0NBQWM7QUFDeEMsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxtQkFBbUIsZ0RBQWU7QUFDbEM7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsNkRBQTZEO0FBQzdFO0FBQ0E7QUFDQTtBQUNBLFlBQVksbUNBQW1DO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcY2hhbmRcXERvd25sb2Fkc1xcam9obndyaWNoa2lkaW50b3JpenpcXG5vZGVfbW9kdWxlc1xcb3hcXF9lc21cXGNvcmVcXFRyYW5zYWN0aW9uRW52ZWxvcGVMZWdhY3kuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgQWRkcmVzcyBmcm9tICcuL0FkZHJlc3MuanMnO1xuaW1wb3J0ICogYXMgSGFzaCBmcm9tICcuL0hhc2guanMnO1xuaW1wb3J0ICogYXMgSGV4IGZyb20gJy4vSGV4LmpzJztcbmltcG9ydCAqIGFzIFJscCBmcm9tICcuL1JscC5qcyc7XG5pbXBvcnQgKiBhcyBTaWduYXR1cmUgZnJvbSAnLi9TaWduYXR1cmUuanMnO1xuaW1wb3J0ICogYXMgVHJhbnNhY3Rpb25FbnZlbG9wZSBmcm9tICcuL1RyYW5zYWN0aW9uRW52ZWxvcGUuanMnO1xuZXhwb3J0IGNvbnN0IHR5cGUgPSAnbGVnYWN5Jztcbi8qKlxuICogQXNzZXJ0cyBhIHtAbGluayBveCNUcmFuc2FjdGlvbkVudmVsb3BlTGVnYWN5LlRyYW5zYWN0aW9uRW52ZWxvcGVMZWdhY3l9IGlzIHZhbGlkLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGB0cyB0d29zbGFzaFxuICogaW1wb3J0IHsgVHJhbnNhY3Rpb25FbnZlbG9wZUxlZ2FjeSwgVmFsdWUgfSBmcm9tICdveCdcbiAqXG4gKiBUcmFuc2FjdGlvbkVudmVsb3BlTGVnYWN5LmFzc2VydCh7XG4gKiAgIGdhc1ByaWNlOiAybiAqKiAyNTZuIC0gMW4gKyAxbixcbiAqICAgY2hhaW5JZDogMSxcbiAqICAgdG86ICcweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAnLFxuICogICB2YWx1ZTogVmFsdWUuZnJvbUV0aGVyKCcxJyksXG4gKiB9KVxuICogLy8gQGVycm9yOiBHYXNQcmljZVRvb0hpZ2hFcnJvcjpcbiAqIC8vIEBlcnJvcjogVGhlIGdhcyBwcmljZSAoYGdhc1ByaWNlYCA9IDExNTc5MjA4OTIzNzMxNjE5NTQyMzU3MDk4NTAwODY4NzkwNzg1MzI2OTk4NDY2NTY0MDU2NDAzOTQ1NzU4NDAwNzkxMyBnd2VpKSBjYW5ub3QgYmVcbiAqIC8vIEBlcnJvcjogaGlnaGVyIHRoYW4gdGhlIG1heGltdW0gYWxsb3dlZCB2YWx1ZSAoMl4yNTYtMSkuXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gZW52ZWxvcGUgLSBUaGUgdHJhbnNhY3Rpb24gZW52ZWxvcGUgdG8gYXNzZXJ0LlxuICovXG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0KGVudmVsb3BlKSB7XG4gICAgY29uc3QgeyBjaGFpbklkLCBnYXNQcmljZSwgdG8gfSA9IGVudmVsb3BlO1xuICAgIGlmICh0bylcbiAgICAgICAgQWRkcmVzcy5hc3NlcnQodG8sIHsgc3RyaWN0OiBmYWxzZSB9KTtcbiAgICBpZiAodHlwZW9mIGNoYWluSWQgIT09ICd1bmRlZmluZWQnICYmIGNoYWluSWQgPD0gMClcbiAgICAgICAgdGhyb3cgbmV3IFRyYW5zYWN0aW9uRW52ZWxvcGUuSW52YWxpZENoYWluSWRFcnJvcih7IGNoYWluSWQgfSk7XG4gICAgaWYgKGdhc1ByaWNlICYmIEJpZ0ludChnYXNQcmljZSkgPiAybiAqKiAyNTZuIC0gMW4pXG4gICAgICAgIHRocm93IG5ldyBUcmFuc2FjdGlvbkVudmVsb3BlLkdhc1ByaWNlVG9vSGlnaEVycm9yKHsgZ2FzUHJpY2UgfSk7XG59XG4vKipcbiAqIERlc2VyaWFsaXplcyBhIHtAbGluayBveCNUcmFuc2FjdGlvbkVudmVsb3BlTGVnYWN5LlRyYW5zYWN0aW9uRW52ZWxvcGVMZWdhY3l9IGZyb20gaXRzIHNlcmlhbGl6ZWQgZm9ybS5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgdHMgdHdvc2xhc2hcbiAqIGltcG9ydCB7IFRyYW5zYWN0aW9uRW52ZWxvcGVMZWdhY3kgfSBmcm9tICdveCdcbiAqXG4gKiBjb25zdCBlbnZlbG9wZSA9IFRyYW5zYWN0aW9uRW52ZWxvcGVMZWdhY3kuZGVzZXJpYWxpemUoJzB4MDFlZjAxODIwMzExODQ3NzM1OTQwMDg0NzczNTk0MDA4MDk0NzA5OTc5NzBjNTE4MTJkYzNhMDEwYzdkMDFiNTBlMGQxN2RjNzljODg4MGRlMGI2YjNhNzY0MDAwMDgwYzAnKVxuICogLy8gQGxvZzoge1xuICogLy8gQGxvZzogICB0eXBlOiAnbGVnYWN5JyxcbiAqIC8vIEBsb2c6ICAgbm9uY2U6IDc4NW4sXG4gKiAvLyBAbG9nOiAgIGdhc1ByaWNlOiAyMDAwMDAwMDAwbixcbiAqIC8vIEBsb2c6ICAgZ2FzOiAxMDAwMDAwbixcbiAqIC8vIEBsb2c6ICAgdG86ICcweDcwOTk3OTcwYzUxODEyZGMzYTAxMGM3ZDAxYjUwZTBkMTdkYzc5YzgnLFxuICogLy8gQGxvZzogICB2YWx1ZTogMTAwMDAwMDAwMDAwMDAwMDAwMG4sXG4gKiAvLyBAbG9nOiB9XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gc2VyaWFsaXplZCAtIFRoZSBzZXJpYWxpemVkIHRyYW5zYWN0aW9uLlxuICogQHJldHVybnMgRGVzZXJpYWxpemVkIFRyYW5zYWN0aW9uIEVudmVsb3BlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVzZXJpYWxpemUoc2VyaWFsaXplZCkge1xuICAgIGNvbnN0IHR1cGxlID0gUmxwLnRvSGV4KHNlcmlhbGl6ZWQpO1xuICAgIGNvbnN0IFtub25jZSwgZ2FzUHJpY2UsIGdhcywgdG8sIHZhbHVlLCBkYXRhLCBjaGFpbklkT3JWXywgciwgc10gPSB0dXBsZTtcbiAgICBpZiAoISh0dXBsZS5sZW5ndGggPT09IDYgfHwgdHVwbGUubGVuZ3RoID09PSA5KSlcbiAgICAgICAgdGhyb3cgbmV3IFRyYW5zYWN0aW9uRW52ZWxvcGUuSW52YWxpZFNlcmlhbGl6ZWRFcnJvcih7XG4gICAgICAgICAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICAgICAgICAgICAgbm9uY2UsXG4gICAgICAgICAgICAgICAgZ2FzUHJpY2UsXG4gICAgICAgICAgICAgICAgZ2FzLFxuICAgICAgICAgICAgICAgIHRvLFxuICAgICAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAgICAgIGRhdGEsXG4gICAgICAgICAgICAgICAgLi4uKHR1cGxlLmxlbmd0aCA+IDZcbiAgICAgICAgICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2OiBjaGFpbklkT3JWXyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHIsXG4gICAgICAgICAgICAgICAgICAgICAgICBzLFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIDoge30pLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNlcmlhbGl6ZWQsXG4gICAgICAgICAgICB0eXBlLFxuICAgICAgICB9KTtcbiAgICBjb25zdCB0cmFuc2FjdGlvbiA9IHtcbiAgICAgICAgdHlwZSxcbiAgICB9O1xuICAgIGlmIChIZXgudmFsaWRhdGUodG8pICYmIHRvICE9PSAnMHgnKVxuICAgICAgICB0cmFuc2FjdGlvbi50byA9IHRvO1xuICAgIGlmIChIZXgudmFsaWRhdGUoZ2FzKSAmJiBnYXMgIT09ICcweCcpXG4gICAgICAgIHRyYW5zYWN0aW9uLmdhcyA9IEJpZ0ludChnYXMpO1xuICAgIGlmIChIZXgudmFsaWRhdGUoZGF0YSkgJiYgZGF0YSAhPT0gJzB4JylcbiAgICAgICAgdHJhbnNhY3Rpb24uZGF0YSA9IGRhdGE7XG4gICAgaWYgKEhleC52YWxpZGF0ZShub25jZSkpXG4gICAgICAgIHRyYW5zYWN0aW9uLm5vbmNlID0gbm9uY2UgPT09ICcweCcgPyAwbiA6IEJpZ0ludChub25jZSk7XG4gICAgaWYgKEhleC52YWxpZGF0ZSh2YWx1ZSkgJiYgdmFsdWUgIT09ICcweCcpXG4gICAgICAgIHRyYW5zYWN0aW9uLnZhbHVlID0gQmlnSW50KHZhbHVlKTtcbiAgICBpZiAoSGV4LnZhbGlkYXRlKGdhc1ByaWNlKSAmJiBnYXNQcmljZSAhPT0gJzB4JylcbiAgICAgICAgdHJhbnNhY3Rpb24uZ2FzUHJpY2UgPSBCaWdJbnQoZ2FzUHJpY2UpO1xuICAgIGlmICh0dXBsZS5sZW5ndGggPT09IDYpXG4gICAgICAgIHJldHVybiB0cmFuc2FjdGlvbjtcbiAgICBjb25zdCBjaGFpbklkT3JWID0gSGV4LnZhbGlkYXRlKGNoYWluSWRPclZfKSAmJiBjaGFpbklkT3JWXyAhPT0gJzB4J1xuICAgICAgICA/IE51bWJlcihjaGFpbklkT3JWXylcbiAgICAgICAgOiAwO1xuICAgIGlmIChzID09PSAnMHgnICYmIHIgPT09ICcweCcpIHtcbiAgICAgICAgaWYgKGNoYWluSWRPclYgPiAwKVxuICAgICAgICAgICAgdHJhbnNhY3Rpb24uY2hhaW5JZCA9IE51bWJlcihjaGFpbklkT3JWKTtcbiAgICAgICAgcmV0dXJuIHRyYW5zYWN0aW9uO1xuICAgIH1cbiAgICBjb25zdCB2ID0gY2hhaW5JZE9yVjtcbiAgICBjb25zdCBjaGFpbklkID0gTWF0aC5mbG9vcigodiAtIDM1KSAvIDIpO1xuICAgIGlmIChjaGFpbklkID4gMClcbiAgICAgICAgdHJhbnNhY3Rpb24uY2hhaW5JZCA9IGNoYWluSWQ7XG4gICAgZWxzZSBpZiAodiAhPT0gMjcgJiYgdiAhPT0gMjgpXG4gICAgICAgIHRocm93IG5ldyBTaWduYXR1cmUuSW52YWxpZFZFcnJvcih7IHZhbHVlOiB2IH0pO1xuICAgIHRyYW5zYWN0aW9uLnlQYXJpdHkgPSBTaWduYXR1cmUudlRvWVBhcml0eSh2KTtcbiAgICB0cmFuc2FjdGlvbi52ID0gdjtcbiAgICB0cmFuc2FjdGlvbi5zID0gcyA9PT0gJzB4JyA/IDBuIDogQmlnSW50KHMpO1xuICAgIHRyYW5zYWN0aW9uLnIgPSByID09PSAnMHgnID8gMG4gOiBCaWdJbnQocik7XG4gICAgYXNzZXJ0KHRyYW5zYWN0aW9uKTtcbiAgICByZXR1cm4gdHJhbnNhY3Rpb247XG59XG4vKipcbiAqIENvbnZlcnRzIGFuIGFyYml0cmFyeSB0cmFuc2FjdGlvbiBvYmplY3QgaW50byBhIGxlZ2FjeSBUcmFuc2FjdGlvbiBFbnZlbG9wZS5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgdHMgdHdvc2xhc2hcbiAqIGltcG9ydCB7IFRyYW5zYWN0aW9uRW52ZWxvcGVMZWdhY3ksIFZhbHVlIH0gZnJvbSAnb3gnXG4gKlxuICogY29uc3QgZW52ZWxvcGUgPSBUcmFuc2FjdGlvbkVudmVsb3BlTGVnYWN5LmZyb20oe1xuICogICBnYXNQcmljZTogVmFsdWUuZnJvbUd3ZWkoJzEwJyksXG4gKiAgIHRvOiAnMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAqICAgdmFsdWU6IFZhbHVlLmZyb21FdGhlcignMScpLFxuICogfSlcbiAqIGBgYFxuICpcbiAqIEBleGFtcGxlXG4gKiAjIyMgQXR0YWNoaW5nIFNpZ25hdHVyZXNcbiAqXG4gKiBJdCBpcyBwb3NzaWJsZSB0byBhdHRhY2ggYSBgc2lnbmF0dXJlYCB0byB0aGUgdHJhbnNhY3Rpb24gZW52ZWxvcGUuXG4gKlxuICogYGBgdHMgdHdvc2xhc2hcbiAqIGltcG9ydCB7IFNlY3AyNTZrMSwgVHJhbnNhY3Rpb25FbnZlbG9wZUxlZ2FjeSwgVmFsdWUgfSBmcm9tICdveCdcbiAqXG4gKiBjb25zdCBlbnZlbG9wZSA9IFRyYW5zYWN0aW9uRW52ZWxvcGVMZWdhY3kuZnJvbSh7XG4gKiAgIGNoYWluSWQ6IDEsXG4gKiAgIGdhc1ByaWNlOiBWYWx1ZS5mcm9tR3dlaSgnMTAnKSxcbiAqICAgdG86ICcweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAnLFxuICogICB2YWx1ZTogVmFsdWUuZnJvbUV0aGVyKCcxJyksXG4gKiB9KVxuICpcbiAqIGNvbnN0IHNpZ25hdHVyZSA9IFNlY3AyNTZrMS5zaWduKHtcbiAqICAgcGF5bG9hZDogVHJhbnNhY3Rpb25FbnZlbG9wZUxlZ2FjeS5nZXRTaWduUGF5bG9hZChlbnZlbG9wZSksXG4gKiAgIHByaXZhdGVLZXk6ICcweC4uLicsXG4gKiB9KVxuICpcbiAqIGNvbnN0IGVudmVsb3BlX3NpZ25lZCA9IFRyYW5zYWN0aW9uRW52ZWxvcGVMZWdhY3kuZnJvbShlbnZlbG9wZSwgeyAvLyBbIWNvZGUgZm9jdXNdXG4gKiAgIHNpZ25hdHVyZSwgLy8gWyFjb2RlIGZvY3VzXVxuICogfSkgLy8gWyFjb2RlIGZvY3VzXVxuICogLy8gQGxvZzoge1xuICogLy8gQGxvZzogICBhdXRob3JpemF0aW9uTGlzdDogWy4uLl0sXG4gKiAvLyBAbG9nOiAgIGNoYWluSWQ6IDEsXG4gKiAvLyBAbG9nOiAgIGdhc1ByaWNlOiAxMDAwMDAwMDAwMG4sXG4gKiAvLyBAbG9nOiAgIHRvOiAnMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAqIC8vIEBsb2c6ICAgdHlwZTogJ2VpcDc3MDInLFxuICogLy8gQGxvZzogICB2YWx1ZTogMTAwMDAwMDAwMDAwMDAwMDAwMG4sXG4gKiAvLyBAbG9nOiAgIHI6IDEyNS4uLm4sXG4gKiAvLyBAbG9nOiAgIHM6IDY0Mi4uLm4sXG4gKiAvLyBAbG9nOiAgIHlQYXJpdHk6IDAsXG4gKiAvLyBAbG9nOiB9XG4gKiBgYGBcbiAqXG4gKiBAZXhhbXBsZVxuICogIyMjIEZyb20gU2VyaWFsaXplZFxuICpcbiAqIEl0IGlzIHBvc3NpYmxlIHRvIGluc3RhbnRpYXRlIGFuIGxlZ2FjeSBUcmFuc2FjdGlvbiBFbnZlbG9wZSBmcm9tIGEge0BsaW5rIG94I1RyYW5zYWN0aW9uRW52ZWxvcGVMZWdhY3kuU2VyaWFsaXplZH0gdmFsdWUuXG4gKlxuICogYGBgdHMgdHdvc2xhc2hcbiAqIGltcG9ydCB7IFRyYW5zYWN0aW9uRW52ZWxvcGVMZWdhY3kgfSBmcm9tICdveCdcbiAqXG4gKiBjb25zdCBlbnZlbG9wZSA9IFRyYW5zYWN0aW9uRW52ZWxvcGVMZWdhY3kuZnJvbSgnMHhmODU4MDE4MjAzMTE4NTAyNTQwYmU0MDA4NTA0YTgxN2M4MDA4MDk0NzA5OTc5NzBjNTE4MTJkYzNhMDEwYzdkMDFiNTBlMGQxN2RjNzljODg4MGRlMGI2YjNhNzY0MDAwMDgwYzA4NDc3MzU5NDAwZTFhMDAxNjI3YzY4NzI2MWIwZTdmODYzOGFmMTExMmVmYThhNzdlMjM2NTZmNmU3OTQ1Mjc1YjE5ZTlkZWVkODAyNjEnKVxuICogLy8gQGxvZzoge1xuICogLy8gQGxvZzogICBjaGFpbklkOiAxLFxuICogLy8gQGxvZzogICBnYXNQcmljZTogMTAwMDAwMDAwMDBuLFxuICogLy8gQGxvZzogICB0bzogJzB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gKiAvLyBAbG9nOiAgIHR5cGU6ICdsZWdhY3knLFxuICogLy8gQGxvZzogICB2YWx1ZTogMTAwMDAwMDAwMDAwMDAwMDAwMG4sXG4gKiAvLyBAbG9nOiB9XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gZW52ZWxvcGUgLSBUaGUgdHJhbnNhY3Rpb24gb2JqZWN0IHRvIGNvbnZlcnQuXG4gKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbnMuXG4gKiBAcmV0dXJucyBBIGxlZ2FjeSBUcmFuc2FjdGlvbiBFbnZlbG9wZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZyb20oZW52ZWxvcGUsIG9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IHsgc2lnbmF0dXJlIH0gPSBvcHRpb25zO1xuICAgIGNvbnN0IGVudmVsb3BlXyA9ICh0eXBlb2YgZW52ZWxvcGUgPT09ICdzdHJpbmcnID8gZGVzZXJpYWxpemUoZW52ZWxvcGUpIDogZW52ZWxvcGUpO1xuICAgIGFzc2VydChlbnZlbG9wZV8pO1xuICAgIGNvbnN0IHNpZ25hdHVyZV8gPSAoKCkgPT4ge1xuICAgICAgICBpZiAoIXNpZ25hdHVyZSlcbiAgICAgICAgICAgIHJldHVybiB7fTtcbiAgICAgICAgY29uc3QgcyA9IFNpZ25hdHVyZS5mcm9tKHNpZ25hdHVyZSk7XG4gICAgICAgIHMudiA9IFNpZ25hdHVyZS55UGFyaXR5VG9WKHMueVBhcml0eSk7XG4gICAgICAgIHJldHVybiBzO1xuICAgIH0pKCk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgLi4uZW52ZWxvcGVfLFxuICAgICAgICAuLi5zaWduYXR1cmVfLFxuICAgICAgICB0eXBlOiAnbGVnYWN5JyxcbiAgICB9O1xufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBwYXlsb2FkIHRvIHNpZ24gZm9yIGEge0BsaW5rIG94I1RyYW5zYWN0aW9uRW52ZWxvcGVMZWdhY3kuVHJhbnNhY3Rpb25FbnZlbG9wZUxlZ2FjeX0uXG4gKlxuICogQGV4YW1wbGVcbiAqIFRoZSBleGFtcGxlIGJlbG93IGRlbW9uc3RyYXRlcyBob3cgdG8gY29tcHV0ZSB0aGUgc2lnbiBwYXlsb2FkIHdoaWNoIGNhbiBiZSB1c2VkXG4gKiB3aXRoIEVDRFNBIHNpZ25pbmcgdXRpbGl0aWVzIGxpa2Uge0BsaW5rIG94I1NlY3AyNTZrMS4oc2lnbjpmdW5jdGlvbil9LlxuICpcbiAqIGBgYHRzIHR3b3NsYXNoXG4gKiAvLyBAbm9FcnJvcnNcbiAqIGltcG9ydCB7IFNlY3AyNTZrMSwgVHJhbnNhY3Rpb25FbnZlbG9wZUxlZ2FjeSB9IGZyb20gJ294J1xuICpcbiAqIGNvbnN0IGVudmVsb3BlID0gVHJhbnNhY3Rpb25FbnZlbG9wZUxlZ2FjeS5mcm9tKHtcbiAqICAgbm9uY2U6IDBuLFxuICogICBnYXNQcmljZTogMTAwMDAwMDAwMG4sXG4gKiAgIGdhczogMjEwMDBuLFxuICogICB0bzogJzB4NzA5OTc5NzBjNTE4MTJkYzNhMDEwYzdkMDFiNTBlMGQxN2RjNzljOCcsXG4gKiAgIHZhbHVlOiAxMDAwMDAwMDAwMDAwMDAwMDAwbixcbiAqIH0pXG4gKlxuICogY29uc3QgcGF5bG9hZCA9IFRyYW5zYWN0aW9uRW52ZWxvcGVMZWdhY3kuZ2V0U2lnblBheWxvYWQoZW52ZWxvcGUpIC8vIFshY29kZSBmb2N1c11cbiAqIC8vIEBsb2c6ICcweC4uLidcbiAqXG4gKiBjb25zdCBzaWduYXR1cmUgPSBTZWNwMjU2azEuc2lnbih7IHBheWxvYWQsIHByaXZhdGVLZXk6ICcweC4uLicgfSlcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSBlbnZlbG9wZSAtIFRoZSB0cmFuc2FjdGlvbiBlbnZlbG9wZSB0byBnZXQgdGhlIHNpZ24gcGF5bG9hZCBmb3IuXG4gKiBAcmV0dXJucyBUaGUgc2lnbiBwYXlsb2FkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0U2lnblBheWxvYWQoZW52ZWxvcGUpIHtcbiAgICByZXR1cm4gaGFzaChlbnZlbG9wZSwgeyBwcmVzaWduOiB0cnVlIH0pO1xufVxuLyoqXG4gKiBIYXNoZXMgYSB7QGxpbmsgb3gjVHJhbnNhY3Rpb25FbnZlbG9wZUxlZ2FjeS5UcmFuc2FjdGlvbkVudmVsb3BlTGVnYWN5fS4gVGhpcyBpcyB0aGUgXCJ0cmFuc2FjdGlvbiBoYXNoXCIuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHRzIHR3b3NsYXNoXG4gKiBpbXBvcnQgeyBTZWNwMjU2azEsIFRyYW5zYWN0aW9uRW52ZWxvcGVMZWdhY3kgfSBmcm9tICdveCdcbiAqXG4gKiBjb25zdCBlbnZlbG9wZSA9IFRyYW5zYWN0aW9uRW52ZWxvcGVMZWdhY3kuZnJvbSh7XG4gKiAgIGNoYWluSWQ6IDEsXG4gKiAgIG5vbmNlOiAwbixcbiAqICAgZ2FzUHJpY2U6IDEwMDAwMDAwMDBuLFxuICogICBnYXM6IDIxMDAwbixcbiAqICAgdG86ICcweDcwOTk3OTcwYzUxODEyZGMzYTAxMGM3ZDAxYjUwZTBkMTdkYzc5YzgnLFxuICogICB2YWx1ZTogMTAwMDAwMDAwMDAwMDAwMDAwMG4sXG4gKiB9KVxuICpcbiAqIGNvbnN0IHNpZ25hdHVyZSA9IFNlY3AyNTZrMS5zaWduKHtcbiAqICAgcGF5bG9hZDogVHJhbnNhY3Rpb25FbnZlbG9wZUxlZ2FjeS5nZXRTaWduUGF5bG9hZChlbnZlbG9wZSksXG4gKiAgIHByaXZhdGVLZXk6ICcweC4uLidcbiAqIH0pXG4gKlxuICogY29uc3QgZW52ZWxvcGVfc2lnbmVkID0gVHJhbnNhY3Rpb25FbnZlbG9wZUxlZ2FjeS5mcm9tKGVudmVsb3BlLCB7IHNpZ25hdHVyZSB9KVxuICpcbiAqIGNvbnN0IGhhc2ggPSBUcmFuc2FjdGlvbkVudmVsb3BlTGVnYWN5Lmhhc2goZW52ZWxvcGVfc2lnbmVkKSAvLyBbIWNvZGUgZm9jdXNdXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gZW52ZWxvcGUgLSBUaGUgTGVnYWN5IFRyYW5zYWN0aW9uIEVudmVsb3BlIHRvIGhhc2guXG4gKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbnMuXG4gKiBAcmV0dXJucyBUaGUgaGFzaCBvZiB0aGUgdHJhbnNhY3Rpb24gZW52ZWxvcGUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBoYXNoKGVudmVsb3BlLCBvcHRpb25zID0ge30pIHtcbiAgICBjb25zdCB7IHByZXNpZ24gfSA9IG9wdGlvbnM7XG4gICAgcmV0dXJuIEhhc2gua2VjY2FrMjU2KHNlcmlhbGl6ZSh7XG4gICAgICAgIC4uLmVudmVsb3BlLFxuICAgICAgICAuLi4ocHJlc2lnblxuICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgcjogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIHM6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICB5UGFyaXR5OiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgdjogdW5kZWZpbmVkLFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgOiB7fSksXG4gICAgfSkpO1xufVxuLyoqXG4gKiBTZXJpYWxpemVzIGEge0BsaW5rIG94I1RyYW5zYWN0aW9uRW52ZWxvcGVMZWdhY3kuVHJhbnNhY3Rpb25FbnZlbG9wZUxlZ2FjeX0uXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHRzIHR3b3NsYXNoXG4gKiAvLyBAbm9FcnJvcnNcbiAqIGltcG9ydCB7IFRyYW5zYWN0aW9uRW52ZWxvcGVMZWdhY3kgfSBmcm9tICdveCdcbiAqXG4gKiBjb25zdCBlbnZlbG9wZSA9IFRyYW5zYWN0aW9uRW52ZWxvcGVMZWdhY3kuZnJvbSh7XG4gKiAgIGNoYWluSWQ6IDEsXG4gKiAgIGdhc1ByaWNlOiBWYWx1ZS5mcm9tR3dlaSgnMTAnKSxcbiAqICAgdG86ICcweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAnLFxuICogICB2YWx1ZTogVmFsdWUuZnJvbUV0aGVyKCcxJyksXG4gKiB9KVxuICpcbiAqIGNvbnN0IHNlcmlhbGl6ZWQgPSBUcmFuc2FjdGlvbkVudmVsb3BlTGVnYWN5LnNlcmlhbGl6ZShlbnZlbG9wZSkgLy8gWyFjb2RlIGZvY3VzXVxuICogYGBgXG4gKlxuICogQGV4YW1wbGVcbiAqICMjIyBBdHRhY2hpbmcgU2lnbmF0dXJlc1xuICpcbiAqIEl0IGlzIHBvc3NpYmxlIHRvIGF0dGFjaCBhIGBzaWduYXR1cmVgIHRvIHRoZSBzZXJpYWxpemVkIFRyYW5zYWN0aW9uIEVudmVsb3BlLlxuICpcbiAqIGBgYHRzIHR3b3NsYXNoXG4gKiAvLyBAbm9FcnJvcnNcbiAqIGltcG9ydCB7IFNlY3AyNTZrMSwgVHJhbnNhY3Rpb25FbnZlbG9wZUxlZ2FjeSwgVmFsdWUgfSBmcm9tICdveCdcbiAqXG4gKiBjb25zdCBlbnZlbG9wZSA9IFRyYW5zYWN0aW9uRW52ZWxvcGVMZWdhY3kuZnJvbSh7XG4gKiAgIGNoYWluSWQ6IDEsXG4gKiAgIGdhc1ByaWNlOiBWYWx1ZS5mcm9tR3dlaSgnMTAnKSxcbiAqICAgdG86ICcweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAnLFxuICogICB2YWx1ZTogVmFsdWUuZnJvbUV0aGVyKCcxJyksXG4gKiB9KVxuICpcbiAqIGNvbnN0IHNpZ25hdHVyZSA9IFNlY3AyNTZrMS5zaWduKHtcbiAqICAgcGF5bG9hZDogVHJhbnNhY3Rpb25FbnZlbG9wZUxlZ2FjeS5nZXRTaWduUGF5bG9hZChlbnZlbG9wZSksXG4gKiAgIHByaXZhdGVLZXk6ICcweC4uLicsXG4gKiB9KVxuICpcbiAqIGNvbnN0IHNlcmlhbGl6ZWQgPSBUcmFuc2FjdGlvbkVudmVsb3BlTGVnYWN5LnNlcmlhbGl6ZShlbnZlbG9wZSwgeyAvLyBbIWNvZGUgZm9jdXNdXG4gKiAgIHNpZ25hdHVyZSwgLy8gWyFjb2RlIGZvY3VzXVxuICogfSkgLy8gWyFjb2RlIGZvY3VzXVxuICpcbiAqIC8vIC4uLiBzZW5kIGBzZXJpYWxpemVkYCB0cmFuc2FjdGlvbiB0byBKU09OLVJQQyBgZXRoX3NlbmRSYXdUcmFuc2FjdGlvbmBcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSBlbnZlbG9wZSAtIFRoZSBUcmFuc2FjdGlvbiBFbnZlbG9wZSB0byBzZXJpYWxpemUuXG4gKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbnMuXG4gKiBAcmV0dXJucyBUaGUgc2VyaWFsaXplZCBUcmFuc2FjdGlvbiBFbnZlbG9wZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNlcmlhbGl6ZShlbnZlbG9wZSwgb3B0aW9ucyA9IHt9KSB7XG4gICAgY29uc3QgeyBjaGFpbklkID0gMCwgZ2FzLCBkYXRhLCBpbnB1dCwgbm9uY2UsIHRvLCB2YWx1ZSwgZ2FzUHJpY2UgfSA9IGVudmVsb3BlO1xuICAgIGFzc2VydChlbnZlbG9wZSk7XG4gICAgbGV0IHNlcmlhbGl6ZWQgPSBbXG4gICAgICAgIG5vbmNlID8gSGV4LmZyb21OdW1iZXIobm9uY2UpIDogJzB4JyxcbiAgICAgICAgZ2FzUHJpY2UgPyBIZXguZnJvbU51bWJlcihnYXNQcmljZSkgOiAnMHgnLFxuICAgICAgICBnYXMgPyBIZXguZnJvbU51bWJlcihnYXMpIDogJzB4JyxcbiAgICAgICAgdG8gPz8gJzB4JyxcbiAgICAgICAgdmFsdWUgPyBIZXguZnJvbU51bWJlcih2YWx1ZSkgOiAnMHgnLFxuICAgICAgICBkYXRhID8/IGlucHV0ID8/ICcweCcsXG4gICAgXTtcbiAgICBjb25zdCBzaWduYXR1cmUgPSAoKCkgPT4ge1xuICAgICAgICBpZiAob3B0aW9ucy5zaWduYXR1cmUpXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHI6IG9wdGlvbnMuc2lnbmF0dXJlLnIsXG4gICAgICAgICAgICAgICAgczogb3B0aW9ucy5zaWduYXR1cmUucyxcbiAgICAgICAgICAgICAgICB2OiBTaWduYXR1cmUueVBhcml0eVRvVihvcHRpb25zLnNpZ25hdHVyZS55UGFyaXR5KSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIGlmICh0eXBlb2YgZW52ZWxvcGUuciA9PT0gJ3VuZGVmaW5lZCcgfHwgdHlwZW9mIGVudmVsb3BlLnMgPT09ICd1bmRlZmluZWQnKVxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHI6IGVudmVsb3BlLnIsXG4gICAgICAgICAgICBzOiBlbnZlbG9wZS5zLFxuICAgICAgICAgICAgdjogZW52ZWxvcGUudixcbiAgICAgICAgfTtcbiAgICB9KSgpO1xuICAgIGlmIChzaWduYXR1cmUpIHtcbiAgICAgICAgY29uc3QgdiA9ICgoKSA9PiB7XG4gICAgICAgICAgICAvLyBFSVAtMTU1IChpbmZlcnJlZCBjaGFpbklkKVxuICAgICAgICAgICAgaWYgKHNpZ25hdHVyZS52ID49IDM1KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgaW5mZXJyZWRDaGFpbklkID0gTWF0aC5mbG9vcigoc2lnbmF0dXJlLnYgLSAzNSkgLyAyKTtcbiAgICAgICAgICAgICAgICBpZiAoaW5mZXJyZWRDaGFpbklkID4gMClcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNpZ25hdHVyZS52O1xuICAgICAgICAgICAgICAgIHJldHVybiAyNyArIChzaWduYXR1cmUudiA9PT0gMzUgPyAwIDogMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBFSVAtMTU1IChleHBsaWNpdCBjaGFpbklkKVxuICAgICAgICAgICAgaWYgKGNoYWluSWQgPiAwKVxuICAgICAgICAgICAgICAgIHJldHVybiBjaGFpbklkICogMiArIDM1ICsgc2lnbmF0dXJlLnYgLSAyNztcbiAgICAgICAgICAgIC8vIFByZS1FSVAtMTU1IChubyBjaGFpbklkKVxuICAgICAgICAgICAgY29uc3QgdiA9IDI3ICsgKHNpZ25hdHVyZS52ID09PSAyNyA/IDAgOiAxKTtcbiAgICAgICAgICAgIGlmIChzaWduYXR1cmUudiAhPT0gdilcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgU2lnbmF0dXJlLkludmFsaWRWRXJyb3IoeyB2YWx1ZTogc2lnbmF0dXJlLnYgfSk7XG4gICAgICAgICAgICByZXR1cm4gdjtcbiAgICAgICAgfSkoKTtcbiAgICAgICAgc2VyaWFsaXplZCA9IFtcbiAgICAgICAgICAgIC4uLnNlcmlhbGl6ZWQsXG4gICAgICAgICAgICBIZXguZnJvbU51bWJlcih2KSxcbiAgICAgICAgICAgIHNpZ25hdHVyZS5yID09PSAwbiA/ICcweCcgOiBIZXgudHJpbUxlZnQoSGV4LmZyb21OdW1iZXIoc2lnbmF0dXJlLnIpKSxcbiAgICAgICAgICAgIHNpZ25hdHVyZS5zID09PSAwbiA/ICcweCcgOiBIZXgudHJpbUxlZnQoSGV4LmZyb21OdW1iZXIoc2lnbmF0dXJlLnMpKSxcbiAgICAgICAgXTtcbiAgICB9XG4gICAgZWxzZSBpZiAoY2hhaW5JZCA+IDApXG4gICAgICAgIHNlcmlhbGl6ZWQgPSBbLi4uc2VyaWFsaXplZCwgSGV4LmZyb21OdW1iZXIoY2hhaW5JZCksICcweCcsICcweCddO1xuICAgIHJldHVybiBSbHAuZnJvbUhleChzZXJpYWxpemVkKTtcbn1cbi8qKlxuICogQ29udmVydHMgYW4ge0BsaW5rIG94I1RyYW5zYWN0aW9uRW52ZWxvcGVMZWdhY3kuVHJhbnNhY3Rpb25FbnZlbG9wZUxlZ2FjeX0gdG8gYW4ge0BsaW5rIG94I1RyYW5zYWN0aW9uRW52ZWxvcGVMZWdhY3kuUnBjfS5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgdHMgdHdvc2xhc2hcbiAqIGltcG9ydCB7IFJwY1JlcXVlc3QsIFRyYW5zYWN0aW9uRW52ZWxvcGVMZWdhY3ksIFZhbHVlIH0gZnJvbSAnb3gnXG4gKlxuICogY29uc3QgZW52ZWxvcGUgPSBUcmFuc2FjdGlvbkVudmVsb3BlTGVnYWN5LmZyb20oe1xuICogICBjaGFpbklkOiAxLFxuICogICBub25jZTogMG4sXG4gKiAgIGdhczogMjEwMDBuLFxuICogICB0bzogJzB4NzA5OTc5NzBjNTE4MTJkYzNhMDEwYzdkMDFiNTBlMGQxN2RjNzljOCcsXG4gKiAgIHZhbHVlOiBWYWx1ZS5mcm9tRXRoZXIoJzEnKSxcbiAqIH0pXG4gKlxuICogY29uc3QgZW52ZWxvcGVfcnBjID0gVHJhbnNhY3Rpb25FbnZlbG9wZUxlZ2FjeS50b1JwYyhlbnZlbG9wZSkgLy8gWyFjb2RlIGZvY3VzXVxuICpcbiAqIGNvbnN0IHJlcXVlc3QgPSBScGNSZXF1ZXN0LmZyb20oe1xuICogICBpZDogMCxcbiAqICAgbWV0aG9kOiAnZXRoX3NlbmRUcmFuc2FjdGlvbicsXG4gKiAgIHBhcmFtczogW2VudmVsb3BlX3JwY10sXG4gKiB9KVxuICogYGBgXG4gKlxuICogQHBhcmFtIGVudmVsb3BlIC0gVGhlIGxlZ2FjeSB0cmFuc2FjdGlvbiBlbnZlbG9wZSB0byBjb252ZXJ0LlxuICogQHJldHVybnMgQW4gUlBDLWZvcm1hdHRlZCBsZWdhY3kgdHJhbnNhY3Rpb24gZW52ZWxvcGUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0b1JwYyhlbnZlbG9wZSkge1xuICAgIGNvbnN0IHNpZ25hdHVyZSA9IFNpZ25hdHVyZS5leHRyYWN0KGVudmVsb3BlKTtcbiAgICByZXR1cm4ge1xuICAgICAgICAuLi5lbnZlbG9wZSxcbiAgICAgICAgY2hhaW5JZDogdHlwZW9mIGVudmVsb3BlLmNoYWluSWQgPT09ICdudW1iZXInXG4gICAgICAgICAgICA/IEhleC5mcm9tTnVtYmVyKGVudmVsb3BlLmNoYWluSWQpXG4gICAgICAgICAgICA6IHVuZGVmaW5lZCxcbiAgICAgICAgZGF0YTogZW52ZWxvcGUuZGF0YSA/PyBlbnZlbG9wZS5pbnB1dCxcbiAgICAgICAgdHlwZTogJzB4MCcsXG4gICAgICAgIC4uLih0eXBlb2YgZW52ZWxvcGUuZ2FzID09PSAnYmlnaW50J1xuICAgICAgICAgICAgPyB7IGdhczogSGV4LmZyb21OdW1iZXIoZW52ZWxvcGUuZ2FzKSB9XG4gICAgICAgICAgICA6IHt9KSxcbiAgICAgICAgLi4uKHR5cGVvZiBlbnZlbG9wZS5ub25jZSA9PT0gJ2JpZ2ludCdcbiAgICAgICAgICAgID8geyBub25jZTogSGV4LmZyb21OdW1iZXIoZW52ZWxvcGUubm9uY2UpIH1cbiAgICAgICAgICAgIDoge30pLFxuICAgICAgICAuLi4odHlwZW9mIGVudmVsb3BlLnZhbHVlID09PSAnYmlnaW50J1xuICAgICAgICAgICAgPyB7IHZhbHVlOiBIZXguZnJvbU51bWJlcihlbnZlbG9wZS52YWx1ZSkgfVxuICAgICAgICAgICAgOiB7fSksXG4gICAgICAgIC4uLih0eXBlb2YgZW52ZWxvcGUuZ2FzUHJpY2UgPT09ICdiaWdpbnQnXG4gICAgICAgICAgICA/IHsgZ2FzUHJpY2U6IEhleC5mcm9tTnVtYmVyKGVudmVsb3BlLmdhc1ByaWNlKSB9XG4gICAgICAgICAgICA6IHt9KSxcbiAgICAgICAgLi4uKHNpZ25hdHVyZVxuICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgLi4uU2lnbmF0dXJlLnRvUnBjKHNpZ25hdHVyZSksXG4gICAgICAgICAgICAgICAgdjogc2lnbmF0dXJlLnlQYXJpdHkgPT09IDAgPyAnMHgxYicgOiAnMHgxYycsXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICA6IHt9KSxcbiAgICB9O1xufVxuLyoqXG4gKiBWYWxpZGF0ZXMgYSB7QGxpbmsgb3gjVHJhbnNhY3Rpb25FbnZlbG9wZUxlZ2FjeS5UcmFuc2FjdGlvbkVudmVsb3BlTGVnYWN5fS4gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudmVsb3BlIGlzIHZhbGlkLCBgZmFsc2VgIG90aGVyd2lzZS5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgdHMgdHdvc2xhc2hcbiAqIGltcG9ydCB7IFRyYW5zYWN0aW9uRW52ZWxvcGVMZWdhY3ksIFZhbHVlIH0gZnJvbSAnb3gnXG4gKlxuICogY29uc3QgdmFsaWQgPSBUcmFuc2FjdGlvbkVudmVsb3BlTGVnYWN5LmFzc2VydCh7XG4gKiAgIGdhc1ByaWNlOiAybiAqKiAyNTZuIC0gMW4gKyAxbixcbiAqICAgY2hhaW5JZDogMSxcbiAqICAgdG86ICcweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAnLFxuICogICB2YWx1ZTogVmFsdWUuZnJvbUV0aGVyKCcxJyksXG4gKiB9KVxuICogLy8gQGxvZzogZmFsc2VcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSBlbnZlbG9wZSAtIFRoZSB0cmFuc2FjdGlvbiBlbnZlbG9wZSB0byB2YWxpZGF0ZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlKGVudmVsb3BlKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgYXNzZXJ0KGVudmVsb3BlKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGNhdGNoIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVRyYW5zYWN0aW9uRW52ZWxvcGVMZWdhY3kuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ox/_esm/core/TransactionEnvelopeLegacy.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ox/_esm/core/TransactionReceipt.js":
/*!*********************************************************!*\
  !*** ./node_modules/ox/_esm/core/TransactionReceipt.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fromRpc: () => (/* binding */ fromRpc),\n/* harmony export */   fromRpcStatus: () => (/* binding */ fromRpcStatus),\n/* harmony export */   fromRpcType: () => (/* binding */ fromRpcType),\n/* harmony export */   toRpc: () => (/* binding */ toRpc),\n/* harmony export */   toRpcStatus: () => (/* binding */ toRpcStatus),\n/* harmony export */   toRpcType: () => (/* binding */ toRpcType)\n/* harmony export */ });\n/* harmony import */ var _Hex_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Hex.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Hex.js\");\n/* harmony import */ var _Log_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Log.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Log.js\");\n\n\n/** RPC status to status mapping. */\nconst fromRpcStatus = {\n    '0x0': 'reverted',\n    '0x1': 'success',\n};\n/** Status to RPC status mapping. */\nconst toRpcStatus = {\n    reverted: '0x0',\n    success: '0x1',\n};\n/** RPC type to type mapping. */\nconst fromRpcType = {\n    '0x0': 'legacy',\n    '0x1': 'eip2930',\n    '0x2': 'eip1559',\n    '0x3': 'eip4844',\n    '0x4': 'eip7702',\n};\n/** Type to RPC type mapping. */\nconst toRpcType = {\n    legacy: '0x0',\n    eip2930: '0x1',\n    eip1559: '0x2',\n    eip4844: '0x3',\n    eip7702: '0x4',\n};\n/**\n * Converts a {@link ox#TransactionReceipt.Rpc} to an {@link ox#TransactionReceipt.TransactionReceipt}.\n *\n * @example\n * ```ts twoslash\n * import { TransactionReceipt } from 'ox'\n *\n * const receipt = TransactionReceipt.fromRpc({\n *   blobGasPrice: '0x42069',\n *   blobGasUsed: '0x1337',\n *   blockHash:\n *     '0xc350d807505fb835650f0013632c5515592987ba169bbc6626d9fc54d91f0f0b',\n *   blockNumber: '0x12f296f',\n *   contractAddress: null,\n *   cumulativeGasUsed: '0x82515',\n *   effectiveGasPrice: '0x21c2f6c09',\n *   from: '0x814e5e0e31016b9a7f138c76b7e7b2bb5c1ab6a6',\n *   gasUsed: '0x2abba',\n *   logs: [],\n *   logsBloom:\n *     '0x00200000000000000000008080000000000000000040000000000000000000000000000000000000000000000000000022000000080000000000000000000000000000080000000000000008000000200000000000000000000200008020400000000000000000280000000000100000000000000000000000000010000000000000000000020000000000000020000000000001000000080000004000000000000000000000000000000000000000000000400000000000001000000000000000000002000000000000000020000000000000000000001000000000000000000000200000000000000000000000000000001000000000c00000000000000000',\n *   status: '0x1',\n *   to: '0x3fc91a3afd70395cd496c647d5a6cc9d4b2b7fad',\n *   transactionHash:\n *     '0x353fdfc38a2f26115daadee9f5b8392ce62b84f410957967e2ed56b35338cdd0',\n *   transactionIndex: '0x2',\n *   type: '0x2',\n * })\n * // @log: {\n * // @log:   blobGasPrice: 270441n,\n * // @log:   blobGasUsed: 4919n,\n * // @log:   blockHash: \"0xc350d807505fb835650f0013632c5515592987ba169bbc6626d9fc54d91f0f0b\",\n * // @log:   blockNumber: 19868015n,\n * // @log:   contractAddress: null,\n * // @log:   cumulativeGasUsed: 533781n,\n * // @log:   effectiveGasPrice: 9062804489n,\n * // @log:   from: \"0x814e5e0e31016b9a7f138c76b7e7b2bb5c1ab6a6\",\n * // @log:   gasUsed: 175034n,\n * // @log:   logs: [],\n * // @log:   logsBloom: \"0x00200000000000000000008080000000000000000040000000000000000000000000000000000000000000000000000022000000080000000000000000000000000000080000000000000008000000200000000000000000000200008020400000000000000000280000000000100000000000000000000000000010000000000000000000020000000000000020000000000001000000080000004000000000000000000000000000000000000000000000400000000000001000000000000000000002000000000000000020000000000000000000001000000000000000000000200000000000000000000000000000001000000000c00000000000000000\",\n * // @log:   root: undefined,\n * // @log:   status: \"success\",\n * // @log:   to: \"0x3fc91a3afd70395cd496c647d5a6cc9d4b2b7fad\",\n * // @log:   transactionHash: \"0x353fdfc38a2f26115daadee9f5b8392ce62b84f410957967e2ed56b35338cdd0\",\n * // @log:   transactionIndex: 2,\n * // @log:   type: \"eip1559\",\n * // @log: }\n * ```\n *\n * @example\n * ### End-to-end\n *\n * Below is an example of how to use the `TransactionReceipt.fromRpc` method to convert an RPC transaction receipt to a {@link ox#TransactionReceipt.TransactionReceipt} object.\n *\n * ```ts twoslash\n * import 'ox/window'\n * import { TransactionReceipt } from 'ox'\n *\n * const receipt = await window.ethereum!\n *   .request({\n *     method: 'eth_getTransactionReceipt',\n *     params: [\n *       '0x353fdfc38a2f26115daadee9f5b8392ce62b84f410957967e2ed56b35338cdd0',\n *     ],\n *   })\n *   .then(TransactionReceipt.fromRpc) // [!code hl]\n * // @log: {\n * // @log:   blobGasPrice: 270441n,\n * // @log:   blobGasUsed: 4919n,\n * // @log:   blockHash: \"0xc350d807505fb835650f0013632c5515592987ba169bbc6626d9fc54d91f0f0b\",\n * // @log:   blockNumber: 19868015n,\n * // @log:   contractAddress: null,\n * // @log:   cumulativeGasUsed: 533781n,\n * // @log:   effectiveGasPrice: 9062804489n,\n * // @log:   from: \"0x814e5e0e31016b9a7f138c76b7e7b2bb5c1ab6a6\",\n * // @log:   gasUsed: 175034n,\n * // @log:   logs: [],\n * // @log:   logsBloom: \"0x00200000000000000000008080000000000000000040000000000000000000000000000000000000000000000000000022000000080000000000000000000000000000080000000000000008000000200000000000000000000200008020400000000000000000280000000000100000000000000000000000000010000000000000000000020000000000000020000000000001000000080000004000000000000000000000000000000000000000000000400000000000001000000000000000000002000000000000000020000000000000000000001000000000000000000000200000000000000000000000000000001000000000c00000000000000000\",\n * // @log:   root: undefined,\n * // @log:   status: \"success\",\n * // @log:   to: \"0x3fc91a3afd70395cd496c647d5a6cc9d4b2b7fad\",\n * // @log:   transactionHash: \"0x353fdfc38a2f26115daadee9f5b8392ce62b84f410957967e2ed56b35338cdd0\",\n * // @log:   transactionIndex: 2,\n * // @log:   type: \"eip1559\",\n * // @log: }\n * ```\n *\n * :::note\n *\n * For simplicity, the above example uses `window.ethereum.request`, but you can use any\n * type of JSON-RPC interface.\n *\n * :::\n *\n * @param receipt - The RPC receipt to convert.\n * @returns An instantiated {@link ox#TransactionReceipt.TransactionReceipt}.\n */\nfunction fromRpc(receipt) {\n    if (!receipt)\n        return null;\n    return {\n        ...receipt,\n        blobGasPrice: receipt.blobGasPrice\n            ? BigInt(receipt.blobGasPrice)\n            : undefined,\n        blobGasUsed: receipt.blobGasUsed ? BigInt(receipt.blobGasUsed) : undefined,\n        blockNumber: BigInt(receipt.blockNumber ?? 0n),\n        cumulativeGasUsed: BigInt(receipt.cumulativeGasUsed ?? 0n),\n        effectiveGasPrice: BigInt(receipt.effectiveGasPrice ?? 0n),\n        gasUsed: BigInt(receipt.gasUsed ?? 0n),\n        logs: receipt.logs.map((log) => _Log_js__WEBPACK_IMPORTED_MODULE_0__.fromRpc(log, { pending: false })),\n        status: fromRpcStatus[receipt.status],\n        transactionIndex: Number(receipt.transactionIndex ?? 0),\n        type: fromRpcType[receipt.type] || receipt.type,\n    };\n}\n/**\n * Converts a {@link ox#TransactionReceipt.TransactionReceipt} to a {@link ox#TransactionReceipt.Rpc}.\n *\n * @example\n * ```ts twoslash\n * import { TransactionReceipt } from 'ox'\n *\n * const receipt = TransactionReceipt.toRpc({\n *   blobGasPrice: 270441n,\n *   blobGasUsed: 4919n,\n *   blockHash:\n *     '0xc350d807505fb835650f0013632c5515592987ba169bbc6626d9fc54d91f0f0b',\n *   blockNumber: 19868015n,\n *   contractAddress: null,\n *   cumulativeGasUsed: 533781n,\n *   effectiveGasPrice: 9062804489n,\n *   from: '0x814e5e0e31016b9a7f138c76b7e7b2bb5c1ab6a6',\n *   gasUsed: 175034n,\n *   logs: [],\n *   logsBloom:\n *     '0x00200000000000000000008080000000000000000040000000000000000000000000000000000000000000000000000022000000080000000000000000000000000000080000000000000008000000200000000000000000000200008020400000000000000000280000000000100000000000000000000000000010000000000000000000020000000000000020000000000001000000080000004000000000000000000000000000000000000000000000400000000000001000000000000000000002000000000000000020000000000000000000001000000000000000000000200000000000000000000000000000001000000000c00000000000000000',\n *   root: undefined,\n *   status: 'success',\n *   to: '0x3fc91a3afd70395cd496c647d5a6cc9d4b2b7fad',\n *   transactionHash:\n *     '0x353fdfc38a2f26115daadee9f5b8392ce62b84f410957967e2ed56b35338cdd0',\n *   transactionIndex: 2,\n *   type: 'eip1559',\n * })\n * // @log: {\n * // @log:   blobGasPrice: \"0x042069\",\n * // @log:   blobGasUsed: \"0x1337\",\n * // @log:   blockHash: \"0xc350d807505fb835650f0013632c5515592987ba169bbc6626d9fc54d91f0f0b\",\n * // @log:   blockNumber: \"0x012f296f\",\n * // @log:   contractAddress: null,\n * // @log:   cumulativeGasUsed: \"0x082515\",\n * // @log:   effectiveGasPrice: \"0x021c2f6c09\",\n * // @log:   from: \"0x814e5e0e31016b9a7f138c76b7e7b2bb5c1ab6a6\",\n * // @log:   gasUsed: \"0x02abba\",\n * // @log:   logs: [],\n * // @log:   logsBloom: \"0x00200000000000000000008080000000000000000040000000000000000000000000000000000000000000000000000022000000080000000000000000000000000000080000000000000008000000200000000000000000000200008020400000000000000000280000000000100000000000000000000000000010000000000000000000020000000000000020000000000001000000080000004000000000000000000000000000000000000000000000400000000000001000000000000000000002000000000000000020000000000000000000001000000000000000000000200000000000000000000000000000001000000000c00000000000000000\",\n * // @log:   root: undefined,\n * // @log:   status: \"0x1\",\n * // @log:   to: \"0x3fc91a3afd70395cd496c647d5a6cc9d4b2b7fad\",\n * // @log:   transactionHash: \"0x353fdfc38a2f26115daadee9f5b8392ce62b84f410957967e2ed56b35338cdd0\",\n * // @log:   transactionIndex: \"0x02\",\n * // @log:   type: \"eip1559\",\n * // @log: }\n * ```\n *\n * @param receipt - The receipt to convert.\n * @returns An RPC receipt.\n */\nfunction toRpc(receipt) {\n    return {\n        blobGasPrice: receipt.blobGasPrice\n            ? _Hex_js__WEBPACK_IMPORTED_MODULE_1__.fromNumber(receipt.blobGasPrice)\n            : undefined,\n        blobGasUsed: receipt.blobGasUsed\n            ? _Hex_js__WEBPACK_IMPORTED_MODULE_1__.fromNumber(receipt.blobGasUsed)\n            : undefined,\n        blockHash: receipt.blockHash,\n        blockNumber: _Hex_js__WEBPACK_IMPORTED_MODULE_1__.fromNumber(receipt.blockNumber),\n        contractAddress: receipt.contractAddress,\n        cumulativeGasUsed: _Hex_js__WEBPACK_IMPORTED_MODULE_1__.fromNumber(receipt.cumulativeGasUsed),\n        effectiveGasPrice: _Hex_js__WEBPACK_IMPORTED_MODULE_1__.fromNumber(receipt.effectiveGasPrice),\n        from: receipt.from,\n        gasUsed: _Hex_js__WEBPACK_IMPORTED_MODULE_1__.fromNumber(receipt.gasUsed),\n        logs: receipt.logs.map(_Log_js__WEBPACK_IMPORTED_MODULE_0__.toRpc),\n        logsBloom: receipt.logsBloom,\n        root: receipt.root,\n        status: toRpcStatus[receipt.status],\n        to: receipt.to,\n        transactionHash: receipt.transactionHash,\n        transactionIndex: _Hex_js__WEBPACK_IMPORTED_MODULE_1__.fromNumber(receipt.transactionIndex),\n        type: toRpcType[receipt.type] ?? receipt.type,\n    };\n}\n//# sourceMappingURL=TransactionReceipt.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ox/_esm/core/TransactionReceipt.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ox/_esm/core/TransactionRequest.js":
/*!*********************************************************!*\
  !*** ./node_modules/ox/_esm/core/TransactionRequest.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   toRpc: () => (/* binding */ toRpc)\n/* harmony export */ });\n/* harmony import */ var _Authorization_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Authorization.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Authorization.js\");\n/* harmony import */ var _Hex_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Hex.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Hex.js\");\n\n\n/**\n * Converts a {@link ox#TransactionRequest.TransactionRequest} to a {@link ox#TransactionRequest.Rpc}.\n *\n * @example\n * ```ts twoslash\n * import { TransactionRequest, Value } from 'ox'\n *\n * const request = TransactionRequest.toRpc({\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: Value.fromEther('0.01'),\n * })\n * ```\n *\n * @example\n * ### Using with a Provider\n *\n * You can use {@link ox#Provider.(from:function)} to instantiate an EIP-1193 Provider and\n * send a transaction to the Wallet using the `eth_sendTransaction` method.\n *\n * ```ts twoslash\n * import 'ox/window'\n * import { Provider, TransactionRequest, Value } from 'ox'\n *\n * const provider = Provider.from(window.ethereum!)\n *\n * const request = TransactionRequest.toRpc({\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: Value.fromEther('0.01'),\n * })\n *\n * const hash = await provider.request({ // [!code focus]\n *   method: 'eth_sendTransaction', // [!code focus]\n *   params: [request], // [!code focus]\n * }) // [!code focus]\n * ```\n *\n * @param request - The request to convert.\n * @returns An RPC request.\n */\nfunction toRpc(request) {\n    const request_rpc = {};\n    if (typeof request.accessList !== 'undefined')\n        request_rpc.accessList = request.accessList;\n    if (typeof request.authorizationList !== 'undefined')\n        request_rpc.authorizationList = _Authorization_js__WEBPACK_IMPORTED_MODULE_0__.toRpcList(request.authorizationList);\n    if (typeof request.blobVersionedHashes !== 'undefined')\n        request_rpc.blobVersionedHashes = request.blobVersionedHashes;\n    if (typeof request.blobs !== 'undefined')\n        request_rpc.blobs = request.blobs;\n    if (typeof request.chainId !== 'undefined')\n        request_rpc.chainId = _Hex_js__WEBPACK_IMPORTED_MODULE_1__.fromNumber(request.chainId);\n    if (typeof request.data !== 'undefined') {\n        request_rpc.data = request.data;\n        request_rpc.input = request.data;\n    }\n    else if (typeof request.input !== 'undefined') {\n        request_rpc.data = request.input;\n        request_rpc.input = request.input;\n    }\n    if (typeof request.from !== 'undefined')\n        request_rpc.from = request.from;\n    if (typeof request.gas !== 'undefined')\n        request_rpc.gas = _Hex_js__WEBPACK_IMPORTED_MODULE_1__.fromNumber(request.gas);\n    if (typeof request.gasPrice !== 'undefined')\n        request_rpc.gasPrice = _Hex_js__WEBPACK_IMPORTED_MODULE_1__.fromNumber(request.gasPrice);\n    if (typeof request.maxFeePerBlobGas !== 'undefined')\n        request_rpc.maxFeePerBlobGas = _Hex_js__WEBPACK_IMPORTED_MODULE_1__.fromNumber(request.maxFeePerBlobGas);\n    if (typeof request.maxFeePerGas !== 'undefined')\n        request_rpc.maxFeePerGas = _Hex_js__WEBPACK_IMPORTED_MODULE_1__.fromNumber(request.maxFeePerGas);\n    if (typeof request.maxPriorityFeePerGas !== 'undefined')\n        request_rpc.maxPriorityFeePerGas = _Hex_js__WEBPACK_IMPORTED_MODULE_1__.fromNumber(request.maxPriorityFeePerGas);\n    if (typeof request.maxPriorityFeePerGas !== 'undefined')\n        request_rpc.maxPriorityFeePerGas = _Hex_js__WEBPACK_IMPORTED_MODULE_1__.fromNumber(request.maxPriorityFeePerGas);\n    if (typeof request.nonce !== 'undefined')\n        request_rpc.nonce = _Hex_js__WEBPACK_IMPORTED_MODULE_1__.fromNumber(request.nonce);\n    if (typeof request.to !== 'undefined')\n        request_rpc.to = request.to;\n    if (typeof request.type !== 'undefined')\n        request_rpc.type = request.type;\n    if (typeof request.value !== 'undefined')\n        request_rpc.value = _Hex_js__WEBPACK_IMPORTED_MODULE_1__.fromNumber(request.value);\n    return request_rpc;\n}\n//# sourceMappingURL=TransactionRequest.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9veC9fZXNtL2NvcmUvVHJhbnNhY3Rpb25SZXF1ZXN0LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFvRDtBQUNwQjtBQUNoQztBQUNBLGVBQWUsZ0RBQWdELE1BQU0sZ0NBQWdDO0FBQ3JHO0FBQ0E7QUFDQTtBQUNBLFlBQVksNEJBQTRCO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsbUNBQW1DO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxzQ0FBc0M7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0EseUNBQXlDO0FBQ3pDO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3Q0FBd0Msd0RBQXVCO0FBQy9EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsK0NBQWM7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQiwrQ0FBYztBQUN4QztBQUNBLCtCQUErQiwrQ0FBYztBQUM3QztBQUNBLHVDQUF1QywrQ0FBYztBQUNyRDtBQUNBLG1DQUFtQywrQ0FBYztBQUNqRDtBQUNBLDJDQUEyQywrQ0FBYztBQUN6RDtBQUNBLDJDQUEyQywrQ0FBYztBQUN6RDtBQUNBLDRCQUE0QiwrQ0FBYztBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLCtDQUFjO0FBQzFDO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxjaGFuZFxcRG93bmxvYWRzXFxqb2hud3JpY2hraWRpbnRvcml6elxcbm9kZV9tb2R1bGVzXFxveFxcX2VzbVxcY29yZVxcVHJhbnNhY3Rpb25SZXF1ZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIEF1dGhvcml6YXRpb24gZnJvbSAnLi9BdXRob3JpemF0aW9uLmpzJztcbmltcG9ydCAqIGFzIEhleCBmcm9tICcuL0hleC5qcyc7XG4vKipcbiAqIENvbnZlcnRzIGEge0BsaW5rIG94I1RyYW5zYWN0aW9uUmVxdWVzdC5UcmFuc2FjdGlvblJlcXVlc3R9IHRvIGEge0BsaW5rIG94I1RyYW5zYWN0aW9uUmVxdWVzdC5ScGN9LlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGB0cyB0d29zbGFzaFxuICogaW1wb3J0IHsgVHJhbnNhY3Rpb25SZXF1ZXN0LCBWYWx1ZSB9IGZyb20gJ294J1xuICpcbiAqIGNvbnN0IHJlcXVlc3QgPSBUcmFuc2FjdGlvblJlcXVlc3QudG9ScGMoe1xuICogICB0bzogJzB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gKiAgIHZhbHVlOiBWYWx1ZS5mcm9tRXRoZXIoJzAuMDEnKSxcbiAqIH0pXG4gKiBgYGBcbiAqXG4gKiBAZXhhbXBsZVxuICogIyMjIFVzaW5nIHdpdGggYSBQcm92aWRlclxuICpcbiAqIFlvdSBjYW4gdXNlIHtAbGluayBveCNQcm92aWRlci4oZnJvbTpmdW5jdGlvbil9IHRvIGluc3RhbnRpYXRlIGFuIEVJUC0xMTkzIFByb3ZpZGVyIGFuZFxuICogc2VuZCBhIHRyYW5zYWN0aW9uIHRvIHRoZSBXYWxsZXQgdXNpbmcgdGhlIGBldGhfc2VuZFRyYW5zYWN0aW9uYCBtZXRob2QuXG4gKlxuICogYGBgdHMgdHdvc2xhc2hcbiAqIGltcG9ydCAnb3gvd2luZG93J1xuICogaW1wb3J0IHsgUHJvdmlkZXIsIFRyYW5zYWN0aW9uUmVxdWVzdCwgVmFsdWUgfSBmcm9tICdveCdcbiAqXG4gKiBjb25zdCBwcm92aWRlciA9IFByb3ZpZGVyLmZyb20od2luZG93LmV0aGVyZXVtISlcbiAqXG4gKiBjb25zdCByZXF1ZXN0ID0gVHJhbnNhY3Rpb25SZXF1ZXN0LnRvUnBjKHtcbiAqICAgdG86ICcweDcwOTk3OTcwYzUxODEyZGMzYTAxMGM3ZDAxYjUwZTBkMTdkYzc5YzgnLFxuICogICB2YWx1ZTogVmFsdWUuZnJvbUV0aGVyKCcwLjAxJyksXG4gKiB9KVxuICpcbiAqIGNvbnN0IGhhc2ggPSBhd2FpdCBwcm92aWRlci5yZXF1ZXN0KHsgLy8gWyFjb2RlIGZvY3VzXVxuICogICBtZXRob2Q6ICdldGhfc2VuZFRyYW5zYWN0aW9uJywgLy8gWyFjb2RlIGZvY3VzXVxuICogICBwYXJhbXM6IFtyZXF1ZXN0XSwgLy8gWyFjb2RlIGZvY3VzXVxuICogfSkgLy8gWyFjb2RlIGZvY3VzXVxuICogYGBgXG4gKlxuICogQHBhcmFtIHJlcXVlc3QgLSBUaGUgcmVxdWVzdCB0byBjb252ZXJ0LlxuICogQHJldHVybnMgQW4gUlBDIHJlcXVlc3QuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0b1JwYyhyZXF1ZXN0KSB7XG4gICAgY29uc3QgcmVxdWVzdF9ycGMgPSB7fTtcbiAgICBpZiAodHlwZW9mIHJlcXVlc3QuYWNjZXNzTGlzdCAhPT0gJ3VuZGVmaW5lZCcpXG4gICAgICAgIHJlcXVlc3RfcnBjLmFjY2Vzc0xpc3QgPSByZXF1ZXN0LmFjY2Vzc0xpc3Q7XG4gICAgaWYgKHR5cGVvZiByZXF1ZXN0LmF1dGhvcml6YXRpb25MaXN0ICE9PSAndW5kZWZpbmVkJylcbiAgICAgICAgcmVxdWVzdF9ycGMuYXV0aG9yaXphdGlvbkxpc3QgPSBBdXRob3JpemF0aW9uLnRvUnBjTGlzdChyZXF1ZXN0LmF1dGhvcml6YXRpb25MaXN0KTtcbiAgICBpZiAodHlwZW9mIHJlcXVlc3QuYmxvYlZlcnNpb25lZEhhc2hlcyAhPT0gJ3VuZGVmaW5lZCcpXG4gICAgICAgIHJlcXVlc3RfcnBjLmJsb2JWZXJzaW9uZWRIYXNoZXMgPSByZXF1ZXN0LmJsb2JWZXJzaW9uZWRIYXNoZXM7XG4gICAgaWYgKHR5cGVvZiByZXF1ZXN0LmJsb2JzICE9PSAndW5kZWZpbmVkJylcbiAgICAgICAgcmVxdWVzdF9ycGMuYmxvYnMgPSByZXF1ZXN0LmJsb2JzO1xuICAgIGlmICh0eXBlb2YgcmVxdWVzdC5jaGFpbklkICE9PSAndW5kZWZpbmVkJylcbiAgICAgICAgcmVxdWVzdF9ycGMuY2hhaW5JZCA9IEhleC5mcm9tTnVtYmVyKHJlcXVlc3QuY2hhaW5JZCk7XG4gICAgaWYgKHR5cGVvZiByZXF1ZXN0LmRhdGEgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJlcXVlc3RfcnBjLmRhdGEgPSByZXF1ZXN0LmRhdGE7XG4gICAgICAgIHJlcXVlc3RfcnBjLmlucHV0ID0gcmVxdWVzdC5kYXRhO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgcmVxdWVzdC5pbnB1dCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmVxdWVzdF9ycGMuZGF0YSA9IHJlcXVlc3QuaW5wdXQ7XG4gICAgICAgIHJlcXVlc3RfcnBjLmlucHV0ID0gcmVxdWVzdC5pbnB1dDtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiByZXF1ZXN0LmZyb20gIT09ICd1bmRlZmluZWQnKVxuICAgICAgICByZXF1ZXN0X3JwYy5mcm9tID0gcmVxdWVzdC5mcm9tO1xuICAgIGlmICh0eXBlb2YgcmVxdWVzdC5nYXMgIT09ICd1bmRlZmluZWQnKVxuICAgICAgICByZXF1ZXN0X3JwYy5nYXMgPSBIZXguZnJvbU51bWJlcihyZXF1ZXN0Lmdhcyk7XG4gICAgaWYgKHR5cGVvZiByZXF1ZXN0Lmdhc1ByaWNlICE9PSAndW5kZWZpbmVkJylcbiAgICAgICAgcmVxdWVzdF9ycGMuZ2FzUHJpY2UgPSBIZXguZnJvbU51bWJlcihyZXF1ZXN0Lmdhc1ByaWNlKTtcbiAgICBpZiAodHlwZW9mIHJlcXVlc3QubWF4RmVlUGVyQmxvYkdhcyAhPT0gJ3VuZGVmaW5lZCcpXG4gICAgICAgIHJlcXVlc3RfcnBjLm1heEZlZVBlckJsb2JHYXMgPSBIZXguZnJvbU51bWJlcihyZXF1ZXN0Lm1heEZlZVBlckJsb2JHYXMpO1xuICAgIGlmICh0eXBlb2YgcmVxdWVzdC5tYXhGZWVQZXJHYXMgIT09ICd1bmRlZmluZWQnKVxuICAgICAgICByZXF1ZXN0X3JwYy5tYXhGZWVQZXJHYXMgPSBIZXguZnJvbU51bWJlcihyZXF1ZXN0Lm1heEZlZVBlckdhcyk7XG4gICAgaWYgKHR5cGVvZiByZXF1ZXN0Lm1heFByaW9yaXR5RmVlUGVyR2FzICE9PSAndW5kZWZpbmVkJylcbiAgICAgICAgcmVxdWVzdF9ycGMubWF4UHJpb3JpdHlGZWVQZXJHYXMgPSBIZXguZnJvbU51bWJlcihyZXF1ZXN0Lm1heFByaW9yaXR5RmVlUGVyR2FzKTtcbiAgICBpZiAodHlwZW9mIHJlcXVlc3QubWF4UHJpb3JpdHlGZWVQZXJHYXMgIT09ICd1bmRlZmluZWQnKVxuICAgICAgICByZXF1ZXN0X3JwYy5tYXhQcmlvcml0eUZlZVBlckdhcyA9IEhleC5mcm9tTnVtYmVyKHJlcXVlc3QubWF4UHJpb3JpdHlGZWVQZXJHYXMpO1xuICAgIGlmICh0eXBlb2YgcmVxdWVzdC5ub25jZSAhPT0gJ3VuZGVmaW5lZCcpXG4gICAgICAgIHJlcXVlc3RfcnBjLm5vbmNlID0gSGV4LmZyb21OdW1iZXIocmVxdWVzdC5ub25jZSk7XG4gICAgaWYgKHR5cGVvZiByZXF1ZXN0LnRvICE9PSAndW5kZWZpbmVkJylcbiAgICAgICAgcmVxdWVzdF9ycGMudG8gPSByZXF1ZXN0LnRvO1xuICAgIGlmICh0eXBlb2YgcmVxdWVzdC50eXBlICE9PSAndW5kZWZpbmVkJylcbiAgICAgICAgcmVxdWVzdF9ycGMudHlwZSA9IHJlcXVlc3QudHlwZTtcbiAgICBpZiAodHlwZW9mIHJlcXVlc3QudmFsdWUgIT09ICd1bmRlZmluZWQnKVxuICAgICAgICByZXF1ZXN0X3JwYy52YWx1ZSA9IEhleC5mcm9tTnVtYmVyKHJlcXVlc3QudmFsdWUpO1xuICAgIHJldHVybiByZXF1ZXN0X3JwYztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVRyYW5zYWN0aW9uUmVxdWVzdC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ox/_esm/core/TransactionRequest.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ox/_esm/core/TypedData.js":
/*!************************************************!*\
  !*** ./node_modules/ox/_esm/core/TypedData.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BytesSizeMismatchError: () => (/* binding */ BytesSizeMismatchError),\n/* harmony export */   InvalidDomainError: () => (/* binding */ InvalidDomainError),\n/* harmony export */   InvalidPrimaryTypeError: () => (/* binding */ InvalidPrimaryTypeError),\n/* harmony export */   InvalidStructTypeError: () => (/* binding */ InvalidStructTypeError),\n/* harmony export */   assert: () => (/* binding */ assert),\n/* harmony export */   domainSeparator: () => (/* binding */ domainSeparator),\n/* harmony export */   encode: () => (/* binding */ encode),\n/* harmony export */   encodeData: () => (/* binding */ encodeData),\n/* harmony export */   encodeField: () => (/* binding */ encodeField),\n/* harmony export */   encodeType: () => (/* binding */ encodeType),\n/* harmony export */   extractEip712DomainTypes: () => (/* binding */ extractEip712DomainTypes),\n/* harmony export */   findTypeDependencies: () => (/* binding */ findTypeDependencies),\n/* harmony export */   getSignPayload: () => (/* binding */ getSignPayload),\n/* harmony export */   hashDomain: () => (/* binding */ hashDomain),\n/* harmony export */   hashStruct: () => (/* binding */ hashStruct),\n/* harmony export */   hashType: () => (/* binding */ hashType),\n/* harmony export */   serialize: () => (/* binding */ serialize),\n/* harmony export */   validate: () => (/* binding */ validate)\n/* harmony export */ });\n/* harmony import */ var _AbiParameters_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./AbiParameters.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/AbiParameters.js\");\n/* harmony import */ var _Address_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Address.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Address.js\");\n/* harmony import */ var _Bytes_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Bytes.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Bytes.js\");\n/* harmony import */ var _Errors_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Errors.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Errors.js\");\n/* harmony import */ var _Hash_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Hash.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Hash.js\");\n/* harmony import */ var _Hex_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Hex.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Hex.js\");\n/* harmony import */ var _Json_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Json.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Json.js\");\n/* harmony import */ var _Solidity_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Solidity.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Solidity.js\");\n\n\n\n\n\n\n\n\n/**\n * Asserts that [EIP-712 Typed Data](https://eips.ethereum.org/EIPS/eip-712) is valid.\n *\n * @example\n * ```ts twoslash\n * import { TypedData } from 'ox'\n *\n * TypedData.assert({\n *   domain: {\n *     name: 'Ether!',\n *     version: '1',\n *     chainId: 1,\n *     verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC',\n *   },\n *   primaryType: 'Foo',\n *   types: {\n *     Foo: [\n *       { name: 'address', type: 'address' },\n *       { name: 'name', type: 'string' },\n *       { name: 'foo', type: 'string' },\n *     ],\n *   },\n *   message: {\n *     address: '0xb9CAB4F0E46F7F6b1024b5A7463734fa68E633f9',\n *     name: 'jxom',\n *     foo: '0xb9CAB4F0E46F7F6b1024b5A7463734fa68E633f9',\n *   },\n * })\n * ```\n *\n * @param value - The Typed Data to validate.\n */\nfunction assert(value) {\n    const { domain, message, primaryType, types } = value;\n    const validateData = (struct, data) => {\n        for (const param of struct) {\n            const { name, type } = param;\n            const value = data[name];\n            const integerMatch = type.match(_Solidity_js__WEBPACK_IMPORTED_MODULE_0__.integerRegex);\n            if (integerMatch &&\n                (typeof value === 'number' || typeof value === 'bigint')) {\n                const [, base, size_] = integerMatch;\n                // If number cannot be cast to a sized hex value, it is out of range\n                // and will throw.\n                _Hex_js__WEBPACK_IMPORTED_MODULE_1__.fromNumber(value, {\n                    signed: base === 'int',\n                    size: Number.parseInt(size_ ?? '') / 8,\n                });\n            }\n            if (type === 'address' &&\n                typeof value === 'string' &&\n                !_Address_js__WEBPACK_IMPORTED_MODULE_2__.validate(value))\n                throw new _Address_js__WEBPACK_IMPORTED_MODULE_2__.InvalidAddressError({\n                    address: value,\n                    cause: new _Address_js__WEBPACK_IMPORTED_MODULE_2__.InvalidInputError(),\n                });\n            const bytesMatch = type.match(_Solidity_js__WEBPACK_IMPORTED_MODULE_0__.bytesRegex);\n            if (bytesMatch) {\n                const [, size] = bytesMatch;\n                if (size && _Hex_js__WEBPACK_IMPORTED_MODULE_1__.size(value) !== Number.parseInt(size))\n                    throw new BytesSizeMismatchError({\n                        expectedSize: Number.parseInt(size),\n                        givenSize: _Hex_js__WEBPACK_IMPORTED_MODULE_1__.size(value),\n                    });\n            }\n            const struct = types[type];\n            if (struct) {\n                validateReference(type);\n                validateData(struct, value);\n            }\n        }\n    };\n    // Validate domain types.\n    if (types.EIP712Domain && domain) {\n        if (typeof domain !== 'object')\n            throw new InvalidDomainError({ domain });\n        validateData(types.EIP712Domain, domain);\n    }\n    // Validate message types.\n    if (primaryType !== 'EIP712Domain') {\n        if (types[primaryType])\n            validateData(types[primaryType], message);\n        else\n            throw new InvalidPrimaryTypeError({ primaryType, types });\n    }\n}\n/**\n * Creates [EIP-712 Typed Data](https://eips.ethereum.org/EIPS/eip-712) [`domainSeparator`](https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator) for the provided domain.\n *\n * @example\n * ```ts twoslash\n * import { TypedData } from 'ox'\n *\n * TypedData.domainSeparator({\n *   name: 'Ether!',\n *   version: '1',\n *   chainId: 1,\n *   verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC',\n * })\n * // @log: '0x9911ee4f58a7059a8f5385248040e6984d80e2c849500fe6a4d11c4fa98c2af3'\n * ```\n *\n * @param domain - The domain for which to create the domain separator.\n * @returns The domain separator.\n */\nfunction domainSeparator(domain) {\n    return hashDomain({\n        domain,\n    });\n}\n/**\n * Encodes typed data in [EIP-712 format](https://eips.ethereum.org/EIPS/eip-712): `0x19 ‖ 0x01 ‖ domainSeparator ‖ hashStruct(message)`.\n *\n * @example\n * ```ts twoslash\n * import { TypedData, Hash } from 'ox'\n *\n * const data = TypedData.encode({ // [!code focus:33]\n *   domain: {\n *     name: 'Ether Mail',\n *     version: '1',\n *     chainId: 1,\n *     verifyingContract: '0x0000000000000000000000000000000000000000',\n *   },\n *   types: {\n *     Person: [\n *       { name: 'name', type: 'string' },\n *       { name: 'wallet', type: 'address' },\n *     ],\n *     Mail: [\n *       { name: 'from', type: 'Person' },\n *       { name: 'to', type: 'Person' },\n *       { name: 'contents', type: 'string' },\n *     ],\n *   },\n *   primaryType: 'Mail',\n *   message: {\n *     from: {\n *       name: 'Cow',\n *       wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n *     },\n *     to: {\n *       name: 'Bob',\n *       wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n *     },\n *     contents: 'Hello, Bob!',\n *   },\n * })\n * // @log: '0x19012fdf3441fcaf4f30c7e16292b258a5d7054a4e2e00dbd7b7d2f467f2b8fb9413c52c0ee5d84264471806290a3f2c4cecfc5490626bf912d01f240d7a274b371e'\n * // @log: (0x19 ‖ 0x01 ‖ domainSeparator ‖ hashStruct(message))\n *\n * const hash = Hash.keccak256(data)\n * ```\n *\n * @param value - The Typed Data to encode.\n * @returns The encoded Typed Data.\n */\nfunction encode(value) {\n    const { domain = {}, message, primaryType } = value;\n    const types = {\n        EIP712Domain: extractEip712DomainTypes(domain),\n        ...value.types,\n    };\n    // Need to do a runtime validation check on addresses, byte ranges, integer ranges, etc\n    // as we can't statically check this with TypeScript.\n    assert({\n        domain,\n        message,\n        primaryType,\n        types,\n    });\n    // Typed Data Format: `0x19 ‖ 0x01 ‖ domainSeparator ‖ hashStruct(message)`\n    const parts = ['0x19', '0x01'];\n    if (domain)\n        parts.push(hashDomain({\n            domain,\n            types,\n        }));\n    if (primaryType !== 'EIP712Domain')\n        parts.push(hashStruct({\n            data: message,\n            primaryType,\n            types,\n        }));\n    return _Hex_js__WEBPACK_IMPORTED_MODULE_1__.concat(...parts);\n}\n/**\n * Encodes [EIP-712 Typed Data](https://eips.ethereum.org/EIPS/eip-712) schema for the provided primaryType.\n *\n * @example\n * ```ts twoslash\n * import { TypedData } from 'ox'\n *\n * TypedData.encodeType({\n *   types: {\n *     Foo: [\n *       { name: 'address', type: 'address' },\n *       { name: 'name', type: 'string' },\n *       { name: 'foo', type: 'string' },\n *     ],\n *   },\n *   primaryType: 'Foo',\n * })\n * // @log: 'Foo(address address,string name,string foo)'\n * ```\n *\n * @param value - The Typed Data schema.\n * @returns The encoded type.\n */\nfunction encodeType(value) {\n    const { primaryType, types } = value;\n    let result = '';\n    const unsortedDeps = findTypeDependencies({ primaryType, types });\n    unsortedDeps.delete(primaryType);\n    const deps = [primaryType, ...Array.from(unsortedDeps).sort()];\n    for (const type of deps) {\n        result += `${type}(${(types[type] ?? [])\n            .map(({ name, type: t }) => `${t} ${name}`)\n            .join(',')})`;\n    }\n    return result;\n}\n/**\n * Gets [EIP-712 Typed Data](https://eips.ethereum.org/EIPS/eip-712) schema for EIP-721 domain.\n *\n * @example\n * ```ts twoslash\n * import { TypedData } from 'ox'\n *\n * TypedData.extractEip712DomainTypes({\n *   name: 'Ether!',\n *   version: '1',\n *   chainId: 1,\n *   verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC',\n * })\n * // @log: [\n * // @log:   { 'name': 'name', 'type': 'string' },\n * // @log:   { 'name': 'version', 'type': 'string' },\n * // @log:   { 'name': 'chainId', 'type': 'uint256' },\n * // @log:   { 'name': 'verifyingContract', 'type': 'address' },\n * // @log: ]\n * ```\n *\n * @param domain - The EIP-712 domain.\n * @returns The EIP-712 domain schema.\n */\nfunction extractEip712DomainTypes(domain) {\n    return [\n        typeof domain?.name === 'string' && { name: 'name', type: 'string' },\n        domain?.version && { name: 'version', type: 'string' },\n        typeof domain?.chainId === 'number' && {\n            name: 'chainId',\n            type: 'uint256',\n        },\n        domain?.verifyingContract && {\n            name: 'verifyingContract',\n            type: 'address',\n        },\n        domain?.salt && { name: 'salt', type: 'bytes32' },\n    ].filter(Boolean);\n}\n/**\n * Gets the payload to use for signing typed data in [EIP-712 format](https://eips.ethereum.org/EIPS/eip-712).\n *\n * @example\n * ```ts twoslash\n * import { Secp256k1, TypedData, Hash } from 'ox'\n *\n * const payload = TypedData.getSignPayload({ // [!code focus:99]\n *   domain: {\n *     name: 'Ether Mail',\n *     version: '1',\n *     chainId: 1,\n *     verifyingContract: '0x0000000000000000000000000000000000000000',\n *   },\n *   types: {\n *     Person: [\n *       { name: 'name', type: 'string' },\n *       { name: 'wallet', type: 'address' },\n *     ],\n *     Mail: [\n *       { name: 'from', type: 'Person' },\n *       { name: 'to', type: 'Person' },\n *       { name: 'contents', type: 'string' },\n *     ],\n *   },\n *   primaryType: 'Mail',\n *   message: {\n *     from: {\n *       name: 'Cow',\n *       wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n *     },\n *     to: {\n *       name: 'Bob',\n *       wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n *     },\n *     contents: 'Hello, Bob!',\n *   },\n * })\n *\n * const signature = Secp256k1.sign({ payload, privateKey: '0x...' })\n * ```\n *\n * @param value - The typed data to get the sign payload for.\n * @returns The payload to use for signing.\n */\nfunction getSignPayload(value) {\n    return _Hash_js__WEBPACK_IMPORTED_MODULE_3__.keccak256(encode(value));\n}\n/**\n * Hashes [EIP-712 Typed Data](https://eips.ethereum.org/EIPS/eip-712) domain.\n *\n * @example\n * ```ts twoslash\n * import { TypedData } from 'ox'\n *\n * TypedData.hashDomain({\n *   domain: {\n *     name: 'Ether Mail',\n *     version: '1',\n *     chainId: 1,\n *     verifyingContract: '0x0000000000000000000000000000000000000000',\n *   },\n * })\n * // @log: '0x6192106f129ce05c9075d319c1fa6ea9b3ae37cbd0c1ef92e2be7137bb07baa1'\n * ```\n *\n * @param value - The Typed Data domain and types.\n * @returns The hashed domain.\n */\nfunction hashDomain(value) {\n    const { domain, types } = value;\n    return hashStruct({\n        data: domain,\n        primaryType: 'EIP712Domain',\n        types: {\n            ...types,\n            EIP712Domain: types?.EIP712Domain || extractEip712DomainTypes(domain),\n        },\n    });\n}\n/**\n * Hashes [EIP-712 Typed Data](https://eips.ethereum.org/EIPS/eip-712) struct.\n *\n * @example\n * ```ts twoslash\n * import { TypedData } from 'ox'\n *\n * TypedData.hashStruct({\n *   types: {\n *     Foo: [\n *       { name: 'address', type: 'address' },\n *       { name: 'name', type: 'string' },\n *       { name: 'foo', type: 'string' },\n *     ],\n *   },\n *   primaryType: 'Foo',\n *   data: {\n *     address: '0xb9CAB4F0E46F7F6b1024b5A7463734fa68E633f9',\n *     name: 'jxom',\n *     foo: '0xb9CAB4F0E46F7F6b1024b5A7463734fa68E633f9',\n *   },\n * })\n * // @log: '0x996fb3b6d48c50312d69abdd4c1b6fb02057c85aa86bb8d04c6f023326a168ce'\n * ```\n *\n * @param value - The Typed Data struct to hash.\n * @returns The hashed Typed Data struct.\n */\nfunction hashStruct(value) {\n    const { data, primaryType, types } = value;\n    const encoded = encodeData({\n        data,\n        primaryType,\n        types,\n    });\n    return _Hash_js__WEBPACK_IMPORTED_MODULE_3__.keccak256(encoded);\n}\n/**\n * Serializes [EIP-712 Typed Data](https://eips.ethereum.org/EIPS/eip-712) schema into string.\n *\n * @example\n * ```ts twoslash\n * import { TypedData } from 'ox'\n *\n * TypedData.serialize({\n *   domain: {\n *     name: 'Ether!',\n *     version: '1',\n *     chainId: 1,\n *     verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC',\n *   },\n *   primaryType: 'Foo',\n *   types: {\n *     Foo: [\n *       { name: 'address', type: 'address' },\n *       { name: 'name', type: 'string' },\n *       { name: 'foo', type: 'string' },\n *     ],\n *   },\n *   message: {\n *     address: '0xb9CAB4F0E46F7F6b1024b5A7463734fa68E633f9',\n *     name: 'jxom',\n *     foo: '0xb9CAB4F0E46F7F6b1024b5A7463734fa68E633f9',\n *   },\n * })\n * // @log: \"{\"domain\":{},\"message\":{\"address\":\"0xb9cab4f0e46f7f6b1024b5a7463734fa68e633f9\",\"name\":\"jxom\",\"foo\":\"0xb9CAB4F0E46F7F6b1024b5A7463734fa68E633f9\"},\"primaryType\":\"Foo\",\"types\":{\"Foo\":[{\"name\":\"address\",\"type\":\"address\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"foo\",\"type\":\"string\"}]}}\"\n * ```\n *\n * @param value - The Typed Data schema to serialize.\n * @returns The serialized Typed Data schema. w\n */\nfunction serialize(value) {\n    const { domain: domain_, message: message_, primaryType, types, } = value;\n    const normalizeData = (struct, value) => {\n        const data = { ...value };\n        for (const param of struct) {\n            const { name, type } = param;\n            if (type === 'address')\n                data[name] = data[name].toLowerCase();\n        }\n        return data;\n    };\n    const domain = (() => {\n        if (!domain_)\n            return {};\n        const type = types.EIP712Domain ?? extractEip712DomainTypes(domain_);\n        return normalizeData(type, domain_);\n    })();\n    const message = (() => {\n        if (primaryType === 'EIP712Domain')\n            return undefined;\n        if (!types[primaryType])\n            return {};\n        return normalizeData(types[primaryType], message_);\n    })();\n    return _Json_js__WEBPACK_IMPORTED_MODULE_4__.stringify({ domain, message, primaryType, types }, (_, value) => {\n        if (typeof value === 'bigint')\n            return value.toString();\n        return value;\n    });\n}\n/**\n * Checks if [EIP-712 Typed Data](https://eips.ethereum.org/EIPS/eip-712) is valid.\n *\n * @example\n * ```ts twoslash\n * import { TypedData } from 'ox'\n *\n * const valid = TypedData.validate({\n *   domain: {\n *     name: 'Ether!',\n *     version: '1',\n *     chainId: 1,\n *     verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC',\n *   },\n *   primaryType: 'Foo',\n *   types: {\n *     Foo: [\n *       { name: 'address', type: 'address' },\n *       { name: 'name', type: 'string' },\n *       { name: 'foo', type: 'string' },\n *     ],\n *   },\n *   message: {\n *     address: '0xb9CAB4F0E46F7F6b1024b5A7463734fa68E633f9',\n *     name: 'jxom',\n *     foo: '0xb9CAB4F0E46F7F6b1024b5A7463734fa68E633f9',\n *   },\n * })\n * // @log: true\n * ```\n *\n * @param value - The Typed Data to validate.\n */\nfunction validate(value) {\n    try {\n        assert(value);\n        return true;\n    }\n    catch {\n        return false;\n    }\n}\n/** Thrown when the bytes size of a typed data value does not match the expected size. */\nclass BytesSizeMismatchError extends _Errors_js__WEBPACK_IMPORTED_MODULE_5__.BaseError {\n    constructor({ expectedSize, givenSize, }) {\n        super(`Expected bytes${expectedSize}, got bytes${givenSize}.`);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'TypedData.BytesSizeMismatchError'\n        });\n    }\n}\n/** Thrown when the domain is invalid. */\nclass InvalidDomainError extends _Errors_js__WEBPACK_IMPORTED_MODULE_5__.BaseError {\n    constructor({ domain }) {\n        super(`Invalid domain \"${_Json_js__WEBPACK_IMPORTED_MODULE_4__.stringify(domain)}\".`, {\n            metaMessages: ['Must be a valid EIP-712 domain.'],\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'TypedData.InvalidDomainError'\n        });\n    }\n}\n/** Thrown when the primary type of a typed data value is invalid. */\nclass InvalidPrimaryTypeError extends _Errors_js__WEBPACK_IMPORTED_MODULE_5__.BaseError {\n    constructor({ primaryType, types, }) {\n        super(`Invalid primary type \\`${primaryType}\\` must be one of \\`${JSON.stringify(Object.keys(types))}\\`.`, {\n            metaMessages: ['Check that the primary type is a key in `types`.'],\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'TypedData.InvalidPrimaryTypeError'\n        });\n    }\n}\n/** Thrown when the struct type is not a valid type. */\nclass InvalidStructTypeError extends _Errors_js__WEBPACK_IMPORTED_MODULE_5__.BaseError {\n    constructor({ type }) {\n        super(`Struct type \"${type}\" is invalid.`, {\n            metaMessages: ['Struct type must not be a Solidity type.'],\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'TypedData.InvalidStructTypeError'\n        });\n    }\n}\n/** @internal */\nfunction encodeData(value) {\n    const { data, primaryType, types } = value;\n    const encodedTypes = [{ type: 'bytes32' }];\n    const encodedValues = [hashType({ primaryType, types })];\n    for (const field of types[primaryType] ?? []) {\n        const [type, value] = encodeField({\n            types,\n            name: field.name,\n            type: field.type,\n            value: data[field.name],\n        });\n        encodedTypes.push(type);\n        encodedValues.push(value);\n    }\n    return _AbiParameters_js__WEBPACK_IMPORTED_MODULE_6__.encode(encodedTypes, encodedValues);\n}\n/** @internal */\nfunction hashType(value) {\n    const { primaryType, types } = value;\n    const encodedHashType = _Hex_js__WEBPACK_IMPORTED_MODULE_1__.fromString(encodeType({ primaryType, types }));\n    return _Hash_js__WEBPACK_IMPORTED_MODULE_3__.keccak256(encodedHashType);\n}\n/** @internal */\nfunction encodeField(properties) {\n    let { types, name, type, value } = properties;\n    if (types[type] !== undefined)\n        return [\n            { type: 'bytes32' },\n            _Hash_js__WEBPACK_IMPORTED_MODULE_3__.keccak256(encodeData({ data: value, primaryType: type, types })),\n        ];\n    if (type === 'bytes') {\n        const prepend = value.length % 2 ? '0' : '';\n        value = `0x${prepend + value.slice(2)}`;\n        return [{ type: 'bytes32' }, _Hash_js__WEBPACK_IMPORTED_MODULE_3__.keccak256(value, { as: 'Hex' })];\n    }\n    if (type === 'string')\n        return [\n            { type: 'bytes32' },\n            _Hash_js__WEBPACK_IMPORTED_MODULE_3__.keccak256(_Bytes_js__WEBPACK_IMPORTED_MODULE_7__.fromString(value), { as: 'Hex' }),\n        ];\n    if (type.lastIndexOf(']') === type.length - 1) {\n        const parsedType = type.slice(0, type.lastIndexOf('['));\n        const typeValuePairs = value.map((item) => encodeField({\n            name,\n            type: parsedType,\n            types,\n            value: item,\n        }));\n        return [\n            { type: 'bytes32' },\n            _Hash_js__WEBPACK_IMPORTED_MODULE_3__.keccak256(_AbiParameters_js__WEBPACK_IMPORTED_MODULE_6__.encode(typeValuePairs.map(([t]) => t), typeValuePairs.map(([, v]) => v))),\n        ];\n    }\n    return [{ type }, value];\n}\n/** @internal */\nfunction findTypeDependencies(value, results = new Set()) {\n    const { primaryType: primaryType_, types } = value;\n    const match = primaryType_.match(/^\\w*/u);\n    const primaryType = match?.[0];\n    if (results.has(primaryType) || types[primaryType] === undefined)\n        return results;\n    results.add(primaryType);\n    for (const field of types[primaryType])\n        findTypeDependencies({ primaryType: field.type, types }, results);\n    return results;\n}\n/** @internal */\nfunction validateReference(type) {\n    // Struct type must not be a Solidity type.\n    if (type === 'address' ||\n        type === 'bool' ||\n        type === 'string' ||\n        type.startsWith('bytes') ||\n        type.startsWith('uint') ||\n        type.startsWith('int'))\n        throw new InvalidStructTypeError({ type });\n}\n//# sourceMappingURL=TypedData.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ox/_esm/core/TypedData.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ox/_esm/core/ValidatorData.js":
/*!****************************************************!*\
  !*** ./node_modules/ox/_esm/core/ValidatorData.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   encode: () => (/* binding */ encode),\n/* harmony export */   getSignPayload: () => (/* binding */ getSignPayload)\n/* harmony export */ });\n/* harmony import */ var _Hash_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Hash.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Hash.js\");\n/* harmony import */ var _Hex_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Hex.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Hex.js\");\n\n\n/**\n * Encodes data with a validator in [ERC-191 format](https://eips.ethereum.org/EIPS/eip-191#version-0x00): `0x19 ‖ 0x00 ‖ <intended validator address> ‖ <data to sign>`.\n *\n * @example\n * ```ts twoslash\n * import { Hex, ValidatorData } from 'ox'\n *\n * const encoded = ValidatorData.encode({\n *   data: Hex.fromString('hello world'),\n *   validator: '0xd8da6bf26964af9d7eed9e03e53415d37aa96045',\n * })\n * // @log: '0x1900d8da6bf26964af9d7eed9e03e53415d37aa9604568656c6c6f20776f726c64'\n * // @log: '0x19 ‖ 0x00 ‖ 0xd8da6bf26964af9d7eed9e03e53415d37aa96045 ‖ \"hello world\"'\n * ```\n *\n * @param value - The data to encode.\n * @returns The encoded personal sign message.\n */\nfunction encode(value) {\n    const { data, validator } = value;\n    return _Hex_js__WEBPACK_IMPORTED_MODULE_0__.concat(\n    // Validator Data Format: `0x19 ‖ 0x00 ‖ <intended validator address> ‖ <data to sign>`\n    '0x19', '0x00', validator, _Hex_js__WEBPACK_IMPORTED_MODULE_0__.from(data));\n}\n/**\n * Gets the payload to use for signing [ERC-191 formatted](https://eips.ethereum.org/EIPS/eip-191#0x00) data with an intended validator.\n *\n * @example\n * ```ts twoslash\n * import { Hex, Secp256k1, ValidatorData } from 'ox'\n *\n * const payload = ValidatorData.getSignPayload({ // [!code focus]\n *   data: Hex.fromString('hello world'), // [!code focus]\n *   validator: '0xd8da6bf26964af9d7eed9e03e53415d37aa96045', // [!code focus]\n * }) // [!code focus]\n *\n * const signature = Secp256k1.sign({ payload, privateKey: '0x...' })\n * ```\n *\n * @param value - The data to get the sign payload for.\n * @returns The payload to use for signing.\n */\nfunction getSignPayload(value) {\n    return _Hash_js__WEBPACK_IMPORTED_MODULE_1__.keccak256(encode(value));\n}\n//# sourceMappingURL=ValidatorData.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9veC9fZXNtL2NvcmUvVmFsaWRhdG9yRGF0YS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQWtDO0FBQ0Y7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVkscUJBQXFCO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCxZQUFZLGtCQUFrQjtBQUM5QixXQUFXLDJDQUFVO0FBQ3JCO0FBQ0EsK0JBQStCLHlDQUFRO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksZ0NBQWdDO0FBQzVDO0FBQ0Esa0RBQWtEO0FBQ2xEO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQSxzQ0FBc0MsOEJBQThCO0FBQ3BFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQLFdBQVcsK0NBQWM7QUFDekI7QUFDQSIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxjaGFuZFxcRG93bmxvYWRzXFxqb2hud3JpY2hraWRpbnRvcml6elxcbm9kZV9tb2R1bGVzXFxveFxcX2VzbVxcY29yZVxcVmFsaWRhdG9yRGF0YS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBIYXNoIGZyb20gJy4vSGFzaC5qcyc7XG5pbXBvcnQgKiBhcyBIZXggZnJvbSAnLi9IZXguanMnO1xuLyoqXG4gKiBFbmNvZGVzIGRhdGEgd2l0aCBhIHZhbGlkYXRvciBpbiBbRVJDLTE5MSBmb3JtYXRdKGh0dHBzOi8vZWlwcy5ldGhlcmV1bS5vcmcvRUlQUy9laXAtMTkxI3ZlcnNpb24tMHgwMCk6IGAweDE5IOKAliAweDAwIOKAliA8aW50ZW5kZWQgdmFsaWRhdG9yIGFkZHJlc3M+IOKAliA8ZGF0YSB0byBzaWduPmAuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHRzIHR3b3NsYXNoXG4gKiBpbXBvcnQgeyBIZXgsIFZhbGlkYXRvckRhdGEgfSBmcm9tICdveCdcbiAqXG4gKiBjb25zdCBlbmNvZGVkID0gVmFsaWRhdG9yRGF0YS5lbmNvZGUoe1xuICogICBkYXRhOiBIZXguZnJvbVN0cmluZygnaGVsbG8gd29ybGQnKSxcbiAqICAgdmFsaWRhdG9yOiAnMHhkOGRhNmJmMjY5NjRhZjlkN2VlZDllMDNlNTM0MTVkMzdhYTk2MDQ1JyxcbiAqIH0pXG4gKiAvLyBAbG9nOiAnMHgxOTAwZDhkYTZiZjI2OTY0YWY5ZDdlZWQ5ZTAzZTUzNDE1ZDM3YWE5NjA0NTY4NjU2YzZjNmYyMDc3NmY3MjZjNjQnXG4gKiAvLyBAbG9nOiAnMHgxOSDigJYgMHgwMCDigJYgMHhkOGRhNmJmMjY5NjRhZjlkN2VlZDllMDNlNTM0MTVkMzdhYTk2MDQ1IOKAliBcImhlbGxvIHdvcmxkXCInXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gdmFsdWUgLSBUaGUgZGF0YSB0byBlbmNvZGUuXG4gKiBAcmV0dXJucyBUaGUgZW5jb2RlZCBwZXJzb25hbCBzaWduIG1lc3NhZ2UuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBlbmNvZGUodmFsdWUpIHtcbiAgICBjb25zdCB7IGRhdGEsIHZhbGlkYXRvciB9ID0gdmFsdWU7XG4gICAgcmV0dXJuIEhleC5jb25jYXQoXG4gICAgLy8gVmFsaWRhdG9yIERhdGEgRm9ybWF0OiBgMHgxOSDigJYgMHgwMCDigJYgPGludGVuZGVkIHZhbGlkYXRvciBhZGRyZXNzPiDigJYgPGRhdGEgdG8gc2lnbj5gXG4gICAgJzB4MTknLCAnMHgwMCcsIHZhbGlkYXRvciwgSGV4LmZyb20oZGF0YSkpO1xufVxuLyoqXG4gKiBHZXRzIHRoZSBwYXlsb2FkIHRvIHVzZSBmb3Igc2lnbmluZyBbRVJDLTE5MSBmb3JtYXR0ZWRdKGh0dHBzOi8vZWlwcy5ldGhlcmV1bS5vcmcvRUlQUy9laXAtMTkxIzB4MDApIGRhdGEgd2l0aCBhbiBpbnRlbmRlZCB2YWxpZGF0b3IuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHRzIHR3b3NsYXNoXG4gKiBpbXBvcnQgeyBIZXgsIFNlY3AyNTZrMSwgVmFsaWRhdG9yRGF0YSB9IGZyb20gJ294J1xuICpcbiAqIGNvbnN0IHBheWxvYWQgPSBWYWxpZGF0b3JEYXRhLmdldFNpZ25QYXlsb2FkKHsgLy8gWyFjb2RlIGZvY3VzXVxuICogICBkYXRhOiBIZXguZnJvbVN0cmluZygnaGVsbG8gd29ybGQnKSwgLy8gWyFjb2RlIGZvY3VzXVxuICogICB2YWxpZGF0b3I6ICcweGQ4ZGE2YmYyNjk2NGFmOWQ3ZWVkOWUwM2U1MzQxNWQzN2FhOTYwNDUnLCAvLyBbIWNvZGUgZm9jdXNdXG4gKiB9KSAvLyBbIWNvZGUgZm9jdXNdXG4gKlxuICogY29uc3Qgc2lnbmF0dXJlID0gU2VjcDI1NmsxLnNpZ24oeyBwYXlsb2FkLCBwcml2YXRlS2V5OiAnMHguLi4nIH0pXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gdmFsdWUgLSBUaGUgZGF0YSB0byBnZXQgdGhlIHNpZ24gcGF5bG9hZCBmb3IuXG4gKiBAcmV0dXJucyBUaGUgcGF5bG9hZCB0byB1c2UgZm9yIHNpZ25pbmcuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRTaWduUGF5bG9hZCh2YWx1ZSkge1xuICAgIHJldHVybiBIYXNoLmtlY2NhazI1NihlbmNvZGUodmFsdWUpKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVZhbGlkYXRvckRhdGEuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ox/_esm/core/ValidatorData.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ox/_esm/core/Value.js":
/*!********************************************!*\
  !*** ./node_modules/ox/_esm/core/Value.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InvalidDecimalNumberError: () => (/* binding */ InvalidDecimalNumberError),\n/* harmony export */   exponents: () => (/* binding */ exponents),\n/* harmony export */   format: () => (/* binding */ format),\n/* harmony export */   formatEther: () => (/* binding */ formatEther),\n/* harmony export */   formatGwei: () => (/* binding */ formatGwei),\n/* harmony export */   from: () => (/* binding */ from),\n/* harmony export */   fromEther: () => (/* binding */ fromEther),\n/* harmony export */   fromGwei: () => (/* binding */ fromGwei)\n/* harmony export */ });\n/* harmony import */ var _Errors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Errors.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Errors.js\");\n\n/** @see https://ethereum.github.io/yellowpaper/paper.pdf */\nconst exponents = {\n    wei: 0,\n    gwei: 9,\n    szabo: 12,\n    finney: 15,\n    ether: 18,\n};\n/**\n * Formats a `bigint` Value to its string representation (divided by the given exponent).\n *\n * @example\n * ```ts twoslash\n * import { Value } from 'ox'\n *\n * Value.format(420_000_000_000n, 9)\n * // @log: '420'\n * ```\n *\n * @param value - The `bigint` Value to format.\n * @param decimals - The exponent to divide the `bigint` Value by.\n * @returns The string representation of the Value.\n */\nfunction format(value, decimals = 0) {\n    let display = value.toString();\n    const negative = display.startsWith('-');\n    if (negative)\n        display = display.slice(1);\n    display = display.padStart(decimals, '0');\n    let [integer, fraction] = [\n        display.slice(0, display.length - decimals),\n        display.slice(display.length - decimals),\n    ];\n    fraction = fraction.replace(/(0+)$/, '');\n    return `${negative ? '-' : ''}${integer || '0'}${fraction ? `.${fraction}` : ''}`;\n}\n/**\n * Formats a `bigint` Value (default: wei) to a string representation of Ether.\n *\n * @example\n * ```ts twoslash\n * import { Value } from 'ox'\n *\n * Value.formatEther(1_000_000_000_000_000_000n)\n * // @log: '1'\n * ```\n *\n * @param wei - The Value to format.\n * @param unit - The unit to format the Value in. @default 'wei'.\n * @returns The Ether string representation of the Value.\n */\nfunction formatEther(wei, unit = 'wei') {\n    return format(wei, exponents.ether - exponents[unit]);\n}\n/**\n * Formats a `bigint` Value (default: wei) to a string representation of Gwei.\n *\n * @example\n * ```ts twoslash\n * import { Value } from 'ox'\n *\n * Value.formatGwei(1_000_000_000n)\n * // @log: '1'\n * ```\n *\n * @param wei - The Value to format.\n * @param unit - The unit to format the Value in. @default 'wei'.\n * @returns The Gwei string representation of the Value.\n */\nfunction formatGwei(wei, unit = 'wei') {\n    return format(wei, exponents.gwei - exponents[unit]);\n}\n/**\n * Parses a `string` representation of a Value to `bigint` (multiplied by the given exponent).\n *\n * @example\n * ```ts twoslash\n * import { Value } from 'ox'\n *\n * Value.from('420', 9)\n * // @log: 420000000000n\n * ```\n *\n * @param value - The string representation of the Value.\n * @param decimals - The exponent to multiply the Value by.\n * @returns The `bigint` representation of the Value.\n */\nfunction from(value, decimals = 0) {\n    if (!/^(-?)([0-9]*)\\.?([0-9]*)$/.test(value))\n        throw new InvalidDecimalNumberError({ value });\n    let [integer = '', fraction = '0'] = value.split('.');\n    const negative = integer.startsWith('-');\n    if (negative)\n        integer = integer.slice(1);\n    // trim trailing zeros.\n    fraction = fraction.replace(/(0+)$/, '');\n    // round off if the fraction is larger than the number of decimals.\n    if (decimals === 0) {\n        if (Math.round(Number(`.${fraction}`)) === 1)\n            integer = `${BigInt(integer) + 1n}`;\n        fraction = '';\n    }\n    else if (fraction.length > decimals) {\n        const [left, unit, right] = [\n            fraction.slice(0, decimals - 1),\n            fraction.slice(decimals - 1, decimals),\n            fraction.slice(decimals),\n        ];\n        const rounded = Math.round(Number(`${unit}.${right}`));\n        if (rounded > 9)\n            fraction = `${BigInt(left) + BigInt(1)}0`.padStart(left.length + 1, '0');\n        else\n            fraction = `${left}${rounded}`;\n        if (fraction.length > decimals) {\n            fraction = fraction.slice(1);\n            integer = `${BigInt(integer) + 1n}`;\n        }\n        fraction = fraction.slice(0, decimals);\n    }\n    else {\n        fraction = fraction.padEnd(decimals, '0');\n    }\n    return BigInt(`${negative ? '-' : ''}${integer}${fraction}`);\n}\n/**\n * Parses a string representation of Ether to a `bigint` Value (default: wei).\n *\n * @example\n * ```ts twoslash\n * import { Value } from 'ox'\n *\n * Value.fromEther('420')\n * // @log: 420000000000000000000n\n * ```\n *\n * @param ether - String representation of Ether.\n * @param unit - The unit to parse to. @default 'wei'.\n * @returns A `bigint` Value.\n */\nfunction fromEther(ether, unit = 'wei') {\n    return from(ether, exponents.ether - exponents[unit]);\n}\n/**\n * Parses a string representation of Gwei to a `bigint` Value (default: wei).\n *\n * @example\n * ```ts twoslash\n * import { Value } from 'ox'\n *\n * Value.fromGwei('420')\n * // @log: 420000000000n\n * ```\n *\n * @param gwei - String representation of Gwei.\n * @param unit - The unit to parse to. @default 'wei'.\n * @returns A `bigint` Value.\n */\nfunction fromGwei(gwei, unit = 'wei') {\n    return from(gwei, exponents.gwei - exponents[unit]);\n}\n/**\n * Thrown when a value is not a valid decimal number.\n *\n * @example\n * ```ts twoslash\n * import { Value } from 'ox'\n *\n * Value.fromEther('123.456.789')\n * // @error: Value.InvalidDecimalNumberError: Value `123.456.789` is not a valid decimal number.\n * ```\n */\nclass InvalidDecimalNumberError extends _Errors_js__WEBPACK_IMPORTED_MODULE_0__.BaseError {\n    constructor({ value }) {\n        super(`Value \\`${value}\\` is not a valid decimal number.`);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'Value.InvalidDecimalNumberError'\n        });\n    }\n}\n//# sourceMappingURL=Value.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ox/_esm/core/Value.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ox/_esm/core/WebAuthnP256.js":
/*!***************************************************!*\
  !*** ./node_modules/ox/_esm/core/WebAuthnP256.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CredentialCreationFailedError: () => (/* binding */ CredentialCreationFailedError),\n/* harmony export */   CredentialRequestFailedError: () => (/* binding */ CredentialRequestFailedError),\n/* harmony export */   createChallenge: () => (/* binding */ createChallenge),\n/* harmony export */   createCredential: () => (/* binding */ createCredential),\n/* harmony export */   getAuthenticatorData: () => (/* binding */ getAuthenticatorData),\n/* harmony export */   getClientDataJSON: () => (/* binding */ getClientDataJSON),\n/* harmony export */   getCredentialCreationOptions: () => (/* binding */ getCredentialCreationOptions),\n/* harmony export */   getCredentialRequestOptions: () => (/* binding */ getCredentialRequestOptions),\n/* harmony export */   getSignPayload: () => (/* binding */ getSignPayload),\n/* harmony export */   sign: () => (/* binding */ sign),\n/* harmony export */   verify: () => (/* binding */ verify)\n/* harmony export */ });\n/* harmony import */ var _Base64_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Base64.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Base64.js\");\n/* harmony import */ var _Bytes_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Bytes.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Bytes.js\");\n/* harmony import */ var _Errors_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Errors.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Errors.js\");\n/* harmony import */ var _Hash_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Hash.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Hash.js\");\n/* harmony import */ var _Hex_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Hex.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Hex.js\");\n/* harmony import */ var _P256_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./P256.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/P256.js\");\n/* harmony import */ var _internal_webauthn_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/webauthn.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/internal/webauthn.js\");\n\n\n\n\n\n\n\nconst createChallenge = Uint8Array.from([\n    105, 171, 180, 181, 160, 222, 75, 198, 42, 42, 32, 31, 141, 37, 186, 233,\n]);\n/**\n * Creates a new WebAuthn P256 Credential, which can be stored and later used for signing.\n *\n * @example\n * ```ts twoslash\n * import { WebAuthnP256 } from 'ox'\n *\n * const credential = await WebAuthnP256.createCredential({ name: 'Example' }) // [!code focus]\n * // @log: {\n * // @log:   id: 'oZ48...',\n * // @log:   publicKey: { x: 51421...5123n, y: 12345...6789n },\n * // @log:   raw: PublicKeyCredential {},\n * // @log: }\n *\n * const { metadata, signature } = await WebAuthnP256.sign({\n *   credentialId: credential.id,\n *   challenge: '0xdeadbeef',\n * })\n * ```\n *\n * @param options - Credential creation options.\n * @returns A WebAuthn P256 credential.\n */\nasync function createCredential(options) {\n    const { createFn = window.navigator.credentials.create.bind(window.navigator.credentials), ...rest } = options;\n    const creationOptions = getCredentialCreationOptions(rest);\n    try {\n        const credential = (await createFn(creationOptions));\n        if (!credential)\n            throw new CredentialCreationFailedError();\n        const response = credential.response;\n        const publicKey = await _internal_webauthn_js__WEBPACK_IMPORTED_MODULE_0__.parseCredentialPublicKey(response);\n        return {\n            id: credential.id,\n            publicKey,\n            raw: credential,\n        };\n    }\n    catch (error) {\n        throw new CredentialCreationFailedError({\n            cause: error,\n        });\n    }\n}\n/**\n * Gets the authenticator data which contains information about the\n * processing of an authenticator request (ie. from `WebAuthnP256.sign`).\n *\n * :::warning\n *\n * This function is mainly for testing purposes or for manually constructing\n * autenticator data. In most cases you will not need this function.\n * `authenticatorData` is typically returned as part of the\n * {@link ox#WebAuthnP256.(sign:function)} response (ie. an authenticator response).\n *\n * :::\n *\n * @example\n * ```ts twoslash\n * import { WebAuthnP256 } from 'ox'\n *\n * const authenticatorData = WebAuthnP256.getAuthenticatorData({\n *   rpId: 'example.com',\n *   signCount: 420,\n * })\n * // @log: \"0xa379a6f6eeafb9a55e378c118034e2751e682fab9f2d30ab13d2125586ce194705000001a4\"\n * ```\n *\n * @param options - Options to construct the authenticator data.\n * @returns The authenticator data.\n */\nfunction getAuthenticatorData(options = {}) {\n    const { flag = 5, rpId = window.location.hostname, signCount = 0 } = options;\n    const rpIdHash = _Hash_js__WEBPACK_IMPORTED_MODULE_1__.sha256(_Hex_js__WEBPACK_IMPORTED_MODULE_2__.fromString(rpId));\n    const flag_bytes = _Hex_js__WEBPACK_IMPORTED_MODULE_2__.fromNumber(flag, { size: 1 });\n    const signCount_bytes = _Hex_js__WEBPACK_IMPORTED_MODULE_2__.fromNumber(signCount, { size: 4 });\n    return _Hex_js__WEBPACK_IMPORTED_MODULE_2__.concat(rpIdHash, flag_bytes, signCount_bytes);\n}\n/**\n * Constructs the Client Data in stringified JSON format which represents client data that\n * was passed to `credentials.get()` in {@link ox#WebAuthnP256.(sign:function)}.\n *\n * :::warning\n *\n * This function is mainly for testing purposes or for manually constructing\n * client data. In most cases you will not need this function.\n * `clientDataJSON` is typically returned as part of the\n * {@link ox#WebAuthnP256.(sign:function)} response (ie. an authenticator response).\n *\n * :::\n *\n * @example\n * ```ts twoslash\n * import { WebAuthnP256 } from 'ox'\n *\n * const clientDataJSON = WebAuthnP256.getClientDataJSON({\n *   challenge: '0xdeadbeef',\n *   origin: 'https://example.com',\n * })\n * // @log: \"{\"type\":\"webauthn.get\",\"challenge\":\"3q2-7w\",\"origin\":\"https://example.com\",\"crossOrigin\":false}\"\n * ```\n *\n * @param options - Options to construct the client data.\n * @returns The client data.\n */\nfunction getClientDataJSON(options) {\n    const { challenge, crossOrigin = false, extraClientData, origin = window.location.origin, } = options;\n    return JSON.stringify({\n        type: 'webauthn.get',\n        challenge: _Base64_js__WEBPACK_IMPORTED_MODULE_3__.fromHex(challenge, { url: true, pad: false }),\n        origin,\n        crossOrigin,\n        ...extraClientData,\n    });\n}\n/**\n * Returns the creation options for a P256 WebAuthn Credential to be used with\n * the Web Authentication API.\n *\n * @example\n * ```ts twoslash\n * import { WebAuthnP256 } from 'ox'\n *\n * const options = WebAuthnP256.getCredentialCreationOptions({ name: 'Example' })\n *\n * const credential = await window.navigator.credentials.create(options)\n * ```\n *\n * @param options - Options.\n * @returns The credential creation options.\n */\nfunction getCredentialCreationOptions(options) {\n    const { attestation = 'none', authenticatorSelection = {\n        residentKey: 'preferred',\n        requireResidentKey: false,\n        userVerification: 'required',\n    }, challenge = createChallenge, excludeCredentialIds, name: name_, rp = {\n        id: window.location.hostname,\n        name: window.document.title,\n    }, user, extensions, } = options;\n    const name = (user?.name ?? name_);\n    return {\n        publicKey: {\n            attestation,\n            authenticatorSelection,\n            challenge,\n            ...(excludeCredentialIds\n                ? {\n                    excludeCredentials: excludeCredentialIds?.map((id) => ({\n                        id: _Base64_js__WEBPACK_IMPORTED_MODULE_3__.toBytes(id),\n                        type: 'public-key',\n                    })),\n                }\n                : {}),\n            pubKeyCredParams: [\n                {\n                    type: 'public-key',\n                    alg: -7, // p256\n                },\n            ],\n            rp,\n            user: {\n                id: user?.id ?? _Hash_js__WEBPACK_IMPORTED_MODULE_1__.keccak256(_Bytes_js__WEBPACK_IMPORTED_MODULE_4__.fromString(name), { as: 'Bytes' }),\n                name,\n                displayName: user?.displayName ?? name,\n            },\n            extensions,\n        },\n    };\n}\n/**\n * Returns the request options to sign a challenge with the Web Authentication API.\n *\n * @example\n * ```ts twoslash\n * import { WebAuthnP256 } from 'ox'\n *\n * const options = WebAuthnP256.getCredentialRequestOptions({\n *   challenge: '0xdeadbeef',\n * })\n *\n * const credential = await window.navigator.credentials.get(options)\n * ```\n *\n * @param options - Options.\n * @returns The credential request options.\n */\nfunction getCredentialRequestOptions(options) {\n    const { credentialId, challenge, rpId = window.location.hostname, userVerification = 'required', } = options;\n    return {\n        publicKey: {\n            ...(credentialId\n                ? {\n                    allowCredentials: Array.isArray(credentialId)\n                        ? credentialId.map((id) => ({\n                            id: _Base64_js__WEBPACK_IMPORTED_MODULE_3__.toBytes(id),\n                            type: 'public-key',\n                        }))\n                        : [\n                            {\n                                id: _Base64_js__WEBPACK_IMPORTED_MODULE_3__.toBytes(credentialId),\n                                type: 'public-key',\n                            },\n                        ],\n                }\n                : {}),\n            challenge: _Bytes_js__WEBPACK_IMPORTED_MODULE_4__.fromHex(challenge),\n            rpId,\n            userVerification,\n        },\n    };\n}\n/**\n * Constructs the final digest that was signed and computed by the authenticator. This payload includes\n * the cryptographic `challenge`, as well as authenticator metadata (`authenticatorData` + `clientDataJSON`).\n * This value can be also used with raw P256 verification (such as {@link ox#P256.(verify:function)} or\n * {@link ox#WebCryptoP256.(verify:function)}).\n *\n * :::warning\n *\n * This function is mainly for testing purposes or for manually constructing\n * signing payloads. In most cases you will not need this function and\n * instead use {@link ox#WebAuthnP256.(sign:function)}.\n *\n * :::\n *\n * @example\n * ```ts twoslash\n * import { WebAuthnP256, WebCryptoP256 } from 'ox'\n *\n * const { metadata, payload } = WebAuthnP256.getSignPayload({ // [!code focus]\n *   challenge: '0xdeadbeef', // [!code focus]\n * }) // [!code focus]\n * // @log: {\n * // @log:   metadata: {\n * // @log:     authenticatorData: \"0x49960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97630500000000\",\n * // @log:     challengeIndex: 23,\n * // @log:     clientDataJSON: \"{\"type\":\"webauthn.get\",\"challenge\":\"9jEFijuhEWrM4SOW-tChJbUEHEP44VcjcJ-Bqo1fTM8\",\"origin\":\"http://localhost:5173\",\"crossOrigin\":false}\",\n * // @log:     typeIndex: 1,\n * // @log:     userVerificationRequired: true,\n * // @log:   },\n * // @log:   payload: \"0x49960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d9763050000000045086dcb06a5f234db625bcdc94e657f86b76b6fd3eb9c30543eabc1e577a4b0\",\n * // @log: }\n *\n * const { publicKey, privateKey } = await WebCryptoP256.createKeyPair()\n *\n * const signature = await WebCryptoP256.sign({\n *   payload,\n *   privateKey,\n * })\n * ```\n *\n * @param options - Options to construct the signing payload.\n * @returns The signing payload.\n */\nfunction getSignPayload(options) {\n    const { challenge, crossOrigin, extraClientData, flag, origin, rpId, signCount, userVerification = 'required', } = options;\n    const authenticatorData = getAuthenticatorData({\n        flag,\n        rpId,\n        signCount,\n    });\n    const clientDataJSON = getClientDataJSON({\n        challenge,\n        crossOrigin,\n        extraClientData,\n        origin,\n    });\n    const clientDataJSONHash = _Hash_js__WEBPACK_IMPORTED_MODULE_1__.sha256(_Hex_js__WEBPACK_IMPORTED_MODULE_2__.fromString(clientDataJSON));\n    const challengeIndex = clientDataJSON.indexOf('\"challenge\"');\n    const typeIndex = clientDataJSON.indexOf('\"type\"');\n    const metadata = {\n        authenticatorData,\n        clientDataJSON,\n        challengeIndex,\n        typeIndex,\n        userVerificationRequired: userVerification === 'required',\n    };\n    const payload = _Hex_js__WEBPACK_IMPORTED_MODULE_2__.concat(authenticatorData, clientDataJSONHash);\n    return { metadata, payload };\n}\n/**\n * Signs a challenge using a stored WebAuthn P256 Credential. If no Credential is provided,\n * a prompt will be displayed for the user to select an existing Credential\n * that was previously registered.\n *\n * @example\n * ```ts twoslash\n * import { WebAuthnP256 } from 'ox'\n *\n * const credential = await WebAuthnP256.createCredential({\n *   name: 'Example',\n * })\n *\n * const { metadata, signature } = await WebAuthnP256.sign({ // [!code focus]\n *   credentialId: credential.id, // [!code focus]\n *   challenge: '0xdeadbeef', // [!code focus]\n * }) // [!code focus]\n * // @log: {\n * // @log:   metadata: {\n * // @log:     authenticatorData: '0x49960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97630500000000',\n * // @log:     clientDataJSON: '{\"type\":\"webauthn.get\",\"challenge\":\"9jEFijuhEWrM4SOW-tChJbUEHEP44VcjcJ-Bqo1fTM8\",\"origin\":\"http://localhost:5173\",\"crossOrigin\":false}',\n * // @log:     challengeIndex: 23,\n * // @log:     typeIndex: 1,\n * // @log:     userVerificationRequired: true,\n * // @log:   },\n * // @log:   signature: { r: 51231...4215n, s: 12345...6789n },\n * // @log: }\n * ```\n *\n * @param options - Options.\n * @returns The signature.\n */\nasync function sign(options) {\n    const { getFn = window.navigator.credentials.get.bind(window.navigator.credentials), ...rest } = options;\n    const requestOptions = getCredentialRequestOptions(rest);\n    try {\n        const credential = (await getFn(requestOptions));\n        if (!credential)\n            throw new CredentialRequestFailedError();\n        const response = credential.response;\n        const clientDataJSON = String.fromCharCode(...new Uint8Array(response.clientDataJSON));\n        const challengeIndex = clientDataJSON.indexOf('\"challenge\"');\n        const typeIndex = clientDataJSON.indexOf('\"type\"');\n        const signature = _internal_webauthn_js__WEBPACK_IMPORTED_MODULE_0__.parseAsn1Signature(new Uint8Array(response.signature));\n        return {\n            metadata: {\n                authenticatorData: _Hex_js__WEBPACK_IMPORTED_MODULE_2__.fromBytes(new Uint8Array(response.authenticatorData)),\n                clientDataJSON,\n                challengeIndex,\n                typeIndex,\n                userVerificationRequired: requestOptions.publicKey.userVerification === 'required',\n            },\n            signature,\n            raw: credential,\n        };\n    }\n    catch (error) {\n        throw new CredentialRequestFailedError({\n            cause: error,\n        });\n    }\n}\n/**\n * Verifies a signature using the Credential's public key and the challenge which was signed.\n *\n * @example\n * ```ts twoslash\n * import { WebAuthnP256 } from 'ox'\n *\n * const credential = await WebAuthnP256.createCredential({\n *   name: 'Example',\n * })\n *\n * const { metadata, signature } = await WebAuthnP256.sign({\n *   credentialId: credential.id,\n *   challenge: '0xdeadbeef',\n * })\n *\n * const result = await WebAuthnP256.verify({ // [!code focus]\n *   metadata, // [!code focus]\n *   challenge: '0xdeadbeef', // [!code focus]\n *   publicKey: credential.publicKey, // [!code focus]\n *   signature, // [!code focus]\n * }) // [!code focus]\n * // @log: true\n * ```\n *\n * @param options - Options.\n * @returns Whether the signature is valid.\n */\nfunction verify(options) {\n    const { challenge, hash = true, metadata, publicKey, signature } = options;\n    const { authenticatorData, challengeIndex, clientDataJSON, typeIndex, userVerificationRequired, } = metadata;\n    const authenticatorDataBytes = _Bytes_js__WEBPACK_IMPORTED_MODULE_4__.fromHex(authenticatorData);\n    // Check length of `authenticatorData`.\n    if (authenticatorDataBytes.length < 37)\n        return false;\n    const flag = authenticatorDataBytes[32];\n    // Verify that the UP bit of the flags in authData is set.\n    if ((flag & 0x01) !== 0x01)\n        return false;\n    // If user verification was determined to be required, verify that\n    // the UV bit of the flags in authData is set. Otherwise, ignore the\n    // value of the UV flag.\n    if (userVerificationRequired && (flag & 0x04) !== 0x04)\n        return false;\n    // If the BE bit of the flags in authData is not set, verify that\n    // the BS bit is not set.\n    if ((flag & 0x08) !== 0x08 && (flag & 0x10) === 0x10)\n        return false;\n    // Check that response is for an authentication assertion\n    const type = '\"type\":\"webauthn.get\"';\n    if (type !== clientDataJSON.slice(Number(typeIndex), type.length + 1))\n        return false;\n    // Check that hash is in the clientDataJSON.\n    const match = clientDataJSON\n        .slice(Number(challengeIndex))\n        .match(/^\"challenge\":\"(.*?)\"/);\n    if (!match)\n        return false;\n    // Validate the challenge in the clientDataJSON.\n    const [_, challenge_extracted] = match;\n    if (_Hex_js__WEBPACK_IMPORTED_MODULE_2__.fromBytes(_Base64_js__WEBPACK_IMPORTED_MODULE_3__.toBytes(challenge_extracted)) !== challenge)\n        return false;\n    const clientDataJSONHash = _Hash_js__WEBPACK_IMPORTED_MODULE_1__.sha256(_Bytes_js__WEBPACK_IMPORTED_MODULE_4__.fromString(clientDataJSON), {\n        as: 'Bytes',\n    });\n    const payload = _Bytes_js__WEBPACK_IMPORTED_MODULE_4__.concat(authenticatorDataBytes, clientDataJSONHash);\n    return _P256_js__WEBPACK_IMPORTED_MODULE_5__.verify({\n        hash,\n        payload,\n        publicKey,\n        signature,\n    });\n}\n/** Thrown when a WebAuthn P256 credential creation fails. */\nclass CredentialCreationFailedError extends _Errors_js__WEBPACK_IMPORTED_MODULE_6__.BaseError {\n    constructor({ cause } = {}) {\n        super('Failed to create credential.', {\n            cause,\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'WebAuthnP256.CredentialCreationFailedError'\n        });\n    }\n}\n/** Thrown when a WebAuthn P256 credential request fails. */\nclass CredentialRequestFailedError extends _Errors_js__WEBPACK_IMPORTED_MODULE_6__.BaseError {\n    constructor({ cause } = {}) {\n        super('Failed to request credential.', {\n            cause,\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'WebAuthnP256.CredentialRequestFailedError'\n        });\n    }\n}\n//# sourceMappingURL=WebAuthnP256.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ox/_esm/core/WebAuthnP256.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ox/_esm/core/WebCryptoP256.js":
/*!****************************************************!*\
  !*** ./node_modules/ox/_esm/core/WebCryptoP256.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createKeyPair: () => (/* binding */ createKeyPair),\n/* harmony export */   sign: () => (/* binding */ sign),\n/* harmony export */   verify: () => (/* binding */ verify)\n/* harmony export */ });\n/* harmony import */ var _noble_curves_p256__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @noble/curves/p256 */ \"(pages-dir-browser)/./node_modules/@noble/curves/esm/p256.js\");\n/* harmony import */ var _Bytes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Bytes.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Bytes.js\");\n/* harmony import */ var _PublicKey_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./PublicKey.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/PublicKey.js\");\n\n\n\n/**\n * Generates an ECDSA P256 key pair that includes:\n *\n * - a `privateKey` of type [`CryptoKey`](https://developer.mozilla.org/en-US/docs/Web/API/CryptoKey)\n *\n * - a `publicKey` of type {@link ox#Hex.Hex} or {@link ox#Bytes.Bytes}\n *\n * @example\n * ```ts twoslash\n * import { WebCryptoP256 } from 'ox'\n *\n * const { publicKey, privateKey } = await WebCryptoP256.createKeyPair()\n * // @log: {\n * // @log:   privateKey: CryptoKey {},\n * // @log:   publicKey: {\n * // @log:     x: 59295962801117472859457908919941473389380284132224861839820747729565200149877n,\n * // @log:     y: 24099691209996290925259367678540227198235484593389470330605641003500238088869n,\n * // @log:     prefix: 4,\n * // @log:   },\n * // @log: }\n * ```\n *\n * @param options - Options for creating the key pair.\n * @returns The key pair.\n */\nasync function createKeyPair(options = {}) {\n    const { extractable = false } = options;\n    const keypair = await globalThis.crypto.subtle.generateKey({\n        name: 'ECDSA',\n        namedCurve: 'P-256',\n    }, extractable, ['sign', 'verify']);\n    const publicKey_raw = await globalThis.crypto.subtle.exportKey('raw', keypair.publicKey);\n    const publicKey = _PublicKey_js__WEBPACK_IMPORTED_MODULE_0__.from(new Uint8Array(publicKey_raw));\n    return {\n        privateKey: keypair.privateKey,\n        publicKey,\n    };\n}\n/**\n * Signs a payload with the provided `CryptoKey` private key and returns a P256 signature.\n *\n * @example\n * ```ts twoslash\n * import { WebCryptoP256 } from 'ox'\n *\n * const { privateKey } = await WebCryptoP256.createKeyPair()\n *\n * const signature = await WebCryptoP256.sign({ // [!code focus]\n *   payload: '0xdeadbeef', // [!code focus]\n *   privateKey, // [!code focus]\n * }) // [!code focus]\n * // @log: {\n * // @log:   r: 151231...4423n,\n * // @log:   s: 516123...5512n,\n * // @log: }\n * ```\n *\n * @param options - Options for signing the payload.\n * @returns The P256 ECDSA {@link ox#Signature.Signature}.\n */\nasync function sign(options) {\n    const { payload, privateKey } = options;\n    const signature = await globalThis.crypto.subtle.sign({\n        name: 'ECDSA',\n        hash: 'SHA-256',\n    }, privateKey, _Bytes_js__WEBPACK_IMPORTED_MODULE_1__.from(payload));\n    const signature_bytes = _Bytes_js__WEBPACK_IMPORTED_MODULE_1__.fromArray(new Uint8Array(signature));\n    const r = _Bytes_js__WEBPACK_IMPORTED_MODULE_1__.toBigInt(_Bytes_js__WEBPACK_IMPORTED_MODULE_1__.slice(signature_bytes, 0, 32));\n    let s = _Bytes_js__WEBPACK_IMPORTED_MODULE_1__.toBigInt(_Bytes_js__WEBPACK_IMPORTED_MODULE_1__.slice(signature_bytes, 32, 64));\n    if (s > _noble_curves_p256__WEBPACK_IMPORTED_MODULE_2__.p256.CURVE.n / 2n)\n        s = _noble_curves_p256__WEBPACK_IMPORTED_MODULE_2__.p256.CURVE.n - s;\n    return { r, s };\n}\n/**\n * Verifies a payload was signed by the provided public key.\n *\n * @example\n *\n * ```ts twoslash\n * import { WebCryptoP256 } from 'ox'\n *\n * const { privateKey, publicKey } = await WebCryptoP256.createKeyPair()\n * const signature = await WebCryptoP256.sign({ payload: '0xdeadbeef', privateKey })\n *\n * const verified = await WebCryptoP256.verify({ // [!code focus]\n *   payload: '0xdeadbeef', // [!code focus]\n *   publicKey, // [!code focus]\n *   signature, // [!code focus]\n * }) // [!code focus]\n * // @log: true\n * ```\n *\n * @param options - The verification options.\n * @returns Whether the payload was signed by the provided public key.\n */\nasync function verify(options) {\n    const { payload, signature } = options;\n    const publicKey = await globalThis.crypto.subtle.importKey('raw', _PublicKey_js__WEBPACK_IMPORTED_MODULE_0__.toBytes(options.publicKey), { name: 'ECDSA', namedCurve: 'P-256' }, true, ['verify']);\n    return await globalThis.crypto.subtle.verify({\n        name: 'ECDSA',\n        hash: 'SHA-256',\n    }, publicKey, _Bytes_js__WEBPACK_IMPORTED_MODULE_1__.concat(_Bytes_js__WEBPACK_IMPORTED_MODULE_1__.fromNumber(signature.r), _Bytes_js__WEBPACK_IMPORTED_MODULE_1__.fromNumber(signature.s)), _Bytes_js__WEBPACK_IMPORTED_MODULE_1__.from(payload));\n}\n//# sourceMappingURL=WebCryptoP256.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9veC9fZXNtL2NvcmUvV2ViQ3J5cHRvUDI1Ni5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBMEM7QUFDTjtBQUNRO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsa0JBQWtCLElBQUk7QUFDbEQ7QUFDQTtBQUNBO0FBQ0EsWUFBWSxnQkFBZ0I7QUFDNUI7QUFDQSxXQUFXLHdCQUF3QjtBQUNuQztBQUNBLHNDQUFzQztBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyx5Q0FBeUM7QUFDaEQsWUFBWSxzQkFBc0I7QUFDbEM7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0Esc0JBQXNCLCtDQUFjO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxnQkFBZ0I7QUFDNUI7QUFDQSxXQUFXLGFBQWE7QUFDeEI7QUFDQSxnREFBZ0Q7QUFDaEQ7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0Qiw2QkFBNkI7QUFDekQ7QUFDTztBQUNQLFlBQVksc0JBQXNCO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBLEtBQUssY0FBYywyQ0FBVTtBQUM3Qiw0QkFBNEIsZ0RBQWU7QUFDM0MsY0FBYywrQ0FBYyxDQUFDLDRDQUFXO0FBQ3hDLFlBQVksK0NBQWMsQ0FBQyw0Q0FBVztBQUN0QyxZQUFZLG9EQUFJO0FBQ2hCLFlBQVksb0RBQUk7QUFDaEIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxnQkFBZ0I7QUFDNUI7QUFDQSxXQUFXLHdCQUF3QjtBQUNuQyxnREFBZ0QsbUNBQW1DO0FBQ25GO0FBQ0EsaURBQWlEO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQLFlBQVkscUJBQXFCO0FBQ2pDLHNFQUFzRSxrREFBaUIsdUJBQXVCLG9DQUFvQztBQUNsSjtBQUNBO0FBQ0E7QUFDQSxLQUFLLGFBQWEsNkNBQVksQ0FBQyxpREFBZ0IsZUFBZSxpREFBZ0IsZ0JBQWdCLDJDQUFVO0FBQ3hHO0FBQ0EiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcY2hhbmRcXERvd25sb2Fkc1xcam9obndyaWNoa2lkaW50b3JpenpcXG5vZGVfbW9kdWxlc1xcb3hcXF9lc21cXGNvcmVcXFdlYkNyeXB0b1AyNTYuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcDI1NiB9IGZyb20gJ0Bub2JsZS9jdXJ2ZXMvcDI1Nic7XG5pbXBvcnQgKiBhcyBCeXRlcyBmcm9tICcuL0J5dGVzLmpzJztcbmltcG9ydCAqIGFzIFB1YmxpY0tleSBmcm9tICcuL1B1YmxpY0tleS5qcyc7XG4vKipcbiAqIEdlbmVyYXRlcyBhbiBFQ0RTQSBQMjU2IGtleSBwYWlyIHRoYXQgaW5jbHVkZXM6XG4gKlxuICogLSBhIGBwcml2YXRlS2V5YCBvZiB0eXBlIFtgQ3J5cHRvS2V5YF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0NyeXB0b0tleSlcbiAqXG4gKiAtIGEgYHB1YmxpY0tleWAgb2YgdHlwZSB7QGxpbmsgb3gjSGV4LkhleH0gb3Ige0BsaW5rIG94I0J5dGVzLkJ5dGVzfVxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGB0cyB0d29zbGFzaFxuICogaW1wb3J0IHsgV2ViQ3J5cHRvUDI1NiB9IGZyb20gJ294J1xuICpcbiAqIGNvbnN0IHsgcHVibGljS2V5LCBwcml2YXRlS2V5IH0gPSBhd2FpdCBXZWJDcnlwdG9QMjU2LmNyZWF0ZUtleVBhaXIoKVxuICogLy8gQGxvZzoge1xuICogLy8gQGxvZzogICBwcml2YXRlS2V5OiBDcnlwdG9LZXkge30sXG4gKiAvLyBAbG9nOiAgIHB1YmxpY0tleToge1xuICogLy8gQGxvZzogICAgIHg6IDU5Mjk1OTYyODAxMTE3NDcyODU5NDU3OTA4OTE5OTQxNDczMzg5MzgwMjg0MTMyMjI0ODYxODM5ODIwNzQ3NzI5NTY1MjAwMTQ5ODc3bixcbiAqIC8vIEBsb2c6ICAgICB5OiAyNDA5OTY5MTIwOTk5NjI5MDkyNTI1OTM2NzY3ODU0MDIyNzE5ODIzNTQ4NDU5MzM4OTQ3MDMzMDYwNTY0MTAwMzUwMDIzODA4ODg2OW4sXG4gKiAvLyBAbG9nOiAgICAgcHJlZml4OiA0LFxuICogLy8gQGxvZzogICB9LFxuICogLy8gQGxvZzogfVxuICogYGBgXG4gKlxuICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25zIGZvciBjcmVhdGluZyB0aGUga2V5IHBhaXIuXG4gKiBAcmV0dXJucyBUaGUga2V5IHBhaXIuXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjcmVhdGVLZXlQYWlyKG9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IHsgZXh0cmFjdGFibGUgPSBmYWxzZSB9ID0gb3B0aW9ucztcbiAgICBjb25zdCBrZXlwYWlyID0gYXdhaXQgZ2xvYmFsVGhpcy5jcnlwdG8uc3VidGxlLmdlbmVyYXRlS2V5KHtcbiAgICAgICAgbmFtZTogJ0VDRFNBJyxcbiAgICAgICAgbmFtZWRDdXJ2ZTogJ1AtMjU2JyxcbiAgICB9LCBleHRyYWN0YWJsZSwgWydzaWduJywgJ3ZlcmlmeSddKTtcbiAgICBjb25zdCBwdWJsaWNLZXlfcmF3ID0gYXdhaXQgZ2xvYmFsVGhpcy5jcnlwdG8uc3VidGxlLmV4cG9ydEtleSgncmF3Jywga2V5cGFpci5wdWJsaWNLZXkpO1xuICAgIGNvbnN0IHB1YmxpY0tleSA9IFB1YmxpY0tleS5mcm9tKG5ldyBVaW50OEFycmF5KHB1YmxpY0tleV9yYXcpKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBwcml2YXRlS2V5OiBrZXlwYWlyLnByaXZhdGVLZXksXG4gICAgICAgIHB1YmxpY0tleSxcbiAgICB9O1xufVxuLyoqXG4gKiBTaWducyBhIHBheWxvYWQgd2l0aCB0aGUgcHJvdmlkZWQgYENyeXB0b0tleWAgcHJpdmF0ZSBrZXkgYW5kIHJldHVybnMgYSBQMjU2IHNpZ25hdHVyZS5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgdHMgdHdvc2xhc2hcbiAqIGltcG9ydCB7IFdlYkNyeXB0b1AyNTYgfSBmcm9tICdveCdcbiAqXG4gKiBjb25zdCB7IHByaXZhdGVLZXkgfSA9IGF3YWl0IFdlYkNyeXB0b1AyNTYuY3JlYXRlS2V5UGFpcigpXG4gKlxuICogY29uc3Qgc2lnbmF0dXJlID0gYXdhaXQgV2ViQ3J5cHRvUDI1Ni5zaWduKHsgLy8gWyFjb2RlIGZvY3VzXVxuICogICBwYXlsb2FkOiAnMHhkZWFkYmVlZicsIC8vIFshY29kZSBmb2N1c11cbiAqICAgcHJpdmF0ZUtleSwgLy8gWyFjb2RlIGZvY3VzXVxuICogfSkgLy8gWyFjb2RlIGZvY3VzXVxuICogLy8gQGxvZzoge1xuICogLy8gQGxvZzogICByOiAxNTEyMzEuLi40NDIzbixcbiAqIC8vIEBsb2c6ICAgczogNTE2MTIzLi4uNTUxMm4sXG4gKiAvLyBAbG9nOiB9XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbnMgZm9yIHNpZ25pbmcgdGhlIHBheWxvYWQuXG4gKiBAcmV0dXJucyBUaGUgUDI1NiBFQ0RTQSB7QGxpbmsgb3gjU2lnbmF0dXJlLlNpZ25hdHVyZX0uXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzaWduKG9wdGlvbnMpIHtcbiAgICBjb25zdCB7IHBheWxvYWQsIHByaXZhdGVLZXkgfSA9IG9wdGlvbnM7XG4gICAgY29uc3Qgc2lnbmF0dXJlID0gYXdhaXQgZ2xvYmFsVGhpcy5jcnlwdG8uc3VidGxlLnNpZ24oe1xuICAgICAgICBuYW1lOiAnRUNEU0EnLFxuICAgICAgICBoYXNoOiAnU0hBLTI1NicsXG4gICAgfSwgcHJpdmF0ZUtleSwgQnl0ZXMuZnJvbShwYXlsb2FkKSk7XG4gICAgY29uc3Qgc2lnbmF0dXJlX2J5dGVzID0gQnl0ZXMuZnJvbUFycmF5KG5ldyBVaW50OEFycmF5KHNpZ25hdHVyZSkpO1xuICAgIGNvbnN0IHIgPSBCeXRlcy50b0JpZ0ludChCeXRlcy5zbGljZShzaWduYXR1cmVfYnl0ZXMsIDAsIDMyKSk7XG4gICAgbGV0IHMgPSBCeXRlcy50b0JpZ0ludChCeXRlcy5zbGljZShzaWduYXR1cmVfYnl0ZXMsIDMyLCA2NCkpO1xuICAgIGlmIChzID4gcDI1Ni5DVVJWRS5uIC8gMm4pXG4gICAgICAgIHMgPSBwMjU2LkNVUlZFLm4gLSBzO1xuICAgIHJldHVybiB7IHIsIHMgfTtcbn1cbi8qKlxuICogVmVyaWZpZXMgYSBwYXlsb2FkIHdhcyBzaWduZWQgYnkgdGhlIHByb3ZpZGVkIHB1YmxpYyBrZXkuXG4gKlxuICogQGV4YW1wbGVcbiAqXG4gKiBgYGB0cyB0d29zbGFzaFxuICogaW1wb3J0IHsgV2ViQ3J5cHRvUDI1NiB9IGZyb20gJ294J1xuICpcbiAqIGNvbnN0IHsgcHJpdmF0ZUtleSwgcHVibGljS2V5IH0gPSBhd2FpdCBXZWJDcnlwdG9QMjU2LmNyZWF0ZUtleVBhaXIoKVxuICogY29uc3Qgc2lnbmF0dXJlID0gYXdhaXQgV2ViQ3J5cHRvUDI1Ni5zaWduKHsgcGF5bG9hZDogJzB4ZGVhZGJlZWYnLCBwcml2YXRlS2V5IH0pXG4gKlxuICogY29uc3QgdmVyaWZpZWQgPSBhd2FpdCBXZWJDcnlwdG9QMjU2LnZlcmlmeSh7IC8vIFshY29kZSBmb2N1c11cbiAqICAgcGF5bG9hZDogJzB4ZGVhZGJlZWYnLCAvLyBbIWNvZGUgZm9jdXNdXG4gKiAgIHB1YmxpY0tleSwgLy8gWyFjb2RlIGZvY3VzXVxuICogICBzaWduYXR1cmUsIC8vIFshY29kZSBmb2N1c11cbiAqIH0pIC8vIFshY29kZSBmb2N1c11cbiAqIC8vIEBsb2c6IHRydWVcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSBvcHRpb25zIC0gVGhlIHZlcmlmaWNhdGlvbiBvcHRpb25zLlxuICogQHJldHVybnMgV2hldGhlciB0aGUgcGF5bG9hZCB3YXMgc2lnbmVkIGJ5IHRoZSBwcm92aWRlZCBwdWJsaWMga2V5LlxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gdmVyaWZ5KG9wdGlvbnMpIHtcbiAgICBjb25zdCB7IHBheWxvYWQsIHNpZ25hdHVyZSB9ID0gb3B0aW9ucztcbiAgICBjb25zdCBwdWJsaWNLZXkgPSBhd2FpdCBnbG9iYWxUaGlzLmNyeXB0by5zdWJ0bGUuaW1wb3J0S2V5KCdyYXcnLCBQdWJsaWNLZXkudG9CeXRlcyhvcHRpb25zLnB1YmxpY0tleSksIHsgbmFtZTogJ0VDRFNBJywgbmFtZWRDdXJ2ZTogJ1AtMjU2JyB9LCB0cnVlLCBbJ3ZlcmlmeSddKTtcbiAgICByZXR1cm4gYXdhaXQgZ2xvYmFsVGhpcy5jcnlwdG8uc3VidGxlLnZlcmlmeSh7XG4gICAgICAgIG5hbWU6ICdFQ0RTQScsXG4gICAgICAgIGhhc2g6ICdTSEEtMjU2JyxcbiAgICB9LCBwdWJsaWNLZXksIEJ5dGVzLmNvbmNhdChCeXRlcy5mcm9tTnVtYmVyKHNpZ25hdHVyZS5yKSwgQnl0ZXMuZnJvbU51bWJlcihzaWduYXR1cmUucykpLCBCeXRlcy5mcm9tKHBheWxvYWQpKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVdlYkNyeXB0b1AyNTYuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ox/_esm/core/WebCryptoP256.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ox/_esm/core/internal/abi.js":
/*!***************************************************!*\
  !*** ./node_modules/ox/_esm/core/internal/abi.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isSignatures: () => (/* binding */ isSignatures)\n/* harmony export */ });\n/** @internal */\nfunction isSignatures(value) {\n    for (const item of value) {\n        if (typeof item !== 'string')\n            return false;\n    }\n    return true;\n}\n//# sourceMappingURL=abi.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9veC9fZXNtL2NvcmUvaW50ZXJuYWwvYWJpLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcY2hhbmRcXERvd25sb2Fkc1xcam9obndyaWNoa2lkaW50b3JpenpcXG5vZGVfbW9kdWxlc1xcb3hcXF9lc21cXGNvcmVcXGludGVybmFsXFxhYmkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzU2lnbmF0dXJlcyh2YWx1ZSkge1xuICAgIGZvciAoY29uc3QgaXRlbSBvZiB2YWx1ZSkge1xuICAgICAgICBpZiAodHlwZW9mIGl0ZW0gIT09ICdzdHJpbmcnKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFiaS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ox/_esm/core/internal/abi.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ox/_esm/core/internal/base58.js":
/*!******************************************************!*\
  !*** ./node_modules/ox/_esm/core/internal/base58.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   alphabetToInteger: () => (/* binding */ alphabetToInteger),\n/* harmony export */   from: () => (/* binding */ from),\n/* harmony export */   integerToAlphabet: () => (/* binding */ integerToAlphabet)\n/* harmony export */ });\n/* harmony import */ var _Bytes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Bytes.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Bytes.js\");\n/* harmony import */ var _Hex_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Hex.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Hex.js\");\n\n\n/** @internal */\nconst integerToAlphabet = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';\n/** @internal */\nconst alphabetToInteger = /* __PURE__ */ Object.freeze({\n    1: 0n,\n    2: 1n,\n    3: 2n,\n    4: 3n,\n    5: 4n,\n    6: 5n,\n    7: 6n,\n    8: 7n,\n    9: 8n,\n    A: 9n,\n    B: 10n,\n    C: 11n,\n    D: 12n,\n    E: 13n,\n    F: 14n,\n    G: 15n,\n    H: 16n,\n    J: 17n,\n    K: 18n,\n    L: 19n,\n    M: 20n,\n    N: 21n,\n    P: 22n,\n    Q: 23n,\n    R: 24n,\n    S: 25n,\n    T: 26n,\n    U: 27n,\n    V: 28n,\n    W: 29n,\n    X: 30n,\n    Y: 31n,\n    Z: 32n,\n    a: 33n,\n    b: 34n,\n    c: 35n,\n    d: 36n,\n    e: 37n,\n    f: 38n,\n    g: 39n,\n    h: 40n,\n    i: 41n,\n    j: 42n,\n    k: 43n,\n    m: 44n,\n    n: 45n,\n    o: 46n,\n    p: 47n,\n    q: 48n,\n    r: 49n,\n    s: 50n,\n    t: 51n,\n    u: 52n,\n    v: 53n,\n    w: 54n,\n    x: 55n,\n    y: 56n,\n    z: 57n,\n});\n/** @internal */\nfunction from(value) {\n    let bytes = _Bytes_js__WEBPACK_IMPORTED_MODULE_0__.from(value);\n    let integer = (() => {\n        let hex = value;\n        if (value instanceof Uint8Array)\n            hex = _Hex_js__WEBPACK_IMPORTED_MODULE_1__.fromBytes(bytes);\n        return BigInt(hex);\n    })();\n    let result = '';\n    while (integer > 0n) {\n        const remainder = Number(integer % 58n);\n        integer = integer / 58n;\n        result = integerToAlphabet[remainder] + result;\n    }\n    while (bytes.length > 1 && bytes[0] === 0) {\n        result = '1' + result;\n        bytes = bytes.slice(1);\n    }\n    return result;\n}\n/** @internal */\n//# sourceMappingURL=base58.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9veC9fZXNtL2NvcmUvaW50ZXJuYWwvYmFzZTU4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQXFDO0FBQ0o7QUFDakM7QUFDTztBQUNQO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNPO0FBQ1AsZ0JBQWdCLDJDQUFVO0FBQzFCO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQiw4Q0FBYTtBQUMvQjtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGNoYW5kXFxEb3dubG9hZHNcXGpvaG53cmljaGtpZGludG9yaXp6XFxub2RlX21vZHVsZXNcXG94XFxfZXNtXFxjb3JlXFxpbnRlcm5hbFxcYmFzZTU4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIEJ5dGVzIGZyb20gJy4uL0J5dGVzLmpzJztcbmltcG9ydCAqIGFzIEhleCBmcm9tICcuLi9IZXguanMnO1xuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGNvbnN0IGludGVnZXJUb0FscGhhYmV0ID0gJzEyMzQ1Njc4OUFCQ0RFRkdISktMTU5QUVJTVFVWV1hZWmFiY2RlZmdoaWprbW5vcHFyc3R1dnd4eXonO1xuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGNvbnN0IGFscGhhYmV0VG9JbnRlZ2VyID0gLyogX19QVVJFX18gKi8gT2JqZWN0LmZyZWV6ZSh7XG4gICAgMTogMG4sXG4gICAgMjogMW4sXG4gICAgMzogMm4sXG4gICAgNDogM24sXG4gICAgNTogNG4sXG4gICAgNjogNW4sXG4gICAgNzogNm4sXG4gICAgODogN24sXG4gICAgOTogOG4sXG4gICAgQTogOW4sXG4gICAgQjogMTBuLFxuICAgIEM6IDExbixcbiAgICBEOiAxMm4sXG4gICAgRTogMTNuLFxuICAgIEY6IDE0bixcbiAgICBHOiAxNW4sXG4gICAgSDogMTZuLFxuICAgIEo6IDE3bixcbiAgICBLOiAxOG4sXG4gICAgTDogMTluLFxuICAgIE06IDIwbixcbiAgICBOOiAyMW4sXG4gICAgUDogMjJuLFxuICAgIFE6IDIzbixcbiAgICBSOiAyNG4sXG4gICAgUzogMjVuLFxuICAgIFQ6IDI2bixcbiAgICBVOiAyN24sXG4gICAgVjogMjhuLFxuICAgIFc6IDI5bixcbiAgICBYOiAzMG4sXG4gICAgWTogMzFuLFxuICAgIFo6IDMybixcbiAgICBhOiAzM24sXG4gICAgYjogMzRuLFxuICAgIGM6IDM1bixcbiAgICBkOiAzNm4sXG4gICAgZTogMzduLFxuICAgIGY6IDM4bixcbiAgICBnOiAzOW4sXG4gICAgaDogNDBuLFxuICAgIGk6IDQxbixcbiAgICBqOiA0Mm4sXG4gICAgazogNDNuLFxuICAgIG06IDQ0bixcbiAgICBuOiA0NW4sXG4gICAgbzogNDZuLFxuICAgIHA6IDQ3bixcbiAgICBxOiA0OG4sXG4gICAgcjogNDluLFxuICAgIHM6IDUwbixcbiAgICB0OiA1MW4sXG4gICAgdTogNTJuLFxuICAgIHY6IDUzbixcbiAgICB3OiA1NG4sXG4gICAgeDogNTVuLFxuICAgIHk6IDU2bixcbiAgICB6OiA1N24sXG59KTtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBmdW5jdGlvbiBmcm9tKHZhbHVlKSB7XG4gICAgbGV0IGJ5dGVzID0gQnl0ZXMuZnJvbSh2YWx1ZSk7XG4gICAgbGV0IGludGVnZXIgPSAoKCkgPT4ge1xuICAgICAgICBsZXQgaGV4ID0gdmFsdWU7XG4gICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpXG4gICAgICAgICAgICBoZXggPSBIZXguZnJvbUJ5dGVzKGJ5dGVzKTtcbiAgICAgICAgcmV0dXJuIEJpZ0ludChoZXgpO1xuICAgIH0pKCk7XG4gICAgbGV0IHJlc3VsdCA9ICcnO1xuICAgIHdoaWxlIChpbnRlZ2VyID4gMG4pIHtcbiAgICAgICAgY29uc3QgcmVtYWluZGVyID0gTnVtYmVyKGludGVnZXIgJSA1OG4pO1xuICAgICAgICBpbnRlZ2VyID0gaW50ZWdlciAvIDU4bjtcbiAgICAgICAgcmVzdWx0ID0gaW50ZWdlclRvQWxwaGFiZXRbcmVtYWluZGVyXSArIHJlc3VsdDtcbiAgICB9XG4gICAgd2hpbGUgKGJ5dGVzLmxlbmd0aCA+IDEgJiYgYnl0ZXNbMF0gPT09IDApIHtcbiAgICAgICAgcmVzdWx0ID0gJzEnICsgcmVzdWx0O1xuICAgICAgICBieXRlcyA9IGJ5dGVzLnNsaWNlKDEpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuLyoqIEBpbnRlcm5hbCAqL1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YmFzZTU4LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ox/_esm/core/internal/base58.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ox/_esm/core/internal/ens.js":
/*!***************************************************!*\
  !*** ./node_modules/ox/_esm/core/internal/ens.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   packetToBytes: () => (/* binding */ packetToBytes),\n/* harmony export */   unwrapLabelhash: () => (/* binding */ unwrapLabelhash),\n/* harmony export */   wrapLabelhash: () => (/* binding */ wrapLabelhash)\n/* harmony export */ });\n/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../index.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/index.js\");\n/* harmony import */ var _Ens_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Ens.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Ens.js\");\n/* harmony import */ var _Hex_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Hex.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Hex.js\");\n\n\n\n/**\n * @internal\n * Encodes a [DNS packet](https://docs.ens.domains/resolution/names#dns) into a ByteArray containing a UDP payload.\n */\nfunction packetToBytes(packet) {\n    // strip leading and trailing `.`\n    const value = packet.replace(/^\\.|\\.$/gm, '');\n    if (value.length === 0)\n        return new Uint8Array(1);\n    const bytes = new Uint8Array(_index_js__WEBPACK_IMPORTED_MODULE_0__.Bytes.fromString(value).byteLength + 2);\n    let offset = 0;\n    const list = value.split('.');\n    for (let i = 0; i < list.length; i++) {\n        let encoded = _index_js__WEBPACK_IMPORTED_MODULE_0__.Bytes.fromString(list[i]);\n        // if the length is > 255, make the encoded label value a labelhash\n        // this is compatible with the universal resolver\n        if (encoded.byteLength > 255)\n            encoded = _index_js__WEBPACK_IMPORTED_MODULE_0__.Bytes.fromString(wrapLabelhash(_Ens_js__WEBPACK_IMPORTED_MODULE_1__.labelhash(list[i])));\n        bytes[offset] = encoded.length;\n        bytes.set(encoded, offset + 1);\n        offset += encoded.length + 1;\n    }\n    if (bytes.byteLength !== offset + 1)\n        return bytes.slice(0, offset + 1);\n    return bytes;\n}\n/** @internal */\nfunction wrapLabelhash(hash) {\n    return `[${hash.slice(2)}]`;\n}\n/** @internal */\nfunction unwrapLabelhash(label) {\n    if (label.length !== 66)\n        return null;\n    if (label.indexOf('[') !== 0)\n        return null;\n    if (label.indexOf(']') !== 65)\n        return null;\n    const hash = `0x${label.slice(1, 65)}`;\n    if (!_Hex_js__WEBPACK_IMPORTED_MODULE_2__.validate(hash, { strict: true }))\n        return null;\n    return hash;\n}\n//# sourceMappingURL=ens.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9veC9fZXNtL2NvcmUvaW50ZXJuYWwvZW5zLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUF1QztBQUNOO0FBQ0E7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLDRDQUFLO0FBQ3RDO0FBQ0E7QUFDQSxvQkFBb0IsaUJBQWlCO0FBQ3JDLHNCQUFzQiw0Q0FBSztBQUMzQjtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsNENBQUssMEJBQTBCLDhDQUFhO0FBQ2xFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AsZUFBZSxjQUFjO0FBQzdCO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixtQkFBbUI7QUFDekMsU0FBUyw2Q0FBWSxTQUFTLGNBQWM7QUFDNUM7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcY2hhbmRcXERvd25sb2Fkc1xcam9obndyaWNoa2lkaW50b3JpenpcXG5vZGVfbW9kdWxlc1xcb3hcXF9lc21cXGNvcmVcXGludGVybmFsXFxlbnMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQnl0ZXMgfSBmcm9tICcuLi8uLi9pbmRleC5qcyc7XG5pbXBvcnQgKiBhcyBFbnMgZnJvbSAnLi4vRW5zLmpzJztcbmltcG9ydCAqIGFzIEhleCBmcm9tICcuLi9IZXguanMnO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqIEVuY29kZXMgYSBbRE5TIHBhY2tldF0oaHR0cHM6Ly9kb2NzLmVucy5kb21haW5zL3Jlc29sdXRpb24vbmFtZXMjZG5zKSBpbnRvIGEgQnl0ZUFycmF5IGNvbnRhaW5pbmcgYSBVRFAgcGF5bG9hZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhY2tldFRvQnl0ZXMocGFja2V0KSB7XG4gICAgLy8gc3RyaXAgbGVhZGluZyBhbmQgdHJhaWxpbmcgYC5gXG4gICAgY29uc3QgdmFsdWUgPSBwYWNrZXQucmVwbGFjZSgvXlxcLnxcXC4kL2dtLCAnJyk7XG4gICAgaWYgKHZhbHVlLmxlbmd0aCA9PT0gMClcbiAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KDEpO1xuICAgIGNvbnN0IGJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkoQnl0ZXMuZnJvbVN0cmluZyh2YWx1ZSkuYnl0ZUxlbmd0aCArIDIpO1xuICAgIGxldCBvZmZzZXQgPSAwO1xuICAgIGNvbnN0IGxpc3QgPSB2YWx1ZS5zcGxpdCgnLicpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZXQgZW5jb2RlZCA9IEJ5dGVzLmZyb21TdHJpbmcobGlzdFtpXSk7XG4gICAgICAgIC8vIGlmIHRoZSBsZW5ndGggaXMgPiAyNTUsIG1ha2UgdGhlIGVuY29kZWQgbGFiZWwgdmFsdWUgYSBsYWJlbGhhc2hcbiAgICAgICAgLy8gdGhpcyBpcyBjb21wYXRpYmxlIHdpdGggdGhlIHVuaXZlcnNhbCByZXNvbHZlclxuICAgICAgICBpZiAoZW5jb2RlZC5ieXRlTGVuZ3RoID4gMjU1KVxuICAgICAgICAgICAgZW5jb2RlZCA9IEJ5dGVzLmZyb21TdHJpbmcod3JhcExhYmVsaGFzaChFbnMubGFiZWxoYXNoKGxpc3RbaV0pKSk7XG4gICAgICAgIGJ5dGVzW29mZnNldF0gPSBlbmNvZGVkLmxlbmd0aDtcbiAgICAgICAgYnl0ZXMuc2V0KGVuY29kZWQsIG9mZnNldCArIDEpO1xuICAgICAgICBvZmZzZXQgKz0gZW5jb2RlZC5sZW5ndGggKyAxO1xuICAgIH1cbiAgICBpZiAoYnl0ZXMuYnl0ZUxlbmd0aCAhPT0gb2Zmc2V0ICsgMSlcbiAgICAgICAgcmV0dXJuIGJ5dGVzLnNsaWNlKDAsIG9mZnNldCArIDEpO1xuICAgIHJldHVybiBieXRlcztcbn1cbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBmdW5jdGlvbiB3cmFwTGFiZWxoYXNoKGhhc2gpIHtcbiAgICByZXR1cm4gYFske2hhc2guc2xpY2UoMil9XWA7XG59XG4vKiogQGludGVybmFsICovXG5leHBvcnQgZnVuY3Rpb24gdW53cmFwTGFiZWxoYXNoKGxhYmVsKSB7XG4gICAgaWYgKGxhYmVsLmxlbmd0aCAhPT0gNjYpXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIGlmIChsYWJlbC5pbmRleE9mKCdbJykgIT09IDApXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIGlmIChsYWJlbC5pbmRleE9mKCddJykgIT09IDY1KVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICBjb25zdCBoYXNoID0gYDB4JHtsYWJlbC5zbGljZSgxLCA2NSl9YDtcbiAgICBpZiAoIUhleC52YWxpZGF0ZShoYXNoLCB7IHN0cmljdDogdHJ1ZSB9KSlcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgcmV0dXJuIGhhc2g7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lbnMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ox/_esm/core/internal/ens.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ox/_esm/core/internal/entropy.js":
/*!*******************************************************!*\
  !*** ./node_modules/ox/_esm/core/internal/entropy.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   extraEntropy: () => (/* binding */ extraEntropy),\n/* harmony export */   setExtraEntropy: () => (/* binding */ setExtraEntropy)\n/* harmony export */ });\nlet extraEntropy = false;\n/** @internal */\nfunction setExtraEntropy(entropy) {\n    extraEntropy = entropy;\n}\n//# sourceMappingURL=entropy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9veC9fZXNtL2NvcmUvaW50ZXJuYWwvZW50cm9weS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFPO0FBQ1A7QUFDTztBQUNQO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxjaGFuZFxcRG93bmxvYWRzXFxqb2hud3JpY2hraWRpbnRvcml6elxcbm9kZV9tb2R1bGVzXFxveFxcX2VzbVxcY29yZVxcaW50ZXJuYWxcXGVudHJvcHkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGxldCBleHRyYUVudHJvcHkgPSBmYWxzZTtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRFeHRyYUVudHJvcHkoZW50cm9weSkge1xuICAgIGV4dHJhRW50cm9weSA9IGVudHJvcHk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lbnRyb3B5LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ox/_esm/core/internal/entropy.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ox/_esm/core/internal/hdKey.js":
/*!*****************************************************!*\
  !*** ./node_modules/ox/_esm/core/internal/hdKey.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fromScure: () => (/* binding */ fromScure)\n/* harmony export */ });\n/* harmony import */ var _Hex_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Hex.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Hex.js\");\n/* harmony import */ var _Secp256k1_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Secp256k1.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Secp256k1.js\");\n\n\n/** @internal */\nfunction fromScure(key) {\n    return {\n        derive: (path) => fromScure(key.derive(path)),\n        depth: key.depth,\n        identifier: _Hex_js__WEBPACK_IMPORTED_MODULE_0__.fromBytes(key.identifier),\n        index: key.index,\n        privateKey: _Hex_js__WEBPACK_IMPORTED_MODULE_0__.fromBytes(key.privateKey),\n        privateExtendedKey: key.privateExtendedKey,\n        publicKey: _Secp256k1_js__WEBPACK_IMPORTED_MODULE_1__.getPublicKey({ privateKey: key.privateKey }),\n        publicExtendedKey: key.publicExtendedKey,\n        versions: key.versions,\n    };\n}\n//# sourceMappingURL=hdKey.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9veC9fZXNtL2NvcmUvaW50ZXJuYWwvaGRLZXkuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQWlDO0FBQ1k7QUFDN0M7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQiw4Q0FBYTtBQUNqQztBQUNBLG9CQUFvQiw4Q0FBYTtBQUNqQztBQUNBLG1CQUFtQix1REFBc0IsR0FBRyw0QkFBNEI7QUFDeEU7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxjaGFuZFxcRG93bmxvYWRzXFxqb2hud3JpY2hraWRpbnRvcml6elxcbm9kZV9tb2R1bGVzXFxveFxcX2VzbVxcY29yZVxcaW50ZXJuYWxcXGhkS2V5LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIEhleCBmcm9tICcuLi9IZXguanMnO1xuaW1wb3J0ICogYXMgU2VjcDI1NmsxIGZyb20gJy4uL1NlY3AyNTZrMS5qcyc7XG4vKiogQGludGVybmFsICovXG5leHBvcnQgZnVuY3Rpb24gZnJvbVNjdXJlKGtleSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIGRlcml2ZTogKHBhdGgpID0+IGZyb21TY3VyZShrZXkuZGVyaXZlKHBhdGgpKSxcbiAgICAgICAgZGVwdGg6IGtleS5kZXB0aCxcbiAgICAgICAgaWRlbnRpZmllcjogSGV4LmZyb21CeXRlcyhrZXkuaWRlbnRpZmllciksXG4gICAgICAgIGluZGV4OiBrZXkuaW5kZXgsXG4gICAgICAgIHByaXZhdGVLZXk6IEhleC5mcm9tQnl0ZXMoa2V5LnByaXZhdGVLZXkpLFxuICAgICAgICBwcml2YXRlRXh0ZW5kZWRLZXk6IGtleS5wcml2YXRlRXh0ZW5kZWRLZXksXG4gICAgICAgIHB1YmxpY0tleTogU2VjcDI1NmsxLmdldFB1YmxpY0tleSh7IHByaXZhdGVLZXk6IGtleS5wcml2YXRlS2V5IH0pLFxuICAgICAgICBwdWJsaWNFeHRlbmRlZEtleToga2V5LnB1YmxpY0V4dGVuZGVkS2V5LFxuICAgICAgICB2ZXJzaW9uczoga2V5LnZlcnNpb25zLFxuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1oZEtleS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ox/_esm/core/internal/hdKey.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ox/_esm/core/internal/mnemonic/wordlists.js":
/*!******************************************************************!*\
  !*** ./node_modules/ox/_esm/core/internal/mnemonic/wordlists.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   czech: () => (/* reexport safe */ _scure_bip39_wordlists_czech__WEBPACK_IMPORTED_MODULE_0__.wordlist),\n/* harmony export */   english: () => (/* reexport safe */ _scure_bip39_wordlists_english__WEBPACK_IMPORTED_MODULE_1__.wordlist),\n/* harmony export */   french: () => (/* reexport safe */ _scure_bip39_wordlists_french__WEBPACK_IMPORTED_MODULE_2__.wordlist),\n/* harmony export */   italian: () => (/* reexport safe */ _scure_bip39_wordlists_italian__WEBPACK_IMPORTED_MODULE_3__.wordlist),\n/* harmony export */   japanese: () => (/* reexport safe */ _scure_bip39_wordlists_japanese__WEBPACK_IMPORTED_MODULE_4__.wordlist),\n/* harmony export */   korean: () => (/* reexport safe */ _scure_bip39_wordlists_korean__WEBPACK_IMPORTED_MODULE_5__.wordlist),\n/* harmony export */   portuguese: () => (/* reexport safe */ _scure_bip39_wordlists_portuguese__WEBPACK_IMPORTED_MODULE_6__.wordlist),\n/* harmony export */   simplifiedChinese: () => (/* reexport safe */ _scure_bip39_wordlists_simplified_chinese__WEBPACK_IMPORTED_MODULE_7__.wordlist),\n/* harmony export */   spanish: () => (/* reexport safe */ _scure_bip39_wordlists_spanish__WEBPACK_IMPORTED_MODULE_8__.wordlist),\n/* harmony export */   traditionalChinese: () => (/* reexport safe */ _scure_bip39_wordlists_traditional_chinese__WEBPACK_IMPORTED_MODULE_9__.wordlist)\n/* harmony export */ });\n/* harmony import */ var _scure_bip39_wordlists_czech__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @scure/bip39/wordlists/czech */ \"(pages-dir-browser)/./node_modules/ox/node_modules/@scure/bip39/esm/wordlists/czech.js\");\n/* harmony import */ var _scure_bip39_wordlists_english__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @scure/bip39/wordlists/english */ \"(pages-dir-browser)/./node_modules/ox/node_modules/@scure/bip39/esm/wordlists/english.js\");\n/* harmony import */ var _scure_bip39_wordlists_french__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @scure/bip39/wordlists/french */ \"(pages-dir-browser)/./node_modules/ox/node_modules/@scure/bip39/esm/wordlists/french.js\");\n/* harmony import */ var _scure_bip39_wordlists_italian__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @scure/bip39/wordlists/italian */ \"(pages-dir-browser)/./node_modules/ox/node_modules/@scure/bip39/esm/wordlists/italian.js\");\n/* harmony import */ var _scure_bip39_wordlists_japanese__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @scure/bip39/wordlists/japanese */ \"(pages-dir-browser)/./node_modules/ox/node_modules/@scure/bip39/esm/wordlists/japanese.js\");\n/* harmony import */ var _scure_bip39_wordlists_korean__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @scure/bip39/wordlists/korean */ \"(pages-dir-browser)/./node_modules/ox/node_modules/@scure/bip39/esm/wordlists/korean.js\");\n/* harmony import */ var _scure_bip39_wordlists_portuguese__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @scure/bip39/wordlists/portuguese */ \"(pages-dir-browser)/./node_modules/ox/node_modules/@scure/bip39/esm/wordlists/portuguese.js\");\n/* harmony import */ var _scure_bip39_wordlists_simplified_chinese__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @scure/bip39/wordlists/simplified-chinese */ \"(pages-dir-browser)/./node_modules/ox/node_modules/@scure/bip39/esm/wordlists/simplified-chinese.js\");\n/* harmony import */ var _scure_bip39_wordlists_spanish__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @scure/bip39/wordlists/spanish */ \"(pages-dir-browser)/./node_modules/ox/node_modules/@scure/bip39/esm/wordlists/spanish.js\");\n/* harmony import */ var _scure_bip39_wordlists_traditional_chinese__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @scure/bip39/wordlists/traditional-chinese */ \"(pages-dir-browser)/./node_modules/ox/node_modules/@scure/bip39/esm/wordlists/traditional-chinese.js\");\n\n\n\n\n\n\n\n\n\n\n//# sourceMappingURL=wordlists.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9veC9fZXNtL2NvcmUvaW50ZXJuYWwvbW5lbW9uaWMvd29yZGxpc3RzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQWlFO0FBQ0k7QUFDRjtBQUNFO0FBQ0U7QUFDSjtBQUNRO0FBQ2U7QUFDckI7QUFDdUI7QUFDNUYiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcY2hhbmRcXERvd25sb2Fkc1xcam9obndyaWNoa2lkaW50b3JpenpcXG5vZGVfbW9kdWxlc1xcb3hcXF9lc21cXGNvcmVcXGludGVybmFsXFxtbmVtb25pY1xcd29yZGxpc3RzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB7IHdvcmRsaXN0IGFzIGN6ZWNoIH0gZnJvbSAnQHNjdXJlL2JpcDM5L3dvcmRsaXN0cy9jemVjaCc7XG5leHBvcnQgeyB3b3JkbGlzdCBhcyBlbmdsaXNoIH0gZnJvbSAnQHNjdXJlL2JpcDM5L3dvcmRsaXN0cy9lbmdsaXNoJztcbmV4cG9ydCB7IHdvcmRsaXN0IGFzIGZyZW5jaCB9IGZyb20gJ0BzY3VyZS9iaXAzOS93b3JkbGlzdHMvZnJlbmNoJztcbmV4cG9ydCB7IHdvcmRsaXN0IGFzIGl0YWxpYW4gfSBmcm9tICdAc2N1cmUvYmlwMzkvd29yZGxpc3RzL2l0YWxpYW4nO1xuZXhwb3J0IHsgd29yZGxpc3QgYXMgamFwYW5lc2UgfSBmcm9tICdAc2N1cmUvYmlwMzkvd29yZGxpc3RzL2phcGFuZXNlJztcbmV4cG9ydCB7IHdvcmRsaXN0IGFzIGtvcmVhbiB9IGZyb20gJ0BzY3VyZS9iaXAzOS93b3JkbGlzdHMva29yZWFuJztcbmV4cG9ydCB7IHdvcmRsaXN0IGFzIHBvcnR1Z3Vlc2UgfSBmcm9tICdAc2N1cmUvYmlwMzkvd29yZGxpc3RzL3BvcnR1Z3Vlc2UnO1xuZXhwb3J0IHsgd29yZGxpc3QgYXMgc2ltcGxpZmllZENoaW5lc2UgfSBmcm9tICdAc2N1cmUvYmlwMzkvd29yZGxpc3RzL3NpbXBsaWZpZWQtY2hpbmVzZSc7XG5leHBvcnQgeyB3b3JkbGlzdCBhcyBzcGFuaXNoIH0gZnJvbSAnQHNjdXJlL2JpcDM5L3dvcmRsaXN0cy9zcGFuaXNoJztcbmV4cG9ydCB7IHdvcmRsaXN0IGFzIHRyYWRpdGlvbmFsQ2hpbmVzZSB9IGZyb20gJ0BzY3VyZS9iaXAzOS93b3JkbGlzdHMvdHJhZGl0aW9uYWwtY2hpbmVzZSc7XG4vLyMgc291cmNlTWFwcGluZ1VSTD13b3JkbGlzdHMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ox/_esm/core/internal/mnemonic/wordlists.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ox/_esm/core/internal/promise.js":
/*!*******************************************************!*\
  !*** ./node_modules/ox/_esm/core/internal/promise.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TimeoutError: () => (/* binding */ TimeoutError),\n/* harmony export */   withTimeout: () => (/* binding */ withTimeout)\n/* harmony export */ });\n/* harmony import */ var _Errors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Errors.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Errors.js\");\n\n/** @internal */\nfunction withTimeout(fn, options) {\n    const { errorInstance = new TimeoutError(), timeout, signal } = options;\n    return new Promise((resolve, reject) => {\n        ;\n        (async () => {\n            let timeoutId;\n            try {\n                const controller = new AbortController();\n                if (timeout > 0)\n                    timeoutId = setTimeout(() => {\n                        if (signal) {\n                            controller.abort();\n                        }\n                        else {\n                            reject(errorInstance);\n                        }\n                    }, timeout);\n                resolve(await fn({ signal: controller.signal }));\n            }\n            catch (err) {\n                if (err?.name === 'AbortError')\n                    reject(errorInstance);\n                reject(err);\n            }\n            finally {\n                clearTimeout(timeoutId);\n            }\n        })();\n    });\n}\n/** @internal */\n/**\n * Thrown when an operation times out.\n * @internal\n */\nclass TimeoutError extends _Errors_js__WEBPACK_IMPORTED_MODULE_0__.BaseError {\n    constructor() {\n        super('Operation timed out.');\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'Promise.TimeoutError'\n        });\n    }\n}\n//# sourceMappingURL=promise.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9veC9fZXNtL2NvcmUvaW50ZXJuYWwvcHJvbWlzZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBdUM7QUFDdkM7QUFDTztBQUNQLFlBQVksc0RBQXNEO0FBQ2xFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckIsbUNBQW1DLDJCQUEyQjtBQUM5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLDJCQUEyQixpREFBZ0I7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGNoYW5kXFxEb3dubG9hZHNcXGpvaG53cmljaGtpZGludG9yaXp6XFxub2RlX21vZHVsZXNcXG94XFxfZXNtXFxjb3JlXFxpbnRlcm5hbFxccHJvbWlzZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBFcnJvcnMgZnJvbSAnLi4vRXJyb3JzLmpzJztcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBmdW5jdGlvbiB3aXRoVGltZW91dChmbiwgb3B0aW9ucykge1xuICAgIGNvbnN0IHsgZXJyb3JJbnN0YW5jZSA9IG5ldyBUaW1lb3V0RXJyb3IoKSwgdGltZW91dCwgc2lnbmFsIH0gPSBvcHRpb25zO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIDtcbiAgICAgICAgKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGxldCB0aW1lb3V0SWQ7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvbnRyb2xsZXIgPSBuZXcgQWJvcnRDb250cm9sbGVyKCk7XG4gICAgICAgICAgICAgICAgaWYgKHRpbWVvdXQgPiAwKVxuICAgICAgICAgICAgICAgICAgICB0aW1lb3V0SWQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzaWduYWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyLmFib3J0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyb3JJbnN0YW5jZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sIHRpbWVvdXQpO1xuICAgICAgICAgICAgICAgIHJlc29sdmUoYXdhaXQgZm4oeyBzaWduYWw6IGNvbnRyb2xsZXIuc2lnbmFsIH0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyPy5uYW1lID09PSAnQWJvcnRFcnJvcicpXG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnJvckluc3RhbmNlKTtcbiAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0SWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSgpO1xuICAgIH0pO1xufVxuLyoqIEBpbnRlcm5hbCAqL1xuLyoqXG4gKiBUaHJvd24gd2hlbiBhbiBvcGVyYXRpb24gdGltZXMgb3V0LlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBjbGFzcyBUaW1lb3V0RXJyb3IgZXh0ZW5kcyBFcnJvcnMuQmFzZUVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoJ09wZXJhdGlvbiB0aW1lZCBvdXQuJyk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIm5hbWVcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6ICdQcm9taXNlLlRpbWVvdXRFcnJvcidcbiAgICAgICAgfSk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJvbWlzZS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ox/_esm/core/internal/promise.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ox/_esm/core/internal/rpcTransport.js":
/*!************************************************************!*\
  !*** ./node_modules/ox/_esm/core/internal/rpcTransport.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   create: () => (/* binding */ create)\n/* harmony export */ });\n/* harmony import */ var _RpcRequest_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../RpcRequest.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/RpcRequest.js\");\n/* harmony import */ var _RpcResponse_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../RpcResponse.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/RpcResponse.js\");\n\n\n/** @internal */\nfunction create(transport, options_root) {\n    const requestStore = _RpcRequest_js__WEBPACK_IMPORTED_MODULE_0__.createStore();\n    return {\n        request: async ({ method, params }, options = {}) => {\n            const body = requestStore.prepare({ method, params });\n            const data = await transport.request(body, options);\n            return _RpcResponse_js__WEBPACK_IMPORTED_MODULE_1__.parse(data, {\n                raw: options.raw ?? options_root?.raw,\n            });\n        },\n    };\n}\n//# sourceMappingURL=rpcTransport.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9veC9fZXNtL2NvcmUvaW50ZXJuYWwvcnBjVHJhbnNwb3J0LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUErQztBQUNFO0FBQ2pEO0FBQ087QUFDUCx5QkFBeUIsdURBQXNCO0FBQy9DO0FBQ0EsMEJBQTBCLGdCQUFnQixjQUFjO0FBQ3hELGdEQUFnRCxnQkFBZ0I7QUFDaEU7QUFDQSxtQkFBbUIsa0RBQWlCO0FBQ3BDO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcY2hhbmRcXERvd25sb2Fkc1xcam9obndyaWNoa2lkaW50b3JpenpcXG5vZGVfbW9kdWxlc1xcb3hcXF9lc21cXGNvcmVcXGludGVybmFsXFxycGNUcmFuc3BvcnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgUnBjUmVxdWVzdCBmcm9tICcuLi9ScGNSZXF1ZXN0LmpzJztcbmltcG9ydCAqIGFzIFJwY1Jlc3BvbnNlIGZyb20gJy4uL1JwY1Jlc3BvbnNlLmpzJztcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGUodHJhbnNwb3J0LCBvcHRpb25zX3Jvb3QpIHtcbiAgICBjb25zdCByZXF1ZXN0U3RvcmUgPSBScGNSZXF1ZXN0LmNyZWF0ZVN0b3JlKCk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcmVxdWVzdDogYXN5bmMgKHsgbWV0aG9kLCBwYXJhbXMgfSwgb3B0aW9ucyA9IHt9KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBib2R5ID0gcmVxdWVzdFN0b3JlLnByZXBhcmUoeyBtZXRob2QsIHBhcmFtcyB9KTtcbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCB0cmFuc3BvcnQucmVxdWVzdChib2R5LCBvcHRpb25zKTtcbiAgICAgICAgICAgIHJldHVybiBScGNSZXNwb25zZS5wYXJzZShkYXRhLCB7XG4gICAgICAgICAgICAgICAgcmF3OiBvcHRpb25zLnJhdyA/PyBvcHRpb25zX3Jvb3Q/LnJhdyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ycGNUcmFuc3BvcnQuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ox/_esm/core/internal/rpcTransport.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ox/_esm/core/internal/uid.js":
/*!***************************************************!*\
  !*** ./node_modules/ox/_esm/core/internal/uid.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   uid: () => (/* binding */ uid)\n/* harmony export */ });\nconst size = 256;\nlet index = size;\nlet buffer;\n/** @internal */\nfunction uid(length = 11) {\n    if (!buffer || index + length > size * 2) {\n        buffer = '';\n        index = 0;\n        for (let i = 0; i < size; i++) {\n            buffer += ((256 + Math.random() * 256) | 0).toString(16).substring(1);\n        }\n    }\n    return buffer.substring(index, index++ + length);\n}\n//# sourceMappingURL=uid.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9veC9fZXNtL2NvcmUvaW50ZXJuYWwvdWlkLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLFVBQVU7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGNoYW5kXFxEb3dubG9hZHNcXGpvaG53cmljaGtpZGludG9yaXp6XFxub2RlX21vZHVsZXNcXG94XFxfZXNtXFxjb3JlXFxpbnRlcm5hbFxcdWlkLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHNpemUgPSAyNTY7XG5sZXQgaW5kZXggPSBzaXplO1xubGV0IGJ1ZmZlcjtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBmdW5jdGlvbiB1aWQobGVuZ3RoID0gMTEpIHtcbiAgICBpZiAoIWJ1ZmZlciB8fCBpbmRleCArIGxlbmd0aCA+IHNpemUgKiAyKSB7XG4gICAgICAgIGJ1ZmZlciA9ICcnO1xuICAgICAgICBpbmRleCA9IDA7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2l6ZTsgaSsrKSB7XG4gICAgICAgICAgICBidWZmZXIgKz0gKCgyNTYgKyBNYXRoLnJhbmRvbSgpICogMjU2KSB8IDApLnRvU3RyaW5nKDE2KS5zdWJzdHJpbmcoMSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGJ1ZmZlci5zdWJzdHJpbmcoaW5kZXgsIGluZGV4KysgKyBsZW5ndGgpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dWlkLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ox/_esm/core/internal/uid.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ox/_esm/core/internal/webauthn.js":
/*!********************************************************!*\
  !*** ./node_modules/ox/_esm/core/internal/webauthn.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseAsn1Signature: () => (/* binding */ parseAsn1Signature),\n/* harmony export */   parseCredentialPublicKey: () => (/* binding */ parseCredentialPublicKey)\n/* harmony export */ });\n/* harmony import */ var _noble_curves_p256__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @noble/curves/p256 */ \"(pages-dir-browser)/./node_modules/@noble/curves/esm/p256.js\");\n/* harmony import */ var _Hex_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Hex.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Hex.js\");\n/* harmony import */ var _PublicKey_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../PublicKey.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/PublicKey.js\");\n/* harmony import */ var _WebAuthnP256_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../WebAuthnP256.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/WebAuthnP256.js\");\n\n\n\n\n/**\n * Parses an ASN.1 signature into a r and s value.\n *\n * @internal\n */\nfunction parseAsn1Signature(bytes) {\n    const r_start = bytes[4] === 0 ? 5 : 4;\n    const r_end = r_start + 32;\n    const s_start = bytes[r_end + 2] === 0 ? r_end + 3 : r_end + 2;\n    const r = BigInt(_Hex_js__WEBPACK_IMPORTED_MODULE_0__.fromBytes(bytes.slice(r_start, r_end)));\n    const s = BigInt(_Hex_js__WEBPACK_IMPORTED_MODULE_0__.fromBytes(bytes.slice(s_start)));\n    return {\n        r,\n        s: s > _noble_curves_p256__WEBPACK_IMPORTED_MODULE_1__.p256.CURVE.n / 2n ? _noble_curves_p256__WEBPACK_IMPORTED_MODULE_1__.p256.CURVE.n - s : s,\n    };\n}\n/**\n * Parses a public key into x and y coordinates from the public key\n * defined on the credential.\n *\n * @internal\n */\nasync function parseCredentialPublicKey(response) {\n    try {\n        const publicKeyBuffer = response.getPublicKey();\n        if (!publicKeyBuffer)\n            throw new _WebAuthnP256_js__WEBPACK_IMPORTED_MODULE_2__.CredentialCreationFailedError();\n        // Converting `publicKeyBuffer` throws when credential is created by 1Password Firefox Add-on\n        const publicKeyBytes = new Uint8Array(publicKeyBuffer);\n        const cryptoKey = await crypto.subtle.importKey('spki', new Uint8Array(publicKeyBytes), {\n            name: 'ECDSA',\n            namedCurve: 'P-256',\n            hash: 'SHA-256',\n        }, true, ['verify']);\n        const publicKey = new Uint8Array(await crypto.subtle.exportKey('raw', cryptoKey));\n        return _PublicKey_js__WEBPACK_IMPORTED_MODULE_3__.from(publicKey);\n    }\n    catch (error) {\n        // Fallback for 1Password Firefox Add-on restricts access to certain credential properties\n        // so we need to use `attestationObject` to extract the public key.\n        // https://github.com/passwordless-id/webauthn/issues/50#issuecomment-2072902094\n        if (error.message !== 'Permission denied to access object')\n            throw error;\n        const data = new Uint8Array(response.attestationObject);\n        const coordinateLength = 0x20;\n        const cborPrefix = 0x58;\n        const findStart = (key) => {\n            const coordinate = new Uint8Array([key, cborPrefix, coordinateLength]);\n            for (let i = 0; i < data.length - coordinate.length; i++)\n                if (coordinate.every((byte, j) => data[i + j] === byte))\n                    return i + coordinate.length;\n            throw new _WebAuthnP256_js__WEBPACK_IMPORTED_MODULE_2__.CredentialCreationFailedError();\n        };\n        const xStart = findStart(0x21);\n        const yStart = findStart(0x22);\n        return _PublicKey_js__WEBPACK_IMPORTED_MODULE_3__.from(new Uint8Array([\n            0x04,\n            ...data.slice(xStart, xStart + coordinateLength),\n            ...data.slice(yStart, yStart + coordinateLength),\n        ]));\n    }\n}\n//# sourceMappingURL=webauthn.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9veC9fZXNtL2NvcmUvaW50ZXJuYWwvd2ViYXV0aG4uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQTBDO0FBQ1Q7QUFDWTtBQUNzQjtBQUNuRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsOENBQWE7QUFDbEMscUJBQXFCLDhDQUFhO0FBQ2xDO0FBQ0E7QUFDQSxlQUFlLG9EQUFJLGdCQUFnQixvREFBSTtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsMkVBQTZCO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLGVBQWUsK0NBQWM7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLHFDQUFxQztBQUNqRTtBQUNBO0FBQ0Esc0JBQXNCLDJFQUE2QjtBQUNuRDtBQUNBO0FBQ0E7QUFDQSxlQUFlLCtDQUFjO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGNoYW5kXFxEb3dubG9hZHNcXGpvaG53cmljaGtpZGludG9yaXp6XFxub2RlX21vZHVsZXNcXG94XFxfZXNtXFxjb3JlXFxpbnRlcm5hbFxcd2ViYXV0aG4uanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcDI1NiB9IGZyb20gJ0Bub2JsZS9jdXJ2ZXMvcDI1Nic7XG5pbXBvcnQgKiBhcyBIZXggZnJvbSAnLi4vSGV4LmpzJztcbmltcG9ydCAqIGFzIFB1YmxpY0tleSBmcm9tICcuLi9QdWJsaWNLZXkuanMnO1xuaW1wb3J0IHsgQ3JlZGVudGlhbENyZWF0aW9uRmFpbGVkRXJyb3IgfSBmcm9tICcuLi9XZWJBdXRoblAyNTYuanMnO1xuLyoqXG4gKiBQYXJzZXMgYW4gQVNOLjEgc2lnbmF0dXJlIGludG8gYSByIGFuZCBzIHZhbHVlLlxuICpcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VBc24xU2lnbmF0dXJlKGJ5dGVzKSB7XG4gICAgY29uc3Qgcl9zdGFydCA9IGJ5dGVzWzRdID09PSAwID8gNSA6IDQ7XG4gICAgY29uc3Qgcl9lbmQgPSByX3N0YXJ0ICsgMzI7XG4gICAgY29uc3Qgc19zdGFydCA9IGJ5dGVzW3JfZW5kICsgMl0gPT09IDAgPyByX2VuZCArIDMgOiByX2VuZCArIDI7XG4gICAgY29uc3QgciA9IEJpZ0ludChIZXguZnJvbUJ5dGVzKGJ5dGVzLnNsaWNlKHJfc3RhcnQsIHJfZW5kKSkpO1xuICAgIGNvbnN0IHMgPSBCaWdJbnQoSGV4LmZyb21CeXRlcyhieXRlcy5zbGljZShzX3N0YXJ0KSkpO1xuICAgIHJldHVybiB7XG4gICAgICAgIHIsXG4gICAgICAgIHM6IHMgPiBwMjU2LkNVUlZFLm4gLyAybiA/IHAyNTYuQ1VSVkUubiAtIHMgOiBzLFxuICAgIH07XG59XG4vKipcbiAqIFBhcnNlcyBhIHB1YmxpYyBrZXkgaW50byB4IGFuZCB5IGNvb3JkaW5hdGVzIGZyb20gdGhlIHB1YmxpYyBrZXlcbiAqIGRlZmluZWQgb24gdGhlIGNyZWRlbnRpYWwuXG4gKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBwYXJzZUNyZWRlbnRpYWxQdWJsaWNLZXkocmVzcG9uc2UpIHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBwdWJsaWNLZXlCdWZmZXIgPSByZXNwb25zZS5nZXRQdWJsaWNLZXkoKTtcbiAgICAgICAgaWYgKCFwdWJsaWNLZXlCdWZmZXIpXG4gICAgICAgICAgICB0aHJvdyBuZXcgQ3JlZGVudGlhbENyZWF0aW9uRmFpbGVkRXJyb3IoKTtcbiAgICAgICAgLy8gQ29udmVydGluZyBgcHVibGljS2V5QnVmZmVyYCB0aHJvd3Mgd2hlbiBjcmVkZW50aWFsIGlzIGNyZWF0ZWQgYnkgMVBhc3N3b3JkIEZpcmVmb3ggQWRkLW9uXG4gICAgICAgIGNvbnN0IHB1YmxpY0tleUJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkocHVibGljS2V5QnVmZmVyKTtcbiAgICAgICAgY29uc3QgY3J5cHRvS2V5ID0gYXdhaXQgY3J5cHRvLnN1YnRsZS5pbXBvcnRLZXkoJ3Nwa2knLCBuZXcgVWludDhBcnJheShwdWJsaWNLZXlCeXRlcyksIHtcbiAgICAgICAgICAgIG5hbWU6ICdFQ0RTQScsXG4gICAgICAgICAgICBuYW1lZEN1cnZlOiAnUC0yNTYnLFxuICAgICAgICAgICAgaGFzaDogJ1NIQS0yNTYnLFxuICAgICAgICB9LCB0cnVlLCBbJ3ZlcmlmeSddKTtcbiAgICAgICAgY29uc3QgcHVibGljS2V5ID0gbmV3IFVpbnQ4QXJyYXkoYXdhaXQgY3J5cHRvLnN1YnRsZS5leHBvcnRLZXkoJ3JhdycsIGNyeXB0b0tleSkpO1xuICAgICAgICByZXR1cm4gUHVibGljS2V5LmZyb20ocHVibGljS2V5KTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIC8vIEZhbGxiYWNrIGZvciAxUGFzc3dvcmQgRmlyZWZveCBBZGQtb24gcmVzdHJpY3RzIGFjY2VzcyB0byBjZXJ0YWluIGNyZWRlbnRpYWwgcHJvcGVydGllc1xuICAgICAgICAvLyBzbyB3ZSBuZWVkIHRvIHVzZSBgYXR0ZXN0YXRpb25PYmplY3RgIHRvIGV4dHJhY3QgdGhlIHB1YmxpYyBrZXkuXG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9wYXNzd29yZGxlc3MtaWQvd2ViYXV0aG4vaXNzdWVzLzUwI2lzc3VlY29tbWVudC0yMDcyOTAyMDk0XG4gICAgICAgIGlmIChlcnJvci5tZXNzYWdlICE9PSAnUGVybWlzc2lvbiBkZW5pZWQgdG8gYWNjZXNzIG9iamVjdCcpXG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgY29uc3QgZGF0YSA9IG5ldyBVaW50OEFycmF5KHJlc3BvbnNlLmF0dGVzdGF0aW9uT2JqZWN0KTtcbiAgICAgICAgY29uc3QgY29vcmRpbmF0ZUxlbmd0aCA9IDB4MjA7XG4gICAgICAgIGNvbnN0IGNib3JQcmVmaXggPSAweDU4O1xuICAgICAgICBjb25zdCBmaW5kU3RhcnQgPSAoa2V5KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBjb29yZGluYXRlID0gbmV3IFVpbnQ4QXJyYXkoW2tleSwgY2JvclByZWZpeCwgY29vcmRpbmF0ZUxlbmd0aF0pO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aCAtIGNvb3JkaW5hdGUubGVuZ3RoOyBpKyspXG4gICAgICAgICAgICAgICAgaWYgKGNvb3JkaW5hdGUuZXZlcnkoKGJ5dGUsIGopID0+IGRhdGFbaSArIGpdID09PSBieXRlKSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGkgKyBjb29yZGluYXRlLmxlbmd0aDtcbiAgICAgICAgICAgIHRocm93IG5ldyBDcmVkZW50aWFsQ3JlYXRpb25GYWlsZWRFcnJvcigpO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCB4U3RhcnQgPSBmaW5kU3RhcnQoMHgyMSk7XG4gICAgICAgIGNvbnN0IHlTdGFydCA9IGZpbmRTdGFydCgweDIyKTtcbiAgICAgICAgcmV0dXJuIFB1YmxpY0tleS5mcm9tKG5ldyBVaW50OEFycmF5KFtcbiAgICAgICAgICAgIDB4MDQsXG4gICAgICAgICAgICAuLi5kYXRhLnNsaWNlKHhTdGFydCwgeFN0YXJ0ICsgY29vcmRpbmF0ZUxlbmd0aCksXG4gICAgICAgICAgICAuLi5kYXRhLnNsaWNlKHlTdGFydCwgeVN0YXJ0ICsgY29vcmRpbmF0ZUxlbmd0aCksXG4gICAgICAgIF0pKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD13ZWJhdXRobi5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ox/_esm/core/internal/webauthn.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ox/_esm/index.js":
/*!***************************************!*\
  !*** ./node_modules/ox/_esm/index.js ***!
  \***************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Abi: () => (/* reexport module object */ _core_Abi_js__WEBPACK_IMPORTED_MODULE_0__),\n/* harmony export */   AbiConstructor: () => (/* reexport module object */ _core_AbiConstructor_js__WEBPACK_IMPORTED_MODULE_1__),\n/* harmony export */   AbiError: () => (/* reexport module object */ _core_AbiError_js__WEBPACK_IMPORTED_MODULE_2__),\n/* harmony export */   AbiEvent: () => (/* reexport module object */ _core_AbiEvent_js__WEBPACK_IMPORTED_MODULE_3__),\n/* harmony export */   AbiFunction: () => (/* reexport module object */ _core_AbiFunction_js__WEBPACK_IMPORTED_MODULE_4__),\n/* harmony export */   AbiItem: () => (/* reexport module object */ _core_AbiItem_js__WEBPACK_IMPORTED_MODULE_5__),\n/* harmony export */   AbiParameters: () => (/* reexport module object */ _core_AbiParameters_js__WEBPACK_IMPORTED_MODULE_6__),\n/* harmony export */   AccessList: () => (/* reexport module object */ _core_AccessList_js__WEBPACK_IMPORTED_MODULE_7__),\n/* harmony export */   AccountProof: () => (/* reexport module object */ _core_AccountProof_js__WEBPACK_IMPORTED_MODULE_8__),\n/* harmony export */   Address: () => (/* reexport module object */ _core_Address_js__WEBPACK_IMPORTED_MODULE_9__),\n/* harmony export */   AesGcm: () => (/* reexport module object */ _core_AesGcm_js__WEBPACK_IMPORTED_MODULE_10__),\n/* harmony export */   Authorization: () => (/* reexport module object */ _core_Authorization_js__WEBPACK_IMPORTED_MODULE_11__),\n/* harmony export */   Base58: () => (/* reexport module object */ _core_Base58_js__WEBPACK_IMPORTED_MODULE_12__),\n/* harmony export */   Base64: () => (/* reexport module object */ _core_Base64_js__WEBPACK_IMPORTED_MODULE_13__),\n/* harmony export */   BinaryStateTree: () => (/* reexport module object */ _core_BinaryStateTree_js__WEBPACK_IMPORTED_MODULE_14__),\n/* harmony export */   Blobs: () => (/* reexport module object */ _core_Blobs_js__WEBPACK_IMPORTED_MODULE_15__),\n/* harmony export */   Block: () => (/* reexport module object */ _core_Block_js__WEBPACK_IMPORTED_MODULE_16__),\n/* harmony export */   BlockOverrides: () => (/* reexport module object */ _core_BlockOverrides_js__WEBPACK_IMPORTED_MODULE_17__),\n/* harmony export */   Bloom: () => (/* reexport module object */ _core_Bloom_js__WEBPACK_IMPORTED_MODULE_18__),\n/* harmony export */   Bls: () => (/* reexport module object */ _core_Bls_js__WEBPACK_IMPORTED_MODULE_19__),\n/* harmony export */   BlsPoint: () => (/* reexport module object */ _core_BlsPoint_js__WEBPACK_IMPORTED_MODULE_20__),\n/* harmony export */   Bytes: () => (/* reexport module object */ _core_Bytes_js__WEBPACK_IMPORTED_MODULE_21__),\n/* harmony export */   Caches: () => (/* reexport module object */ _core_Caches_js__WEBPACK_IMPORTED_MODULE_22__),\n/* harmony export */   ContractAddress: () => (/* reexport module object */ _core_ContractAddress_js__WEBPACK_IMPORTED_MODULE_23__),\n/* harmony export */   Ens: () => (/* reexport module object */ _core_Ens_js__WEBPACK_IMPORTED_MODULE_24__),\n/* harmony export */   Errors: () => (/* reexport module object */ _core_Errors_js__WEBPACK_IMPORTED_MODULE_25__),\n/* harmony export */   Fee: () => (/* reexport module object */ _core_Fee_js__WEBPACK_IMPORTED_MODULE_30__),\n/* harmony export */   Filter: () => (/* reexport module object */ _core_Filter_js__WEBPACK_IMPORTED_MODULE_26__),\n/* harmony export */   Hash: () => (/* reexport module object */ _core_Hash_js__WEBPACK_IMPORTED_MODULE_27__),\n/* harmony export */   HdKey: () => (/* reexport module object */ _core_HdKey_js__WEBPACK_IMPORTED_MODULE_28__),\n/* harmony export */   Hex: () => (/* reexport module object */ _core_Hex_js__WEBPACK_IMPORTED_MODULE_29__),\n/* harmony export */   Json: () => (/* reexport module object */ _core_Json_js__WEBPACK_IMPORTED_MODULE_31__),\n/* harmony export */   Keystore: () => (/* reexport module object */ _core_Keystore_js__WEBPACK_IMPORTED_MODULE_32__),\n/* harmony export */   Kzg: () => (/* reexport module object */ _core_Kzg_js__WEBPACK_IMPORTED_MODULE_33__),\n/* harmony export */   Log: () => (/* reexport module object */ _core_Log_js__WEBPACK_IMPORTED_MODULE_34__),\n/* harmony export */   Mnemonic: () => (/* reexport module object */ _core_Mnemonic_js__WEBPACK_IMPORTED_MODULE_35__),\n/* harmony export */   P256: () => (/* reexport module object */ _core_P256_js__WEBPACK_IMPORTED_MODULE_45__),\n/* harmony export */   PersonalMessage: () => (/* reexport module object */ _core_PersonalMessage_js__WEBPACK_IMPORTED_MODULE_36__),\n/* harmony export */   Provider: () => (/* reexport module object */ _core_Provider_js__WEBPACK_IMPORTED_MODULE_37__),\n/* harmony export */   PublicKey: () => (/* reexport module object */ _core_PublicKey_js__WEBPACK_IMPORTED_MODULE_38__),\n/* harmony export */   Rlp: () => (/* reexport module object */ _core_Rlp_js__WEBPACK_IMPORTED_MODULE_39__),\n/* harmony export */   RpcRequest: () => (/* reexport module object */ _core_RpcRequest_js__WEBPACK_IMPORTED_MODULE_41__),\n/* harmony export */   RpcResponse: () => (/* reexport module object */ _core_RpcResponse_js__WEBPACK_IMPORTED_MODULE_42__),\n/* harmony export */   RpcSchema: () => (/* reexport module object */ _core_RpcSchema_js__WEBPACK_IMPORTED_MODULE_40__),\n/* harmony export */   RpcTransport: () => (/* reexport module object */ _core_RpcTransport_js__WEBPACK_IMPORTED_MODULE_43__),\n/* harmony export */   Secp256k1: () => (/* reexport module object */ _core_Secp256k1_js__WEBPACK_IMPORTED_MODULE_44__),\n/* harmony export */   Signature: () => (/* reexport module object */ _core_Signature_js__WEBPACK_IMPORTED_MODULE_46__),\n/* harmony export */   Siwe: () => (/* reexport module object */ _core_Siwe_js__WEBPACK_IMPORTED_MODULE_47__),\n/* harmony export */   Solidity: () => (/* reexport module object */ _core_Solidity_js__WEBPACK_IMPORTED_MODULE_48__),\n/* harmony export */   StateOverrides: () => (/* reexport module object */ _core_StateOverrides_js__WEBPACK_IMPORTED_MODULE_49__),\n/* harmony export */   Transaction: () => (/* reexport module object */ _core_Transaction_js__WEBPACK_IMPORTED_MODULE_50__),\n/* harmony export */   TransactionEnvelope: () => (/* reexport module object */ _core_TransactionEnvelope_js__WEBPACK_IMPORTED_MODULE_51__),\n/* harmony export */   TransactionEnvelopeEip1559: () => (/* reexport module object */ _core_TransactionEnvelopeEip1559_js__WEBPACK_IMPORTED_MODULE_53__),\n/* harmony export */   TransactionEnvelopeEip2930: () => (/* reexport module object */ _core_TransactionEnvelopeEip2930_js__WEBPACK_IMPORTED_MODULE_54__),\n/* harmony export */   TransactionEnvelopeEip4844: () => (/* reexport module object */ _core_TransactionEnvelopeEip4844_js__WEBPACK_IMPORTED_MODULE_55__),\n/* harmony export */   TransactionEnvelopeEip7702: () => (/* reexport module object */ _core_TransactionEnvelopeEip7702_js__WEBPACK_IMPORTED_MODULE_56__),\n/* harmony export */   TransactionEnvelopeLegacy: () => (/* reexport module object */ _core_TransactionEnvelopeLegacy_js__WEBPACK_IMPORTED_MODULE_52__),\n/* harmony export */   TransactionReceipt: () => (/* reexport module object */ _core_TransactionReceipt_js__WEBPACK_IMPORTED_MODULE_57__),\n/* harmony export */   TransactionRequest: () => (/* reexport module object */ _core_TransactionRequest_js__WEBPACK_IMPORTED_MODULE_58__),\n/* harmony export */   TypedData: () => (/* reexport module object */ _core_TypedData_js__WEBPACK_IMPORTED_MODULE_59__),\n/* harmony export */   ValidatorData: () => (/* reexport module object */ _core_ValidatorData_js__WEBPACK_IMPORTED_MODULE_60__),\n/* harmony export */   Value: () => (/* reexport module object */ _core_Value_js__WEBPACK_IMPORTED_MODULE_61__),\n/* harmony export */   WebAuthnP256: () => (/* reexport module object */ _core_WebAuthnP256_js__WEBPACK_IMPORTED_MODULE_62__),\n/* harmony export */   WebCryptoP256: () => (/* reexport module object */ _core_WebCryptoP256_js__WEBPACK_IMPORTED_MODULE_63__),\n/* harmony export */   Withdrawal: () => (/* reexport module object */ _core_Withdrawal_js__WEBPACK_IMPORTED_MODULE_64__)\n/* harmony export */ });\n/* harmony import */ var _core_Abi_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core/Abi.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Abi.js\");\n/* harmony import */ var _core_AbiConstructor_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./core/AbiConstructor.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/AbiConstructor.js\");\n/* harmony import */ var _core_AbiError_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./core/AbiError.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/AbiError.js\");\n/* harmony import */ var _core_AbiEvent_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./core/AbiEvent.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/AbiEvent.js\");\n/* harmony import */ var _core_AbiFunction_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./core/AbiFunction.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/AbiFunction.js\");\n/* harmony import */ var _core_AbiItem_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./core/AbiItem.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/AbiItem.js\");\n/* harmony import */ var _core_AbiParameters_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./core/AbiParameters.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/AbiParameters.js\");\n/* harmony import */ var _core_AccessList_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./core/AccessList.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/AccessList.js\");\n/* harmony import */ var _core_AccountProof_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./core/AccountProof.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/AccountProof.js\");\n/* harmony import */ var _core_Address_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./core/Address.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Address.js\");\n/* harmony import */ var _core_AesGcm_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./core/AesGcm.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/AesGcm.js\");\n/* harmony import */ var _core_Authorization_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./core/Authorization.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Authorization.js\");\n/* harmony import */ var _core_Base58_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./core/Base58.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Base58.js\");\n/* harmony import */ var _core_Base64_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./core/Base64.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Base64.js\");\n/* harmony import */ var _core_BinaryStateTree_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./core/BinaryStateTree.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/BinaryStateTree.js\");\n/* harmony import */ var _core_Blobs_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./core/Blobs.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Blobs.js\");\n/* harmony import */ var _core_Block_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./core/Block.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Block.js\");\n/* harmony import */ var _core_BlockOverrides_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./core/BlockOverrides.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/BlockOverrides.js\");\n/* harmony import */ var _core_Bloom_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./core/Bloom.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Bloom.js\");\n/* harmony import */ var _core_Bls_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./core/Bls.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Bls.js\");\n/* harmony import */ var _core_BlsPoint_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./core/BlsPoint.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/BlsPoint.js\");\n/* harmony import */ var _core_Bytes_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./core/Bytes.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Bytes.js\");\n/* harmony import */ var _core_Caches_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./core/Caches.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Caches.js\");\n/* harmony import */ var _core_ContractAddress_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./core/ContractAddress.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/ContractAddress.js\");\n/* harmony import */ var _core_Ens_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./core/Ens.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Ens.js\");\n/* harmony import */ var _core_Errors_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./core/Errors.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Errors.js\");\n/* harmony import */ var _core_Filter_js__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./core/Filter.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Filter.js\");\n/* harmony import */ var _core_Hash_js__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./core/Hash.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Hash.js\");\n/* harmony import */ var _core_HdKey_js__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./core/HdKey.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/HdKey.js\");\n/* harmony import */ var _core_Hex_js__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./core/Hex.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Hex.js\");\n/* harmony import */ var _core_Fee_js__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./core/Fee.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Fee.js\");\n/* harmony import */ var _core_Json_js__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./core/Json.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Json.js\");\n/* harmony import */ var _core_Keystore_js__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./core/Keystore.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Keystore.js\");\n/* harmony import */ var _core_Kzg_js__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./core/Kzg.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Kzg.js\");\n/* harmony import */ var _core_Log_js__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./core/Log.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Log.js\");\n/* harmony import */ var _core_Mnemonic_js__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ./core/Mnemonic.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Mnemonic.js\");\n/* harmony import */ var _core_PersonalMessage_js__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ./core/PersonalMessage.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/PersonalMessage.js\");\n/* harmony import */ var _core_Provider_js__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ./core/Provider.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Provider.js\");\n/* harmony import */ var _core_PublicKey_js__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! ./core/PublicKey.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/PublicKey.js\");\n/* harmony import */ var _core_Rlp_js__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! ./core/Rlp.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Rlp.js\");\n/* harmony import */ var _core_RpcSchema_js__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! ./core/RpcSchema.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/RpcSchema.js\");\n/* harmony import */ var _core_RpcRequest_js__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! ./core/RpcRequest.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/RpcRequest.js\");\n/* harmony import */ var _core_RpcResponse_js__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! ./core/RpcResponse.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/RpcResponse.js\");\n/* harmony import */ var _core_RpcTransport_js__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! ./core/RpcTransport.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/RpcTransport.js\");\n/* harmony import */ var _core_Secp256k1_js__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! ./core/Secp256k1.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Secp256k1.js\");\n/* harmony import */ var _core_P256_js__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(/*! ./core/P256.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/P256.js\");\n/* harmony import */ var _core_Signature_js__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(/*! ./core/Signature.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Signature.js\");\n/* harmony import */ var _core_Siwe_js__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(/*! ./core/Siwe.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Siwe.js\");\n/* harmony import */ var _core_Solidity_js__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(/*! ./core/Solidity.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Solidity.js\");\n/* harmony import */ var _core_StateOverrides_js__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(/*! ./core/StateOverrides.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/StateOverrides.js\");\n/* harmony import */ var _core_Transaction_js__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(/*! ./core/Transaction.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Transaction.js\");\n/* harmony import */ var _core_TransactionEnvelope_js__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__(/*! ./core/TransactionEnvelope.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/TransactionEnvelope.js\");\n/* harmony import */ var _core_TransactionEnvelopeLegacy_js__WEBPACK_IMPORTED_MODULE_52__ = __webpack_require__(/*! ./core/TransactionEnvelopeLegacy.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/TransactionEnvelopeLegacy.js\");\n/* harmony import */ var _core_TransactionEnvelopeEip1559_js__WEBPACK_IMPORTED_MODULE_53__ = __webpack_require__(/*! ./core/TransactionEnvelopeEip1559.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/TransactionEnvelopeEip1559.js\");\n/* harmony import */ var _core_TransactionEnvelopeEip2930_js__WEBPACK_IMPORTED_MODULE_54__ = __webpack_require__(/*! ./core/TransactionEnvelopeEip2930.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/TransactionEnvelopeEip2930.js\");\n/* harmony import */ var _core_TransactionEnvelopeEip4844_js__WEBPACK_IMPORTED_MODULE_55__ = __webpack_require__(/*! ./core/TransactionEnvelopeEip4844.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/TransactionEnvelopeEip4844.js\");\n/* harmony import */ var _core_TransactionEnvelopeEip7702_js__WEBPACK_IMPORTED_MODULE_56__ = __webpack_require__(/*! ./core/TransactionEnvelopeEip7702.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/TransactionEnvelopeEip7702.js\");\n/* harmony import */ var _core_TransactionReceipt_js__WEBPACK_IMPORTED_MODULE_57__ = __webpack_require__(/*! ./core/TransactionReceipt.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/TransactionReceipt.js\");\n/* harmony import */ var _core_TransactionRequest_js__WEBPACK_IMPORTED_MODULE_58__ = __webpack_require__(/*! ./core/TransactionRequest.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/TransactionRequest.js\");\n/* harmony import */ var _core_TypedData_js__WEBPACK_IMPORTED_MODULE_59__ = __webpack_require__(/*! ./core/TypedData.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/TypedData.js\");\n/* harmony import */ var _core_ValidatorData_js__WEBPACK_IMPORTED_MODULE_60__ = __webpack_require__(/*! ./core/ValidatorData.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/ValidatorData.js\");\n/* harmony import */ var _core_Value_js__WEBPACK_IMPORTED_MODULE_61__ = __webpack_require__(/*! ./core/Value.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Value.js\");\n/* harmony import */ var _core_WebAuthnP256_js__WEBPACK_IMPORTED_MODULE_62__ = __webpack_require__(/*! ./core/WebAuthnP256.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/WebAuthnP256.js\");\n/* harmony import */ var _core_WebCryptoP256_js__WEBPACK_IMPORTED_MODULE_63__ = __webpack_require__(/*! ./core/WebCryptoP256.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/WebCryptoP256.js\");\n/* harmony import */ var _core_Withdrawal_js__WEBPACK_IMPORTED_MODULE_64__ = __webpack_require__(/*! ./core/Withdrawal.js */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Withdrawal.js\");\n/**\n * Utilities & types for working with [Application Binary Interfaces (ABIs)](https://docs.soliditylang.org/en/latest/abi-spec.html)\n *\n * :::note\n *\n * If you are looking for ABI parameter **encoding** & **decoding** functions, see {@link ox#AbiParameters.(encode:function)} & {@link ox#AbiParameters.(decode:function)}.\n *\n * :::\n *\n * @example\n * ### Instantiating JSON ABIs\n *\n * An {@link ox#Abi.Abi} can be instantiated from a JSON ABI by using {@link ox#Abi.(from:function)}:\n *\n * ```ts twoslash\n * import { Abi } from 'ox'\n *\n * const abi = Abi.from([{\n *   type: 'function',\n *   name: 'approve',\n *   stateMutability: 'nonpayable',\n *   inputs: [\n *     {\n *       name: 'spender',\n *       type: 'address',\n *     },\n *     {\n *       name: 'amount',\n *       type: 'uint256',\n *     },\n *   ],\n *   outputs: [{ type: 'bool' }],\n * }])\n *\n * abi\n * //^?\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n * ```\n *\n * @example\n * ### Instantiating Human Readable ABIs\n *\n * An {@link ox#Abi.Abi} can be instantiated from a human-readable ABI by using {@link ox#Abi.(from:function)}:\n *\n * ```ts twoslash\n * import { Abi } from 'ox'\n *\n * const abi = Abi.from([\n *   'function approve(address spender, uint256 amount) returns (bool)',\n * ])\n *\n * abi\n * //^?\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n * ```\n *\n * @example\n * ### Formatting ABIs\n *\n * An {@link ox#Abi.Abi} can be formatted into a human-readable ABI by using {@link ox#Abi.(format:function)}:\n *\n * ```ts twoslash\n * import { Abi } from 'ox'\n * const abi = Abi.from([{\n *   type: 'function',\n *   name: 'approve',\n *   stateMutability: 'nonpayable',\n *   inputs: [\n *     {\n *       name: 'spender',\n *       type: 'address',\n *     },\n *     {\n *       name: 'amount',\n *       type: 'uint256',\n *     },\n *   ],\n *   outputs: [{ type: 'bool' }],\n * }])\n * //---cut---\n * const formatted = Abi.format(abi)\n *\n * formatted\n * //    ^?\n *\n *\n * ```\n *\n * @category ABI\n */\n\n/**\n * Utilities & types for working with [Constructors](https://docs.soliditylang.org/en/latest/abi-spec.html#json) on ABIs.\n *\n * `AbiConstructor` is a sub-type of [`AbiItem`](/api/AbiItem).\n *\n * @example\n * ### Instantiating via JSON ABI\n *\n * An `AbiConstructor` can be instantiated from a JSON ABI by using {@link ox#AbiConstructor.(fromAbi:function)}:\n *\n * ```ts twoslash\n * import { Abi, AbiConstructor } from 'ox'\n *\n * const abi = Abi.from([\n *   'constructor(address owner)',\n *   'function foo()',\n *   'event Transfer(address owner, address to, uint256 tokenId)',\n *   'function bar(string a) returns (uint256 x)',\n * ])\n *\n * const item = AbiConstructor.fromAbi(abi) // [!code focus]\n * //    ^?\n *\n *\n *\n *\n *\n *\n *\n *\n *\n * ```\n *\n * @example\n * ### Instantiating via Human-Readable ABI Item\n *\n * An `AbiConstructor` can be instantiated from a human-readable ABI by using {@link ox#AbiConstructor.(from:function)}:\n *\n * ```ts twoslash\n * import { AbiConstructor } from 'ox'\n *\n * const constructor = AbiConstructor.from('constructor(address owner)')\n *\n * constructor\n * //^?\n *\n *\n *\n *\n *\n *\n *\n *\n *\n * ```\n *\n * @example\n * ### Encoding to Deploy Data\n *\n * Constructor arguments can be ABI-encoded using {@link ox#AbiConstructor.(encode:function)} (with bytecode) into deploy data. This data can then be passed to a transaction to deploy a contract.\n *\n * ```ts twoslash\n * import { AbiConstructor } from 'ox'\n *\n * const constructor = AbiConstructor.from('constructor(address, uint256)')\n *\n * const data = AbiConstructor.encode(constructor, { // [!code focus]\n *   bytecode: '0x...', // [!code focus]\n *   args: ['0xd8da6bf26964af9d7eed9e03e53415d37aa96045', 123n], // [!code focus]\n * }) // [!code focus]\n * ```\n *\n * @category ABI\n */\n\n/**\n * Utilities & types for working with [Errors](https://docs.soliditylang.org/en/latest/abi-spec.html#json) on ABIs.\n *\n * `AbiError` is a sub-type of [`AbiItem`](/api/AbiItem).\n *\n * @example\n * ### Instantiating via JSON ABI\n *\n * An `AbiError` can be instantiated from a JSON ABI by using {@link ox#AbiError.(fromAbi:function)}:\n *\n * ```ts twoslash\n * import { Abi, AbiError } from 'ox'\n *\n * const abi = Abi.from([\n *   'function foo()',\n *   'error BadSignatureV(uint8 v)',\n *   'function bar(string a) returns (uint256 x)',\n * ])\n *\n * const item = AbiError.fromAbi(abi, 'BadSignatureV') // [!code focus]\n * //    ^?\n *\n *\n *\n *\n *\n *\n * ```\n *\n * @example\n * ### Instantiating via Human-Readable ABI Item\n *\n * An `AbiError` can be instantiated from a human-readable ABI by using {@link ox#AbiError.(from:function)}:\n *\n * ```ts twoslash\n * import { AbiError } from 'ox'\n *\n * const error = AbiError.from('error BadSignatureV(uint8 v)')\n *\n * error\n * //^?\n *\n *\n *\n *\n *\n *\n *\n *\n *\n * ```\n *\n * @example\n * ### Decoding Error Data\n *\n * Error data can be ABI-decoded using the {@link ox#AbiError.(decode:function)} function.\n *\n * ```ts twoslash\n * // @noErrors\n * import { Abi, AbiError } from 'ox'\n *\n * const abi = Abi.from([...])\n * const error = AbiError.fromAbi(abi, 'InvalidSignature')\n *\n * const value = AbiError.decode(error, '0xecde634900000000000000000000000000000000000000000000000000000000000001a400000000000000000000000000000000000000000000000000000000000000450000000000000000000000000000000000000000000000000000000000000001') // [!code focus]\n * // @log: [420n, 69n, 1]\n * ```\n *\n * @category ABI\n */\n\n/**\n * Utilities & types for working with [Events](https://docs.soliditylang.org/en/latest/abi-spec.html#json) on ABIs.\n *\n * `AbiEvent` is a sub-type of [`AbiItem`](/api/AbiItem).\n *\n * @example\n * ### Instantiating via JSON ABI\n *\n * An `AbiEvent` can be instantiated from a JSON ABI by using {@link ox#AbiEvent.(fromAbi:function)}:\n *\n * ```ts twoslash\n * import { Abi, AbiEvent } from 'ox'\n *\n * const abi = Abi.from([\n *   'function foo()',\n *   'event Transfer(address owner, address to, uint256 tokenId)',\n *   'function bar(string a) returns (uint256 x)',\n * ])\n *\n * const item = AbiEvent.fromAbi(abi, 'Transfer') // [!code focus]\n * //    ^?\n *\n *\n *\n *\n *\n *\n * ```\n *\n * @example\n * ### Instantiating via Human-Readable ABI Item\n *\n * An `AbiEvent` can be instantiated from a human-readable ABI by using {@link ox#AbiEvent.(from:function)}:\n *\n * ```ts twoslash\n * import { AbiEvent } from 'ox'\n *\n * const transfer = AbiEvent.from(\n *   'event Transfer(address indexed from, address indexed to, uint256 value)' // [!code hl]\n * )\n *\n * transfer\n * //^?\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n * ```\n *\n * @example\n * ### Encoding to Event Topics\n *\n * Encode an `AbiEvent` into topics using {@link ox#AbiEvent.(encode:function)}:\n *\n * ```ts twoslash\n * import { AbiEvent } from 'ox'\n *\n * const transfer = AbiEvent.from(\n *   'event Transfer(address indexed from, address indexed to, uint256 value)'\n * )\n *\n * const { topics } = AbiEvent.encode(transfer, {\n *   from: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266', // [!code hl]\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8' // [!code hl]\n * })\n * // @log: [\n * // @log:   '0x406dade31f7ae4b5dbc276258c28dde5ae6d5c2773c5745802c493a2360e55e0',\n * // @log:   '0x00000000000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266',\n * // @log:   '0x0000000000000000000000000000000070997970c51812dc3a010c7d01b50e0d17dc79c8'\n * // @log: ]\n * ```\n *\n * @example\n * ### Decoding Event Topics and Data\n *\n * Event topics and data can be decoded using {@link ox#AbiEvent.(decode:function)}:\n *\n * ```ts twoslash\n * import { AbiEvent } from 'ox'\n *\n * const transfer = AbiEvent.from(\n *   'event Transfer(address indexed from, address indexed to, uint256 value)'\n * )\n *\n * const log = {\n *   // ...\n *   data: '0x0000000000000000000000000000000000000000000000000000000000000001',\n *   topics: [\n *     '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef',\n *     '0x000000000000000000000000a5cc3c03994db5b0d9a5eedd10cabab0813678ac',\n *     '0x000000000000000000000000a5cc3c03994db5b0d9a5eedd10cabab0813678ac',\n *   ],\n * } as const\n *\n * const decoded = AbiEvent.decode(transfer, log)\n * // @log: {\n * // @log:   from: '0xa5cc3c03994db5b0d9a5eedd10cabab0813678ac',\n * // @log:   to: '0xa5cc3c03994db5b0d9a5eedd10cabab0813678ac',\n * // @log:   value: 1n\n * // @log: }\n * ```\n *\n * @category ABI\n */\n\n/**\n * Utilities & types for working with [Functions](https://docs.soliditylang.org/en/latest/abi-spec.html#json) on ABIs.\n *\n * `AbiFunction` is a sub-type of [`AbiItem`](/api/AbiItem).\n *\n * @example\n * ### Instantiating via JSON ABI\n *\n * An `AbiFunction` can be instantiated from a JSON ABI by using {@link ox#AbiFunction.(fromAbi:function)}:\n *\n * ```ts twoslash\n * import { Abi, AbiFunction } from 'ox'\n *\n * const abi = Abi.from([\n *   'function foo()',\n *   'event Transfer(address owner, address to, uint256 tokenId)',\n *   'function bar(string a) returns (uint256 x)',\n * ])\n *\n * const item = AbiFunction.fromAbi(abi, 'bar') // [!code focus]\n * //    ^?\n *\n *\n *\n *\n *\n *\n * ```\n *\n * @example\n * ### Instantiating via Human-Readable ABI Item\n *\n * An `AbiFunction` can be instantiated from a human-readable ABI by using {@link ox#AbiFunction.(from:function)}:\n *\n * ```ts twoslash\n * import { AbiFunction } from 'ox'\n *\n * const bar = AbiFunction.from('function bar(string a) returns (uint256 x)')\n *\n * bar\n * //^?\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n * ```\n *\n * @example\n * ### Encoding to Function Data\n *\n * A Function and its arguments can be ABI-encoded into data using the {@link ox#AbiFunction.(encodeData:function)} function. The output of this function can then be passed to `eth_sendTransaction` or `eth_call` as the `data` parameter.\n *\n * ```ts twoslash\n * import { AbiFunction } from 'ox'\n *\n * const approve = AbiFunction.from('function approve(address, uint256)')\n *\n * const data = AbiFunction.encodeData( // [!code focus]\n *   approve, // [!code focus]\n *   ['0xd8da6bf26964af9d7eed9e03e53415d37aa96045', 69420n] // [!code focus]\n * ) // [!code focus]\n * // @log: '0x095ea7b3000000000000000000000000d8da6bf26964af9d7eed9e03e53415d37aa960450000000000000000000000000000000000000000000000000000000000010f2c'\n * ```\n *\n * @example\n * ### Decoding a Function's Result\n *\n * A Function's result can be ABI-decoded using the {@link ox#AbiFunction.(decodeResult:function)} function.\n *\n * ```ts twoslash\n * import { AbiFunction } from 'ox'\n *\n * const data = '0x000000000000000000000000000000000000000000000000000000000000002a'\n * //    ↑ Example data that could be returned from a contract call via `eth_call`.\n *\n * const totalSupply = AbiFunction.from('function totalSupply() returns (uint256)')\n *\n * const output = AbiFunction.decodeResult(totalSupply, data) // [!code focus]\n * // @log: 42n\n * ```\n *\n * @category ABI\n */\n\n/**\n * Utilities & types for working with [ABI Items](https://docs.soliditylang.org/en/latest/abi-spec.html#json)\n *\n * The `AbiItem` type is a super-type of:\n * - [`AbiConstructor`](/api/AbiConstructor)\n * - [`AbiFunction`](/api/AbiFunction)\n * - [`AbiEvent`](/api/AbiEvent)\n * - [`AbiError`](/api/AbiError)\n *\n * @example\n * ### Instantiating via JSON ABI\n *\n * An `AbiItem` can be instantiated from a JSON ABI by using {@link ox#AbiItem.(fromAbi:function)}:\n *\n * ```ts twoslash\n * import { Abi, AbiItem } from 'ox'\n *\n * const abi = Abi.from([\n *   'function foo()',\n *   'event Transfer(address owner, address to, uint256 tokenId)',\n *   'function bar(string a) returns (uint256 x)',\n * ])\n *\n * const item = AbiItem.fromAbi(abi, 'Transfer') // [!code focus]\n * //    ^?\n *\n *\n *\n *\n *\n *\n * ```\n *\n * @example\n * ### Instantiating via Human-Readable ABI Item\n *\n * A Human Readable ABI can be parsed into a typed ABI object:\n *\n * ```ts twoslash\n * import { AbiItem } from 'ox'\n *\n * const abiItem = AbiItem.from('function approve(address spender, uint256 amount) returns (bool)')\n *\n * abiItem\n * //^?\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n * ```\n *\n * @example\n * ### Formatting ABI Items\n *\n * An `AbiItem` can be formatted into a human-readable ABI Item by using {@link ox#AbiItem.(format:function)}:\n *\n * ```ts twoslash\n * import { AbiItem } from 'ox'\n *\n * const abiItem = AbiItem.from('function approve(address spender, uint256 amount) returns (bool)')\n *\n * const formatted = AbiItem.format(abiItem)\n * // @log: 'function approve(address spender, uint256 amount) returns (bool)'\n * ```\n *\n * @category ABI\n */\n\n/**\n * Utilities & types for encoding, decoding, and working with [ABI Parameters](https://docs.soliditylang.org/en/latest/abi-spec.html#types)\n *\n * @example\n * ### Encoding ABI Parameters\n *\n * ABI Parameters can be ABI-encoded as per the [Application Binary Interface (ABI) Specification](https://docs.soliditylang.org/en/latest/abi-spec) using {@link ox#AbiParameters.(encode:function)}:\n *\n * ```ts twoslash\n * import { AbiParameters } from 'ox'\n *\n * const data = AbiParameters.encode(\n *   AbiParameters.from('string, uint, bool'),\n *   ['wagmi', 420n, true],\n * )\n * ```\n *\n * :::tip\n *\n * The example above uses {@link ox#AbiParameters.(from:function)} to specify human-readable ABI Parameters.\n *\n * However, you can also pass JSON-ABI Parameters:\n *\n * ```ts\n * import { AbiParameters } from 'ox'\n *\n * const data = AbiParameters.encode(\n *   [{ type: 'string' }, { type: 'uint' }, { type: 'bool' }],\n *   ['wagmi', 420n, true],\n * )\n * ```\n *\n * :::\n *\n * @example\n * ### Decoding ABI Parameters\n *\n * ABI-encoded data can be decoded using {@link ox#AbiParameters.(decode:function)}:\n *\n * ```ts twoslash\n * import { AbiParameters } from 'ox'\n *\n * const data = AbiParameters.decode(\n *   AbiParameters.from('string, uint, bool'),\n *   '0x000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001a4000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000057761676d69000000000000000000000000000000000000000000000000000000',\n * )\n * // @log: ['wagmi', 420n, true]\n * ```\n *\n * @example\n * ### JSON-ABI Parameters\n *\n * JSON-ABI Parameters can be instantiated using {@link ox#AbiParameters.(from:function)}:\n *\n * ```ts twoslash\n * import { AbiParameters } from 'ox'\n *\n * const parameters = AbiParameters.from([\n *   {\n *     name: 'spender',\n *     type: 'address',\n *   },\n *   {\n *     name: 'amount',\n *     type: 'uint256',\n *   },\n * ])\n *\n * parameters\n * //^?\n *\n *\n *\n *\n *\n *\n *\n * ```\n *\n * @example\n * ### Human Readable ABI Parameters\n *\n * Human Readable ABI Parameters can be instantiated using {@link ox#AbiParameters.(from:function)}:\n *\n * ```ts twoslash\n * import { AbiParameters } from 'ox'\n *\n * const parameters = AbiParameters.from('address spender, uint256 amount')\n *\n * parameters\n * //^?\n *\n *\n *\n *\n *\n *\n *\n * ```\n *\n * @category ABI\n */\n\n/**\n * Utilities & types for working with Access Lists as defined in the [Execution API specification](https://github.com/ethereum/execution-apis/blob/4140e528360fea53c34a766d86a000c6c039100e/src/schemas/transaction.yaml#L73)\n *\n * @category Execution Spec\n */\n\n/**\n * Utilities & types for working with Account Proofs as defined in the [Execution API specification](https://github.com/ethereum/execution-apis/blob/main/src/schemas/state.yaml)\n *\n * @category Execution Spec\n */\n\n/**\n * Utility functions for working with Ethereum addresses.\n *\n * @example\n * ### Instantiating Addresses\n *\n * An {@link ox#Address.Address} can be instantiated from a hex string using {@link ox#Address.(from:function)}:\n *\n * ```ts twoslash\n * import { Address } from 'ox'\n *\n * const address = Address.from('0xa0cf798816d4b9b9866b5330eea46a18382f251e')\n * // @log: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e'\n * ```\n *\n * @example\n * ### Validating Addresses\n *\n * The {@link ox#Address.(validate:function)} function will return `true` if the address is valid, and `false` otherwise:\n *\n * ```ts twoslash\n * import { Address } from 'ox'\n *\n * const valid = Address.validate('0xA0Cf798816D4b9b9866b5330EEa46a18382f251e')\n * // @log: true\n * ```\n *\n * The {@link ox#Address.(assert:function)} function will throw an error if the address is invalid:\n *\n * ```ts twoslash\n * import { Address } from 'ox'\n *\n * Address.assert('0xdeadbeef')\n * // @error: InvalidAddressError: Address \"0xdeadbeef\" is invalid.\n * ```\n *\n * @example\n * ### Addresses from ECDSA Public Keys\n *\n * An {@link ox#Address.Address} can be computed from an ECDSA public key using {@link ox#Address.(fromPublicKey:function)}:\n *\n * ```ts twoslash\n * import { Address, Secp256k1 } from 'ox'\n *\n * const privateKey = Secp256k1.randomPrivateKey()\n * const publicKey = Secp256k1.getPublicKey({ privateKey })\n *\n * const address = Address.fromPublicKey(publicKey)\n * // @log: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e'\n * ```\n *\n * @category Addresses\n */\n\n/**\n * Utilities & types for working with AES-GCM encryption. Internally uses the [Web Crypto API](https://developer.mozilla.org/en-US/docs/Web/API/Web_Crypto_API).\n *\n * @example\n * ### Encrypting Data\n *\n * Data can be encrypted using {@link ox#AesGcm.(encrypt:function)}:\n *\n * ```ts twoslash\n * import { AesGcm, Hex } from 'ox'\n *\n * const key = await AesGcm.getKey({ password: 'qwerty' })\n * const secret = Hex.fromString('i am a secret message')\n *\n * const encrypted = await AesGcm.encrypt(secret, key) // [!code focus]\n * // @log: '0x5e257b25bcf53d5431e54e5a68ca0138306d31bb6154f35a97bb8ea18111e7d82bcf619d3c76c4650688bc5310eed80b8fc86d1e3e'\n * ```\n *\n * @example\n * ### Decrypting Data\n *\n * Data can be decrypted using {@link ox#AesGcm.(decrypt:function)}:\n *\n * ```ts twoslash\n * import { AesGcm, Hex } from 'ox'\n *\n * const key = await AesGcm.getKey({ password: 'qwerty' })\n * const encrypted = await AesGcm.encrypt(Hex.fromString('i am a secret message'), key)\n *\n * const decrypted = await AesGcm.decrypt(encrypted, key) // [!code focus]\n * // @log: Hex.fromString('i am a secret message')\n * ```\n *\n * @category Crypto\n */\n\n/**\n * Utility functions for working with [EIP-7702](https://eips.ethereum.org/EIPS/eip-7702) Authorization lists & tuples.\n *\n * @example\n * ### Instantiating Authorizations\n *\n * An Authorization can be instantiated using {@link ox#Authorization.(from:function)}:\n *\n * ```ts twoslash\n * import { Authorization } from 'ox'\n *\n * const authorization = Authorization.from({\n *   address: '0x1234567890abcdef1234567890abcdef12345678',\n *   chainId: 1,\n *   nonce: 69n,\n * })\n * ```\n *\n * @example\n * ### Computing Sign Payload\n *\n * A signing payload can be computed using {@link ox#Authorization.(getSignPayload:function)}. The result can then be passed to signing functions like {@link ox#Secp256k1.(sign:function)}.\n *\n * ```ts twoslash\n * import { Authorization, Secp256k1 } from 'ox'\n *\n * const authorization = Authorization.from({\n *   address: '0x1234567890abcdef1234567890abcdef12345678',\n *   chainId: 1,\n *   nonce: 69n,\n * })\n *\n * const payload = Authorization.getSignPayload(authorization) // [!code focus]\n *\n * const signature = Secp256k1.sign({\n *   payload,\n *   privateKey: '0x...',\n * })\n * ```\n *\n * @example\n * ### Attaching Signatures to Authorizations\n *\n * A signature can be attached to an Authorization using {@link ox#Authorization.(from:function)}:\n *\n * ```ts twoslash\n * import { Authorization, Secp256k1, TransactionEnvelopeEip7702, Value } from 'ox'\n *\n * const authorization = Authorization.from({\n *   address: '0xbe95c3f554e9fc85ec51be69a3d807a0d55bcf2c',\n *   chainId: 1,\n *   nonce: 40n,\n * })\n *\n * const signature = Secp256k1.sign({\n *   payload: Authorization.getSignPayload(authorization),\n *   privateKey: '0x...',\n * })\n *\n * const authorization_signed = Authorization.from(authorization, { signature }) // [!code focus]\n *\n * const envelope = TransactionEnvelopeEip7702.from({\n *   authorizationList: [authorization_signed],\n *   chainId: 1,\n *   maxFeePerGas: Value.fromGwei('10'),\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: Value.fromEther('1'),\n * })\n * ```\n *\n * @category Authorization (EIP-7702)\n */\n\n/**\n * Utility functions for working with [Base58](https://digitalbazaar.github.io/base58-spec/) values.\n *\n * @example\n * ### Encoding to Base58\n *\n * Values can be encoded to Base58 with:\n *\n * - {@link ox#Base58.(fromString:function)}, or\n *\n * - {@link ox#Base58.(fromBytes:function)}, or\n *\n * - {@link ox#Base58.(fromHex:function)}\n *\n * ```ts twoslash\n * import { Base58 } from 'ox'\n *\n * const value_string = Base58.fromString('Hello World!')\n * // @log: '2NEpo7TZRRrLZSi2U'\n *\n * const value_bytes = Base58.fromBytes(new Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33]))\n * // @log: '2NEpo7TZRRrLZSi2U'\n *\n * const value_hex = Base58.fromHex('0x48656c6c6f20576f726c6421')\n * // @log: '2NEpo7TZRRrLZSi2U'\n * ```\n *\n * @example\n * ### Decoding Base58\n *\n * Values can be decoded from Base58 with:\n *\n * - {@link ox#Base58.(toString:function)}, or\n *\n * - {@link ox#Base58.(toBytes:function)}, or\n *\n * - {@link ox#Base58.(toHex:function)}\n *\n * ```ts twoslash\n * import { Base58 } from 'ox'\n *\n * const value_string = Base58.toString('2NEpo7TZRRrLZSi2U')\n * // @log: 'Hello World!'\n *\n * const value_bytes = Base58.toBytes('2NEpo7TZRRrLZSi2U')\n * // @log: Uint8Array [72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33]\n *\n * const value_hex = Base58.toHex('2NEpo7TZRRrLZSi2U')\n * // @log: '0x48656c6c6f20576f726c6421'\n * ```\n *\n * @category Data\n */\n\n/**\n * Utility functions for working with [RFC-4648](https://datatracker.ietf.org/doc/html/rfc4648) Base64.\n *\n * @example\n * ### Encoding to Base64\n *\n * Values can be encoded to Base64 with:\n *\n * - {@link ox#Base64.(fromString:function)}, or\n *\n * - {@link ox#Base64.(fromBytes:function)}, or\n *\n * - {@link ox#Base64.(fromHex:function)}\n *\n * ```ts twoslash\n * import { Base64 } from 'ox'\n *\n * const value_string = Base64.fromString('Hello World!')\n * // @log: 'SGVsbG8gV29ybGQh=='\n *\n * const value_bytes = Base64.fromBytes(new Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33]))\n * // @log: 'SGVsbG8gV29ybGQh=='\n *\n * const value_hex = Base64.fromHex('0x48656c6c6f20576f726c6421')\n * // @log: 'SGVsbG8gV29ybGQh=='\n * ```\n *\n * ### Decoding Base64\n *\n * Values can be decoded from Base64 with:\n *\n * - {@link ox#Base64.(toString:function)}, or\n *\n * - {@link ox#Base64.(toBytes:function)}, or\n *\n * - {@link ox#Base64.(toHex:function)}\n *\n * ```ts twoslash\n * import { Base64 } from 'ox'\n *\n * const value_string = Base64.toString('SGVsbG8gV29ybGQh==')\n * // @log: 'Hello World!'\n *\n * const value_bytes = Base64.toBytes('SGVsbG8gV29ybGQh==')\n * // @log: Uint8Array [72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33]\n *\n * const value_hex = Base64.toHex('SGVsbG8gV29ybGQh==')\n * // @log: '0x48656c6c6f20576f726c6421'\n * ```\n *\n * @category Data\n */\n\n/**\n * Utility functions for working with [EIP-7864](https://eips.ethereum.org/EIPS/eip-7864) Binary State Trees.\n *\n * @category Binary State Tree (EIP-7864)\n */\n\n/**\n * Utility functions for working with [EIP-4844](https://eips.ethereum.org/EIPS/eip-4844) Blobs.\n *\n * @category Blobs (EIP-4844)\n */\n\n/**\n * Utilities & types for working with Blocks as defined in the [Execution API specification](https://github.com/ethereum/execution-apis/blob/main/src/schemas/block.yaml)\n *\n * @example\n * ### Converting from RPC Format\n *\n * Blocks can be converted from RPC format to internal format using {@link ox#Block.(fromRpc:function)}:\n *\n * ```ts twoslash\n * import 'ox/window'\n * import { Block } from 'ox'\n *\n * const block = await window.ethereum!\n *   .request({\n *     method: 'eth_getBlockByNumber',\n *     params: ['latest', false],\n *   })\n *   .then(Block.fromRpc) // [!code hl]\n * // @log: {\n * // @log:   // ...\n * // @log:   hash: '0xebc3644804e4040c0a74c5a5bbbc6b46a71a5d4010fe0c92ebb2fdf4a43ea5dd',\n * // @log:   number: 19868020n,\n * // @log:   size: 520n,\n * // @log:   timestamp: 1662222222n,\n * // @log:   // ...\n * // @log: }\n * ```\n *\n * @category Execution Spec\n */\n\n/**\n * Utilities & types for working with **Block Overrides**.\n *\n * @category Execution Spec\n */\n\n/**\n * Utility functions for working with Bloom Filters as defined in the [Execution API specification](https://github.com/ethereum/execution-apis/blob/main/src/schemas/block.yaml)\n *\n * @category Execution Spec\n */\n\n/**\n * Utility functions for [BLS12-381](https://hackmd.io/\\@benjaminion/bls12-381) cryptography.\n *\n * :::info\n *\n * The `Bls` module is a friendly wrapper over [`@noble/curves/bls12-381`](https://github.com/paulmillr/noble-curves), an **audited** implementation of BLS12-381.\n *\n * :::\n *\n * @example\n * ### Computing a Random Private Key\n *\n * A random private key can be computed using {@link ox#Bls.(randomPrivateKey:function)}:\n *\n * ```ts twoslash\n * import { Bls } from 'ox'\n *\n * const privateKey = Bls.randomPrivateKey()\n * // @log: '0x...'\n * ```\n *\n * @example\n * ### Getting a Public Key\n *\n * A public key can be derived from a private key using {@link ox#Bls.(getPublicKey:function)}:\n *\n * ```ts twoslash\n * import { Bls } from 'ox'\n *\n * const privateKey = Bls.randomPrivateKey()\n * const publicKey = Bls.getPublicKey({ privateKey })\n * // @log: { x: 3251...5152n, y: 1251...5152n, z: 1n }\n * ```\n *\n * @example\n * ### Signing a Payload\n *\n * A payload can be signed using {@link ox#Bls.(sign:function)}:\n *\n * ```ts twoslash\n * import { Bls } from 'ox'\n *\n * const privateKey = Bls.randomPrivateKey()\n * const signature = Bls.sign({ payload: '0xdeadbeef', privateKey })\n * // @log: { x: 1251...5152n, y: 1251...5152n, z: 1n }\n * ```\n *\n * @example\n * ### Verifying a Signature\n *\n * A signature can be verified using {@link ox#Secp256k1.(verify:function)}:\n *\n * ```ts twoslash\n * import { Bls } from 'ox'\n *\n * const privateKey = Bls.randomPrivateKey()\n * const publicKey = Bls.getPublicKey({ privateKey })\n * const signature = Bls.sign({ payload: '0xdeadbeef', privateKey })\n *\n * const isValid = Bls.verify({ // [!code focus]\n *   payload: '0xdeadbeef', // [!code focus]\n *   publicKey, // [!code focus]\n *   signature, // [!code focus]\n * }) // [!code focus]\n * // @log: true\n * ```\n *\n * @example\n * ### Aggregating Public Keys & Signatures\n *\n * Public keys and signatures can be aggregated using {@link ox#Bls.(aggregate:function)}:\n *\n * ```ts twoslash\n * import { Bls } from 'ox'\n *\n * const publicKeys = [\n *   Bls.getPublicKey({ privateKey: '0x...' }),\n *   Bls.getPublicKey({ privateKey: '0x...' }),\n * ]\n * const publicKey = Bls.aggregate(publicKeys)\n *\n * const signatures = [\n *   Bls.sign({ payload: '0x...', privateKey: '0x...' }),\n *   Bls.sign({ payload: '0x...', privateKey: '0x...' }),\n * ]\n * const signature = Bls.aggregate(signatures)\n * ```\n *\n * @example\n * ### Verify Aggregated Signatures\n *\n * We can also pass a public key and signature that was aggregated with {@link ox#Bls.(aggregate:function)} to `Bls.verify`.\n *\n * ```ts twoslash\n * import { Bls, Hex } from 'ox'\n *\n * const payload = Hex.random(32)\n * const privateKeys = Array.from({ length: 100 }, () => Bls.randomPrivateKey())\n *\n * const publicKeys = privateKeys.map((privateKey) =>\n *   Bls.getPublicKey({ privateKey }),\n * )\n * const signatures = privateKeys.map((privateKey) =>\n *   Bls.sign({ payload, privateKey }),\n * )\n *\n * const publicKey = Bls.aggregate(publicKeys) // [!code focus]\n * const signature = Bls.aggregate(signatures) // [!code focus]\n *\n * const valid = Bls.verify({ payload, publicKey, signature }) // [!code focus]\n * ```\n *\n * @category Crypto\n */\n\n/**\n * Utility functions for working with BLS12-381 points.\n *\n * :::info\n *\n * The `BlsPoint` module is a friendly wrapper over [`@noble/curves/bls12-381`](https://github.com/paulmillr/noble-curves), an **audited** implementation of BLS12-381.\n *\n * :::\n *\n * @example\n * ### Public Keys or Signatures to Hex\n *\n * BLS points can be converted to hex using {@link ox#BlsPoint.(toHex:function)}:\n *\n * ```ts twoslash\n * import { Bls, BlsPoint } from 'ox'\n *\n * const publicKey = Bls.getPublicKey({ privateKey: '0x...' })\n * const publicKeyHex = BlsPoint.toHex(publicKey)\n * // @log: '0xacafff52270773ad1728df2807c0f1b0b271fa6b37dfb8b2f75448573c76c81bcd6790328a60e40ef5a13343b32d9e66'\n *\n * const signature = Bls.sign({ payload: '0xdeadbeef', privateKey: '0x...' })\n * const signatureHex = BlsPoint.toHex(signature)\n * // @log: '0xb4698f7611999fba87033b9cf72312c76c683bbc48175e2d4cb275907d6a267ab9840a66e3051e5ed36fd13aa712f9a9024f9fa9b67f716dfb74ae4efb7d9f1b7b43b4679abed6644cf476c12e79f309351ea8452487cd93f66e29e04ebe427c'\n * ```\n *\n * @example\n * ### Hex to Public Keys or Signatures\n *\n * BLS points can be converted from hex using {@link ox#BlsPoint.(fromHex:function)}:\n *\n * ```ts twoslash\n * import { Bls, BlsPoint } from 'ox'\n *\n * const publicKey = BlsPoint.fromHex('0xacafff52270773ad1728df2807c0f1b0b271fa6b37dfb8b2f75448573c76c81bcd6790328a60e40ef5a13343b32d9e66', 'G1')\n * // @log: { x: 172...514n, y: 175...235n, z: 1n }\n *\n * const signature = BlsPoint.fromHex('0xb4698f7611999fba87033b9cf72312c76c683bbc48175e2d4cb275907d6a267ab9840a66e3051e5ed36fd13aa712f9a9024f9fa9b67f716dfb74ae4efb7d9f1b7b43b4679abed6644cf476c12e79f309351ea8452487cd93f66e29e04ebe427c', 'G2')\n * // @log: { x: 1251...5152n, y: 1251...5152n, z: 1n }\n * ```\n *\n * @category Crypto\n */\n\n/**\n * A set of Ethereum-related utility functions for working with [`Uint8Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array) instances.\n *\n * @example\n * ### Instantiating Bytes\n *\n * Values can be instantiated as {@link ox#Bytes.Bytes} using:\n *\n * - {@link ox#Bytes.(fromArray:function)}\n *\n * - {@link ox#Bytes.(fromBoolean:function)}\n *\n * - {@link ox#Bytes.(fromHex:function)}\n *\n * - {@link ox#Bytes.(fromNumber:function)}\n *\n * - {@link ox#Bytes.(fromString:function)}\n *\n * ```ts twoslash\n * import { Bytes } from 'ox'\n *\n * const value_array = Bytes.from([1, 2, 3, 4, 5])\n * // @log: Uint8Array [1, 2, 3, 4, 5]\n *\n * const value_boolean = Bytes.fromBoolean(true)\n * // @log: Uint8Array [1]\n *\n * const value_hex = Bytes.fromHex('0x1234567890abcdef')\n * // @log: Uint8Array [18, 52, 86, 120, 144, 175, 207, 15]\n *\n * const value_number = Bytes.fromNumber(1234567890)\n * // @log: Uint8Array [4, 160, 216]\n *\n * const value_string = Bytes.fromString('Hello World!')\n * // @log: Uint8Array [72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33]\n * ```\n *\n * @example\n * ### Converting from Bytes\n *\n * Values can be converted from {@link ox#Bytes.Bytes} using:\n *\n * - {@link ox#Bytes.(toBigInt:function)}\n *\n * - {@link ox#Bytes.(toBoolean:function)}\n *\n * - {@link ox#Bytes.(toHex:function)}\n *\n * - {@link ox#Bytes.(toNumber:function)}\n *\n * - {@link ox#Bytes.(toString:function)}\n *\n * ```ts twoslash\n * import { Bytes } from 'ox'\n *\n * const value_bigint = Bytes.toBigInt(Bytes.from([4, 160, 216]))\n * // @log: 1234567890n\n *\n * const value_boolean = Bytes.toBoolean(Bytes.from([1]))\n * // @log: true\n *\n * const value_hex = Bytes.toHex(Bytes.from([222, 173, 190, 239]))\n * // @log: '0xdeadbeef'\n *\n * const value_number = Bytes.toNumber(Bytes.from([4, 160, 216]))\n * // @log: 1234567890\n *\n * const value_string = Bytes.toString(Bytes.from([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33]))\n * // @log: 'Hello World!'\n * ```\n *\n * @example\n * ### Concatenating Bytes\n *\n * Values can be concatenated using {@link ox#Bytes.(concat:function)}:\n *\n * ```ts twoslash\n * import { Bytes } from 'ox'\n *\n * const a = Bytes.from([1, 2, 3])\n * const b = Bytes.from([4, 5, 6])\n * const c = Bytes.concat(a, b)\n * // @log: Uint8Array [1, 2, 3, 4, 5, 6]\n * ```\n *\n * @example\n * ### Slicing Bytes\n *\n * Values can be sliced using {@link ox#Bytes.(slice:function)}:\n *\n * ```ts twoslash\n * import { Bytes } from 'ox'\n *\n * const value = Bytes.slice(Bytes.from([1, 2, 3, 4, 5, 6]), 2, 4)\n * // @log: Uint8Array [3, 4]\n * ```\n *\n * @example\n * ### Padding Bytes\n *\n * Values can be padded with zeroes using {@link ox#Bytes.(padLeft:function)} or {@link ox#Bytes.(padRight:function)}:\n *\n * ```ts twoslash\n * import { Bytes } from 'ox'\n *\n * const value_1 = Bytes.padLeft(Bytes.from([1, 2, 3]), 5)\n * // @log: Uint8Array [0, 0, 1, 2, 3]\n *\n * const value_2 = Bytes.padRight(Bytes.from([1, 2, 3]), 5)\n * // @log: Uint8Array [1, 2, 3, 0, 0]\n * ```\n *\n * @example\n * ### Trimming Bytes\n *\n * Zeroes in values can be trimmed using {@link ox#Bytes.(trimLeft:function)} or {@link ox#Bytes.(trimRight:function)}:\n *\n * ```ts twoslash\n * import { Bytes } from 'ox'\n *\n * const value = Bytes.trimLeft(Bytes.from([0, 0, 1, 2, 3]))\n * // @log: Uint8Array [1, 2, 3]\n * ```\n *\n * @category Data\n */\n\n\n/**\n * Utility functions for computing Contract Addresses.\n *\n * @example\n * ### Computing Contract Addresses (CREATE)\n *\n * A Contract Address that was instantiated using the `CREATE` opcode can be computed using {@link ox#ContractAddress.(fromCreate:function)}:\n *\n * ```ts twoslash\n * import { ContractAddress } from 'ox'\n *\n * ContractAddress.fromCreate({\n *   from: '0x1a1e021a302c237453d3d45c7b82b19ceeb7e2e6',\n *   nonce: 0n,\n * })\n * // @log: '0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2'\n * ```\n *\n * @example\n * ### Computing Contract Addresses (CREATE2)\n *\n * A Contract Address that was instantiated using the `CREATE2` opcode can be computed using {@link ox#ContractAddress.(fromCreate2:function)}:\n *\n * ```ts twoslash\n * import { Bytes, ContractAddress, Hex } from 'ox'\n *\n * ContractAddress.fromCreate2({\n *   from: '0x1a1e021a302c237453d3d45c7b82b19ceeb7e2e6',\n *   bytecode: Bytes.from('0x6394198df16000526103ff60206004601c335afa6040516060f3'),\n *   salt: Hex.fromString('hello world'),\n * })\n * // @log: '0x59fbB593ABe27Cb193b6ee5C5DC7bbde312290aB'\n * ```\n *\n * @category Addresses\n */\n\n/**\n * Utility functions for working with ENS names.\n *\n * @example\n * ### Normalizing ENS Names\n *\n * ENS names can be normalized using {@link ox#Ens.(normalize:function)}:\n *\n * ```ts twoslash\n * import { Ens } from 'ox'\n *\n * const name = Ens.normalize('w𝝣vm.eth')\n * // @log: 'wξvm.eth'\n * ```\n *\n * @example\n * ### Namehashing ENS Names\n *\n * ENS names can be namehashed using {@link ox#Ens.(namehash:function)}:\n *\n * ```ts twoslash\n * import { Ens } from 'ox'\n *\n * const name = Ens.namehash('alice.eth')\n * // @log: '0x787192fc5378cc32aa956ddfdedbf26b24e8d78e40109add0eea2c1a012c3dec'\n * ```\n *\n * @category ENS\n */\n\n\n/**\n * Utilities & types for working with Filters as defined in the [Execution API specification](https://github.com/ethereum/execution-apis/blob/main/src/schemas/filter.yaml)\n *\n * @category Execution Spec\n */\n\n/**\n * Utility functions for hashing (keccak256, sha256, etc).\n *\n * @example\n * ```ts twoslash\n * import { Hash } from 'ox'\n *\n * const value = Hash.keccak256('0xdeadbeef')\n * // '0xd4fd4e189132273036449fc9e11198c739161b4c0116a9a2dccdfa1c492006f1'\n * ```\n *\n * @category Crypto\n */\n\n/**\n * Utility functions for generating and working with [BIP-32](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki) HD Wallets.\n *\n * :::info\n *\n * The `HdKey` module is a friendly wrapper over [`@scure/bip32`](https://github.com/paulmillr/scure-bip32), an **audited** implementation of [BIP-32](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki) HD Wallets.\n *\n * :::\n *\n *\n * @category Crypto\n */\n\n/**\n * A set of Ethereum-related utility functions for working with hexadecimal string values (e.g. `\"0xdeadbeef\"`).\n *\n * @example\n * ### Instantiating Hex\n *\n * Values can be instantiated as {@link ox#Hex.Hex} using:\n *\n * - {@link ox#Hex.(fromBoolean:function)}\n *\n * - {@link ox#Hex.(fromBytes:function)}\n *\n * - {@link ox#Hex.(fromNumber:function)}\n *\n * - {@link ox#Hex.(fromString:function)}\n *\n * ```ts twoslash\n * import { Bytes, Hex } from 'ox'\n *\n * const value_boolean = Hex.fromBoolean(true)\n * // @log: '0x1'\n *\n * const value_bytes = Hex.fromBytes(Bytes.from([1, 2, 3]))\n * // @log: '0x010203'\n *\n * const value_number = Hex.fromNumber(1234567890)\n * // @log: '0x499602d2'\n *\n * const value_string = Hex.fromString('Hello World!')\n * // @log: '0x48656c6c6f20576f726c6421'\n * ```\n *\n * @example\n * ### Converting from Hex\n *\n * Values can be converted from {@link ox#Hex.Hex} using:\n *\n * - {@link ox#Hex.(toBoolean:function)}\n *\n * - {@link ox#Hex.(toBytes:function)}\n *\n * - {@link ox#Hex.(toNumber:function)}\n *\n * - {@link ox#Hex.(toString:function)}\n *\n * ```ts twoslash\n * import { Hex } from 'ox'\n *\n * const value_boolean = Hex.toBoolean('0x1')\n * // @log: true\n *\n * const value_bytes = Hex.toBytes('0x010203')\n * // @log: Uint8Array [1, 2, 3]\n *\n * const value_number = Hex.toNumber('0x499602d2')\n * // @log: 1234567890\n *\n * const value_string = Hex.toString('0x48656c6c6f20576f726c6421')\n * // @log: 'Hello World!'\n * ```\n *\n * @example\n * ### Concatenating Hex\n *\n * Hex values can be concatenated using {@link ox#Hex.(concat:function)}:\n *\n * ```ts twoslash\n * import { Hex } from 'ox'\n *\n * const a = Hex.fromString('0x1234567890abcdef')\n * const b = Hex.fromString('0xdeadbeef')\n * const c = Hex.concat(a, b)\n * // @log: '0x1234567890abcdefdeadbeef'\n * ```\n *\n * @example\n * ### Slicing Hex\n *\n * Hex values can be sliced using {@link ox#Hex.(slice:function)}:\n *\n * ```ts twoslash\n * import { Hex } from 'ox'\n *\n * const value = Hex.slice('0x1234567890abcdefdeadbeef', 2, 8)\n * // @log: '0x34567890'\n * ```\n *\n * @example\n * ### Padding Hex\n *\n * Hex values can be padded with zeroes using {@link ox#Hex.(padLeft:function)} or {@link ox#Hex.(padRight:function)}:\n *\n * ```ts twoslash\n * import { Hex } from 'ox'\n *\n * const value = Hex.padLeft('0x1234567890abcdef', 16)\n * // @log: '0x00000000000000001234567890abcdef'\n * ```\n *\n * @example\n * ### Trimming Hex\n *\n * Hex values can be trimmed of zeroes using {@link ox#Hex.(trimLeft:function)} or {@link ox#Hex.(trimRight:function)}:\n *\n * ```ts twoslash\n * import { Hex } from 'ox'\n *\n * const value = Hex.trimLeft('0x00000000000000001234567890abcdef')\n * // @log: '0x1234567890abcdef'\n * ```\n *\n * @category Data\n */\n\n/**\n * @category Execution Spec\n */\n\n/**\n * Utility functions for working with JSON (with support for `bigint`).\n *\n * @example\n * ### Stringifying JSON\n *\n * JSON values can be stringified (with `bigint` support) using {@link ox#Json.(stringify:function)}:\n *\n * ```ts twoslash\n * import { Json } from 'ox'\n *\n * const json = Json.stringify({\n *   foo: 'bar',\n *   baz: 69420694206942069420694206942069420694206942069420n,\n * })\n * // @log: '{\"foo\":\"bar\",\"baz\":69420694206942069420694206942069420694206942069420}'\n * ```\n *\n * @example\n * ### Parsing JSON\n *\n * JSON values can be parsed (with `bigint` support) using {@link ox#Json.(parse:function)}:\n *\n * ```ts twoslash\n * import { Json } from 'ox'\n *\n * const value = Json.parse('{\"foo\":\"bar\",\"baz\":69420694206942069420694206942069420694206942069420}')\n * // @log: { foo: 'bar', baz: 69420694206942069420694206942069420694206942069420n }\n * ```\n *\n * @category JSON\n */\n\n/**\n * Utilities & types for working with [Keystores](https://ethereum.org/en/developers/docs/data-structures-and-encoding/web3-secret-storage).\n *\n * @example\n * ### Encrypting Private Keys\n *\n * Private keys can be encrypted into a JSON keystore using {@link ox#Keystore.(encrypt:function)}:\n *\n * ```ts twoslash\n * import { Keystore, Secp256k1 } from 'ox'\n *\n * // Generate a random private key.\n * const privateKey = Secp256k1.randomPrivateKey()\n *\n * // Derive a key from a password.\n * const [key, opts] = Keystore.pbkdf2({ password: 'testpassword' })\n *\n * // Encrypt the private key.\n * const keystore = Keystore.encrypt(privateKey, key, opts)\n * // @log: {\n * // @log:   \"crypto\": {\n * // @log:     \"cipher\": \"aes-128-ctr\",\n * // @log:     \"ciphertext\": \"...\",\n * // @log:     \"cipherparams\": {\n * // @log:       \"iv\": \"...\",\n * // @log:     },\n * // @log:     \"kdf\": \"pbkdf2\",\n * // @log:     \"kdfparams\": {\n * // @log:       \"salt\": \"...\",\n * // @log:       \"dklen\": 32,\n * // @log:       \"prf\": \"hmac-sha256\",\n * // @log:       \"c\": 262144,\n * // @log:     },\n * // @log:     \"mac\": \"...\",\n * // @log:   },\n * // @log:   \"id\": \"...\",\n * // @log:   \"version\": 3,\n * // @log: }\n * ```\n *\n * @example\n * ### Decrypting Private Keys\n *\n * Private keys can be decrypted from a JSON keystore using {@link ox#Keystore.(decrypt:function)}:\n *\n * ```ts twoslash\n * // @noErrors\n * import { Keystore, Secp256k1 } from 'ox'\n *\n * const keystore = { crypto: { ... }, id: '...', version: 3 }\n *\n * // Derive the key.\n * const key = Keystore.toKey(keystore, { password: 'testpassword' })\n *\n * // Decrypt the private key.\n * const decrypted = Keystore.decrypt(keystore, key)\n * // @log: \"0x...\"\n *\n * ```\n *\n * @category Crypto\n */\n\n/**\n * Utility functions for working with KZG Commitments.\n *\n * Mainly for [EIP-4844](https://eips.ethereum.org/EIPS/eip-4844) Blobs.\n *\n * @category Blobs (EIP-4844)\n */\n\n/**\n * Utilities & types for working with Logs as defined in the [Execution API specification](https://github.com/ethereum/execution-apis/blob/main/src/schemas/receipt.yaml)\n *\n * :::tip\n *\n * Utilities for Log encoding & decoding can be found on the {@link ox#AbiEvent} module.\n *\n * :::\n *\n * @example\n * ### Converting from RPC Format\n *\n * Logs can be converted from their RPC format using {@link ox#Log.(fromRpc:function)}:\n *\n * ```ts twoslash\n * import 'ox/window'\n * import { AbiEvent, Hex, Log } from 'ox'\n *\n * const transfer = AbiEvent.from(\n *   'event Transfer(address indexed from, address indexed to, uint256 indexed value)',\n * )\n *\n * const { topics } = AbiEvent.encode(transfer)\n *\n * const logs = await window.ethereum!.request({\n *   method: 'eth_getLogs',\n *   params: [\n *     {\n *       address: '0xfba3912ca04dd458c843e2ee08967fc04f3579c2',\n *       fromBlock: Hex.fromNumber(19760235n),\n *       toBlock: Hex.fromNumber(19760240n),\n *       topics,\n *     },\n *   ],\n * })\n *\n * const log = Log.fromRpc(logs[0]) // [!code focus]\n * // @log: {\n * // @log:   address: '0xfba3912ca04dd458c843e2ee08967fc04f3579c2',\n * // @log:   blockHash: '0xabe69134e80a12f6a93d0aa18215b5b86c2fb338bae911790ca374a8716e01a4',\n * // @log:   blockNumber: 19760236n,\n * // @log:   data: '0x',\n * // @log:   logIndex: 271,\n * // @log:   removed: false,\n * // @log:   topics: [\n * // @log:     \"0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\",\n * // @log:     \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n * // @log:     \"0x0000000000000000000000000c04d9e9278ec5e4d424476d3ebec70cb5d648d1\",\n * // @log:     \"0x000000000000000000000000000000000000000000000000000000000000025b\",\n * // @log:   transactionHash:\n * // @log:     '0xcfa52db0bc2cb5bdcb2c5bd8816df7a2f018a0e3964ab1ef4d794cf327966e93',\n * // @log:   transactionIndex: 145,\n * // @log: }\n * ```\n *\n * @category Execution Spec\n */\n\n/**\n * Utility functions for generating and working with [BIP-39](https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki) mnemonics.\n *\n * :::info\n *\n * The `Mnemonic` module is a friendly wrapper over [`@scure/bip39`](https://github.com/paulmillr/scure-bip39), an **audited** implementation of [BIP-39](https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki)\n *\n * :::\n *\n * @example\n * ### Generating a Random Mnemonic\n *\n * Random mnemonics can be generated using {@link ox#Mnemonic.(random:function)}:\n *\n * ```ts twoslash\n * import { Mnemonic } from 'ox'\n *\n * const mnemonic = Mnemonic.random(Mnemonic.english)\n * // @log: 'buyer zoo end danger ice capable shrug naive twist relief mass bonus'\n * ```\n *\n * @example\n * ### Converting to Private Key\n *\n * Mnemonics can be converted to a private key using {@link ox#Mnemonic.(toPrivateKey:function)}:\n *\n * ```ts twoslash\n * import { Mnemonic } from 'ox'\n *\n * const privateKey = Mnemonic.toPrivateKey('buyer zoo end danger ice capable shrug naive twist relief mass bonus')\n * // @log: '0x...'\n * ```\n *\n * @example\n * ### Converting to HD Key\n *\n * Mnemonics can be converted to a HD Key using {@link ox#Mnemonic.(toHdKey:function)}:\n *\n * ```ts twoslash\n * import { Mnemonic } from 'ox'\n *\n * const hdKey = Mnemonic.toHdKey('buyer zoo end danger ice capable shrug naive twist relief mass bonus')\n * ```\n *\n * @example\n * ### Converting to Seed\n *\n * Mnemonics can be converted to a master seed using {@link ox#Mnemonic.(toSeed:function)}:\n *\n * ```ts twoslash\n * import { Mnemonic } from 'ox'\n *\n * const mnemonic = 'buyer zoo end danger ice capable shrug naive twist relief mass bonus'\n * const seed = Mnemonic.toSeed(mnemonic)\n * // @log: Uint8Array [...64 bytes]\n * ```\n *\n * @category Crypto\n */\n\n/**\n * Utilities & types for working with [EIP-191 Personal Messages](https://eips.ethereum.org/EIPS/eip-191#version-0x45-e)\n *\n * @example\n * ### Computing Sign Payload\n *\n * An EIP-191 personal sign payload can be computed using {@link ox#PersonalMessage.(getSignPayload:function)}:\n *\n * ```ts twoslash\n * import { Hex, PersonalMessage, Secp256k1 } from 'ox'\n *\n * const payload = PersonalMessage.getSignPayload(Hex.fromString('hello world')) // [!code focus]\n *\n * const signature = Secp256k1.sign({ payload, privateKey: '0x...' })\n * ```\n *\n * @category Signed & Typed Data\n */\n\n/**\n * Utilities & types for working with [EIP-1193 Providers](https://eips.ethereum.org/EIPS/eip-1193)\n *\n * @example\n * ### Instantiating External Providers\n *\n * External EIP-1193 Providers can be instantiated with {@link ox#Provider.(from:function)}:\n *\n * ```ts twoslash\n * import 'ox/window'\n * import { Provider } from 'ox'\n *\n * const provider = Provider.from(window.ethereum)\n *\n * const blockNumber = await provider.request({ method: 'eth_blockNumber' })\n * ```\n *\n * :::tip\n *\n * There are also libraries that distribute EIP-1193 Provider objects that you can use with `Provider.from`:\n *\n * - [`@walletconnect/ethereum-provider`](https://www.npmjs.com/package/\\@walletconnect/ethereum-provider)\n *\n * - [`@coinbase/wallet-sdk`](https://www.npmjs.com/package/\\@coinbase/wallet-sdk)\n *\n * - [`@metamask/detect-provider`](https://www.npmjs.com/package/\\@metamask/detect-provider)\n *\n * - [`@safe-global/safe-apps-provider`](https://github.com/safe-global/safe-apps-sdk/tree/main/packages/safe-apps-provider)\n *\n * - [`mipd`](https://github.com/wevm/mipd): EIP-6963 Multi Injected Providers\n *\n * :::\n *\n * @example\n * ### Instantiating with an RPC Transport\n *\n * Ox's {@link ox#RpcTransport} is also EIP-1193 compliant, and can be used to instantiate an EIP-1193 Provider. This means you can use any HTTP RPC endpoint as an EIP-1193 Provider.\n *\n * ```ts twoslash\n * import { Provider, RpcTransport } from 'ox'\n *\n * const transport = RpcTransport.fromHttp('https://1.rpc.thirdweb.com')\n * const provider = Provider.from(transport)\n * ```\n *\n * @example\n * ### Instantiating a Provider with Events\n *\n * Event emitters for EIP-1193 Providers can be created using {@link ox#Provider.(createEmitter:function)}:\n *\n * Useful for Wallets that distribute an EIP-1193 Provider (e.g. webpage injection via `window.ethereum`).\n *\n * ```ts twoslash\n * // @noErrors\n * import { Provider, RpcRequest, RpcResponse } from 'ox'\n *\n * // 1. Instantiate a Provider Emitter.\n * const emitter = Provider.createEmitter() // [!code ++]\n *\n * const store = RpcRequest.createStore()\n *\n * const provider = Provider.from({\n *   // 2. Pass the Emitter to the Provider.\n *   ...emitter, // [!code ++]\n *   async request(args) {\n *     return await fetch('https://1.rpc.thirdweb.com', {\n *       body: JSON.stringify(store.prepare(args)),\n *       method: 'POST',\n *       headers: {\n *         'Content-Type': 'application/json',\n *       },\n *     })\n *       .then((res) => res.json())\n *       .then(RpcResponse.parse)\n *   },\n * })\n *\n * // 3. Emit Provider Events.\n * emitter.emit('accountsChanged', ['0x...']) // [!code ++]\n * ```\n *\n * @category Providers (EIP-1193)\n */\n\n/**\n * Utility functions for working with ECDSA public keys.\n *\n * @example\n * ### Serializing Public Keys\n *\n * Public Keys can be serialized to Hex or Bytes using {@link ox#PublicKey.(toHex:function)}:\n *\n * ```ts twoslash\n * import { PublicKey } from 'ox'\n *\n * const publicKey = PublicKey.from({\n *   prefix: 4,\n *   x: 59295962801117472859457908919941473389380284132224861839820747729565200149877n,\n *   y: 24099691209996290925259367678540227198235484593389470330605641003500238088869n,\n * })\n *\n * const serialized = PublicKey.toHex(publicKey) // [!code focus]\n * // @log: '0x048318535b54105d4a7aae60c08fc45f9687181b4fdfc625bd1a753fa7397fed753547f11ca8696646f2f3acb08e31016afac23e630c5d11f59f61fef57b0d2aa5'\n * ```\n *\n * @example\n * ### Deserializing Public Keys\n *\n * Public Keys can be deserialized from Hex or Bytes using {@link ox#PublicKey.(fromHex:function)}:\n *\n * ```ts twoslash\n * import { PublicKey } from 'ox'\n *\n * const publicKey = PublicKey.fromHex('0x8318535b54105d4a7aae60c08fc45f9687181b4fdfc625bd1a753fa7397fed753547f11ca8696646f2f3acb08e31016afac23e630c5d11f59f61fef57b0d2aa5')\n * // @log: {\n * // @log:   prefix: 4,\n * // @log:   x: 59295962801117472859457908919941473389380284132224861839820747729565200149877n,\n * // @log:   y: 24099691209996290925259367678540227198235484593389470330605641003500238088869n,\n * // @log: }\n * ```\n *\n * @category Crypto\n */\n\n/**\n * Utility functions for encoding and decoding [Recursive Length Prefix](https://ethereum.org/en/developers/docs/data-structures-and-encoding/rlp/) structures.\n *\n * @example\n * ```ts twoslash\n * import { Hex, Rlp } from 'ox'\n *\n * const data = Rlp.fromHex([Hex.fromString('hello'), Hex.fromString('world')])\n * // @log: '0xcc8568656c6c6f85776f726c64'\n *\n * const values = Rlp.toHex(data)\n * // @log: [Hex.fromString('hello'), Hex.fromString('world')]\n * ```\n *\n * @category Data\n */\n\n/**\n * Utility types for working with Ethereum JSON-RPC namespaces & schemas.\n *\n * @category JSON-RPC\n */\n\n/**\n * Utility types & functions for working with [JSON-RPC 2.0 Requests](https://www.jsonrpc.org/specification#request_object) and Ethereum JSON-RPC methods as\n * defined on the [Ethereum API specification](https://github.com/ethereum/execution-apis)\n *\n * @example\n * ### Instantiating a Request Store\n *\n * A Request Store can be instantiated using {@link ox#RpcRequest.(createStore:function)}:\n *\n * ```ts twoslash\n * import { RpcRequest } from 'ox'\n *\n * const store = RpcRequest.createStore()\n *\n * const request_1 = store.prepare({\n *   method: 'eth_blockNumber',\n * })\n * // @log: { id: 0, jsonrpc: '2.0', method: 'eth_blockNumber' }\n *\n * const request_2 = store.prepare({\n *   method: 'eth_call',\n *   params: [\n *     {\n *       to: '0x0000000000000000000000000000000000000000',\n *       data: '0xdeadbeef',\n *     },\n *   ],\n * })\n * // @log: { id: 1, jsonrpc: '2.0', method: 'eth_call', params: [{ to: '0x0000000000000000000000000000000000000000', data: '0xdeadbeef' }] }\n * ```\n *\n * @category JSON-RPC\n */\n\n/**\n * Utility types & functions for working with [JSON-RPC 2.0 Responses](https://www.jsonrpc.org/specification#response_object)\n *\n * @example\n * ### Instantiating an RPC Response\n *\n * RPC Responses can be instantiated using {@link ox#RpcResponse.(from:function)}:\n *\n * ```ts twoslash\n * import { RpcResponse } from 'ox'\n *\n * const response = RpcResponse.from({\n *   id: 0,\n *   jsonrpc: '2.0',\n *   result: '0x69420',\n * })\n * ```\n *\n * :::note\n *\n * Type-safe instantiation from a `request` object is also supported. If a `request` is provided, then the `id` and `jsonrpc` properties will be overridden with the values from the request.\n *\n * ```ts twoslash\n * import { RpcRequest, RpcResponse } from 'ox'\n *\n * const request = RpcRequest.from({ id: 0, method: 'eth_blockNumber' })\n *\n * const response = RpcResponse.from(\n *   { result: '0x69420' },\n *   { request },\n * )\n * ```\n *\n * :::\n *\n * @example\n * ### Parsing an RPC Response\n *\n * RPC Responses can be parsed using {@link ox#RpcResponse.(parse:function)}:\n *\n * ```ts twoslash\n * import { RpcRequest, RpcResponse } from 'ox'\n *\n * // 1. Create a request store.\n * const store = RpcRequest.createStore()\n *\n * // 2. Get a request object.\n * const request = store.prepare({\n *   method: 'eth_getBlockByNumber',\n *   params: ['0x1', false],\n * })\n *\n * // 3. Send the JSON-RPC request via HTTP.\n * const block = await fetch('https://1.rpc.thirdweb.com', {\n *   body: JSON.stringify(request),\n *   headers: {\n *     'Content-Type': 'application/json',\n *   },\n *   method: 'POST',\n * })\n *  .then((response) => response.json())\n *  // 4. Parse the JSON-RPC response into a type-safe result. // [!code focus]\n *  .then((response) => RpcResponse.parse(response, { request })) // [!code focus]\n *\n * block // [!code focus]\n * // ^?\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n * ```\n *\n * @category JSON-RPC\n */\n\n/**\n * Utility functions for working with JSON-RPC Transports.\n *\n * :::note\n * This is a convenience module distributed for experimenting with network connectivity on Ox.\n *\n * Consider using networking functionality from a higher-level library such as [Viem's Transports](https://viem.sh/docs/clients/transports/http)\n * if you need more features such as: retry logic, WebSockets/IPC, middleware, batch JSON-RPC, etc.\n * :::\n *\n * @example\n * ### HTTP Instantiation\n *\n * ```ts twoslash\n * import { RpcTransport } from 'ox'\n *\n * const transport = RpcTransport.fromHttp('https://1.rpc.thirdweb.com')\n *\n * const blockNumber = await transport.request({ method: 'eth_blockNumber' })\n * // @log: '0x1a2b3c'\n * ```\n *\n * @category JSON-RPC\n */\n\n/**\n * Utility functions for [secp256k1](https://www.secg.org/sec2-v2.pdf) ECDSA cryptography.\n *\n * :::info\n *\n * The `Secp256k1` module is a friendly wrapper over [`@noble/curves/secp256k1`](https://github.com/paulmillr/noble-curves), an **audited** implementation of [secp256k1](https://www.secg.org/sec2-v2.pdf)\n *\n * :::\n *\n * @example\n * ### Computing a Random Private Key\n *\n * A random private key can be computed using {@link ox#Secp256k1.(randomPrivateKey:function)}:\n *\n * ```ts twoslash\n * import { Secp256k1 } from 'ox'\n *\n * const privateKey = Secp256k1.randomPrivateKey()\n * // @log: '0x...'\n * ```\n *\n * @example\n * ### Getting a Public Key\n *\n * A public key can be derived from a private key using {@link ox#Secp256k1.(getPublicKey:function)}:\n *\n * ```ts twoslash\n * import { Secp256k1 } from 'ox'\n *\n * const privateKey = Secp256k1.randomPrivateKey()\n *\n * const publicKey = Secp256k1.getPublicKey({ privateKey }) // [!code focus]\n * // @log: { x: 3251...5152n, y: 1251...5152n }\n * ```\n *\n * @example\n * ### Signing a Payload\n *\n * A payload can be signed using {@link ox#Secp256k1.(sign:function)}:\n *\n * ```ts twoslash\n * import { Secp256k1 } from 'ox'\n *\n * const privateKey = Secp256k1.randomPrivateKey()\n *\n * const signature = Secp256k1.sign({ payload: '0xdeadbeef', privateKey }) // [!code focus]\n * // @log: { r: 1251...5152n, s: 1251...5152n, yParity: 1 }\n * ```\n *\n * @example\n * ### Verifying a Signature\n *\n * A signature can be verified using {@link ox#Secp256k1.(verify:function)}:\n *\n * ```ts twoslash\n * import { Secp256k1 } from 'ox'\n *\n * const privateKey = Secp256k1.randomPrivateKey()\n * const publicKey = Secp256k1.getPublicKey({ privateKey })\n * const signature = Secp256k1.sign({ payload: '0xdeadbeef', privateKey })\n *\n * const isValid = Secp256k1.verify({ // [!code focus]\n *   payload: '0xdeadbeef', // [!code focus]\n *   publicKey, // [!code focus]\n *   signature, // [!code focus]\n * }) // [!code focus]\n * // @log: true\n * ```\n *\n * @category Crypto\n */\n\n/**\n * Utility functions for [NIST P256](https://csrc.nist.gov/csrc/media/events/workshop-on-elliptic-curve-cryptography-standards/documents/papers/session6-adalier-mehmet.pdf) ECDSA cryptography.\n *\n * :::info\n *\n * The `P256` module is a friendly wrapper over [`@noble/curves/p256`](https://github.com/paulmillr/noble-curves), an **audited** implementation of [P256](https://www.secg.org/sec2-v2.pdf)\n *\n * :::\n *\n * @example\n * ### Computing a Random Private Key\n *\n * A random private key can be computed using {@link ox#P256.(randomPrivateKey:function)}:\n *\n * ```ts twoslash\n * import { P256 } from 'ox'\n *\n * const privateKey = P256.randomPrivateKey()\n * // @log: '0x...'\n * ```\n *\n * @example\n * ### Getting a Public Key\n *\n * A public key can be derived from a private key using {@link ox#P256.(getPublicKey:function)}:\n *\n * ```ts twoslash\n * import { P256 } from 'ox'\n *\n * const privateKey = P256.randomPrivateKey()\n *\n * const publicKey = P256.getPublicKey({ privateKey }) // [!code focus]\n * // @log: { x: 3251...5152n, y: 1251...5152n }\n * ```\n *\n * @example\n * ### Signing a Payload\n *\n * A payload can be signed using {@link ox#P256.(sign:function)}:\n *\n * ```ts twoslash\n * import { P256 } from 'ox'\n *\n * const privateKey = P256.randomPrivateKey()\n *\n * const signature = P256.sign({ payload: '0xdeadbeef', privateKey }) // [!code focus]\n * // @log: { r: 1251...5152n, s: 1251...5152n, yParity: 1 }\n * ```\n *\n * @example\n * ### Verifying a Signature\n *\n * A signature can be verified using {@link ox#P256.(verify:function)}:\n *\n * ```ts twoslash\n * import { P256 } from 'ox'\n *\n * const privateKey = P256.randomPrivateKey()\n * const publicKey = P256.getPublicKey({ privateKey })\n * const signature = P256.sign({ payload: '0xdeadbeef', privateKey })\n *\n * const isValid = P256.verify({ // [!code focus]\n *   payload: '0xdeadbeef', // [!code focus]\n *   publicKey, // [!code focus]\n *   signature, // [!code focus]\n * }) // [!code focus]\n * // @log: true\n * ```\n *\n * @category Crypto\n */\n\n/**\n * Utility functions for working with ECDSA signatures.\n *\n * @example\n * ### Serializing a Signature\n *\n * Signatures can be serialized to Hex or Bytes using {@link ox#Signature.(toHex:function)}:\n *\n * ```ts twoslash\n * import { Signature } from 'ox'\n *\n * const signature = Signature.toHex({\n *   r: 49782753348462494199823712700004552394425719014458918871452329774910450607807n,\n *   s: 33726695977844476214676913201140481102225469284307016937915595756355928419768n,\n *   yParity: 1\n * })\n * // @log: '0x6e100a352ec6ad1b70802290e18aeed190704973570f3b8ed42cb9808e2ea6bf4a90a229a244495b41890987806fcbd2d5d23fc0dbe5f5256c2613c039d76db81c'\n * ```\n *\n * @example\n * ### Deserializing a Signature\n *\n * Signatures can be deserialized from Hex or Bytes using {@link ox#Signature.(fromHex:function)}:\n *\n * ```ts twoslash\n * import { Signature } from 'ox'\n *\n * Signature.fromHex('0x6e100a352ec6ad1b70802290e18aeed190704973570f3b8ed42cb9808e2ea6bf4a90a229a244495b41890987806fcbd2d5d23fc0dbe5f5256c2613c039d76db81c')\n * // @log: { r: 5231...n, s: 3522...n, yParity: 0 }\n * ```\n *\n * @category Crypto\n */\n\n/**\n * Utility functions for working with\n * [EIP-4361: Sign-In with Ethereum](https://eips.ethereum.org/EIPS/eip-4361)\n *\n * @example\n * ### Creating a SIWE Message\n *\n * SIWE messages can be created using {@link ox#Siwe.(createMessage:function)}:\n *\n * ```ts twoslash\n * import { Siwe } from 'ox'\n *\n * Siwe.createMessage({\n *   address: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n *   chainId: 1,\n *   domain: 'example.com',\n *   nonce: 'foobarbaz',\n *   uri: 'https://example.com/path',\n *   version: '1',\n * })\n * // @log: \"example.com wants you to sign in with your Ethereum account:\n * // @log: 0xA0Cf798816D4b9b9866b5330EEa46a18382f251e\n * // @log:\n * // @log:\n * // @log: URI: https://example.com/path\n * // @log: Version: 1\n * // @log: Chain ID: 1\n * // @log: Nonce: foobarbaz\n * // @log: Issued At: 2023-02-01T00:00:00.000Z\"\n * ```\n *\n * @example\n * ### Generating SIWE Nonces\n *\n * SIWE nonces can be generated using {@link ox#Siwe.(generateNonce:function)}:\n *\n * ```ts twoslash\n * import { Siwe } from 'ox'\n *\n * Siwe.generateNonce()\n * // @log: '65ed4681d4efe0270b923ff5f4b097b1c95974dc33aeebecd5724c42fd86dfd25dc70b27ef836b2aa22e68f19ebcccc1'\n * ```\n *\n * @example\n * ### Parsing a SIWE Message\n *\n * SIWE messages can be parsed using {@link ox#Siwe.(parseMessage:function)}:\n *\n * ```ts twoslash\n * import { Siwe } from 'ox'\n *\n * Siwe.parseMessage(`example.com wants you to sign in with your Ethereum account:\n * 0xA0Cf798816D4b9b9866b5330EEa46a18382f251e\n *\n * I accept the ExampleOrg Terms of Service: https://example.com/tos\n *\n * URI: https://example.com/path\n * Version: 1\n * Chain ID: 1\n * Nonce: foobarbaz\n * Issued At: 2023-02-01T00:00:00.000Z`)\n * // @log: {\n * // @log:   address: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n * // @log:   chainId: 1,\n * // @log:   domain: 'example.com',\n * // @log:   issuedAt: '2023-02-01T00:00:00.000Z',\n * // @log:   nonce: 'foobarbaz',\n * // @log:   statement: 'I accept the ExampleOrg Terms of Service: https://example.com/tos',\n * // @log:   uri: 'https://example.com/path',\n * // @log:   version: '1',\n * // @log: }\n * ```\n *\n * @example\n * ### Validating a SIWE Message\n *\n * SIWE messages can be validated using {@link ox#Siwe.(validateMessage:function)}:\n *\n * ```ts twoslash\n * import { Siwe } from 'ox'\n *\n * Siwe.validateMessage({\n *   address: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n *   domain: 'example.com',\n *   message: {\n *     address: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n *     chainId: 1,\n *     domain: 'example.com',\n *     nonce: 'foobarbaz',\n *     uri: 'https://example.com/path',\n *     version: '1',\n *   },\n *   nonce: 'foobarbaz',\n * })\n * // @log: true\n * ```\n *\n * @category Sign-In with Ethereum (EIP-4361)\n */\n\n\n/**\n * Utilities & types for working with **State Overrides**.\n *\n * @category Execution Spec\n */\n\n/**\n * Utilities & types for working with **Transactions** as defined in the [Execution API specification](https://github.com/ethereum/execution-apis/blob/main/src/schemas/transaction.yaml)\n *\n * @example\n * ### Converting from RPC Format\n *\n * Transactions can be converted from RPC format using {@link ox#Transaction.(fromRpc:function)}:\n *\n * ```ts twoslash\n * import { Transaction } from 'ox'\n *\n * const transaction = Transaction.fromRpc({\n *   hash: '0x353fdfc38a2f26115daadee9f5b8392ce62b84f410957967e2ed56b35338cdd0',\n *   nonce: '0x357',\n *   blockHash:\n *     '0xc350d807505fb835650f0013632c5515592987ba169bbc6626d9fc54d91f0f0b',\n *   blockNumber: '0x12f296f',\n *   transactionIndex: '0x2',\n *   from: '0x814e5e0e31016b9a7f138c76b7e7b2bb5c1ab6a6',\n *   to: '0x3fc91a3afd70395cd496c647d5a6cc9d4b2b7fad',\n *   value: '0x9b6e64a8ec60000',\n *   gas: '0x43f5d',\n *   maxFeePerGas: '0x2ca6ae494',\n *   maxPriorityFeePerGas: '0x41cc3c0',\n *   input:\n *     '0x3593564c000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000006643504700000000000000000000000000000000000000000000000000000000000000040b080604000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002800000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000009b6e64a8ec600000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000009b6e64a8ec60000000000000000000000000000000000000000000000000000019124bb5ae978c000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000c56c7a0eaa804f854b536a5f3d5f49d2ec4b12b80000000000000000000000000000000000000000000000000000000000000060000000000000000000000000c56c7a0eaa804f854b536a5f3d5f49d2ec4b12b8000000000000000000000000000000fee13a103a10d593b9ae06b3e05f2e7e1c00000000000000000000000000000000000000000000000000000000000000190000000000000000000000000000000000000000000000000000000000000060000000000000000000000000c56c7a0eaa804f854b536a5f3d5f49d2ec4b12b800000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000190240001b9872b',\n *   r: '0x635dc2033e60185bb36709c29c75d64ea51dfbd91c32ef4be198e4ceb169fb4d',\n *   s: '0x50c2667ac4c771072746acfdcf1f1483336dcca8bd2df47cd83175dbe60f0540',\n *   yParity: '0x0',\n *   chainId: '0x1',\n *   accessList: [],\n *   type: '0x2',\n * })\n * ```\n *\n * @category Execution Spec\n */\n\n/**\n * Errors & Types for working with Transaction Envelopes.\n *\n * :::note\n * Refer to the following modules for specific Transaction Envelope types:\n * - [`TransactionEnvelopeLegacy`](/api/TransactionEnvelopeLegacy)\n * - [`TransactionEnvelopeEip1559`](/api/TransactionEnvelopeEip1559)\n * - [`TransactionEnvelopeEip2930`](/api/TransactionEnvelopeEip2930)\n * - [`TransactionEnvelopeEip4844`](/api/TransactionEnvelopeEip4844)\n * - [`TransactionEnvelopeEip7702`](/api/TransactionEnvelopeEip7702)\n * :::\n *\n * @category Transaction Envelopes\n */\n\n/**\n * Utility functions for working\n * with **Legacy Transaction Envelopes**.\n *\n * @example\n * ### Instantiating\n *\n * Transaction Envelopes can be instantiated using {@link ox#TransactionEnvelopeLegacy.(from:function)}:\n *\n * ```ts twoslash\n * import { TransactionEnvelopeLegacy, Value } from 'ox'\n *\n * const envelope = TransactionEnvelopeLegacy.from({\n *   gasPrice: Value.fromGwei('10'),\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: Value.fromEther('1'),\n * })\n * ```\n *\n * * @example\n * ### Signing\n *\n * Transaction Envelopes can be signed using {@link ox#TransactionEnvelopeLegacy.(getSignPayload:function)} and a signing function such as {@link ox#Secp256k1.(sign:function)} or {@link ox#P256.(sign:function)}:\n *\n * ```ts twoslash\n * // @noErrors\n * import { Secp256k1, TransactionEnvelopeLegacy } from 'ox'\n *\n * const envelope = TransactionEnvelopeLegacy.from({\n *   nonce: 0n,\n *   gasPrice: 1000000000n,\n *   gas: 21000n,\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: 1000000000000000000n,\n * })\n *\n * const signature = Secp256k1.sign({ // [!code focus]\n *   payload: TransactionEnvelopeLegacy.getSignPayload(envelope), // [!code focus]\n *   privateKey: '0x...' // [!code focus]\n * }) // [!code focus]\n *\n * const envelope_signed = TransactionEnvelopeLegacy.from(envelope, { signature })\n * ```\n *\n * @example\n * ### Serializing\n *\n * Transaction Envelopes can be serialized using {@link ox#TransactionEnvelopeLegacy.(serialize:function)}:\n *\n * ```ts twoslash\n * import { TransactionEnvelopeLegacy, Value } from 'ox'\n *\n * const envelope = TransactionEnvelopeLegacy.from({\n *   chainId: 1,\n *   gasPrice: Value.fromGwei('10'),\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: Value.fromEther('1'),\n * })\n *\n * const serialized = TransactionEnvelopeLegacy.serialize(envelope) // [!code focus]\n * ```\n *\n * @example\n * ### Sending\n *\n * We can send a Transaction Envelope to the network by serializing the signed envelope with `.serialize`, and then broadcasting it over JSON-RPC with `eth_sendRawTransaction`.\n *\n * In this example, we will use {@link ox#RpcTransport.(fromHttp:function)} to broadcast a `eth_sendRawTransaction` request over HTTP JSON-RPC.\n *\n * ```ts twoslash\n * import { RpcTransport, TransactionEnvelopeLegacy, Secp256k1, Value } from 'ox'\n *\n * // Construct the Envelope.\n * const envelope = TransactionEnvelopeLegacy.from({\n *   chainId: 1,\n *   gasPrice: Value.fromGwei('10'),\n *   nonce: 69n,\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: Value.fromEther('1.5'),\n * })\n *\n * // Sign over the Envelope.\n * const signature = Secp256k1.sign({\n *   payload: TransactionEnvelopeLegacy.getSignPayload(envelope),\n *   privateKey: '0x...',\n * })\n *\n * // Serialize the Envelope with the Signature. // [!code focus]\n * const serialized = TransactionEnvelopeLegacy.serialize(envelope, { // [!code focus]\n *   signature  // [!code focus]\n * }) // [!code focus]\n *\n * // Broadcast the Envelope with `eth_sendRawTransaction`. // [!code focus]\n * const transport = RpcTransport.fromHttp('https://1.rpc.thirdweb.com') // [!code focus]\n * const hash = await transport.request({ // [!code focus]\n *   method: 'eth_sendRawTransaction', // [!code focus]\n *   params: [serialized], // [!code focus]\n * }) // [!code focus]\n * ```\n *\n * If you are interfacing with an RPC that supports `eth_sendTransaction`, you can also use\n * {@link ox#TransactionEnvelopeLegacy.(toRpc:function)} to convert an Envelope to an RPC-compatible format.\n * This means you can skip the ceremony of manually filling & signing the Transaction.\n *\n * ```ts twoslash\n * import 'ox/window'\n * import { Provider, TransactionEnvelopeLegacy, Value } from 'ox'\n *\n * const envelope = TransactionEnvelopeLegacy.from({\n *   chainId: 1,\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: Value.fromEther('1.5'),\n * })\n *\n * const envelope_rpc = TransactionEnvelopeLegacy.toRpc(envelope)\n *\n * const provider = Provider.from(window.ethereum)\n * const hash = await provider.request({\n *   method: 'eth_sendTransaction',\n *   params: [envelope_rpc],\n * })\n * ```\n *\n * @example\n * ### Computing Hashes\n *\n * Transaction Hashes can be computed using {@link ox#TransactionEnvelopeLegacy.(hash:function)}:\n *\n * ```ts twoslash\n * import { Secp256k1, TransactionEnvelopeLegacy } from 'ox'\n *\n * const envelope = TransactionEnvelopeLegacy.from({\n *   chainId: 1,\n *   nonce: 0n,\n *   gasPrice: 1000000000n,\n *   gas: 21000n,\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: 1000000000000000000n,\n *   data: '0x',\n * })\n *\n * const signature = Secp256k1.sign({\n *   payload: TransactionEnvelopeLegacy.getSignPayload(envelope),\n *   privateKey: '0x...'\n * })\n *\n * const envelope_signed = TransactionEnvelopeLegacy.from(envelope, { signature })\n *\n * const hash = TransactionEnvelopeLegacy.hash(envelope_signed) // [!code focus]\n * ```\n *\n * @category Transaction Envelopes\n */\n\n/**\n * Utility functions for working with [EIP-1559 Typed Transaction Envelopes](https://eips.ethereum.org/EIPS/eip-1559)\n *\n *  @example\n * ### Instantiating\n *\n * Transaction Envelopes can be instantiated using {@link ox#TransactionEnvelopeEip1559.(from:function)}:\n *\n * ```ts twoslash\n * import { TransactionEnvelopeEip1559, Value } from 'ox'\n *\n * const envelope = TransactionEnvelopeEip1559.from({\n *   chainId: 1,\n *   maxFeePerGas: Value.fromGwei('10'),\n *   maxPriorityFeePerGas: Value.fromGwei('1'),\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: Value.fromEther('1'),\n * })\n * // @log: {\n * // @log:   chainId: 1,\n * // @log:   maxFeePerGas: 10000000000n,\n * // @log:   maxPriorityFeePerGas: 1000000000n,\n * // @log:   to: '0x0000000000000000000000000000000000000000',\n * // @log:   type: 'eip1559',\n * // @log:   value: 1000000000000000000n,\n * // @log: }\n * ```\n *\n * @example\n * ### Signing\n *\n * Transaction Envelopes can be signed using {@link ox#TransactionEnvelopeEip1559.(getSignPayload:function)} and a signing function such as {@link ox#Secp256k1.(sign:function)} or {@link ox#P256.(sign:function)}:\n *\n * ```ts twoslash\n * import { Secp256k1, TransactionEnvelopeEip1559 } from 'ox'\n *\n * const envelope = TransactionEnvelopeEip1559.from({\n *   chainId: 1,\n *   nonce: 0n,\n *   gasPrice: 1000000000n,\n *   gas: 21000n,\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: 1000000000000000000n,\n * })\n *\n * const signature = Secp256k1.sign({ // [!code focus]\n *   payload: TransactionEnvelopeEip1559.getSignPayload(envelope), // [!code focus]\n *   privateKey: '0x...' // [!code focus]\n * }) // [!code focus]\n *\n * const envelope_signed = TransactionEnvelopeEip1559.from(envelope, { signature })\n * ```\n *\n * @example\n * ### Serializing\n *\n * Transaction Envelopes can be serialized using {@link ox#TransactionEnvelopeEip1559.(serialize:function)}:\n *\n * ```ts twoslash\n * import { TransactionEnvelopeEip1559, Value } from 'ox'\n *\n * const envelope = TransactionEnvelopeEip1559.from({\n *   chainId: 1,\n *   maxFeePerGas: Value.fromGwei('10'),\n *   maxPriorityFeePerGas: Value.fromGwei('1'),\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: Value.fromEther('1'),\n * })\n *\n * const serialized = TransactionEnvelopeEip1559.serialize(envelope) // [!code focus]\n * ```\n *\n * @example\n * ### Sending\n *\n * We can send a Transaction Envelope to the network by serializing the signed envelope with `.serialize`, and then broadcasting it over JSON-RPC with `eth_sendRawTransaction`.\n *\n * In this example, we will use {@link ox#RpcTransport.(fromHttp:function)} to broadcast a `eth_sendRawTransaction` request over HTTP JSON-RPC.\n *\n * ```ts twoslash\n * import { RpcTransport, TransactionEnvelopeEip1559, Secp256k1, Value } from 'ox'\n *\n * // Construct the Envelope.\n * const envelope = TransactionEnvelopeEip1559.from({\n *   chainId: 1,\n *   maxFeePerGas: Value.fromGwei('10'),\n *   maxPriorityFeePerGas: Value.fromGwei('1'),\n *   nonce: 69n,\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: Value.fromEther('1.5'),\n * })\n *\n * // Sign over the Envelope.\n * const signature = Secp256k1.sign({\n *   payload: TransactionEnvelopeEip1559.getSignPayload(envelope),\n *   privateKey: '0x...',\n * })\n *\n * // Serialize the Envelope with the Signature. // [!code focus]\n * const serialized = TransactionEnvelopeEip1559.serialize(envelope, { // [!code focus]\n *   signature  // [!code focus]\n * }) // [!code focus]\n *\n * // Broadcast the Envelope with `eth_sendRawTransaction`. // [!code focus]\n * const transport = RpcTransport.fromHttp('https://1.rpc.thirdweb.com') // [!code focus]\n * const hash = await transport.request({ // [!code focus]\n *   method: 'eth_sendRawTransaction', // [!code focus]\n *   params: [serialized], // [!code focus]\n * }) // [!code focus]\n * ```\n *\n * If you are interfacing with an RPC that supports `eth_sendTransaction`, you can also use\n * {@link ox#TransactionEnvelopeEip1559.(toRpc:function)} to convert an Envelope to an RPC-compatible format.\n * This means you can skip the ceremony of manually filling & signing the Transaction.\n *\n * ```ts twoslash\n * import 'ox/window'\n * import { Provider, TransactionEnvelopeEip1559, Value } from 'ox'\n *\n * const envelope = TransactionEnvelopeEip1559.from({\n *   chainId: 1,\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: Value.fromEther('1.5'),\n * })\n *\n * const envelope_rpc = TransactionEnvelopeEip1559.toRpc(envelope)\n *\n * const provider = Provider.from(window.ethereum)\n * const hash = await provider.request({\n *   method: 'eth_sendTransaction',\n *   params: [envelope_rpc],\n * })\n * ```\n *\n * @example\n * ### Computing Hashes\n *\n * Transaction Hashes can be computed using {@link ox#TransactionEnvelopeEip1559.(hash:function)}:\n *\n * ```ts twoslash\n * import { Secp256k1, TransactionEnvelopeEip1559, Value } from 'ox'\n *\n * const envelope = TransactionEnvelopeEip1559.from({\n *   chainId: 1,\n *   nonce: 0n,\n *   maxFeePerGas: Value.fromGwei('10'),\n *   maxPriorityFeePerGas: Value.fromGwei('1'),\n *   gas: 21000n,\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: 1000000000000000000n,\n *   data: '0x',\n * })\n *\n * const signature = Secp256k1.sign({\n *   payload: TransactionEnvelopeEip1559.getSignPayload(envelope),\n *   privateKey: '0x...'\n * })\n *\n * const envelope_signed = TransactionEnvelopeEip1559.from(envelope, { signature })\n *\n * const hash = TransactionEnvelopeEip1559.hash(envelope_signed) // [!code focus]\n * ```\n *\n * @category Transaction Envelopes\n */\n\n/**\n * Utility functions for working with [EIP-2930 Typed Transaction Envelopes](https://eips.ethereum.org/EIPS/eip-2930)\n *\n * @example\n * ### Instantiating\n *\n * Transaction Envelopes can be instantiated using {@link ox#TransactionEnvelopeEip2930.(from:function)}:\n *\n * ```ts twoslash\n * // @noErrors\n * import { TransactionEnvelopeEip2930, Value } from 'ox'\n *\n * const envelope = TransactionEnvelopeEip2930.from({\n *   chainId: 1,\n *   accessList: [...],\n *   gasPrice: Value.fromGwei('10'),\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: Value.fromEther('1'),\n * })\n * ```\n *\n * @example\n * ### Signing\n *\n * Transaction Envelopes can be signed using {@link ox#TransactionEnvelopeEip2930.(getSignPayload:function)} and a signing function such as {@link ox#Secp256k1.(sign:function)} or {@link ox#P256.(sign:function)}:\n *\n * ```ts twoslash\n * import { Secp256k1, TransactionEnvelopeEip2930 } from 'ox'\n *\n * const envelope = TransactionEnvelopeEip2930.from({\n *   chainId: 1,\n *   nonce: 0n,\n *   gasPrice: 1000000000n,\n *   gas: 21000n,\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: 1000000000000000000n,\n * })\n *\n * const payload = TransactionEnvelopeEip2930.getSignPayload(envelope) // [!code focus]\n * // @log: '0x...'\n *\n * const signature = Secp256k1.sign({ payload, privateKey: '0x...' })\n * ```\n *\n * @example\n * ### Serializing\n *\n * Transaction Envelopes can be serialized using {@link ox#TransactionEnvelopeEip2930.(serialize:function)}:\n *\n * ```ts twoslash\n * import { Secp256k1, TransactionEnvelopeEip2930, Value } from 'ox'\n *\n * const envelope = TransactionEnvelopeEip2930.from({\n *   chainId: 1,\n *   nonce: 0n,\n *   gasPrice: 1000000000n,\n *   gas: 21000n,\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: 1000000000000000000n,\n * })\n *\n * const serialized = TransactionEnvelopeEip2930.serialize(envelope) // [!code focus]\n * ```\n *\n * @example\n * ### Sending\n *\n * We can send a Transaction Envelope to the network by serializing the signed envelope with `.serialize`, and then broadcasting it over JSON-RPC with `eth_sendRawTransaction`.\n *\n * In this example, we will use {@link ox#RpcTransport.(fromHttp:function)} to broadcast a `eth_sendRawTransaction` request over HTTP JSON-RPC.\n *\n * ```ts twoslash\n * import { RpcTransport, TransactionEnvelopeEip2930, Secp256k1, Value } from 'ox'\n *\n * // Construct the Envelope.\n * const envelope = TransactionEnvelopeEip2930.from({\n *   accessList: [],\n *   chainId: 1,\n *   gasPrice: Value.fromGwei('10'),\n *   nonce: 69n,\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: Value.fromEther('1.5'),\n * })\n *\n * // Sign over the Envelope.\n * const signature = Secp256k1.sign({\n *   payload: TransactionEnvelopeEip2930.getSignPayload(envelope),\n *   privateKey: '0x...',\n * })\n *\n * // Serialize the Envelope with the Signature. // [!code focus]\n * const serialized = TransactionEnvelopeEip2930.serialize(envelope, { // [!code focus]\n *   signature  // [!code focus]\n * }) // [!code focus]\n *\n * // Broadcast the Envelope with `eth_sendRawTransaction`. // [!code focus]\n * const transport = RpcTransport.fromHttp('https://1.rpc.thirdweb.com') // [!code focus]\n * const hash = await transport.request({ // [!code focus]\n *   method: 'eth_sendRawTransaction', // [!code focus]\n *   params: [serialized], // [!code focus]\n * }) // [!code focus]\n * ```\n *\n * If you are interfacing with an RPC that supports `eth_sendTransaction`, you can also use\n * {@link ox#TransactionEnvelopeEip2930.(toRpc:function)} to convert an Envelope to an RPC-compatible format.\n * This means you can skip the ceremony of manually filling & signing the Transaction.\n *\n * ```ts twoslash\n * import 'ox/window'\n * import { Provider, TransactionEnvelopeEip2930, Value } from 'ox'\n *\n * const envelope = TransactionEnvelopeEip2930.from({\n *   accessList: [],\n *   chainId: 1,\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: Value.fromEther('1.5'),\n * })\n *\n * const envelope_rpc = TransactionEnvelopeEip2930.toRpc(envelope)\n *\n * const provider = Provider.from(window.ethereum)\n * const hash = await provider.request({\n *   method: 'eth_sendTransaction',\n *   params: [envelope_rpc],\n * })\n * ```\n *\n * @example\n * ### Computing Hashes\n *\n * Transaction Hashes can be computed using {@link ox#TransactionEnvelopeEip2930.(hash:function)}:\n *\n * ```ts twoslash\n * import { Secp256k1, TransactionEnvelopeEip2930 } from 'ox'\n *\n * const envelope = TransactionEnvelopeEip2930.from({\n *   chainId: 1,\n *   nonce: 0n,\n *   gasPrice: 1000000000n,\n *   gas: 21000n,\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: 1000000000000000000n,\n *   data: '0x',\n * })\n *\n * const signature = Secp256k1.sign({\n *   payload: TransactionEnvelopeEip2930.getSignPayload(envelope),\n *   privateKey: '0x...'\n * })\n *\n * const envelope_signed = TransactionEnvelopeEip2930.from(envelope, { signature })\n *\n * const hash = TransactionEnvelopeEip2930.hash(envelope_signed) // [!code focus]\n * ```\n *\n * @category Transaction Envelopes\n */\n\n/**\n * Utility functions for working with [EIP-4844 Typed Transaction Envelopes](https://eips.ethereum.org/EIPS/eip-4844)\n *\n * @example\n * ### Instantiating Blobs\n *\n * Blobs can be instantiated using {@link ox#Blobs.(from:function)}:\n *\n * ```ts twoslash\n * import { Blobs, Hex } from 'ox'\n *\n * const blobs = Blobs.from(Hex.fromString('Hello World!'))\n * ```\n *\n * @example\n * ### Instantiating\n *\n * Transaction Envelopes can be instantiated using {@link ox#TransactionEnvelopeEip4844.(from:function)}:\n *\n * ```ts twoslash\n * // @noErrors\n * import { Blobs, Hex, TransactionEnvelopeEip4844, Value } from 'ox'\n * import { kzg } from './kzg'\n *\n * const blobs = Blobs.from(Hex.fromString('Hello World!'))\n * const blobVersionedHashes = Blobs.toVersionedHashes(blobs, { kzg })\n *\n * const envelope = TransactionEnvelopeEip4844.from({\n *   chainId: 1,\n *   blobVersionedHashes,\n *   maxFeePerBlobGas: Value.fromGwei('3'),\n *   maxFeePerGas: Value.fromGwei('10'),\n *   maxPriorityFeePerGas: Value.fromGwei('1'),\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: Value.fromEther('1'),\n * })\n * ```\n *\n * @example\n * ### Signing\n *\n * Transaction Envelopes can be signed using {@link ox#TransactionEnvelopeEip4844.(getSignPayload:function)} and a signing function such as {@link ox#Secp256k1.(sign:function)} or {@link ox#P256.(sign:function)}:\n *\n * ```ts twoslash\n * // @noErrors\n * import { Blobs, Secp256k1, TransactionEnvelopeEip4844 } from 'ox'\n * import { kzg } from './kzg'\n *\n * const blobs = Blobs.from('0xdeadbeef')\n * const blobVersionedHashes = Blobs.toVersionedHashes(blobs, { kzg })\n * const sidecars = Blobs.toSidecars(blobs, { kzg })\n *\n * const envelope = TransactionEnvelopeEip4844.from({\n *   blobVersionedHashes,\n *   chainId: 1,\n *   nonce: 0n,\n *   maxFeePerBlobGas: Value.fromGwei('3'),\n *   maxFeePerGas: Value.fromGwei('10'),\n *   maxPriorityFeePerGas: Value.fromGwei('1'),\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: Value.fromEther('1'),\n * })\n *\n * const signature = Secp256k1.sign({ // [!code focus]\n *   payload: TransactionEnvelopeEip4844.getSignPayload(envelope), // [!code focus]\n *   privateKey: '0x...' // [!code focus]\n * }) // [!code focus]\n *\n * const envelope_signed = TransactionEnvelopeEip4844.from(envelope, {\n *   sidecars,\n *   signature\n * })\n * ```\n *\n * @example\n * ### Serializing\n *\n * Transaction Envelopes can be serialized using {@link ox#TransactionEnvelopeEip4844.(serialize:function)}:\n *\n * ```ts twoslash\n * // @noErrors\n * import { Blobs, TransactionEnvelopeEip4844 } from 'ox'\n * import { kzg } from './kzg'\n *\n * const blobs = Blobs.from('0xdeadbeef')\n * const blobVersionedHashes = Blobs.toVersionedHashes(blobs, { kzg })\n *\n * const envelope = TransactionEnvelopeEip4844.from({\n *   blobVersionedHashes,\n *   chainId: 1,\n *   maxFeePerBlobGas: Value.fromGwei('3'),\n *   maxFeePerGas: Value.fromGwei('10'),\n *   maxPriorityFeePerGas: Value.fromGwei('1'),\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: Value.fromEther('1'),\n * })\n *\n * const serialized = TransactionEnvelopeEip4844.serialize(envelope) // [!code focus]\n * ```\n *\n * @example\n * ### Sending\n *\n * We can send a Transaction Envelope to the network by serializing the signed envelope with `.serialize`, and then broadcasting it over JSON-RPC with `eth_sendRawTransaction`.\n *\n * In this example, we will use {@link ox#RpcTransport.(fromHttp:function)} to broadcast a `eth_sendRawTransaction` request over HTTP JSON-RPC.\n *\n * ```ts twoslash\n * // @noErrors\n * import { Blobs, RpcTransport, TransactionEnvelopeEip4844, Secp256k1, Value } from 'ox'\n * import { kzg } from './kzg'\n *\n * // Compute the Blob Versioned Hashes.\n * const blobs = Blobs.from('0xdeadbeef')\n * const blobVersionedHashes = Blobs.toVersionedHashes(blobs, { kzg })\n * const sidecars = Blobs.toSidecars(blobs, { kzg })\n *\n * // Construct the Envelope.\n * const envelope = TransactionEnvelopeEip4844.from({\n *   chainId: 1,\n *   blobVersionedHashes,\n *   maxFeePerBlobGas: Value.fromGwei('3'),\n *   maxFeePerGas: Value.fromGwei('10'),\n *   maxPriorityFeePerGas: Value.fromGwei('1'),\n *   nonce: 0n,\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: Value.fromEther('1.5'),\n * })\n *\n * // Sign over the Envelope.\n * const signature = Secp256k1.sign({\n *   payload: TransactionEnvelopeEip4844.getSignPayload(envelope),\n *   privateKey: '0x...',\n * })\n *\n * // Serialize the Envelope with the Signature. // [!code focus]\n * const serialized = TransactionEnvelopeEip4844.serialize(envelope, { // [!code focus]\n *   sidecars, // [!code focus]\n *   signature  // [!code focus]\n * }) // [!code focus]\n *\n * // Broadcast the Envelope with `eth_sendRawTransaction`. // [!code focus]\n * const transport = RpcTransport.fromHttp('https://1.rpc.thirdweb.com') // [!code focus]\n * const hash = await transport.request({ // [!code focus]\n *   method: 'eth_sendRawTransaction', // [!code focus]\n *   params: [serialized], // [!code focus]\n * }) // [!code focus]\n * ```\n *\n * @example\n * ### Computing Hashes\n *\n * Transaction Hashes can be computed using {@link ox#TransactionEnvelopeEip4844.(hash:function)}:\n *\n * ```ts twoslash\n * // @noErrors\n * import { Blobs, Secp256k1, TransactionEnvelopeEip4844, Value } from 'ox'\n * import { kzg } from './kzg'\n *\n * const blobs = Blobs.from('0xdeadbeef')\n * const blobVersionedHashes = Blobs.toVersionedHashes(blobs, { kzg })\n *\n * const envelope = TransactionEnvelopeEip4844.from({\n *   blobVersionedHashes,\n *   chainId: 1,\n *   maxFeePerGas: Value.fromGwei('10'),\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: Value.fromEther('1'),\n * })\n *\n * const signature = Secp256k1.sign({\n *   payload: TransactionEnvelopeEip4844.getSignPayload(envelope),\n *   privateKey: '0x...'\n * })\n *\n * const envelope_signed = TransactionEnvelopeEip4844.from(envelope, { signature })\n *\n * const hash = TransactionEnvelopeEip4844.hash(envelope_signed) // [!code focus]\n * ```\n *\n * @category Transaction Envelopes\n */\n\n/**\n * Utility functions for working with [EIP-7702 Typed Transaction Envelopes](https://eips.ethereum.org/EIPS/eip-7702)\n *\n * @example\n * ### Instantiating\n *\n * Transaction Envelopes can be instantiated using {@link ox#TransactionEnvelopeEip7702.(from:function)}:\n *\n * ```ts twoslash\n * import { Authorization, Secp256k1, TransactionEnvelopeEip7702, Value } from 'ox'\n *\n * const authorization = Authorization.from({\n *   address: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   chainId: 1,\n *   nonce: 0n,\n * })\n *\n * const signature = Secp256k1.sign({\n *   payload: Authorization.getSignPayload(authorization),\n *   privateKey: '0x...',\n * })\n *\n * const authorizationList = [Authorization.from(authorization, { signature })]\n *\n * const envelope = TransactionEnvelopeEip7702.from({ // [!code focus]\n *   authorizationList, // [!code focus]\n *   chainId: 1, // [!code focus]\n *   maxFeePerGas: Value.fromGwei('10'), // [!code focus]\n *   maxPriorityFeePerGas: Value.fromGwei('1'), // [!code focus]\n *   to: '0x0000000000000000000000000000000000000000', // [!code focus]\n *   value: Value.fromEther('1'), // [!code focus]\n * }) // [!code focus]\n * ```\n *\n * :::tip\n *\n * See {@link ox#Authorization} for more details on instantiating and signing EIP-7702 Authorizations.\n *\n * :::\n *\n * @example\n * ### Signing\n *\n * Transaction Envelopes can be signed using {@link ox#TransactionEnvelopeEip7702.(getSignPayload:function)} and a signing function such as {@link ox#Secp256k1.(sign:function)} or {@link ox#P256.(sign:function)}:\n *\n * ```ts twoslash\n * import { Authorization, Secp256k1, TransactionEnvelopeEip7702, Value } from 'ox'\n *\n * const authorization = Authorization.from({\n *   address: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   chainId: 1,\n *   nonce: 0n,\n * })\n *\n * const signature_auth = Secp256k1.sign({\n *   payload: Authorization.getSignPayload(authorization),\n *   privateKey: '0x...',\n * })\n *\n * const authorizationList = [Authorization.from(authorization, { signature: signature_auth })]\n *\n * const envelope = TransactionEnvelopeEip7702.from({\n *   authorizationList,\n *   chainId: 1,\n *   maxFeePerGas: Value.fromGwei('10'),\n *   maxPriorityFeePerGas: Value.fromGwei('1'),\n *   to: '0x0000000000000000000000000000000000000000',\n *   value: Value.fromEther('1'),\n * })\n *\n * const signature = Secp256k1.sign({ // [!code focus]\n *   payload: TransactionEnvelopeEip7702.getSignPayload(envelope), // [!code focus]\n *   privateKey: '0x...', // [!code focus]\n * })\n *\n * const envelope_signed = TransactionEnvelopeEip7702.from(envelope, { signature })\n * ```\n *\n * @example\n * ### Sending\n *\n * We can send a Transaction Envelope to the network by serializing the signed envelope with `.serialize`, and then broadcasting it over JSON-RPC with `eth_sendRawTransaction`.\n *\n * In this example, we will use {@link ox#RpcTransport.(fromHttp:function)} to broadcast a `eth_sendRawTransaction` request over HTTP JSON-RPC.\n *\n * ```ts twoslash\n * import { Authorization, RpcTransport, TransactionEnvelopeEip7702, Secp256k1, Value } from 'ox'\n *\n * const authorization = Authorization.from({\n *   address: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   chainId: 1,\n *   nonce: 0n,\n * })\n *\n * const signature_auth = Secp256k1.sign({\n *   payload: Authorization.getSignPayload(authorization),\n *   privateKey: '0x...',\n * })\n *\n * const authorizationList = [Authorization.from(authorization, { signature: signature_auth })]\n *\n * const envelope = TransactionEnvelopeEip7702.from({\n *   authorizationList,\n *   chainId: 1,\n *   maxFeePerGas: Value.fromGwei('10'),\n *   maxPriorityFeePerGas: Value.fromGwei('1'),\n *   nonce: 69n,\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: Value.fromEther('1.5'),\n * })\n *\n * const signature = Secp256k1.sign({\n *   payload: TransactionEnvelopeEip7702.getSignPayload(envelope),\n *   privateKey: '0x...',\n * })\n *\n * // Serialize the Envelope with the Signature. // [!code focus]\n * const serialized = TransactionEnvelopeEip7702.serialize(envelope, { // [!code focus]\n *   signature  // [!code focus]\n * }) // [!code focus]\n *\n * // Broadcast the Envelope with `eth_sendRawTransaction`. // [!code focus]\n * const transport = RpcTransport.fromHttp('https://1.rpc.thirdweb.com') // [!code focus]\n * const hash = await transport.request({ // [!code focus]\n *   method: 'eth_sendRawTransaction', // [!code focus]\n *   params: [serialized], // [!code focus]\n * }) // [!code focus]\n * ```\n *\n * @category Transaction Envelopes\n */\n\n/**\n * Utilities & types for working with **Transaction Receipts** as defined in the [Execution API specification](https://github.com/ethereum/execution-apis/blob/main/src/schemas/receipt.yaml)\n *\n * @example\n * ### Converting from RPC Format\n *\n * Receipts can be converted from RPC format using {@link ox#TransactionReceipt.(fromRpc:function)}:\n *\n * ```ts twoslash\n * import 'ox/window'\n * import { TransactionReceipt } from 'ox'\n *\n * const receipt = await window.ethereum!\n *   .request({\n *     method: 'eth_getTransactionReceipt',\n *     params: [\n *       '0x353fdfc38a2f26115daadee9f5b8392ce62b84f410957967e2ed56b35338cdd0',\n *     ],\n *   })\n *   .then(TransactionReceipt.fromRpc) // [!code hl]\n * // @log: {\n * // @log:   blobGasPrice: 270441n,\n * // @log:   blobGasUsed: 4919n,\n * // @log:   blockHash: \"0xc350d807505fb835650f0013632c5515592987ba169bbc6626d9fc54d91f0f0b\",\n * // @log:   blockNumber: 19868015n,\n * // @log:   contractAddress: null,\n * // @log:   cumulativeGasUsed: 533781n,\n * // @log:   effectiveGasPrice: 9062804489n,\n * // @log:   from: \"0x814e5e0e31016b9a7f138c76b7e7b2bb5c1ab6a6\",\n * // @log:   gasUsed: 175034n,\n * // @log:   logs: [],\n * // @log:   logsBloom: \"0x00200000000000000000008080000000000000000040000000000000000000000000000000000000000000000000000022000000080000000000000000000000000000080000000000000008000000200000000000000000000200008020400000000000000000280000000000100000000000000000000000000010000000000000000000020000000000000020000000000001000000080000004000000000000000000000000000000000000000000000400000000000001000000000000000000002000000000000000020000000000000000000001000000000000000000000200000000000000000000000000000001000000000c00000000000000000\",\n * // @log:   root: undefined,\n * // @log:   status: \"success\",\n * // @log:   to: \"0x3fc91a3afd70395cd496c647d5a6cc9d4b2b7fad\",\n * // @log:   transactionHash: \"0x353fdfc38a2f26115daadee9f5b8392ce62b84f410957967e2ed56b35338cdd0\",\n * // @log:   transactionIndex: 2,\n * // @log:   type: \"eip1559\",\n * // @log: }\n * ```\n *\n * @category Execution Spec\n */\n\n/**\n * Utilities & types for working with **Transaction Requests** as defined in the [Execution API specification](https://github.com/ethereum/execution-apis/blob/4aca1d7a3e5aab24c8f6437131289ad386944eaa/src/schemas/transaction.yaml#L358-L423)\n *\n * @example\n * ```ts twoslash\n * import 'ox/window'\n * import { Provider, TransactionRequest, Value } from 'ox'\n *\n * const provider = Provider.from(window.ethereum!)\n *\n * const request = TransactionRequest.toRpc({ // [!code focus]\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8', // [!code focus]\n *   value: Value.fromEther('0.01'), // [!code focus]\n * }) // [!code focus]\n *\n * const hash = await provider.request({\n *   method: 'eth_sendTransaction',\n *   params: [request],\n * })\n * ```\n *\n * @category Execution Spec\n */\n\n/**\n * Utility functions for working with [EIP-712 Typed Data](https://eips.ethereum.org/EIPS/eip-712)\n *\n * @example\n * ### Getting Sign Payloads\n *\n * Typed Data can be converted to a sign payload using {@link ox#TypedData.(getSignPayload:function)}:\n *\n * ```ts twoslash\n * import { Secp256k1, TypedData, Hash } from 'ox'\n *\n * const payload = TypedData.getSignPayload({ // [!code focus:99]\n *   domain: {\n *     name: 'Ether Mail',\n *     version: '1',\n *     chainId: 1,\n *     verifyingContract: '0x0000000000000000000000000000000000000000',\n *   },\n *   types: {\n *     Person: [\n *       { name: 'name', type: 'string' },\n *       { name: 'wallet', type: 'address' },\n *     ],\n *     Mail: [\n *       { name: 'from', type: 'Person' },\n *       { name: 'to', type: 'Person' },\n *       { name: 'contents', type: 'string' },\n *     ],\n *   },\n *   primaryType: 'Mail',\n *   message: {\n *     from: {\n *       name: 'Cow',\n *       wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n *     },\n *     to: {\n *       name: 'Bob',\n *       wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n *     },\n *     contents: 'Hello, Bob!',\n *   },\n * })\n *\n * const signature = Secp256k1.sign({ payload, privateKey: '0x...' })\n * ```\n *\n * @category Signed & Typed Data\n */\n\n/**\n * Utilities & types for working with [EIP-191 Validator Data](https://eips.ethereum.org/EIPS/eip-191#0x00)\n *\n * @category Signed & Typed Data\n */\n\n/**\n * Utility functions for displaying and parsing Ethereum Values as defined under **2.1. Value** in the [Ethereum Yellow Paper](https://ethereum.github.io/yellowpaper/paper.pdf)\n *\n * @example\n * ```ts twoslash\n * // @noErrors\n * import { Value } from 'ox'\n *\n * const value = Value.fromEther('1')\n * // @log: 1_000_000_000_000_000_000n\n *\n * const formattedValue = Value.formatEther(value)\n * // @log: '1'\n *\n * const value = Value.fromEther('1', 'szabo')\n * // @log: 1_000_000n\n * ```\n *\n * @category Data\n */\n\n/**\n * Utility functions for [NIST P256](https://csrc.nist.gov/csrc/media/events/workshop-on-elliptic-curve-cryptography-standards/documents/papers/session6-adalier-mehmet.pdf) ECDSA cryptography using the [Web Authentication API](https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API)\n *\n * @example\n * ### Creating Credentials\n *\n * Credentials can be created using {@link ox#WebAuthnP256.(createCredential:function)}:\n *\n * ```ts twoslash\n * import { WebAuthnP256 } from 'ox'\n *\n * const credential = await WebAuthnP256.createCredential({ name: 'Example' }) // [!code focus]\n * // @log: {\n * // @log:   id: 'oZ48...',\n * // @log:   publicKey: { x: 51421...5123n, y: 12345...6789n },\n * // @log:   raw: PublicKeyCredential {},\n * // @log: }\n *\n * const { metadata, signature } = await WebAuthnP256.sign({\n *   credentialId: credential.id,\n *   challenge: '0xdeadbeef',\n * })\n * ```\n *\n * @example\n * ### Signing Payloads\n *\n * Payloads can be signed using {@link ox#WebAuthnP256.(sign:function)}:\n *\n * ```ts twoslash\n * import { WebAuthnP256 } from 'ox'\n *\n * const credential = await WebAuthnP256.createCredential({\n *   name: 'Example',\n * })\n *\n * const { metadata, signature } = await WebAuthnP256.sign({ // [!code focus]\n *   credentialId: credential.id, // [!code focus]\n *   challenge: '0xdeadbeef', // [!code focus]\n * }) // [!code focus]\n * // @log: {\n * // @log:   metadata: {\n * // @log:     authenticatorData: '0x49960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97630500000000',\n * // @log:     clientDataJSON: '{\"type\":\"webauthn.get\",\"challenge\":\"9jEFijuhEWrM4SOW-tChJbUEHEP44VcjcJ-Bqo1fTM8\",\"origin\":\"http://localhost:5173\",\"crossOrigin\":false}',\n * // @log:     challengeIndex: 23,\n * // @log:     typeIndex: 1,\n * // @log:     userVerificationRequired: true,\n * // @log:   },\n * // @log:   signature: { r: 51231...4215n, s: 12345...6789n },\n * // @log: }\n * ```\n *\n * @example\n * ### Verifying Signatures\n *\n * Signatures can be verified using {@link ox#WebAuthnP256.(verify:function)}:\n *\n * ```ts twoslash\n * import { WebAuthnP256 } from 'ox'\n *\n * const credential = await WebAuthnP256.createCredential({\n *   name: 'Example',\n * })\n *\n * const { metadata, signature } = await WebAuthnP256.sign({\n *   credentialId: credential.id,\n *   challenge: '0xdeadbeef',\n * })\n *\n * const result = await WebAuthnP256.verify({ // [!code focus]\n *   metadata, // [!code focus]\n *   challenge: '0xdeadbeef', // [!code focus]\n *   publicKey: credential.publicKey, // [!code focus]\n *   signature, // [!code focus]\n * }) // [!code focus]\n * // @log: true\n * ```\n *\n * @category Crypto\n */\n\n/**\n * Utility functions for [NIST P256](https://csrc.nist.gov/csrc/media/events/workshop-on-elliptic-curve-cryptography-standards/documents/papers/session6-adalier-mehmet.pdf) ECDSA cryptography using the [Web Crypto API](https://developer.mozilla.org/en-US/docs/Web/API/Web_Crypto_API)\n *\n * @example\n * ### Creating Key Pairs\n *\n * Key pairs can be created using {@link ox#WebCryptoP256.(createKeyPair:function)}:\n *\n * ```ts twoslash\n * import { WebCryptoP256 } from 'ox'\n *\n * const { publicKey, privateKey } = await WebCryptoP256.createKeyPair()\n * // @log: {\n * // @log:   privateKey: CryptoKey {},\n * // @log:   publicKey: {\n * // @log:     x: 59295962801117472859457908919941473389380284132224861839820747729565200149877n,\n * // @log:     y: 24099691209996290925259367678540227198235484593389470330605641003500238088869n,\n * // @log:     prefix: 4,\n * // @log:   },\n * // @log: }\n * ```\n *\n * @example\n * ### Signing Payloads\n *\n * Payloads can be signed using {@link ox#WebCryptoP256.(sign:function)}:\n *\n * ```ts twoslash\n * import { WebCryptoP256 } from 'ox'\n *\n * const { privateKey } = await WebCryptoP256.createKeyPair()\n *\n * const signature = await WebCryptoP256.sign({ // [!code focus]\n *   payload: '0xdeadbeef', // [!code focus]\n *   privateKey, // [!code focus]\n * }) // [!code focus]\n * // @log: {\n * // @log:   r: 151231...4423n,\n * // @log:   s: 516123...5512n,\n * // @log: }\n * ```\n *\n * @example\n * ### Verifying Signatures\n *\n * Signatures can be verified using {@link ox#WebCryptoP256.(verify:function)}:\n *\n * ```ts twoslash\n * import { WebCryptoP256 } from 'ox'\n *\n * const { privateKey, publicKey } = await WebCryptoP256.createKeyPair()\n * const signature = await WebCryptoP256.sign({ payload: '0xdeadbeef', privateKey })\n *\n * const verified = await WebCryptoP256.verify({ // [!code focus]\n *   payload: '0xdeadbeef', // [!code focus]\n *   publicKey, // [!code focus]\n *   signature, // [!code focus]\n * }) // [!code focus]\n * // @log: true\n * ```\n *\n * @category Crypto\n */\n\n/**\n * Utilities & types for working with Withdrawals as defined in the [Execution API specification](https://github.com/ethereum/execution-apis/blob/main/src/schemas/withdrawal.yaml)\n *\n * @category Execution Spec\n */\n\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ox/_esm/index.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ox/node_modules/@scure/bip32/lib/esm/index.js":
/*!********************************************************************!*\
  !*** ./node_modules/ox/node_modules/@scure/bip32/lib/esm/index.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HARDENED_OFFSET: () => (/* binding */ HARDENED_OFFSET),\n/* harmony export */   HDKey: () => (/* binding */ HDKey)\n/* harmony export */ });\n/* harmony import */ var _noble_curves_abstract_modular__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @noble/curves/abstract/modular */ \"(pages-dir-browser)/./node_modules/@noble/curves/esm/abstract/modular.js\");\n/* harmony import */ var _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @noble/curves/secp256k1 */ \"(pages-dir-browser)/./node_modules/@noble/curves/esm/secp256k1.js\");\n/* harmony import */ var _noble_hashes_hmac__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @noble/hashes/hmac */ \"(pages-dir-browser)/./node_modules/@noble/hashes/esm/hmac.js\");\n/* harmony import */ var _noble_hashes_legacy__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @noble/hashes/legacy */ \"(pages-dir-browser)/./node_modules/@noble/hashes/esm/legacy.js\");\n/* harmony import */ var _noble_hashes_sha2__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @noble/hashes/sha2 */ \"(pages-dir-browser)/./node_modules/@noble/hashes/esm/sha2.js\");\n/* harmony import */ var _noble_hashes_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @noble/hashes/utils */ \"(pages-dir-browser)/./node_modules/@noble/hashes/esm/utils.js\");\n/* harmony import */ var _scure_base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @scure/base */ \"(pages-dir-browser)/./node_modules/@scure/base/lib/esm/index.js\");\n/**\n * @module BIP32 hierarchical deterministic (HD) wallets over secp256k1.\n * @example\n * ```js\n * import { HDKey } from \"@scure/bip32\";\n * const hdkey1 = HDKey.fromMasterSeed(seed);\n * const hdkey2 = HDKey.fromExtendedKey(base58key);\n * const hdkey3 = HDKey.fromJSON({ xpriv: string });\n *\n * // props\n * [hdkey1.depth, hdkey1.index, hdkey1.chainCode];\n * console.log(hdkey2.privateKey, hdkey2.publicKey);\n * console.log(hdkey3.derive(\"m/0/2147483647'/1\"));\n * const sig = hdkey3.sign(hash);\n * hdkey3.verify(hash, sig);\n * ```\n */\n/*! scure-bip32 - MIT License (c) 2022 Patricio Palladino, Paul Miller (paulmillr.com) */\n\n\n\n\n\n\n\nconst Point = _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_0__.secp256k1.ProjectivePoint;\nconst base58check = (0,_scure_base__WEBPACK_IMPORTED_MODULE_1__.createBase58check)(_noble_hashes_sha2__WEBPACK_IMPORTED_MODULE_2__.sha256);\nfunction bytesToNumber(bytes) {\n    (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_3__.abytes)(bytes);\n    const h = bytes.length === 0 ? '0' : (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_3__.bytesToHex)(bytes);\n    return BigInt('0x' + h);\n}\nfunction numberToBytes(num) {\n    if (typeof num !== 'bigint')\n        throw new Error('bigint expected');\n    return (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_3__.hexToBytes)(num.toString(16).padStart(64, '0'));\n}\nconst MASTER_SECRET = (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_3__.utf8ToBytes)('Bitcoin seed');\n// Bitcoin hardcoded by default\nconst BITCOIN_VERSIONS = { private: 0x0488ade4, public: 0x0488b21e };\nconst HARDENED_OFFSET = 0x80000000;\nconst hash160 = (data) => (0,_noble_hashes_legacy__WEBPACK_IMPORTED_MODULE_4__.ripemd160)((0,_noble_hashes_sha2__WEBPACK_IMPORTED_MODULE_2__.sha256)(data));\nconst fromU32 = (data) => (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_3__.createView)(data).getUint32(0, false);\nconst toU32 = (n) => {\n    if (!Number.isSafeInteger(n) || n < 0 || n > 2 ** 32 - 1) {\n        throw new Error('invalid number, should be from 0 to 2**32-1, got ' + n);\n    }\n    const buf = new Uint8Array(4);\n    (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_3__.createView)(buf).setUint32(0, n, false);\n    return buf;\n};\nclass HDKey {\n    get fingerprint() {\n        if (!this.pubHash) {\n            throw new Error('No publicKey set!');\n        }\n        return fromU32(this.pubHash);\n    }\n    get identifier() {\n        return this.pubHash;\n    }\n    get pubKeyHash() {\n        return this.pubHash;\n    }\n    get privateKey() {\n        return this.privKeyBytes || null;\n    }\n    get publicKey() {\n        return this.pubKey || null;\n    }\n    get privateExtendedKey() {\n        const priv = this.privateKey;\n        if (!priv) {\n            throw new Error('No private key');\n        }\n        return base58check.encode(this.serialize(this.versions.private, (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_3__.concatBytes)(new Uint8Array([0]), priv)));\n    }\n    get publicExtendedKey() {\n        if (!this.pubKey) {\n            throw new Error('No public key');\n        }\n        return base58check.encode(this.serialize(this.versions.public, this.pubKey));\n    }\n    static fromMasterSeed(seed, versions = BITCOIN_VERSIONS) {\n        (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_3__.abytes)(seed);\n        if (8 * seed.length < 128 || 8 * seed.length > 512) {\n            throw new Error('HDKey: seed length must be between 128 and 512 bits; 256 bits is advised, got ' +\n                seed.length);\n        }\n        const I = (0,_noble_hashes_hmac__WEBPACK_IMPORTED_MODULE_5__.hmac)(_noble_hashes_sha2__WEBPACK_IMPORTED_MODULE_2__.sha512, MASTER_SECRET, seed);\n        return new HDKey({\n            versions,\n            chainCode: I.slice(32),\n            privateKey: I.slice(0, 32),\n        });\n    }\n    static fromExtendedKey(base58key, versions = BITCOIN_VERSIONS) {\n        // => version(4) || depth(1) || fingerprint(4) || index(4) || chain(32) || key(33)\n        const keyBuffer = base58check.decode(base58key);\n        const keyView = (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_3__.createView)(keyBuffer);\n        const version = keyView.getUint32(0, false);\n        const opt = {\n            versions,\n            depth: keyBuffer[4],\n            parentFingerprint: keyView.getUint32(5, false),\n            index: keyView.getUint32(9, false),\n            chainCode: keyBuffer.slice(13, 45),\n        };\n        const key = keyBuffer.slice(45);\n        const isPriv = key[0] === 0;\n        if (version !== versions[isPriv ? 'private' : 'public']) {\n            throw new Error('Version mismatch');\n        }\n        if (isPriv) {\n            return new HDKey({ ...opt, privateKey: key.slice(1) });\n        }\n        else {\n            return new HDKey({ ...opt, publicKey: key });\n        }\n    }\n    static fromJSON(json) {\n        return HDKey.fromExtendedKey(json.xpriv);\n    }\n    constructor(opt) {\n        this.depth = 0;\n        this.index = 0;\n        this.chainCode = null;\n        this.parentFingerprint = 0;\n        if (!opt || typeof opt !== 'object') {\n            throw new Error('HDKey.constructor must not be called directly');\n        }\n        this.versions = opt.versions || BITCOIN_VERSIONS;\n        this.depth = opt.depth || 0;\n        this.chainCode = opt.chainCode || null;\n        this.index = opt.index || 0;\n        this.parentFingerprint = opt.parentFingerprint || 0;\n        if (!this.depth) {\n            if (this.parentFingerprint || this.index) {\n                throw new Error('HDKey: zero depth with non-zero index/parent fingerprint');\n            }\n        }\n        if (opt.publicKey && opt.privateKey) {\n            throw new Error('HDKey: publicKey and privateKey at same time.');\n        }\n        if (opt.privateKey) {\n            if (!_noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_0__.secp256k1.utils.isValidPrivateKey(opt.privateKey)) {\n                throw new Error('Invalid private key');\n            }\n            this.privKey =\n                typeof opt.privateKey === 'bigint' ? opt.privateKey : bytesToNumber(opt.privateKey);\n            this.privKeyBytes = numberToBytes(this.privKey);\n            this.pubKey = _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_0__.secp256k1.getPublicKey(opt.privateKey, true);\n        }\n        else if (opt.publicKey) {\n            this.pubKey = Point.fromHex(opt.publicKey).toRawBytes(true); // force compressed point\n        }\n        else {\n            throw new Error('HDKey: no public or private key provided');\n        }\n        this.pubHash = hash160(this.pubKey);\n    }\n    derive(path) {\n        if (!/^[mM]'?/.test(path)) {\n            throw new Error('Path must start with \"m\" or \"M\"');\n        }\n        if (/^[mM]'?$/.test(path)) {\n            return this;\n        }\n        const parts = path.replace(/^[mM]'?\\//, '').split('/');\n        // tslint:disable-next-line\n        let child = this;\n        for (const c of parts) {\n            const m = /^(\\d+)('?)$/.exec(c);\n            const m1 = m && m[1];\n            if (!m || m.length !== 3 || typeof m1 !== 'string')\n                throw new Error('invalid child index: ' + c);\n            let idx = +m1;\n            if (!Number.isSafeInteger(idx) || idx >= HARDENED_OFFSET) {\n                throw new Error('Invalid index');\n            }\n            // hardened key\n            if (m[2] === \"'\") {\n                idx += HARDENED_OFFSET;\n            }\n            child = child.deriveChild(idx);\n        }\n        return child;\n    }\n    deriveChild(index) {\n        if (!this.pubKey || !this.chainCode) {\n            throw new Error('No publicKey or chainCode set');\n        }\n        let data = toU32(index);\n        if (index >= HARDENED_OFFSET) {\n            // Hardened\n            const priv = this.privateKey;\n            if (!priv) {\n                throw new Error('Could not derive hardened child key');\n            }\n            // Hardened child: 0x00 || ser256(kpar) || ser32(index)\n            data = (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_3__.concatBytes)(new Uint8Array([0]), priv, data);\n        }\n        else {\n            // Normal child: serP(point(kpar)) || ser32(index)\n            data = (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_3__.concatBytes)(this.pubKey, data);\n        }\n        const I = (0,_noble_hashes_hmac__WEBPACK_IMPORTED_MODULE_5__.hmac)(_noble_hashes_sha2__WEBPACK_IMPORTED_MODULE_2__.sha512, this.chainCode, data);\n        const childTweak = bytesToNumber(I.slice(0, 32));\n        const chainCode = I.slice(32);\n        if (!_noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_0__.secp256k1.utils.isValidPrivateKey(childTweak)) {\n            throw new Error('Tweak bigger than curve order');\n        }\n        const opt = {\n            versions: this.versions,\n            chainCode,\n            depth: this.depth + 1,\n            parentFingerprint: this.fingerprint,\n            index,\n        };\n        try {\n            // Private parent key -> private child key\n            if (this.privateKey) {\n                const added = (0,_noble_curves_abstract_modular__WEBPACK_IMPORTED_MODULE_6__.mod)(this.privKey + childTweak, _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_0__.secp256k1.CURVE.n);\n                if (!_noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_0__.secp256k1.utils.isValidPrivateKey(added)) {\n                    throw new Error('The tweak was out of range or the resulted private key is invalid');\n                }\n                opt.privateKey = added;\n            }\n            else {\n                const added = Point.fromHex(this.pubKey).add(Point.fromPrivateKey(childTweak));\n                // Cryptographically impossible: hmac-sha512 preimage would need to be found\n                if (added.equals(Point.ZERO)) {\n                    throw new Error('The tweak was equal to negative P, which made the result key invalid');\n                }\n                opt.publicKey = added.toRawBytes(true);\n            }\n            return new HDKey(opt);\n        }\n        catch (err) {\n            return this.deriveChild(index + 1);\n        }\n    }\n    sign(hash) {\n        if (!this.privateKey) {\n            throw new Error('No privateKey set!');\n        }\n        (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_3__.abytes)(hash, 32);\n        return _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_0__.secp256k1.sign(hash, this.privKey).toCompactRawBytes();\n    }\n    verify(hash, signature) {\n        (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_3__.abytes)(hash, 32);\n        (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_3__.abytes)(signature, 64);\n        if (!this.publicKey) {\n            throw new Error('No publicKey set!');\n        }\n        let sig;\n        try {\n            sig = _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_0__.secp256k1.Signature.fromCompact(signature);\n        }\n        catch (error) {\n            return false;\n        }\n        return _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_0__.secp256k1.verify(sig, hash, this.publicKey);\n    }\n    wipePrivateData() {\n        this.privKey = undefined;\n        if (this.privKeyBytes) {\n            this.privKeyBytes.fill(0);\n            this.privKeyBytes = undefined;\n        }\n        return this;\n    }\n    toJSON() {\n        return {\n            xpriv: this.privateExtendedKey,\n            xpub: this.publicExtendedKey,\n        };\n    }\n    serialize(version, key) {\n        if (!this.chainCode) {\n            throw new Error('No chainCode set');\n        }\n        (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_3__.abytes)(key, 33);\n        // version(4) || depth(1) || fingerprint(4) || index(4) || chain(32) || key(33)\n        return (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_3__.concatBytes)(toU32(version), new Uint8Array([this.depth]), toU32(this.parentFingerprint), toU32(this.index), this.chainCode, key);\n    }\n}\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ox/node_modules/@scure/bip32/lib/esm/index.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ox/node_modules/@scure/bip39/esm/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/ox/node_modules/@scure/bip39/esm/index.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   entropyToMnemonic: () => (/* binding */ entropyToMnemonic),\n/* harmony export */   generateMnemonic: () => (/* binding */ generateMnemonic),\n/* harmony export */   mnemonicToEntropy: () => (/* binding */ mnemonicToEntropy),\n/* harmony export */   mnemonicToSeed: () => (/* binding */ mnemonicToSeed),\n/* harmony export */   mnemonicToSeedSync: () => (/* binding */ mnemonicToSeedSync),\n/* harmony export */   validateMnemonic: () => (/* binding */ validateMnemonic)\n/* harmony export */ });\n/* harmony import */ var _noble_hashes_pbkdf2__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @noble/hashes/pbkdf2 */ \"(pages-dir-browser)/./node_modules/@noble/hashes/esm/pbkdf2.js\");\n/* harmony import */ var _noble_hashes_sha2__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @noble/hashes/sha2 */ \"(pages-dir-browser)/./node_modules/@noble/hashes/esm/sha2.js\");\n/* harmony import */ var _noble_hashes_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @noble/hashes/utils */ \"(pages-dir-browser)/./node_modules/@noble/hashes/esm/utils.js\");\n/* harmony import */ var _scure_base__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @scure/base */ \"(pages-dir-browser)/./node_modules/@scure/base/lib/esm/index.js\");\n/**\n * Audited & minimal JS implementation of\n * [BIP39 mnemonic phrases](https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki).\n * @module\n * @example\n```js\nimport * as bip39 from '@scure/bip39';\nimport { wordlist } from '@scure/bip39/wordlists/english';\nconst mn = bip39.generateMnemonic(wordlist);\nconsole.log(mn);\nconst ent = bip39.mnemonicToEntropy(mn, wordlist)\nbip39.entropyToMnemonic(ent, wordlist);\nbip39.validateMnemonic(mn, wordlist);\nawait bip39.mnemonicToSeed(mn, 'password');\nbip39.mnemonicToSeedSync(mn, 'password');\n\n// Wordlists\nimport { wordlist as czech } from '@scure/bip39/wordlists/czech';\nimport { wordlist as english } from '@scure/bip39/wordlists/english';\nimport { wordlist as french } from '@scure/bip39/wordlists/french';\nimport { wordlist as italian } from '@scure/bip39/wordlists/italian';\nimport { wordlist as japanese } from '@scure/bip39/wordlists/japanese';\nimport { wordlist as korean } from '@scure/bip39/wordlists/korean';\nimport { wordlist as portuguese } from '@scure/bip39/wordlists/portuguese';\nimport { wordlist as simplifiedChinese } from '@scure/bip39/wordlists/simplified-chinese';\nimport { wordlist as spanish } from '@scure/bip39/wordlists/spanish';\nimport { wordlist as traditionalChinese } from '@scure/bip39/wordlists/traditional-chinese';\n```\n */\n/*! scure-bip39 - MIT License (c) 2022 Patricio Palladino, Paul Miller (paulmillr.com) */\n\n\n\n\n// Japanese wordlist\nconst isJapanese = (wordlist) => wordlist[0] === '\\u3042\\u3044\\u3053\\u304f\\u3057\\u3093';\n// Normalization replaces equivalent sequences of characters\n// so that any two texts that are equivalent will be reduced\n// to the same sequence of code points, called the normal form of the original text.\n// https://tonsky.me/blog/unicode/#why-is-a----\nfunction nfkd(str) {\n    if (typeof str !== 'string')\n        throw new TypeError('invalid mnemonic type: ' + typeof str);\n    return str.normalize('NFKD');\n}\nfunction normalize(str) {\n    const norm = nfkd(str);\n    const words = norm.split(' ');\n    if (![12, 15, 18, 21, 24].includes(words.length))\n        throw new Error('Invalid mnemonic');\n    return { nfkd: norm, words };\n}\nfunction aentropy(ent) {\n    (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_0__.abytes)(ent, 16, 20, 24, 28, 32);\n}\n/**\n * Generate x random words. Uses Cryptographically-Secure Random Number Generator.\n * @param wordlist imported wordlist for specific language\n * @param strength mnemonic strength 128-256 bits\n * @example\n * generateMnemonic(wordlist, 128)\n * // 'legal winner thank year wave sausage worth useful legal winner thank yellow'\n */\nfunction generateMnemonic(wordlist, strength = 128) {\n    (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_0__.anumber)(strength);\n    if (strength % 32 !== 0 || strength > 256)\n        throw new TypeError('Invalid entropy');\n    return entropyToMnemonic((0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_0__.randomBytes)(strength / 8), wordlist);\n}\nconst calcChecksum = (entropy) => {\n    // Checksum is ent.length/4 bits long\n    const bitsLeft = 8 - entropy.length / 4;\n    // Zero rightmost \"bitsLeft\" bits in byte\n    // For example: bitsLeft=4 val=10111101 -> 10110000\n    return new Uint8Array([((0,_noble_hashes_sha2__WEBPACK_IMPORTED_MODULE_1__.sha256)(entropy)[0] >> bitsLeft) << bitsLeft]);\n};\nfunction getCoder(wordlist) {\n    if (!Array.isArray(wordlist) || wordlist.length !== 2048 || typeof wordlist[0] !== 'string')\n        throw new Error('Wordlist: expected array of 2048 strings');\n    wordlist.forEach((i) => {\n        if (typeof i !== 'string')\n            throw new Error('wordlist: non-string element: ' + i);\n    });\n    return _scure_base__WEBPACK_IMPORTED_MODULE_2__.utils.chain(_scure_base__WEBPACK_IMPORTED_MODULE_2__.utils.checksum(1, calcChecksum), _scure_base__WEBPACK_IMPORTED_MODULE_2__.utils.radix2(11, true), _scure_base__WEBPACK_IMPORTED_MODULE_2__.utils.alphabet(wordlist));\n}\n/**\n * Reversible: Converts mnemonic string to raw entropy in form of byte array.\n * @param mnemonic 12-24 words\n * @param wordlist imported wordlist for specific language\n * @example\n * const mnem = 'legal winner thank year wave sausage worth useful legal winner thank yellow';\n * mnemonicToEntropy(mnem, wordlist)\n * // Produces\n * new Uint8Array([\n *   0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,\n *   0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f\n * ])\n */\nfunction mnemonicToEntropy(mnemonic, wordlist) {\n    const { words } = normalize(mnemonic);\n    const entropy = getCoder(wordlist).decode(words);\n    aentropy(entropy);\n    return entropy;\n}\n/**\n * Reversible: Converts raw entropy in form of byte array to mnemonic string.\n * @param entropy byte array\n * @param wordlist imported wordlist for specific language\n * @returns 12-24 words\n * @example\n * const ent = new Uint8Array([\n *   0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,\n *   0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f\n * ]);\n * entropyToMnemonic(ent, wordlist);\n * // 'legal winner thank year wave sausage worth useful legal winner thank yellow'\n */\nfunction entropyToMnemonic(entropy, wordlist) {\n    aentropy(entropy);\n    const words = getCoder(wordlist).encode(entropy);\n    return words.join(isJapanese(wordlist) ? '\\u3000' : ' ');\n}\n/**\n * Validates mnemonic for being 12-24 words contained in `wordlist`.\n */\nfunction validateMnemonic(mnemonic, wordlist) {\n    try {\n        mnemonicToEntropy(mnemonic, wordlist);\n    }\n    catch (e) {\n        return false;\n    }\n    return true;\n}\nconst psalt = (passphrase) => nfkd('mnemonic' + passphrase);\n/**\n * Irreversible: Uses KDF to derive 64 bytes of key data from mnemonic + optional password.\n * @param mnemonic 12-24 words\n * @param passphrase string that will additionally protect the key\n * @returns 64 bytes of key data\n * @example\n * const mnem = 'legal winner thank year wave sausage worth useful legal winner thank yellow';\n * await mnemonicToSeed(mnem, 'password');\n * // new Uint8Array([...64 bytes])\n */\nfunction mnemonicToSeed(mnemonic, passphrase = '') {\n    return (0,_noble_hashes_pbkdf2__WEBPACK_IMPORTED_MODULE_3__.pbkdf2Async)(_noble_hashes_sha2__WEBPACK_IMPORTED_MODULE_1__.sha512, normalize(mnemonic).nfkd, psalt(passphrase), { c: 2048, dkLen: 64 });\n}\n/**\n * Irreversible: Uses KDF to derive 64 bytes of key data from mnemonic + optional password.\n * @param mnemonic 12-24 words\n * @param passphrase string that will additionally protect the key\n * @returns 64 bytes of key data\n * @example\n * const mnem = 'legal winner thank year wave sausage worth useful legal winner thank yellow';\n * mnemonicToSeedSync(mnem, 'password');\n * // new Uint8Array([...64 bytes])\n */\nfunction mnemonicToSeedSync(mnemonic, passphrase = '') {\n    return (0,_noble_hashes_pbkdf2__WEBPACK_IMPORTED_MODULE_3__.pbkdf2)(_noble_hashes_sha2__WEBPACK_IMPORTED_MODULE_1__.sha512, normalize(mnemonic).nfkd, psalt(passphrase), { c: 2048, dkLen: 64 });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ox/node_modules/@scure/bip39/esm/index.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ox/node_modules/@scure/bip39/esm/wordlists/czech.js":
/*!**************************************************************************!*\
  !*** ./node_modules/ox/node_modules/@scure/bip39/esm/wordlists/czech.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   wordlist: () => (/* binding */ wordlist)\n/* harmony export */ });\nconst wordlist = `abdikace\nabeceda\nadresa\nagrese\nakce\naktovka\nalej\nalkohol\namputace\nananas\nandulka\nanekdota\nanketa\nantika\nanulovat\narcha\narogance\nasfalt\nasistent\naspirace\nastma\nastronom\natlas\natletika\natol\nautobus\nazyl\nbabka\nbachor\nbacil\nbaculka\nbadatel\nbageta\nbagr\nbahno\nbakterie\nbalada\nbaletka\nbalkon\nbalonek\nbalvan\nbalza\nbambus\nbankomat\nbarbar\nbaret\nbarman\nbaroko\nbarva\nbaterka\nbatoh\nbavlna\nbazalka\nbazilika\nbazuka\nbedna\nberan\nbeseda\nbestie\nbeton\nbezinka\nbezmoc\nbeztak\nbicykl\nbidlo\nbiftek\nbikiny\nbilance\nbiograf\nbiolog\nbitva\nbizon\nblahobyt\nblatouch\nblecha\nbledule\nblesk\nblikat\nblizna\nblokovat\nbloudit\nblud\nbobek\nbobr\nbodlina\nbodnout\nbohatost\nbojkot\nbojovat\nbokorys\nbolest\nborec\nborovice\nbota\nboubel\nbouchat\nbouda\nboule\nbourat\nboxer\nbradavka\nbrambora\nbranka\nbratr\nbrepta\nbriketa\nbrko\nbrloh\nbronz\nbroskev\nbrunetka\nbrusinka\nbrzda\nbrzy\nbublina\nbubnovat\nbuchta\nbuditel\nbudka\nbudova\nbufet\nbujarost\nbukvice\nbuldok\nbulva\nbunda\nbunkr\nburza\nbutik\nbuvol\nbuzola\nbydlet\nbylina\nbytovka\nbzukot\ncapart\ncarevna\ncedr\ncedule\ncejch\ncejn\ncela\nceler\ncelkem\ncelnice\ncenina\ncennost\ncenovka\ncentrum\ncenzor\ncestopis\ncetka\nchalupa\nchapadlo\ncharita\nchata\nchechtat\nchemie\nchichot\nchirurg\nchlad\nchleba\nchlubit\nchmel\nchmura\nchobot\nchochol\nchodba\ncholera\nchomout\nchopit\nchoroba\nchov\nchrapot\nchrlit\nchrt\nchrup\nchtivost\nchudina\nchutnat\nchvat\nchvilka\nchvost\nchyba\nchystat\nchytit\ncibule\ncigareta\ncihelna\ncihla\ncinkot\ncirkus\ncisterna\ncitace\ncitrus\ncizinec\ncizost\nclona\ncokoliv\ncouvat\nctitel\nctnost\ncudnost\ncuketa\ncukr\ncupot\ncvaknout\ncval\ncvik\ncvrkot\ncyklista\ndaleko\ndareba\ndatel\ndatum\ndcera\ndebata\ndechovka\ndecibel\ndeficit\ndeflace\ndekl\ndekret\ndemokrat\ndeprese\nderby\ndeska\ndetektiv\ndikobraz\ndiktovat\ndioda\ndiplom\ndisk\ndisplej\ndivadlo\ndivoch\ndlaha\ndlouho\ndluhopis\ndnes\ndobro\ndobytek\ndocent\ndochutit\ndodnes\ndohled\ndohoda\ndohra\ndojem\ndojnice\ndoklad\ndokola\ndoktor\ndokument\ndolar\ndoleva\ndolina\ndoma\ndominant\ndomluvit\ndomov\ndonutit\ndopad\ndopis\ndoplnit\ndoposud\ndoprovod\ndopustit\ndorazit\ndorost\ndort\ndosah\ndoslov\ndostatek\ndosud\ndosyta\ndotaz\ndotek\ndotknout\ndoufat\ndoutnat\ndovozce\ndozadu\ndoznat\ndozorce\ndrahota\ndrak\ndramatik\ndravec\ndraze\ndrdol\ndrobnost\ndrogerie\ndrozd\ndrsnost\ndrtit\ndrzost\nduben\nduchovno\ndudek\nduha\nduhovka\ndusit\ndusno\ndutost\ndvojice\ndvorec\ndynamit\nekolog\nekonomie\nelektron\nelipsa\nemail\nemise\nemoce\nempatie\nepizoda\nepocha\nepopej\nepos\nesej\nesence\neskorta\neskymo\netiketa\neuforie\nevoluce\nexekuce\nexkurze\nexpedice\nexploze\nexport\nextrakt\nfacka\nfajfka\nfakulta\nfanatik\nfantazie\nfarmacie\nfavorit\nfazole\nfederace\nfejeton\nfenka\nfialka\nfigurant\nfilozof\nfiltr\nfinance\nfinta\nfixace\nfjord\nflanel\nflirt\nflotila\nfond\nfosfor\nfotbal\nfotka\nfoton\nfrakce\nfreska\nfronta\nfukar\nfunkce\nfyzika\ngaleje\ngarant\ngenetika\ngeolog\ngilotina\nglazura\nglejt\ngolem\ngolfista\ngotika\ngraf\ngramofon\ngranule\ngrep\ngril\ngrog\ngroteska\nguma\nhadice\nhadr\nhala\nhalenka\nhanba\nhanopis\nharfa\nharpuna\nhavran\nhebkost\nhejkal\nhejno\nhejtman\nhektar\nhelma\nhematom\nherec\nherna\nheslo\nhezky\nhistorik\nhladovka\nhlasivky\nhlava\nhledat\nhlen\nhlodavec\nhloh\nhloupost\nhltat\nhlubina\nhluchota\nhmat\nhmota\nhmyz\nhnis\nhnojivo\nhnout\nhoblina\nhoboj\nhoch\nhodiny\nhodlat\nhodnota\nhodovat\nhojnost\nhokej\nholinka\nholka\nholub\nhomole\nhonitba\nhonorace\nhoral\nhorda\nhorizont\nhorko\nhorlivec\nhormon\nhornina\nhoroskop\nhorstvo\nhospoda\nhostina\nhotovost\nhouba\nhouf\nhoupat\nhouska\nhovor\nhradba\nhranice\nhravost\nhrazda\nhrbolek\nhrdina\nhrdlo\nhrdost\nhrnek\nhrobka\nhromada\nhrot\nhrouda\nhrozen\nhrstka\nhrubost\nhryzat\nhubenost\nhubnout\nhudba\nhukot\nhumr\nhusita\nhustota\nhvozd\nhybnost\nhydrant\nhygiena\nhymna\nhysterik\nidylka\nihned\nikona\niluze\nimunita\ninfekce\ninflace\ninkaso\ninovace\ninspekce\ninternet\ninvalida\ninvestor\ninzerce\nironie\njablko\njachta\njahoda\njakmile\njakost\njalovec\njantar\njarmark\njaro\njasan\njasno\njatka\njavor\njazyk\njedinec\njedle\njednatel\njehlan\njekot\njelen\njelito\njemnost\njenom\njepice\njeseter\njevit\njezdec\njezero\njinak\njindy\njinoch\njiskra\njistota\njitrnice\njizva\njmenovat\njogurt\njurta\nkabaret\nkabel\nkabinet\nkachna\nkadet\nkadidlo\nkahan\nkajak\nkajuta\nkakao\nkaktus\nkalamita\nkalhoty\nkalibr\nkalnost\nkamera\nkamkoliv\nkamna\nkanibal\nkanoe\nkantor\nkapalina\nkapela\nkapitola\nkapka\nkaple\nkapota\nkapr\nkapusta\nkapybara\nkaramel\nkarotka\nkarton\nkasa\nkatalog\nkatedra\nkauce\nkauza\nkavalec\nkazajka\nkazeta\nkazivost\nkdekoliv\nkdesi\nkedluben\nkemp\nkeramika\nkino\nklacek\nkladivo\nklam\nklapot\nklasika\nklaun\nklec\nklenba\nklepat\nklesnout\nklid\nklima\nklisna\nklobouk\nklokan\nklopa\nkloub\nklubovna\nklusat\nkluzkost\nkmen\nkmitat\nkmotr\nkniha\nknot\nkoalice\nkoberec\nkobka\nkobliha\nkobyla\nkocour\nkohout\nkojenec\nkokos\nkoktejl\nkolaps\nkoleda\nkolize\nkolo\nkomando\nkometa\nkomik\nkomnata\nkomora\nkompas\nkomunita\nkonat\nkoncept\nkondice\nkonec\nkonfese\nkongres\nkonina\nkonkurs\nkontakt\nkonzerva\nkopanec\nkopie\nkopnout\nkoprovka\nkorbel\nkorektor\nkormidlo\nkoroptev\nkorpus\nkoruna\nkoryto\nkorzet\nkosatec\nkostka\nkotel\nkotleta\nkotoul\nkoukat\nkoupelna\nkousek\nkouzlo\nkovboj\nkoza\nkozoroh\nkrabice\nkrach\nkrajina\nkralovat\nkrasopis\nkravata\nkredit\nkrejcar\nkresba\nkreveta\nkriket\nkritik\nkrize\nkrkavec\nkrmelec\nkrmivo\nkrocan\nkrok\nkronika\nkropit\nkroupa\nkrovka\nkrtek\nkruhadlo\nkrupice\nkrutost\nkrvinka\nkrychle\nkrypta\nkrystal\nkryt\nkudlanka\nkufr\nkujnost\nkukla\nkulajda\nkulich\nkulka\nkulomet\nkultura\nkuna\nkupodivu\nkurt\nkurzor\nkutil\nkvalita\nkvasinka\nkvestor\nkynolog\nkyselina\nkytara\nkytice\nkytka\nkytovec\nkyvadlo\nlabrador\nlachtan\nladnost\nlaik\nlakomec\nlamela\nlampa\nlanovka\nlasice\nlaso\nlastura\nlatinka\nlavina\nlebka\nleckdy\nleden\nlednice\nledovka\nledvina\nlegenda\nlegie\nlegrace\nlehce\nlehkost\nlehnout\nlektvar\nlenochod\nlentilka\nlepenka\nlepidlo\nletadlo\nletec\nletmo\nletokruh\nlevhart\nlevitace\nlevobok\nlibra\nlichotka\nlidojed\nlidskost\nlihovina\nlijavec\nlilek\nlimetka\nlinie\nlinka\nlinoleum\nlistopad\nlitina\nlitovat\nlobista\nlodivod\nlogika\nlogoped\nlokalita\nloket\nlomcovat\nlopata\nlopuch\nlord\nlosos\nlotr\nloudal\nlouh\nlouka\nlouskat\nlovec\nlstivost\nlucerna\nlucifer\nlump\nlusk\nlustrace\nlvice\nlyra\nlyrika\nlysina\nmadam\nmadlo\nmagistr\nmahagon\nmajetek\nmajitel\nmajorita\nmakak\nmakovice\nmakrela\nmalba\nmalina\nmalovat\nmalvice\nmaminka\nmandle\nmanko\nmarnost\nmasakr\nmaskot\nmasopust\nmatice\nmatrika\nmaturita\nmazanec\nmazivo\nmazlit\nmazurka\nmdloba\nmechanik\nmeditace\nmedovina\nmelasa\nmeloun\nmentolka\nmetla\nmetoda\nmetr\nmezera\nmigrace\nmihnout\nmihule\nmikina\nmikrofon\nmilenec\nmilimetr\nmilost\nmimika\nmincovna\nminibar\nminomet\nminulost\nmiska\nmistr\nmixovat\nmladost\nmlha\nmlhovina\nmlok\nmlsat\nmluvit\nmnich\nmnohem\nmobil\nmocnost\nmodelka\nmodlitba\nmohyla\nmokro\nmolekula\nmomentka\nmonarcha\nmonokl\nmonstrum\nmontovat\nmonzun\nmosaz\nmoskyt\nmost\nmotivace\nmotorka\nmotyka\nmoucha\nmoudrost\nmozaika\nmozek\nmozol\nmramor\nmravenec\nmrkev\nmrtvola\nmrzet\nmrzutost\nmstitel\nmudrc\nmuflon\nmulat\nmumie\nmunice\nmuset\nmutace\nmuzeum\nmuzikant\nmyslivec\nmzda\nnabourat\nnachytat\nnadace\nnadbytek\nnadhoz\nnadobro\nnadpis\nnahlas\nnahnat\nnahodile\nnahradit\nnaivita\nnajednou\nnajisto\nnajmout\nnaklonit\nnakonec\nnakrmit\nnalevo\nnamazat\nnamluvit\nnanometr\nnaoko\nnaopak\nnaostro\nnapadat\nnapevno\nnaplnit\nnapnout\nnaposled\nnaprosto\nnarodit\nnaruby\nnarychlo\nnasadit\nnasekat\nnaslepo\nnastat\nnatolik\nnavenek\nnavrch\nnavzdory\nnazvat\nnebe\nnechat\nnecky\nnedaleko\nnedbat\nneduh\nnegace\nnehet\nnehoda\nnejen\nnejprve\nneklid\nnelibost\nnemilost\nnemoc\nneochota\nneonka\nnepokoj\nnerost\nnerv\nnesmysl\nnesoulad\nnetvor\nneuron\nnevina\nnezvykle\nnicota\nnijak\nnikam\nnikdy\nnikl\nnikterak\nnitro\nnocleh\nnohavice\nnominace\nnora\nnorek\nnositel\nnosnost\nnouze\nnoviny\nnovota\nnozdra\nnuda\nnudle\nnuget\nnutit\nnutnost\nnutrie\nnymfa\nobal\nobarvit\nobava\nobdiv\nobec\nobehnat\nobejmout\nobezita\nobhajoba\nobilnice\nobjasnit\nobjekt\nobklopit\noblast\noblek\nobliba\nobloha\nobluda\nobnos\nobohatit\nobojek\nobout\nobrazec\nobrna\nobruba\nobrys\nobsah\nobsluha\nobstarat\nobuv\nobvaz\nobvinit\nobvod\nobvykle\nobyvatel\nobzor\nocas\nocel\nocenit\nochladit\nochota\nochrana\nocitnout\nodboj\nodbyt\nodchod\nodcizit\nodebrat\nodeslat\nodevzdat\nodezva\nodhadce\nodhodit\nodjet\nodjinud\nodkaz\nodkoupit\nodliv\nodluka\nodmlka\nodolnost\nodpad\nodpis\nodplout\nodpor\nodpustit\nodpykat\nodrazka\nodsoudit\nodstup\nodsun\nodtok\nodtud\nodvaha\nodveta\nodvolat\nodvracet\nodznak\nofina\nofsajd\nohlas\nohnisko\nohrada\nohrozit\nohryzek\nokap\nokenice\noklika\nokno\nokouzlit\nokovy\nokrasa\nokres\nokrsek\nokruh\nokupant\nokurka\nokusit\nolejnina\nolizovat\nomak\nomeleta\nomezit\nomladina\nomlouvat\nomluva\nomyl\nonehdy\nopakovat\nopasek\noperace\nopice\nopilost\nopisovat\nopora\nopozice\nopravdu\noproti\norbital\norchestr\norgie\norlice\norloj\nortel\nosada\noschnout\nosika\nosivo\noslava\noslepit\noslnit\noslovit\nosnova\nosoba\nosolit\nospalec\nosten\nostraha\nostuda\nostych\nosvojit\noteplit\notisk\notop\notrhat\notrlost\notrok\notruby\notvor\novanout\novar\noves\novlivnit\novoce\noxid\nozdoba\npachatel\npacient\npadouch\npahorek\npakt\npalanda\npalec\npalivo\npaluba\npamflet\npamlsek\npanenka\npanika\npanna\npanovat\npanstvo\npantofle\npaprika\nparketa\nparodie\nparta\nparuka\nparyba\npaseka\npasivita\npastelka\npatent\npatrona\npavouk\npazneht\npazourek\npecka\npedagog\npejsek\npeklo\npeloton\npenalta\npendrek\npenze\nperiskop\npero\npestrost\npetarda\npetice\npetrolej\npevnina\npexeso\npianista\npiha\npijavice\npikle\npiknik\npilina\npilnost\npilulka\npinzeta\npipeta\npisatel\npistole\npitevna\npivnice\npivovar\nplacenta\nplakat\nplamen\nplaneta\nplastika\nplatit\nplavidlo\nplaz\nplech\nplemeno\nplenta\nples\npletivo\nplevel\nplivat\nplnit\nplno\nplocha\nplodina\nplomba\nplout\npluk\nplyn\npobavit\npobyt\npochod\npocit\npoctivec\npodat\npodcenit\npodepsat\npodhled\npodivit\npodklad\npodmanit\npodnik\npodoba\npodpora\npodraz\npodstata\npodvod\npodzim\npoezie\npohanka\npohnutka\npohovor\npohroma\npohyb\npointa\npojistka\npojmout\npokazit\npokles\npokoj\npokrok\npokuta\npokyn\npoledne\npolibek\npolknout\npoloha\npolynom\npomalu\npominout\npomlka\npomoc\npomsta\npomyslet\nponechat\nponorka\nponurost\npopadat\npopel\npopisek\npoplach\npoprosit\npopsat\npopud\nporadce\nporce\nporod\nporucha\nporyv\nposadit\nposed\nposila\nposkok\nposlanec\nposoudit\npospolu\npostava\nposudek\nposyp\npotah\npotkan\npotlesk\npotomek\npotrava\npotupa\npotvora\npoukaz\npouto\npouzdro\npovaha\npovidla\npovlak\npovoz\npovrch\npovstat\npovyk\npovzdech\npozdrav\npozemek\npoznatek\npozor\npozvat\npracovat\nprahory\npraktika\nprales\npraotec\npraporek\nprase\npravda\nprincip\nprkno\nprobudit\nprocento\nprodej\nprofese\nprohra\nprojekt\nprolomit\npromile\npronikat\npropad\nprorok\nprosba\nproton\nproutek\nprovaz\nprskavka\nprsten\nprudkost\nprut\nprvek\nprvohory\npsanec\npsovod\npstruh\nptactvo\npuberta\npuch\npudl\npukavec\npuklina\npukrle\npult\npumpa\npunc\npupen\npusa\npusinka\npustina\nputovat\nputyka\npyramida\npysk\npytel\nracek\nrachot\nradiace\nradnice\nradon\nraft\nragby\nraketa\nrakovina\nrameno\nrampouch\nrande\nrarach\nrarita\nrasovna\nrastr\nratolest\nrazance\nrazidlo\nreagovat\nreakce\nrecept\nredaktor\nreferent\nreflex\nrejnok\nreklama\nrekord\nrekrut\nrektor\nreputace\nrevize\nrevma\nrevolver\nrezerva\nriskovat\nriziko\nrobotika\nrodokmen\nrohovka\nrokle\nrokoko\nromaneto\nropovod\nropucha\nrorejs\nrosol\nrostlina\nrotmistr\nrotoped\nrotunda\nroubenka\nroucho\nroup\nroura\nrovina\nrovnice\nrozbor\nrozchod\nrozdat\nrozeznat\nrozhodce\nrozinka\nrozjezd\nrozkaz\nrozloha\nrozmar\nrozpad\nrozruch\nrozsah\nroztok\nrozum\nrozvod\nrubrika\nruchadlo\nrukavice\nrukopis\nryba\nrybolov\nrychlost\nrydlo\nrypadlo\nrytina\nryzost\nsadista\nsahat\nsako\nsamec\nsamizdat\nsamota\nsanitka\nsardinka\nsasanka\nsatelit\nsazba\nsazenice\nsbor\nschovat\nsebranka\nsecese\nsedadlo\nsediment\nsedlo\nsehnat\nsejmout\nsekera\nsekta\nsekunda\nsekvoje\nsemeno\nseno\nservis\nsesadit\nseshora\nseskok\nseslat\nsestra\nsesuv\nsesypat\nsetba\nsetina\nsetkat\nsetnout\nsetrvat\nsever\nseznam\nshoda\nshrnout\nsifon\nsilnice\nsirka\nsirotek\nsirup\nsituace\nskafandr\nskalisko\nskanzen\nskaut\nskeptik\nskica\nskladba\nsklenice\nsklo\nskluz\nskoba\nskokan\nskoro\nskripta\nskrz\nskupina\nskvost\nskvrna\nslabika\nsladidlo\nslanina\nslast\nslavnost\nsledovat\nslepec\nsleva\nslezina\nslib\nslina\nsliznice\nslon\nsloupek\nslovo\nsluch\nsluha\nslunce\nslupka\nslza\nsmaragd\nsmetana\nsmilstvo\nsmlouva\nsmog\nsmrad\nsmrk\nsmrtka\nsmutek\nsmysl\nsnad\nsnaha\nsnob\nsobota\nsocha\nsodovka\nsokol\nsopka\nsotva\nsouboj\nsoucit\nsoudce\nsouhlas\nsoulad\nsoumrak\nsouprava\nsoused\nsoutok\nsouviset\nspalovna\nspasitel\nspis\nsplav\nspodek\nspojenec\nspolu\nsponzor\nspornost\nspousta\nsprcha\nspustit\nsranda\nsraz\nsrdce\nsrna\nsrnec\nsrovnat\nsrpen\nsrst\nsrub\nstanice\nstarosta\nstatika\nstavba\nstehno\nstezka\nstodola\nstolek\nstopa\nstorno\nstoupat\nstrach\nstres\nstrhnout\nstrom\nstruna\nstudna\nstupnice\nstvol\nstyk\nsubjekt\nsubtropy\nsuchar\nsudost\nsukno\nsundat\nsunout\nsurikata\nsurovina\nsvah\nsvalstvo\nsvetr\nsvatba\nsvazek\nsvisle\nsvitek\nsvoboda\nsvodidlo\nsvorka\nsvrab\nsykavka\nsykot\nsynek\nsynovec\nsypat\nsypkost\nsyrovost\nsysel\nsytost\ntabletka\ntabule\ntahoun\ntajemno\ntajfun\ntajga\ntajit\ntajnost\ntaktika\ntamhle\ntampon\ntancovat\ntanec\ntanker\ntapeta\ntavenina\ntazatel\ntechnika\ntehdy\ntekutina\ntelefon\ntemnota\ntendence\ntenista\ntenor\nteplota\ntepna\nteprve\nterapie\ntermoska\ntextil\nticho\ntiskopis\ntitulek\ntkadlec\ntkanina\ntlapka\ntleskat\ntlukot\ntlupa\ntmel\ntoaleta\ntopinka\ntopol\ntorzo\ntouha\ntoulec\ntradice\ntraktor\ntramp\ntrasa\ntraverza\ntrefit\ntrest\ntrezor\ntrhavina\ntrhlina\ntrochu\ntrojice\ntroska\ntrouba\ntrpce\ntrpitel\ntrpkost\ntrubec\ntruchlit\ntruhlice\ntrus\ntrvat\ntudy\ntuhnout\ntuhost\ntundra\nturista\nturnaj\ntuzemsko\ntvaroh\ntvorba\ntvrdost\ntvrz\ntygr\ntykev\nubohost\nuboze\nubrat\nubrousek\nubrus\nubytovna\nucho\nuctivost\nudivit\nuhradit\nujednat\nujistit\nujmout\nukazatel\nuklidnit\nuklonit\nukotvit\nukrojit\nulice\nulita\nulovit\numyvadlo\nunavit\nuniforma\nuniknout\nupadnout\nuplatnit\nuplynout\nupoutat\nupravit\nuran\nurazit\nusednout\nusilovat\nusmrtit\nusnadnit\nusnout\nusoudit\nustlat\nustrnout\nutahovat\nutkat\nutlumit\nutonout\nutopenec\nutrousit\nuvalit\nuvolnit\nuvozovka\nuzdravit\nuzel\nuzenina\nuzlina\nuznat\nvagon\nvalcha\nvaloun\nvana\nvandal\nvanilka\nvaran\nvarhany\nvarovat\nvcelku\nvchod\nvdova\nvedro\nvegetace\nvejce\nvelbloud\nveletrh\nvelitel\nvelmoc\nvelryba\nvenkov\nveranda\nverze\nveselka\nveskrze\nvesnice\nvespodu\nvesta\nveterina\nveverka\nvibrace\nvichr\nvideohra\nvidina\nvidle\nvila\nvinice\nviset\nvitalita\nvize\nvizitka\nvjezd\nvklad\nvkus\nvlajka\nvlak\nvlasec\nvlevo\nvlhkost\nvliv\nvlnovka\nvloupat\nvnucovat\nvnuk\nvoda\nvodivost\nvodoznak\nvodstvo\nvojensky\nvojna\nvojsko\nvolant\nvolba\nvolit\nvolno\nvoskovka\nvozidlo\nvozovna\nvpravo\nvrabec\nvracet\nvrah\nvrata\nvrba\nvrcholek\nvrhat\nvrstva\nvrtule\nvsadit\nvstoupit\nvstup\nvtip\nvybavit\nvybrat\nvychovat\nvydat\nvydra\nvyfotit\nvyhledat\nvyhnout\nvyhodit\nvyhradit\nvyhubit\nvyjasnit\nvyjet\nvyjmout\nvyklopit\nvykonat\nvylekat\nvymazat\nvymezit\nvymizet\nvymyslet\nvynechat\nvynikat\nvynutit\nvypadat\nvyplatit\nvypravit\nvypustit\nvyrazit\nvyrovnat\nvyrvat\nvyslovit\nvysoko\nvystavit\nvysunout\nvysypat\nvytasit\nvytesat\nvytratit\nvyvinout\nvyvolat\nvyvrhel\nvyzdobit\nvyznat\nvzadu\nvzbudit\nvzchopit\nvzdor\nvzduch\nvzdychat\nvzestup\nvzhledem\nvzkaz\nvzlykat\nvznik\nvzorek\nvzpoura\nvztah\nvztek\nxylofon\nzabrat\nzabydlet\nzachovat\nzadarmo\nzadusit\nzafoukat\nzahltit\nzahodit\nzahrada\nzahynout\nzajatec\nzajet\nzajistit\nzaklepat\nzakoupit\nzalepit\nzamezit\nzamotat\nzamyslet\nzanechat\nzanikat\nzaplatit\nzapojit\nzapsat\nzarazit\nzastavit\nzasunout\nzatajit\nzatemnit\nzatknout\nzaujmout\nzavalit\nzavelet\nzavinit\nzavolat\nzavrtat\nzazvonit\nzbavit\nzbrusu\nzbudovat\nzbytek\nzdaleka\nzdarma\nzdatnost\nzdivo\nzdobit\nzdroj\nzdvih\nzdymadlo\nzelenina\nzeman\nzemina\nzeptat\nzezadu\nzezdola\nzhatit\nzhltnout\nzhluboka\nzhotovit\nzhruba\nzima\nzimnice\nzjemnit\nzklamat\nzkoumat\nzkratka\nzkumavka\nzlato\nzlehka\nzloba\nzlom\nzlost\nzlozvyk\nzmapovat\nzmar\nzmatek\nzmije\nzmizet\nzmocnit\nzmodrat\nzmrzlina\nzmutovat\nznak\nznalost\nznamenat\nznovu\nzobrazit\nzotavit\nzoubek\nzoufale\nzplodit\nzpomalit\nzprava\nzprostit\nzprudka\nzprvu\nzrada\nzranit\nzrcadlo\nzrnitost\nzrno\nzrovna\nzrychlit\nzrzavost\nzticha\nztratit\nzubovina\nzubr\nzvednout\nzvenku\nzvesela\nzvon\nzvrat\nzvukovod\nzvyk`.split('\\n');\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ox/node_modules/@scure/bip39/esm/wordlists/czech.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ox/node_modules/@scure/bip39/esm/wordlists/english.js":
/*!****************************************************************************!*\
  !*** ./node_modules/ox/node_modules/@scure/bip39/esm/wordlists/english.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   wordlist: () => (/* binding */ wordlist)\n/* harmony export */ });\nconst wordlist = `abandon\nability\nable\nabout\nabove\nabsent\nabsorb\nabstract\nabsurd\nabuse\naccess\naccident\naccount\naccuse\nachieve\nacid\nacoustic\nacquire\nacross\nact\naction\nactor\nactress\nactual\nadapt\nadd\naddict\naddress\nadjust\nadmit\nadult\nadvance\nadvice\naerobic\naffair\nafford\nafraid\nagain\nage\nagent\nagree\nahead\naim\nair\nairport\naisle\nalarm\nalbum\nalcohol\nalert\nalien\nall\nalley\nallow\nalmost\nalone\nalpha\nalready\nalso\nalter\nalways\namateur\namazing\namong\namount\namused\nanalyst\nanchor\nancient\nanger\nangle\nangry\nanimal\nankle\nannounce\nannual\nanother\nanswer\nantenna\nantique\nanxiety\nany\napart\napology\nappear\napple\napprove\napril\narch\narctic\narea\narena\nargue\narm\narmed\narmor\narmy\naround\narrange\narrest\narrive\narrow\nart\nartefact\nartist\nartwork\nask\naspect\nassault\nasset\nassist\nassume\nasthma\nathlete\natom\nattack\nattend\nattitude\nattract\nauction\naudit\naugust\naunt\nauthor\nauto\nautumn\naverage\navocado\navoid\nawake\naware\naway\nawesome\nawful\nawkward\naxis\nbaby\nbachelor\nbacon\nbadge\nbag\nbalance\nbalcony\nball\nbamboo\nbanana\nbanner\nbar\nbarely\nbargain\nbarrel\nbase\nbasic\nbasket\nbattle\nbeach\nbean\nbeauty\nbecause\nbecome\nbeef\nbefore\nbegin\nbehave\nbehind\nbelieve\nbelow\nbelt\nbench\nbenefit\nbest\nbetray\nbetter\nbetween\nbeyond\nbicycle\nbid\nbike\nbind\nbiology\nbird\nbirth\nbitter\nblack\nblade\nblame\nblanket\nblast\nbleak\nbless\nblind\nblood\nblossom\nblouse\nblue\nblur\nblush\nboard\nboat\nbody\nboil\nbomb\nbone\nbonus\nbook\nboost\nborder\nboring\nborrow\nboss\nbottom\nbounce\nbox\nboy\nbracket\nbrain\nbrand\nbrass\nbrave\nbread\nbreeze\nbrick\nbridge\nbrief\nbright\nbring\nbrisk\nbroccoli\nbroken\nbronze\nbroom\nbrother\nbrown\nbrush\nbubble\nbuddy\nbudget\nbuffalo\nbuild\nbulb\nbulk\nbullet\nbundle\nbunker\nburden\nburger\nburst\nbus\nbusiness\nbusy\nbutter\nbuyer\nbuzz\ncabbage\ncabin\ncable\ncactus\ncage\ncake\ncall\ncalm\ncamera\ncamp\ncan\ncanal\ncancel\ncandy\ncannon\ncanoe\ncanvas\ncanyon\ncapable\ncapital\ncaptain\ncar\ncarbon\ncard\ncargo\ncarpet\ncarry\ncart\ncase\ncash\ncasino\ncastle\ncasual\ncat\ncatalog\ncatch\ncategory\ncattle\ncaught\ncause\ncaution\ncave\nceiling\ncelery\ncement\ncensus\ncentury\ncereal\ncertain\nchair\nchalk\nchampion\nchange\nchaos\nchapter\ncharge\nchase\nchat\ncheap\ncheck\ncheese\nchef\ncherry\nchest\nchicken\nchief\nchild\nchimney\nchoice\nchoose\nchronic\nchuckle\nchunk\nchurn\ncigar\ncinnamon\ncircle\ncitizen\ncity\ncivil\nclaim\nclap\nclarify\nclaw\nclay\nclean\nclerk\nclever\nclick\nclient\ncliff\nclimb\nclinic\nclip\nclock\nclog\nclose\ncloth\ncloud\nclown\nclub\nclump\ncluster\nclutch\ncoach\ncoast\ncoconut\ncode\ncoffee\ncoil\ncoin\ncollect\ncolor\ncolumn\ncombine\ncome\ncomfort\ncomic\ncommon\ncompany\nconcert\nconduct\nconfirm\ncongress\nconnect\nconsider\ncontrol\nconvince\ncook\ncool\ncopper\ncopy\ncoral\ncore\ncorn\ncorrect\ncost\ncotton\ncouch\ncountry\ncouple\ncourse\ncousin\ncover\ncoyote\ncrack\ncradle\ncraft\ncram\ncrane\ncrash\ncrater\ncrawl\ncrazy\ncream\ncredit\ncreek\ncrew\ncricket\ncrime\ncrisp\ncritic\ncrop\ncross\ncrouch\ncrowd\ncrucial\ncruel\ncruise\ncrumble\ncrunch\ncrush\ncry\ncrystal\ncube\nculture\ncup\ncupboard\ncurious\ncurrent\ncurtain\ncurve\ncushion\ncustom\ncute\ncycle\ndad\ndamage\ndamp\ndance\ndanger\ndaring\ndash\ndaughter\ndawn\nday\ndeal\ndebate\ndebris\ndecade\ndecember\ndecide\ndecline\ndecorate\ndecrease\ndeer\ndefense\ndefine\ndefy\ndegree\ndelay\ndeliver\ndemand\ndemise\ndenial\ndentist\ndeny\ndepart\ndepend\ndeposit\ndepth\ndeputy\nderive\ndescribe\ndesert\ndesign\ndesk\ndespair\ndestroy\ndetail\ndetect\ndevelop\ndevice\ndevote\ndiagram\ndial\ndiamond\ndiary\ndice\ndiesel\ndiet\ndiffer\ndigital\ndignity\ndilemma\ndinner\ndinosaur\ndirect\ndirt\ndisagree\ndiscover\ndisease\ndish\ndismiss\ndisorder\ndisplay\ndistance\ndivert\ndivide\ndivorce\ndizzy\ndoctor\ndocument\ndog\ndoll\ndolphin\ndomain\ndonate\ndonkey\ndonor\ndoor\ndose\ndouble\ndove\ndraft\ndragon\ndrama\ndrastic\ndraw\ndream\ndress\ndrift\ndrill\ndrink\ndrip\ndrive\ndrop\ndrum\ndry\nduck\ndumb\ndune\nduring\ndust\ndutch\nduty\ndwarf\ndynamic\neager\neagle\nearly\nearn\nearth\neasily\neast\neasy\necho\necology\neconomy\nedge\nedit\neducate\neffort\negg\neight\neither\nelbow\nelder\nelectric\nelegant\nelement\nelephant\nelevator\nelite\nelse\nembark\nembody\nembrace\nemerge\nemotion\nemploy\nempower\nempty\nenable\nenact\nend\nendless\nendorse\nenemy\nenergy\nenforce\nengage\nengine\nenhance\nenjoy\nenlist\nenough\nenrich\nenroll\nensure\nenter\nentire\nentry\nenvelope\nepisode\nequal\nequip\nera\nerase\nerode\nerosion\nerror\nerupt\nescape\nessay\nessence\nestate\neternal\nethics\nevidence\nevil\nevoke\nevolve\nexact\nexample\nexcess\nexchange\nexcite\nexclude\nexcuse\nexecute\nexercise\nexhaust\nexhibit\nexile\nexist\nexit\nexotic\nexpand\nexpect\nexpire\nexplain\nexpose\nexpress\nextend\nextra\neye\neyebrow\nfabric\nface\nfaculty\nfade\nfaint\nfaith\nfall\nfalse\nfame\nfamily\nfamous\nfan\nfancy\nfantasy\nfarm\nfashion\nfat\nfatal\nfather\nfatigue\nfault\nfavorite\nfeature\nfebruary\nfederal\nfee\nfeed\nfeel\nfemale\nfence\nfestival\nfetch\nfever\nfew\nfiber\nfiction\nfield\nfigure\nfile\nfilm\nfilter\nfinal\nfind\nfine\nfinger\nfinish\nfire\nfirm\nfirst\nfiscal\nfish\nfit\nfitness\nfix\nflag\nflame\nflash\nflat\nflavor\nflee\nflight\nflip\nfloat\nflock\nfloor\nflower\nfluid\nflush\nfly\nfoam\nfocus\nfog\nfoil\nfold\nfollow\nfood\nfoot\nforce\nforest\nforget\nfork\nfortune\nforum\nforward\nfossil\nfoster\nfound\nfox\nfragile\nframe\nfrequent\nfresh\nfriend\nfringe\nfrog\nfront\nfrost\nfrown\nfrozen\nfruit\nfuel\nfun\nfunny\nfurnace\nfury\nfuture\ngadget\ngain\ngalaxy\ngallery\ngame\ngap\ngarage\ngarbage\ngarden\ngarlic\ngarment\ngas\ngasp\ngate\ngather\ngauge\ngaze\ngeneral\ngenius\ngenre\ngentle\ngenuine\ngesture\nghost\ngiant\ngift\ngiggle\nginger\ngiraffe\ngirl\ngive\nglad\nglance\nglare\nglass\nglide\nglimpse\nglobe\ngloom\nglory\nglove\nglow\nglue\ngoat\ngoddess\ngold\ngood\ngoose\ngorilla\ngospel\ngossip\ngovern\ngown\ngrab\ngrace\ngrain\ngrant\ngrape\ngrass\ngravity\ngreat\ngreen\ngrid\ngrief\ngrit\ngrocery\ngroup\ngrow\ngrunt\nguard\nguess\nguide\nguilt\nguitar\ngun\ngym\nhabit\nhair\nhalf\nhammer\nhamster\nhand\nhappy\nharbor\nhard\nharsh\nharvest\nhat\nhave\nhawk\nhazard\nhead\nhealth\nheart\nheavy\nhedgehog\nheight\nhello\nhelmet\nhelp\nhen\nhero\nhidden\nhigh\nhill\nhint\nhip\nhire\nhistory\nhobby\nhockey\nhold\nhole\nholiday\nhollow\nhome\nhoney\nhood\nhope\nhorn\nhorror\nhorse\nhospital\nhost\nhotel\nhour\nhover\nhub\nhuge\nhuman\nhumble\nhumor\nhundred\nhungry\nhunt\nhurdle\nhurry\nhurt\nhusband\nhybrid\nice\nicon\nidea\nidentify\nidle\nignore\nill\nillegal\nillness\nimage\nimitate\nimmense\nimmune\nimpact\nimpose\nimprove\nimpulse\ninch\ninclude\nincome\nincrease\nindex\nindicate\nindoor\nindustry\ninfant\ninflict\ninform\ninhale\ninherit\ninitial\ninject\ninjury\ninmate\ninner\ninnocent\ninput\ninquiry\ninsane\ninsect\ninside\ninspire\ninstall\nintact\ninterest\ninto\ninvest\ninvite\ninvolve\niron\nisland\nisolate\nissue\nitem\nivory\njacket\njaguar\njar\njazz\njealous\njeans\njelly\njewel\njob\njoin\njoke\njourney\njoy\njudge\njuice\njump\njungle\njunior\njunk\njust\nkangaroo\nkeen\nkeep\nketchup\nkey\nkick\nkid\nkidney\nkind\nkingdom\nkiss\nkit\nkitchen\nkite\nkitten\nkiwi\nknee\nknife\nknock\nknow\nlab\nlabel\nlabor\nladder\nlady\nlake\nlamp\nlanguage\nlaptop\nlarge\nlater\nlatin\nlaugh\nlaundry\nlava\nlaw\nlawn\nlawsuit\nlayer\nlazy\nleader\nleaf\nlearn\nleave\nlecture\nleft\nleg\nlegal\nlegend\nleisure\nlemon\nlend\nlength\nlens\nleopard\nlesson\nletter\nlevel\nliar\nliberty\nlibrary\nlicense\nlife\nlift\nlight\nlike\nlimb\nlimit\nlink\nlion\nliquid\nlist\nlittle\nlive\nlizard\nload\nloan\nlobster\nlocal\nlock\nlogic\nlonely\nlong\nloop\nlottery\nloud\nlounge\nlove\nloyal\nlucky\nluggage\nlumber\nlunar\nlunch\nluxury\nlyrics\nmachine\nmad\nmagic\nmagnet\nmaid\nmail\nmain\nmajor\nmake\nmammal\nman\nmanage\nmandate\nmango\nmansion\nmanual\nmaple\nmarble\nmarch\nmargin\nmarine\nmarket\nmarriage\nmask\nmass\nmaster\nmatch\nmaterial\nmath\nmatrix\nmatter\nmaximum\nmaze\nmeadow\nmean\nmeasure\nmeat\nmechanic\nmedal\nmedia\nmelody\nmelt\nmember\nmemory\nmention\nmenu\nmercy\nmerge\nmerit\nmerry\nmesh\nmessage\nmetal\nmethod\nmiddle\nmidnight\nmilk\nmillion\nmimic\nmind\nminimum\nminor\nminute\nmiracle\nmirror\nmisery\nmiss\nmistake\nmix\nmixed\nmixture\nmobile\nmodel\nmodify\nmom\nmoment\nmonitor\nmonkey\nmonster\nmonth\nmoon\nmoral\nmore\nmorning\nmosquito\nmother\nmotion\nmotor\nmountain\nmouse\nmove\nmovie\nmuch\nmuffin\nmule\nmultiply\nmuscle\nmuseum\nmushroom\nmusic\nmust\nmutual\nmyself\nmystery\nmyth\nnaive\nname\nnapkin\nnarrow\nnasty\nnation\nnature\nnear\nneck\nneed\nnegative\nneglect\nneither\nnephew\nnerve\nnest\nnet\nnetwork\nneutral\nnever\nnews\nnext\nnice\nnight\nnoble\nnoise\nnominee\nnoodle\nnormal\nnorth\nnose\nnotable\nnote\nnothing\nnotice\nnovel\nnow\nnuclear\nnumber\nnurse\nnut\noak\nobey\nobject\noblige\nobscure\nobserve\nobtain\nobvious\noccur\nocean\noctober\nodor\noff\noffer\noffice\noften\noil\nokay\nold\nolive\nolympic\nomit\nonce\none\nonion\nonline\nonly\nopen\nopera\nopinion\noppose\noption\norange\norbit\norchard\norder\nordinary\norgan\norient\noriginal\norphan\nostrich\nother\noutdoor\nouter\noutput\noutside\noval\noven\nover\nown\nowner\noxygen\noyster\nozone\npact\npaddle\npage\npair\npalace\npalm\npanda\npanel\npanic\npanther\npaper\nparade\nparent\npark\nparrot\nparty\npass\npatch\npath\npatient\npatrol\npattern\npause\npave\npayment\npeace\npeanut\npear\npeasant\npelican\npen\npenalty\npencil\npeople\npepper\nperfect\npermit\nperson\npet\nphone\nphoto\nphrase\nphysical\npiano\npicnic\npicture\npiece\npig\npigeon\npill\npilot\npink\npioneer\npipe\npistol\npitch\npizza\nplace\nplanet\nplastic\nplate\nplay\nplease\npledge\npluck\nplug\nplunge\npoem\npoet\npoint\npolar\npole\npolice\npond\npony\npool\npopular\nportion\nposition\npossible\npost\npotato\npottery\npoverty\npowder\npower\npractice\npraise\npredict\nprefer\nprepare\npresent\npretty\nprevent\nprice\npride\nprimary\nprint\npriority\nprison\nprivate\nprize\nproblem\nprocess\nproduce\nprofit\nprogram\nproject\npromote\nproof\nproperty\nprosper\nprotect\nproud\nprovide\npublic\npudding\npull\npulp\npulse\npumpkin\npunch\npupil\npuppy\npurchase\npurity\npurpose\npurse\npush\nput\npuzzle\npyramid\nquality\nquantum\nquarter\nquestion\nquick\nquit\nquiz\nquote\nrabbit\nraccoon\nrace\nrack\nradar\nradio\nrail\nrain\nraise\nrally\nramp\nranch\nrandom\nrange\nrapid\nrare\nrate\nrather\nraven\nraw\nrazor\nready\nreal\nreason\nrebel\nrebuild\nrecall\nreceive\nrecipe\nrecord\nrecycle\nreduce\nreflect\nreform\nrefuse\nregion\nregret\nregular\nreject\nrelax\nrelease\nrelief\nrely\nremain\nremember\nremind\nremove\nrender\nrenew\nrent\nreopen\nrepair\nrepeat\nreplace\nreport\nrequire\nrescue\nresemble\nresist\nresource\nresponse\nresult\nretire\nretreat\nreturn\nreunion\nreveal\nreview\nreward\nrhythm\nrib\nribbon\nrice\nrich\nride\nridge\nrifle\nright\nrigid\nring\nriot\nripple\nrisk\nritual\nrival\nriver\nroad\nroast\nrobot\nrobust\nrocket\nromance\nroof\nrookie\nroom\nrose\nrotate\nrough\nround\nroute\nroyal\nrubber\nrude\nrug\nrule\nrun\nrunway\nrural\nsad\nsaddle\nsadness\nsafe\nsail\nsalad\nsalmon\nsalon\nsalt\nsalute\nsame\nsample\nsand\nsatisfy\nsatoshi\nsauce\nsausage\nsave\nsay\nscale\nscan\nscare\nscatter\nscene\nscheme\nschool\nscience\nscissors\nscorpion\nscout\nscrap\nscreen\nscript\nscrub\nsea\nsearch\nseason\nseat\nsecond\nsecret\nsection\nsecurity\nseed\nseek\nsegment\nselect\nsell\nseminar\nsenior\nsense\nsentence\nseries\nservice\nsession\nsettle\nsetup\nseven\nshadow\nshaft\nshallow\nshare\nshed\nshell\nsheriff\nshield\nshift\nshine\nship\nshiver\nshock\nshoe\nshoot\nshop\nshort\nshoulder\nshove\nshrimp\nshrug\nshuffle\nshy\nsibling\nsick\nside\nsiege\nsight\nsign\nsilent\nsilk\nsilly\nsilver\nsimilar\nsimple\nsince\nsing\nsiren\nsister\nsituate\nsix\nsize\nskate\nsketch\nski\nskill\nskin\nskirt\nskull\nslab\nslam\nsleep\nslender\nslice\nslide\nslight\nslim\nslogan\nslot\nslow\nslush\nsmall\nsmart\nsmile\nsmoke\nsmooth\nsnack\nsnake\nsnap\nsniff\nsnow\nsoap\nsoccer\nsocial\nsock\nsoda\nsoft\nsolar\nsoldier\nsolid\nsolution\nsolve\nsomeone\nsong\nsoon\nsorry\nsort\nsoul\nsound\nsoup\nsource\nsouth\nspace\nspare\nspatial\nspawn\nspeak\nspecial\nspeed\nspell\nspend\nsphere\nspice\nspider\nspike\nspin\nspirit\nsplit\nspoil\nsponsor\nspoon\nsport\nspot\nspray\nspread\nspring\nspy\nsquare\nsqueeze\nsquirrel\nstable\nstadium\nstaff\nstage\nstairs\nstamp\nstand\nstart\nstate\nstay\nsteak\nsteel\nstem\nstep\nstereo\nstick\nstill\nsting\nstock\nstomach\nstone\nstool\nstory\nstove\nstrategy\nstreet\nstrike\nstrong\nstruggle\nstudent\nstuff\nstumble\nstyle\nsubject\nsubmit\nsubway\nsuccess\nsuch\nsudden\nsuffer\nsugar\nsuggest\nsuit\nsummer\nsun\nsunny\nsunset\nsuper\nsupply\nsupreme\nsure\nsurface\nsurge\nsurprise\nsurround\nsurvey\nsuspect\nsustain\nswallow\nswamp\nswap\nswarm\nswear\nsweet\nswift\nswim\nswing\nswitch\nsword\nsymbol\nsymptom\nsyrup\nsystem\ntable\ntackle\ntag\ntail\ntalent\ntalk\ntank\ntape\ntarget\ntask\ntaste\ntattoo\ntaxi\nteach\nteam\ntell\nten\ntenant\ntennis\ntent\nterm\ntest\ntext\nthank\nthat\ntheme\nthen\ntheory\nthere\nthey\nthing\nthis\nthought\nthree\nthrive\nthrow\nthumb\nthunder\nticket\ntide\ntiger\ntilt\ntimber\ntime\ntiny\ntip\ntired\ntissue\ntitle\ntoast\ntobacco\ntoday\ntoddler\ntoe\ntogether\ntoilet\ntoken\ntomato\ntomorrow\ntone\ntongue\ntonight\ntool\ntooth\ntop\ntopic\ntopple\ntorch\ntornado\ntortoise\ntoss\ntotal\ntourist\ntoward\ntower\ntown\ntoy\ntrack\ntrade\ntraffic\ntragic\ntrain\ntransfer\ntrap\ntrash\ntravel\ntray\ntreat\ntree\ntrend\ntrial\ntribe\ntrick\ntrigger\ntrim\ntrip\ntrophy\ntrouble\ntruck\ntrue\ntruly\ntrumpet\ntrust\ntruth\ntry\ntube\ntuition\ntumble\ntuna\ntunnel\nturkey\nturn\nturtle\ntwelve\ntwenty\ntwice\ntwin\ntwist\ntwo\ntype\ntypical\nugly\numbrella\nunable\nunaware\nuncle\nuncover\nunder\nundo\nunfair\nunfold\nunhappy\nuniform\nunique\nunit\nuniverse\nunknown\nunlock\nuntil\nunusual\nunveil\nupdate\nupgrade\nuphold\nupon\nupper\nupset\nurban\nurge\nusage\nuse\nused\nuseful\nuseless\nusual\nutility\nvacant\nvacuum\nvague\nvalid\nvalley\nvalve\nvan\nvanish\nvapor\nvarious\nvast\nvault\nvehicle\nvelvet\nvendor\nventure\nvenue\nverb\nverify\nversion\nvery\nvessel\nveteran\nviable\nvibrant\nvicious\nvictory\nvideo\nview\nvillage\nvintage\nviolin\nvirtual\nvirus\nvisa\nvisit\nvisual\nvital\nvivid\nvocal\nvoice\nvoid\nvolcano\nvolume\nvote\nvoyage\nwage\nwagon\nwait\nwalk\nwall\nwalnut\nwant\nwarfare\nwarm\nwarrior\nwash\nwasp\nwaste\nwater\nwave\nway\nwealth\nweapon\nwear\nweasel\nweather\nweb\nwedding\nweekend\nweird\nwelcome\nwest\nwet\nwhale\nwhat\nwheat\nwheel\nwhen\nwhere\nwhip\nwhisper\nwide\nwidth\nwife\nwild\nwill\nwin\nwindow\nwine\nwing\nwink\nwinner\nwinter\nwire\nwisdom\nwise\nwish\nwitness\nwolf\nwoman\nwonder\nwood\nwool\nword\nwork\nworld\nworry\nworth\nwrap\nwreck\nwrestle\nwrist\nwrite\nwrong\nyard\nyear\nyellow\nyou\nyoung\nyouth\nzebra\nzero\nzone\nzoo`.split('\\n');\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ox/node_modules/@scure/bip39/esm/wordlists/english.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ox/node_modules/@scure/bip39/esm/wordlists/french.js":
/*!***************************************************************************!*\
  !*** ./node_modules/ox/node_modules/@scure/bip39/esm/wordlists/french.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   wordlist: () => (/* binding */ wordlist)\n/* harmony export */ });\nconst wordlist = `abaisser\nabandon\nabdiquer\nabeille\nabolir\naborder\naboutir\naboyer\nabrasif\nabreuver\nabriter\nabroger\nabrupt\nabsence\nabsolu\nabsurde\nabusif\nabyssal\nacadémie\nacajou\nacarien\naccabler\naccepter\nacclamer\naccolade\naccroche\naccuser\nacerbe\nachat\nacheter\naciduler\nacier\nacompte\nacquérir\nacronyme\nacteur\nactif\nactuel\nadepte\nadéquat\nadhésif\nadjectif\nadjuger\nadmettre\nadmirer\nadopter\nadorer\nadoucir\nadresse\nadroit\nadulte\nadverbe\naérer\naéronef\naffaire\naffecter\naffiche\naffreux\naffubler\nagacer\nagencer\nagile\nagiter\nagrafer\nagréable\nagrume\naider\naiguille\nailier\naimable\naisance\najouter\najuster\nalarmer\nalchimie\nalerte\nalgèbre\nalgue\naliéner\naliment\nalléger\nalliage\nallouer\nallumer\nalourdir\nalpaga\naltesse\nalvéole\namateur\nambigu\nambre\naménager\namertume\namidon\namiral\namorcer\namour\namovible\namphibie\nampleur\namusant\nanalyse\nanaphore\nanarchie\nanatomie\nancien\nanéantir\nangle\nangoisse\nanguleux\nanimal\nannexer\nannonce\nannuel\nanodin\nanomalie\nanonyme\nanormal\nantenne\nantidote\nanxieux\napaiser\napéritif\naplanir\napologie\nappareil\nappeler\napporter\nappuyer\naquarium\naqueduc\narbitre\narbuste\nardeur\nardoise\nargent\narlequin\narmature\narmement\narmoire\narmure\narpenter\narracher\narriver\narroser\narsenic\nartériel\narticle\naspect\nasphalte\naspirer\nassaut\nasservir\nassiette\nassocier\nassurer\nasticot\nastre\nastuce\natelier\natome\natrium\natroce\nattaque\nattentif\nattirer\nattraper\naubaine\nauberge\naudace\naudible\naugurer\naurore\nautomne\nautruche\navaler\navancer\navarice\navenir\naverse\naveugle\naviateur\navide\navion\naviser\navoine\navouer\navril\naxial\naxiome\nbadge\nbafouer\nbagage\nbaguette\nbaignade\nbalancer\nbalcon\nbaleine\nbalisage\nbambin\nbancaire\nbandage\nbanlieue\nbannière\nbanquier\nbarbier\nbaril\nbaron\nbarque\nbarrage\nbassin\nbastion\nbataille\nbateau\nbatterie\nbaudrier\nbavarder\nbelette\nbélier\nbelote\nbénéfice\nberceau\nberger\nberline\nbermuda\nbesace\nbesogne\nbétail\nbeurre\nbiberon\nbicycle\nbidule\nbijou\nbilan\nbilingue\nbillard\nbinaire\nbiologie\nbiopsie\nbiotype\nbiscuit\nbison\nbistouri\nbitume\nbizarre\nblafard\nblague\nblanchir\nblessant\nblinder\nblond\nbloquer\nblouson\nbobard\nbobine\nboire\nboiser\nbolide\nbonbon\nbondir\nbonheur\nbonifier\nbonus\nbordure\nborne\nbotte\nboucle\nboueux\nbougie\nboulon\nbouquin\nbourse\nboussole\nboutique\nboxeur\nbranche\nbrasier\nbrave\nbrebis\nbrèche\nbreuvage\nbricoler\nbrigade\nbrillant\nbrioche\nbrique\nbrochure\nbroder\nbronzer\nbrousse\nbroyeur\nbrume\nbrusque\nbrutal\nbruyant\nbuffle\nbuisson\nbulletin\nbureau\nburin\nbustier\nbutiner\nbutoir\nbuvable\nbuvette\ncabanon\ncabine\ncachette\ncadeau\ncadre\ncaféine\ncaillou\ncaisson\ncalculer\ncalepin\ncalibre\ncalmer\ncalomnie\ncalvaire\ncamarade\ncaméra\ncamion\ncampagne\ncanal\ncaneton\ncanon\ncantine\ncanular\ncapable\ncaporal\ncaprice\ncapsule\ncapter\ncapuche\ncarabine\ncarbone\ncaresser\ncaribou\ncarnage\ncarotte\ncarreau\ncarton\ncascade\ncasier\ncasque\ncassure\ncauser\ncaution\ncavalier\ncaverne\ncaviar\ncédille\nceinture\ncéleste\ncellule\ncendrier\ncensurer\ncentral\ncercle\ncérébral\ncerise\ncerner\ncerveau\ncesser\nchagrin\nchaise\nchaleur\nchambre\nchance\nchapitre\ncharbon\nchasseur\nchaton\nchausson\nchavirer\nchemise\nchenille\nchéquier\nchercher\ncheval\nchien\nchiffre\nchignon\nchimère\nchiot\nchlorure\nchocolat\nchoisir\nchose\nchouette\nchrome\nchute\ncigare\ncigogne\ncimenter\ncinéma\ncintrer\ncirculer\ncirer\ncirque\nciterne\ncitoyen\ncitron\ncivil\nclairon\nclameur\nclaquer\nclasse\nclavier\nclient\ncligner\nclimat\nclivage\ncloche\nclonage\ncloporte\ncobalt\ncobra\ncocasse\ncocotier\ncoder\ncodifier\ncoffre\ncogner\ncohésion\ncoiffer\ncoincer\ncolère\ncolibri\ncolline\ncolmater\ncolonel\ncombat\ncomédie\ncommande\ncompact\nconcert\nconduire\nconfier\ncongeler\nconnoter\nconsonne\ncontact\nconvexe\ncopain\ncopie\ncorail\ncorbeau\ncordage\ncorniche\ncorpus\ncorrect\ncortège\ncosmique\ncostume\ncoton\ncoude\ncoupure\ncourage\ncouteau\ncouvrir\ncoyote\ncrabe\ncrainte\ncravate\ncrayon\ncréature\ncréditer\ncrémeux\ncreuser\ncrevette\ncribler\ncrier\ncristal\ncritère\ncroire\ncroquer\ncrotale\ncrucial\ncruel\ncrypter\ncubique\ncueillir\ncuillère\ncuisine\ncuivre\nculminer\ncultiver\ncumuler\ncupide\ncuratif\ncurseur\ncyanure\ncycle\ncylindre\ncynique\ndaigner\ndamier\ndanger\ndanseur\ndauphin\ndébattre\ndébiter\ndéborder\ndébrider\ndébutant\ndécaler\ndécembre\ndéchirer\ndécider\ndéclarer\ndécorer\ndécrire\ndécupler\ndédale\ndéductif\ndéesse\ndéfensif\ndéfiler\ndéfrayer\ndégager\ndégivrer\ndéglutir\ndégrafer\ndéjeuner\ndélice\ndéloger\ndemander\ndemeurer\ndémolir\ndénicher\ndénouer\ndentelle\ndénuder\ndépart\ndépenser\ndéphaser\ndéplacer\ndéposer\ndéranger\ndérober\ndésastre\ndescente\ndésert\ndésigner\ndésobéir\ndessiner\ndestrier\ndétacher\ndétester\ndétourer\ndétresse\ndevancer\ndevenir\ndeviner\ndevoir\ndiable\ndialogue\ndiamant\ndicter\ndifférer\ndigérer\ndigital\ndigne\ndiluer\ndimanche\ndiminuer\ndioxyde\ndirectif\ndiriger\ndiscuter\ndisposer\ndissiper\ndistance\ndivertir\ndiviser\ndocile\ndocteur\ndogme\ndoigt\ndomaine\ndomicile\ndompter\ndonateur\ndonjon\ndonner\ndopamine\ndortoir\ndorure\ndosage\ndoseur\ndossier\ndotation\ndouanier\ndouble\ndouceur\ndouter\ndoyen\ndragon\ndraper\ndresser\ndribbler\ndroiture\nduperie\nduplexe\ndurable\ndurcir\ndynastie\néblouir\nécarter\nécharpe\néchelle\néclairer\néclipse\néclore\nécluse\nécole\néconomie\nécorce\nécouter\nécraser\nécrémer\nécrivain\nécrou\nécume\nécureuil\nédifier\néduquer\neffacer\neffectif\neffigie\neffort\neffrayer\neffusion\négaliser\négarer\néjecter\nélaborer\nélargir\nélectron\nélégant\néléphant\nélève\néligible\nélitisme\néloge\nélucider\néluder\nemballer\nembellir\nembryon\némeraude\némission\nemmener\némotion\némouvoir\nempereur\nemployer\nemporter\nemprise\némulsion\nencadrer\nenchère\nenclave\nencoche\nendiguer\nendosser\nendroit\nenduire\nénergie\nenfance\nenfermer\nenfouir\nengager\nengin\nenglober\nénigme\nenjamber\nenjeu\nenlever\nennemi\nennuyeux\nenrichir\nenrobage\nenseigne\nentasser\nentendre\nentier\nentourer\nentraver\nénumérer\nenvahir\nenviable\nenvoyer\nenzyme\néolien\népaissir\népargne\népatant\népaule\népicerie\népidémie\népier\népilogue\népine\népisode\népitaphe\népoque\népreuve\néprouver\népuisant\néquerre\néquipe\nériger\nérosion\nerreur\néruption\nescalier\nespadon\nespèce\nespiègle\nespoir\nesprit\nesquiver\nessayer\nessence\nessieu\nessorer\nestime\nestomac\nestrade\nétagère\nétaler\nétanche\nétatique\néteindre\nétendoir\néternel\néthanol\néthique\nethnie\nétirer\nétoffer\nétoile\nétonnant\nétourdir\nétrange\nétroit\nétude\neuphorie\névaluer\névasion\néventail\névidence\néviter\névolutif\névoquer\nexact\nexagérer\nexaucer\nexceller\nexcitant\nexclusif\nexcuse\nexécuter\nexemple\nexercer\nexhaler\nexhorter\nexigence\nexiler\nexister\nexotique\nexpédier\nexplorer\nexposer\nexprimer\nexquis\nextensif\nextraire\nexulter\nfable\nfabuleux\nfacette\nfacile\nfacture\nfaiblir\nfalaise\nfameux\nfamille\nfarceur\nfarfelu\nfarine\nfarouche\nfasciner\nfatal\nfatigue\nfaucon\nfautif\nfaveur\nfavori\nfébrile\nféconder\nfédérer\nfélin\nfemme\nfémur\nfendoir\nféodal\nfermer\nféroce\nferveur\nfestival\nfeuille\nfeutre\nfévrier\nfiasco\nficeler\nfictif\nfidèle\nfigure\nfilature\nfiletage\nfilière\nfilleul\nfilmer\nfilou\nfiltrer\nfinancer\nfinir\nfiole\nfirme\nfissure\nfixer\nflairer\nflamme\nflasque\nflatteur\nfléau\nflèche\nfleur\nflexion\nflocon\nflore\nfluctuer\nfluide\nfluvial\nfolie\nfonderie\nfongible\nfontaine\nforcer\nforgeron\nformuler\nfortune\nfossile\nfoudre\nfougère\nfouiller\nfoulure\nfourmi\nfragile\nfraise\nfranchir\nfrapper\nfrayeur\nfrégate\nfreiner\nfrelon\nfrémir\nfrénésie\nfrère\nfriable\nfriction\nfrisson\nfrivole\nfroid\nfromage\nfrontal\nfrotter\nfruit\nfugitif\nfuite\nfureur\nfurieux\nfurtif\nfusion\nfutur\ngagner\ngalaxie\ngalerie\ngambader\ngarantir\ngardien\ngarnir\ngarrigue\ngazelle\ngazon\ngéant\ngélatine\ngélule\ngendarme\ngénéral\ngénie\ngenou\ngentil\ngéologie\ngéomètre\ngéranium\ngerme\ngestuel\ngeyser\ngibier\ngicler\ngirafe\ngivre\nglace\nglaive\nglisser\nglobe\ngloire\nglorieux\ngolfeur\ngomme\ngonfler\ngorge\ngorille\ngoudron\ngouffre\ngoulot\ngoupille\ngourmand\ngoutte\ngraduel\ngraffiti\ngraine\ngrand\ngrappin\ngratuit\ngravir\ngrenat\ngriffure\ngriller\ngrimper\ngrogner\ngronder\ngrotte\ngroupe\ngruger\ngrutier\ngruyère\nguépard\nguerrier\nguide\nguimauve\nguitare\ngustatif\ngymnaste\ngyrostat\nhabitude\nhachoir\nhalte\nhameau\nhangar\nhanneton\nharicot\nharmonie\nharpon\nhasard\nhélium\nhématome\nherbe\nhérisson\nhermine\nhéron\nhésiter\nheureux\nhiberner\nhibou\nhilarant\nhistoire\nhiver\nhomard\nhommage\nhomogène\nhonneur\nhonorer\nhonteux\nhorde\nhorizon\nhorloge\nhormone\nhorrible\nhouleux\nhousse\nhublot\nhuileux\nhumain\nhumble\nhumide\nhumour\nhurler\nhydromel\nhygiène\nhymne\nhypnose\nidylle\nignorer\niguane\nillicite\nillusion\nimage\nimbiber\nimiter\nimmense\nimmobile\nimmuable\nimpact\nimpérial\nimplorer\nimposer\nimprimer\nimputer\nincarner\nincendie\nincident\nincliner\nincolore\nindexer\nindice\ninductif\ninédit\nineptie\ninexact\ninfini\ninfliger\ninformer\ninfusion\ningérer\ninhaler\ninhiber\ninjecter\ninjure\ninnocent\ninoculer\ninonder\ninscrire\ninsecte\ninsigne\ninsolite\ninspirer\ninstinct\ninsulter\nintact\nintense\nintime\nintrigue\nintuitif\ninutile\ninvasion\ninventer\ninviter\ninvoquer\nironique\nirradier\nirréel\nirriter\nisoler\nivoire\nivresse\njaguar\njaillir\njambe\njanvier\njardin\njauger\njaune\njavelot\njetable\njeton\njeudi\njeunesse\njoindre\njoncher\njongler\njoueur\njouissif\njournal\njovial\njoyau\njoyeux\njubiler\njugement\njunior\njupon\njuriste\njustice\njuteux\njuvénile\nkayak\nkimono\nkiosque\nlabel\nlabial\nlabourer\nlacérer\nlactose\nlagune\nlaine\nlaisser\nlaitier\nlambeau\nlamelle\nlampe\nlanceur\nlangage\nlanterne\nlapin\nlargeur\nlarme\nlaurier\nlavabo\nlavoir\nlecture\nlégal\nléger\nlégume\nlessive\nlettre\nlevier\nlexique\nlézard\nliasse\nlibérer\nlibre\nlicence\nlicorne\nliège\nlièvre\nligature\nligoter\nligue\nlimer\nlimite\nlimonade\nlimpide\nlinéaire\nlingot\nlionceau\nliquide\nlisière\nlister\nlithium\nlitige\nlittoral\nlivreur\nlogique\nlointain\nloisir\nlombric\nloterie\nlouer\nlourd\nloutre\nlouve\nloyal\nlubie\nlucide\nlucratif\nlueur\nlugubre\nluisant\nlumière\nlunaire\nlundi\nluron\nlutter\nluxueux\nmachine\nmagasin\nmagenta\nmagique\nmaigre\nmaillon\nmaintien\nmairie\nmaison\nmajorer\nmalaxer\nmaléfice\nmalheur\nmalice\nmallette\nmammouth\nmandater\nmaniable\nmanquant\nmanteau\nmanuel\nmarathon\nmarbre\nmarchand\nmardi\nmaritime\nmarqueur\nmarron\nmarteler\nmascotte\nmassif\nmatériel\nmatière\nmatraque\nmaudire\nmaussade\nmauve\nmaximal\nméchant\nméconnu\nmédaille\nmédecin\nméditer\nméduse\nmeilleur\nmélange\nmélodie\nmembre\nmémoire\nmenacer\nmener\nmenhir\nmensonge\nmentor\nmercredi\nmérite\nmerle\nmessager\nmesure\nmétal\nmétéore\nméthode\nmétier\nmeuble\nmiauler\nmicrobe\nmiette\nmignon\nmigrer\nmilieu\nmillion\nmimique\nmince\nminéral\nminimal\nminorer\nminute\nmiracle\nmiroiter\nmissile\nmixte\nmobile\nmoderne\nmoelleux\nmondial\nmoniteur\nmonnaie\nmonotone\nmonstre\nmontagne\nmonument\nmoqueur\nmorceau\nmorsure\nmortier\nmoteur\nmotif\nmouche\nmoufle\nmoulin\nmousson\nmouton\nmouvant\nmultiple\nmunition\nmuraille\nmurène\nmurmure\nmuscle\nmuséum\nmusicien\nmutation\nmuter\nmutuel\nmyriade\nmyrtille\nmystère\nmythique\nnageur\nnappe\nnarquois\nnarrer\nnatation\nnation\nnature\nnaufrage\nnautique\nnavire\nnébuleux\nnectar\nnéfaste\nnégation\nnégliger\nnégocier\nneige\nnerveux\nnettoyer\nneurone\nneutron\nneveu\nniche\nnickel\nnitrate\nniveau\nnoble\nnocif\nnocturne\nnoirceur\nnoisette\nnomade\nnombreux\nnommer\nnormatif\nnotable\nnotifier\nnotoire\nnourrir\nnouveau\nnovateur\nnovembre\nnovice\nnuage\nnuancer\nnuire\nnuisible\nnuméro\nnuptial\nnuque\nnutritif\nobéir\nobjectif\nobliger\nobscur\nobserver\nobstacle\nobtenir\nobturer\noccasion\noccuper\nocéan\noctobre\noctroyer\noctupler\noculaire\nodeur\nodorant\noffenser\nofficier\noffrir\nogive\noiseau\noisillon\nolfactif\nolivier\nombrage\nomettre\nonctueux\nonduler\nonéreux\nonirique\nopale\nopaque\nopérer\nopinion\nopportun\nopprimer\nopter\noptique\norageux\norange\norbite\nordonner\noreille\norgane\norgueil\norifice\nornement\norque\nortie\nosciller\nosmose\nossature\notarie\nouragan\nourson\noutil\noutrager\nouvrage\novation\noxyde\noxygène\nozone\npaisible\npalace\npalmarès\npalourde\npalper\npanache\npanda\npangolin\npaniquer\npanneau\npanorama\npantalon\npapaye\npapier\npapoter\npapyrus\nparadoxe\nparcelle\nparesse\nparfumer\nparler\nparole\nparrain\nparsemer\npartager\nparure\nparvenir\npassion\npastèque\npaternel\npatience\npatron\npavillon\npavoiser\npayer\npaysage\npeigne\npeintre\npelage\npélican\npelle\npelouse\npeluche\npendule\npénétrer\npénible\npensif\npénurie\npépite\npéplum\nperdrix\nperforer\npériode\npermuter\nperplexe\npersil\nperte\npeser\npétale\npetit\npétrir\npeuple\npharaon\nphobie\nphoque\nphoton\nphrase\nphysique\npiano\npictural\npièce\npierre\npieuvre\npilote\npinceau\npipette\npiquer\npirogue\npiscine\npiston\npivoter\npixel\npizza\nplacard\nplafond\nplaisir\nplaner\nplaque\nplastron\nplateau\npleurer\nplexus\npliage\nplomb\nplonger\npluie\nplumage\npochette\npoésie\npoète\npointe\npoirier\npoisson\npoivre\npolaire\npolicier\npollen\npolygone\npommade\npompier\nponctuel\npondérer\nponey\nportique\nposition\nposséder\nposture\npotager\npoteau\npotion\npouce\npoulain\npoumon\npourpre\npoussin\npouvoir\nprairie\npratique\nprécieux\nprédire\npréfixe\nprélude\nprénom\nprésence\nprétexte\nprévoir\nprimitif\nprince\nprison\npriver\nproblème\nprocéder\nprodige\nprofond\nprogrès\nproie\nprojeter\nprologue\npromener\npropre\nprospère\nprotéger\nprouesse\nproverbe\nprudence\npruneau\npsychose\npublic\npuceron\npuiser\npulpe\npulsar\npunaise\npunitif\npupitre\npurifier\npuzzle\npyramide\nquasar\nquerelle\nquestion\nquiétude\nquitter\nquotient\nracine\nraconter\nradieux\nragondin\nraideur\nraisin\nralentir\nrallonge\nramasser\nrapide\nrasage\nratisser\nravager\nravin\nrayonner\nréactif\nréagir\nréaliser\nréanimer\nrecevoir\nréciter\nréclamer\nrécolter\nrecruter\nreculer\nrecycler\nrédiger\nredouter\nrefaire\nréflexe\nréformer\nrefrain\nrefuge\nrégalien\nrégion\nréglage\nrégulier\nréitérer\nrejeter\nrejouer\nrelatif\nrelever\nrelief\nremarque\nremède\nremise\nremonter\nremplir\nremuer\nrenard\nrenfort\nrenifler\nrenoncer\nrentrer\nrenvoi\nreplier\nreporter\nreprise\nreptile\nrequin\nréserve\nrésineux\nrésoudre\nrespect\nrester\nrésultat\nrétablir\nretenir\nréticule\nretomber\nretracer\nréunion\nréussir\nrevanche\nrevivre\nrévolte\nrévulsif\nrichesse\nrideau\nrieur\nrigide\nrigoler\nrincer\nriposter\nrisible\nrisque\nrituel\nrival\nrivière\nrocheux\nromance\nrompre\nronce\nrondin\nroseau\nrosier\nrotatif\nrotor\nrotule\nrouge\nrouille\nrouleau\nroutine\nroyaume\nruban\nrubis\nruche\nruelle\nrugueux\nruiner\nruisseau\nruser\nrustique\nrythme\nsabler\nsaboter\nsabre\nsacoche\nsafari\nsagesse\nsaisir\nsalade\nsalive\nsalon\nsaluer\nsamedi\nsanction\nsanglier\nsarcasme\nsardine\nsaturer\nsaugrenu\nsaumon\nsauter\nsauvage\nsavant\nsavonner\nscalpel\nscandale\nscélérat\nscénario\nsceptre\nschéma\nscience\nscinder\nscore\nscrutin\nsculpter\nséance\nsécable\nsécher\nsecouer\nsécréter\nsédatif\nséduire\nseigneur\nséjour\nsélectif\nsemaine\nsembler\nsemence\nséminal\nsénateur\nsensible\nsentence\nséparer\nséquence\nserein\nsergent\nsérieux\nserrure\nsérum\nservice\nsésame\nsévir\nsevrage\nsextuple\nsidéral\nsiècle\nsiéger\nsiffler\nsigle\nsignal\nsilence\nsilicium\nsimple\nsincère\nsinistre\nsiphon\nsirop\nsismique\nsituer\nskier\nsocial\nsocle\nsodium\nsoigneux\nsoldat\nsoleil\nsolitude\nsoluble\nsombre\nsommeil\nsomnoler\nsonde\nsongeur\nsonnette\nsonore\nsorcier\nsortir\nsosie\nsottise\nsoucieux\nsoudure\nsouffle\nsoulever\nsoupape\nsource\nsoutirer\nsouvenir\nspacieux\nspatial\nspécial\nsphère\nspiral\nstable\nstation\nsternum\nstimulus\nstipuler\nstrict\nstudieux\nstupeur\nstyliste\nsublime\nsubstrat\nsubtil\nsubvenir\nsuccès\nsucre\nsuffixe\nsuggérer\nsuiveur\nsulfate\nsuperbe\nsupplier\nsurface\nsuricate\nsurmener\nsurprise\nsursaut\nsurvie\nsuspect\nsyllabe\nsymbole\nsymétrie\nsynapse\nsyntaxe\nsystème\ntabac\ntablier\ntactile\ntailler\ntalent\ntalisman\ntalonner\ntambour\ntamiser\ntangible\ntapis\ntaquiner\ntarder\ntarif\ntartine\ntasse\ntatami\ntatouage\ntaupe\ntaureau\ntaxer\ntémoin\ntemporel\ntenaille\ntendre\nteneur\ntenir\ntension\nterminer\nterne\nterrible\ntétine\ntexte\nthème\nthéorie\nthérapie\nthorax\ntibia\ntiède\ntimide\ntirelire\ntiroir\ntissu\ntitane\ntitre\ntituber\ntoboggan\ntolérant\ntomate\ntonique\ntonneau\ntoponyme\ntorche\ntordre\ntornade\ntorpille\ntorrent\ntorse\ntortue\ntotem\ntoucher\ntournage\ntousser\ntoxine\ntraction\ntrafic\ntragique\ntrahir\ntrain\ntrancher\ntravail\ntrèfle\ntremper\ntrésor\ntreuil\ntriage\ntribunal\ntricoter\ntrilogie\ntriomphe\ntripler\ntriturer\ntrivial\ntrombone\ntronc\ntropical\ntroupeau\ntuile\ntulipe\ntumulte\ntunnel\nturbine\ntuteur\ntutoyer\ntuyau\ntympan\ntyphon\ntypique\ntyran\nubuesque\nultime\nultrason\nunanime\nunifier\nunion\nunique\nunitaire\nunivers\nuranium\nurbain\nurticant\nusage\nusine\nusuel\nusure\nutile\nutopie\nvacarme\nvaccin\nvagabond\nvague\nvaillant\nvaincre\nvaisseau\nvalable\nvalise\nvallon\nvalve\nvampire\nvanille\nvapeur\nvarier\nvaseux\nvassal\nvaste\nvecteur\nvedette\nvégétal\nvéhicule\nveinard\nvéloce\nvendredi\nvénérer\nvenger\nvenimeux\nventouse\nverdure\nvérin\nvernir\nverrou\nverser\nvertu\nveston\nvétéran\nvétuste\nvexant\nvexer\nviaduc\nviande\nvictoire\nvidange\nvidéo\nvignette\nvigueur\nvilain\nvillage\nvinaigre\nviolon\nvipère\nvirement\nvirtuose\nvirus\nvisage\nviseur\nvision\nvisqueux\nvisuel\nvital\nvitesse\nviticole\nvitrine\nvivace\nvivipare\nvocation\nvoguer\nvoile\nvoisin\nvoiture\nvolaille\nvolcan\nvoltiger\nvolume\nvorace\nvortex\nvoter\nvouloir\nvoyage\nvoyelle\nwagon\nxénon\nyacht\nzèbre\nzénith\nzeste\nzoologie`.split('\\n');\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ox/node_modules/@scure/bip39/esm/wordlists/french.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ox/node_modules/@scure/bip39/esm/wordlists/italian.js":
/*!****************************************************************************!*\
  !*** ./node_modules/ox/node_modules/@scure/bip39/esm/wordlists/italian.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   wordlist: () => (/* binding */ wordlist)\n/* harmony export */ });\nconst wordlist = `abaco\nabbaglio\nabbinato\nabete\nabisso\nabolire\nabrasivo\nabrogato\naccadere\naccenno\naccusato\nacetone\nachille\nacido\nacqua\nacre\nacrilico\nacrobata\nacuto\nadagio\naddebito\naddome\nadeguato\naderire\nadipe\nadottare\nadulare\naffabile\naffetto\naffisso\naffranto\naforisma\nafoso\nafricano\nagave\nagente\nagevole\naggancio\nagire\nagitare\nagonismo\nagricolo\nagrumeto\naguzzo\nalabarda\nalato\nalbatro\nalberato\nalbo\nalbume\nalce\nalcolico\nalettone\nalfa\nalgebra\naliante\nalibi\nalimento\nallagato\nallegro\nallievo\nallodola\nallusivo\nalmeno\nalogeno\nalpaca\nalpestre\naltalena\nalterno\nalticcio\naltrove\nalunno\nalveolo\nalzare\namalgama\namanita\namarena\nambito\nambrato\nameba\namerica\nametista\namico\nammasso\nammenda\nammirare\nammonito\namore\nampio\nampliare\namuleto\nanacardo\nanagrafe\nanalista\nanarchia\nanatra\nanca\nancella\nancora\nandare\nandrea\nanello\nangelo\nangolare\nangusto\nanima\nannegare\nannidato\nanno\nannuncio\nanonimo\nanticipo\nanzi\napatico\napertura\napode\napparire\nappetito\nappoggio\napprodo\nappunto\naprile\narabica\narachide\naragosta\naraldica\narancio\naratura\narazzo\narbitro\narchivio\nardito\narenile\nargento\nargine\narguto\naria\narmonia\narnese\narredato\narringa\narrosto\narsenico\narso\nartefice\narzillo\nasciutto\nascolto\nasepsi\nasettico\nasfalto\nasino\nasola\naspirato\naspro\nassaggio\nasse\nassoluto\nassurdo\nasta\nastenuto\nastice\nastratto\natavico\nateismo\natomico\natono\nattesa\nattivare\nattorno\nattrito\nattuale\nausilio\naustria\nautista\nautonomo\nautunno\navanzato\navere\navvenire\navviso\navvolgere\nazione\nazoto\nazzimo\nazzurro\nbabele\nbaccano\nbacino\nbaco\nbadessa\nbadilata\nbagnato\nbaita\nbalcone\nbaldo\nbalena\nballata\nbalzano\nbambino\nbandire\nbaraonda\nbarbaro\nbarca\nbaritono\nbarlume\nbarocco\nbasilico\nbasso\nbatosta\nbattuto\nbaule\nbava\nbavosa\nbecco\nbeffa\nbelgio\nbelva\nbenda\nbenevole\nbenigno\nbenzina\nbere\nberlina\nbeta\nbibita\nbici\nbidone\nbifido\nbiga\nbilancia\nbimbo\nbinocolo\nbiologo\nbipede\nbipolare\nbirbante\nbirra\nbiscotto\nbisesto\nbisnonno\nbisonte\nbisturi\nbizzarro\nblando\nblatta\nbollito\nbonifico\nbordo\nbosco\nbotanico\nbottino\nbozzolo\nbraccio\nbradipo\nbrama\nbranca\nbravura\nbretella\nbrevetto\nbrezza\nbriglia\nbrillante\nbrindare\nbroccolo\nbrodo\nbronzina\nbrullo\nbruno\nbubbone\nbuca\nbudino\nbuffone\nbuio\nbulbo\nbuono\nburlone\nburrasca\nbussola\nbusta\ncadetto\ncaduco\ncalamaro\ncalcolo\ncalesse\ncalibro\ncalmo\ncaloria\ncambusa\ncamerata\ncamicia\ncammino\ncamola\ncampale\ncanapa\ncandela\ncane\ncanino\ncanotto\ncantina\ncapace\ncapello\ncapitolo\ncapogiro\ncappero\ncapra\ncapsula\ncarapace\ncarcassa\ncardo\ncarisma\ncarovana\ncarretto\ncartolina\ncasaccio\ncascata\ncaserma\ncaso\ncassone\ncastello\ncasuale\ncatasta\ncatena\ncatrame\ncauto\ncavillo\ncedibile\ncedrata\ncefalo\ncelebre\ncellulare\ncena\ncenone\ncentesimo\nceramica\ncercare\ncerto\ncerume\ncervello\ncesoia\ncespo\nceto\nchela\nchiaro\nchicca\nchiedere\nchimera\nchina\nchirurgo\nchitarra\nciao\nciclismo\ncifrare\ncigno\ncilindro\nciottolo\ncirca\ncirrosi\ncitrico\ncittadino\nciuffo\ncivetta\ncivile\nclassico\nclinica\ncloro\ncocco\ncodardo\ncodice\ncoerente\ncognome\ncollare\ncolmato\ncolore\ncolposo\ncoltivato\ncolza\ncoma\ncometa\ncommando\ncomodo\ncomputer\ncomune\nconciso\ncondurre\nconferma\ncongelare\nconiuge\nconnesso\nconoscere\nconsumo\ncontinuo\nconvegno\ncoperto\ncopione\ncoppia\ncopricapo\ncorazza\ncordata\ncoricato\ncornice\ncorolla\ncorpo\ncorredo\ncorsia\ncortese\ncosmico\ncostante\ncottura\ncovato\ncratere\ncravatta\ncreato\ncredere\ncremoso\ncrescita\ncreta\ncriceto\ncrinale\ncrisi\ncritico\ncroce\ncronaca\ncrostata\ncruciale\ncrusca\ncucire\ncuculo\ncugino\ncullato\ncupola\ncuratore\ncursore\ncurvo\ncuscino\ncustode\ndado\ndaino\ndalmata\ndamerino\ndaniela\ndannoso\ndanzare\ndatato\ndavanti\ndavvero\ndebutto\ndecennio\ndeciso\ndeclino\ndecollo\ndecreto\ndedicato\ndefinito\ndeforme\ndegno\ndelegare\ndelfino\ndelirio\ndelta\ndemenza\ndenotato\ndentro\ndeposito\nderapata\nderivare\nderoga\ndescritto\ndeserto\ndesiderio\ndesumere\ndetersivo\ndevoto\ndiametro\ndicembre\ndiedro\ndifeso\ndiffuso\ndigerire\ndigitale\ndiluvio\ndinamico\ndinnanzi\ndipinto\ndiploma\ndipolo\ndiradare\ndire\ndirotto\ndirupo\ndisagio\ndiscreto\ndisfare\ndisgelo\ndisposto\ndistanza\ndisumano\ndito\ndivano\ndivelto\ndividere\ndivorato\ndoblone\ndocente\ndoganale\ndogma\ndolce\ndomato\ndomenica\ndominare\ndondolo\ndono\ndormire\ndote\ndottore\ndovuto\ndozzina\ndrago\ndruido\ndubbio\ndubitare\nducale\nduna\nduomo\nduplice\nduraturo\nebano\neccesso\necco\neclissi\neconomia\nedera\nedicola\nedile\neditoria\neducare\negemonia\negli\negoismo\negregio\nelaborato\nelargire\nelegante\nelencato\neletto\nelevare\nelfico\nelica\nelmo\nelsa\neluso\nemanato\nemblema\nemesso\nemiro\nemotivo\nemozione\nempirico\nemulo\nendemico\nenduro\nenergia\nenfasi\nenoteca\nentrare\nenzima\nepatite\nepilogo\nepisodio\nepocale\neppure\nequatore\nerario\nerba\nerboso\nerede\neremita\nerigere\nermetico\neroe\nerosivo\nerrante\nesagono\nesame\nesanime\nesaudire\nesca\nesempio\nesercito\nesibito\nesigente\nesistere\nesito\nesofago\nesortato\nesoso\nespanso\nespresso\nessenza\nesso\nesteso\nestimare\nestonia\nestroso\nesultare\netilico\netnico\netrusco\netto\neuclideo\neuropa\nevaso\nevidenza\nevitato\nevoluto\nevviva\nfabbrica\nfaccenda\nfachiro\nfalco\nfamiglia\nfanale\nfanfara\nfango\nfantasma\nfare\nfarfalla\nfarinoso\nfarmaco\nfascia\nfastoso\nfasullo\nfaticare\nfato\nfavoloso\nfebbre\nfecola\nfede\nfegato\nfelpa\nfeltro\nfemmina\nfendere\nfenomeno\nfermento\nferro\nfertile\nfessura\nfestivo\nfetta\nfeudo\nfiaba\nfiducia\nfifa\nfigurato\nfilo\nfinanza\nfinestra\nfinire\nfiore\nfiscale\nfisico\nfiume\nflacone\nflamenco\nflebo\nflemma\nflorido\nfluente\nfluoro\nfobico\nfocaccia\nfocoso\nfoderato\nfoglio\nfolata\nfolclore\nfolgore\nfondente\nfonetico\nfonia\nfontana\nforbito\nforchetta\nforesta\nformica\nfornaio\nforo\nfortezza\nforzare\nfosfato\nfosso\nfracasso\nfrana\nfrassino\nfratello\nfreccetta\nfrenata\nfresco\nfrigo\nfrollino\nfronde\nfrugale\nfrutta\nfucilata\nfucsia\nfuggente\nfulmine\nfulvo\nfumante\nfumetto\nfumoso\nfune\nfunzione\nfuoco\nfurbo\nfurgone\nfurore\nfuso\nfutile\ngabbiano\ngaffe\ngalateo\ngallina\ngaloppo\ngambero\ngamma\ngaranzia\ngarbo\ngarofano\ngarzone\ngasdotto\ngasolio\ngastrico\ngatto\ngaudio\ngazebo\ngazzella\ngeco\ngelatina\ngelso\ngemello\ngemmato\ngene\ngenitore\ngennaio\ngenotipo\ngergo\nghepardo\nghiaccio\nghisa\ngiallo\ngilda\nginepro\ngiocare\ngioiello\ngiorno\ngiove\ngirato\ngirone\ngittata\ngiudizio\ngiurato\ngiusto\nglobulo\nglutine\ngnomo\ngobba\ngolf\ngomito\ngommone\ngonfio\ngonna\ngoverno\ngracile\ngrado\ngrafico\ngrammo\ngrande\ngrattare\ngravoso\ngrazia\ngreca\ngregge\ngrifone\ngrigio\ngrinza\ngrotta\ngruppo\nguadagno\nguaio\nguanto\nguardare\ngufo\nguidare\nibernato\nicona\nidentico\nidillio\nidolo\nidra\nidrico\nidrogeno\nigiene\nignaro\nignorato\nilare\nilleso\nillogico\nilludere\nimballo\nimbevuto\nimbocco\nimbuto\nimmane\nimmerso\nimmolato\nimpacco\nimpeto\nimpiego\nimporto\nimpronta\ninalare\ninarcare\ninattivo\nincanto\nincendio\ninchino\nincisivo\nincluso\nincontro\nincrocio\nincubo\nindagine\nindia\nindole\ninedito\ninfatti\ninfilare\ninflitto\ningaggio\ningegno\ninglese\ningordo\ningrosso\ninnesco\ninodore\ninoltrare\ninondato\ninsano\ninsetto\ninsieme\ninsonnia\ninsulina\nintasato\nintero\nintonaco\nintuito\ninumidire\ninvalido\ninvece\ninvito\niperbole\nipnotico\nipotesi\nippica\niride\nirlanda\nironico\nirrigato\nirrorare\nisolato\nisotopo\nisterico\nistituto\nistrice\nitalia\niterare\nlabbro\nlabirinto\nlacca\nlacerato\nlacrima\nlacuna\nladdove\nlago\nlampo\nlancetta\nlanterna\nlardoso\nlarga\nlaringe\nlastra\nlatenza\nlatino\nlattuga\nlavagna\nlavoro\nlegale\nleggero\nlembo\nlentezza\nlenza\nleone\nlepre\nlesivo\nlessato\nlesto\nletterale\nleva\nlevigato\nlibero\nlido\nlievito\nlilla\nlimatura\nlimitare\nlimpido\nlineare\nlingua\nliquido\nlira\nlirica\nlisca\nlite\nlitigio\nlivrea\nlocanda\nlode\nlogica\nlombare\nlondra\nlongevo\nloquace\nlorenzo\nloto\nlotteria\nluce\nlucidato\nlumaca\nluminoso\nlungo\nlupo\nluppolo\nlusinga\nlusso\nlutto\nmacabro\nmacchina\nmacero\nmacinato\nmadama\nmagico\nmaglia\nmagnete\nmagro\nmaiolica\nmalafede\nmalgrado\nmalinteso\nmalsano\nmalto\nmalumore\nmana\nmancia\nmandorla\nmangiare\nmanifesto\nmannaro\nmanovra\nmansarda\nmantide\nmanubrio\nmappa\nmaratona\nmarcire\nmaretta\nmarmo\nmarsupio\nmaschera\nmassaia\nmastino\nmaterasso\nmatricola\nmattone\nmaturo\nmazurca\nmeandro\nmeccanico\nmecenate\nmedesimo\nmeditare\nmega\nmelassa\nmelis\nmelodia\nmeninge\nmeno\nmensola\nmercurio\nmerenda\nmerlo\nmeschino\nmese\nmessere\nmestolo\nmetallo\nmetodo\nmettere\nmiagolare\nmica\nmicelio\nmichele\nmicrobo\nmidollo\nmiele\nmigliore\nmilano\nmilite\nmimosa\nminerale\nmini\nminore\nmirino\nmirtillo\nmiscela\nmissiva\nmisto\nmisurare\nmitezza\nmitigare\nmitra\nmittente\nmnemonico\nmodello\nmodifica\nmodulo\nmogano\nmogio\nmole\nmolosso\nmonastero\nmonco\nmondina\nmonetario\nmonile\nmonotono\nmonsone\nmontato\nmonviso\nmora\nmordere\nmorsicato\nmostro\nmotivato\nmotosega\nmotto\nmovenza\nmovimento\nmozzo\nmucca\nmucosa\nmuffa\nmughetto\nmugnaio\nmulatto\nmulinello\nmultiplo\nmummia\nmunto\nmuovere\nmurale\nmusa\nmuscolo\nmusica\nmutevole\nmuto\nnababbo\nnafta\nnanometro\nnarciso\nnarice\nnarrato\nnascere\nnastrare\nnaturale\nnautica\nnaviglio\nnebulosa\nnecrosi\nnegativo\nnegozio\nnemmeno\nneofita\nneretto\nnervo\nnessuno\nnettuno\nneutrale\nneve\nnevrotico\nnicchia\nninfa\nnitido\nnobile\nnocivo\nnodo\nnome\nnomina\nnordico\nnormale\nnorvegese\nnostrano\nnotare\nnotizia\nnotturno\nnovella\nnucleo\nnulla\nnumero\nnuovo\nnutrire\nnuvola\nnuziale\noasi\nobbedire\nobbligo\nobelisco\noblio\nobolo\nobsoleto\noccasione\nocchio\noccidente\noccorrere\noccultare\nocra\noculato\nodierno\nodorare\nofferta\noffrire\noffuscato\noggetto\noggi\nognuno\nolandese\nolfatto\noliato\noliva\nologramma\noltre\nomaggio\nombelico\nombra\nomega\nomissione\nondoso\nonere\nonice\nonnivoro\nonorevole\nonta\noperato\nopinione\nopposto\noracolo\norafo\nordine\norecchino\norefice\norfano\norganico\norigine\norizzonte\norma\normeggio\nornativo\norologio\norrendo\norribile\nortensia\nortica\norzata\norzo\nosare\noscurare\nosmosi\nospedale\nospite\nossa\nossidare\nostacolo\noste\notite\notre\nottagono\nottimo\nottobre\novale\novest\novino\noviparo\novocito\novunque\novviare\nozio\npacchetto\npace\npacifico\npadella\npadrone\npaese\npaga\npagina\npalazzina\npalesare\npallido\npalo\npalude\npandoro\npannello\npaolo\npaonazzo\npaprica\nparabola\nparcella\nparere\npargolo\npari\nparlato\nparola\npartire\nparvenza\nparziale\npassivo\npasticca\npatacca\npatologia\npattume\npavone\npeccato\npedalare\npedonale\npeggio\npeloso\npenare\npendice\npenisola\npennuto\npenombra\npensare\npentola\npepe\npepita\nperbene\npercorso\nperdonato\nperforare\npergamena\nperiodo\npermesso\nperno\nperplesso\npersuaso\npertugio\npervaso\npesatore\npesista\npeso\npestifero\npetalo\npettine\npetulante\npezzo\npiacere\npianta\npiattino\npiccino\npicozza\npiega\npietra\npiffero\npigiama\npigolio\npigro\npila\npilifero\npillola\npilota\npimpante\npineta\npinna\npinolo\npioggia\npiombo\npiramide\npiretico\npirite\npirolisi\npitone\npizzico\nplacebo\nplanare\nplasma\nplatano\nplenario\npochezza\npoderoso\npodismo\npoesia\npoggiare\npolenta\npoligono\npollice\npolmonite\npolpetta\npolso\npoltrona\npolvere\npomice\npomodoro\nponte\npopoloso\nporfido\nporoso\nporpora\nporre\nportata\nposa\npositivo\npossesso\npostulato\npotassio\npotere\npranzo\nprassi\npratica\nprecluso\npredica\nprefisso\npregiato\nprelievo\npremere\nprenotare\npreparato\npresenza\npretesto\nprevalso\nprima\nprincipe\nprivato\nproblema\nprocura\nprodurre\nprofumo\nprogetto\nprolunga\npromessa\npronome\nproposta\nproroga\nproteso\nprova\nprudente\nprugna\nprurito\npsiche\npubblico\npudica\npugilato\npugno\npulce\npulito\npulsante\npuntare\npupazzo\npupilla\npuro\nquadro\nqualcosa\nquasi\nquerela\nquota\nraccolto\nraddoppio\nradicale\nradunato\nraffica\nragazzo\nragione\nragno\nramarro\nramingo\nramo\nrandagio\nrantolare\nrapato\nrapina\nrappreso\nrasatura\nraschiato\nrasente\nrassegna\nrastrello\nrata\nravveduto\nreale\nrecepire\nrecinto\nrecluta\nrecondito\nrecupero\nreddito\nredimere\nregalato\nregistro\nregola\nregresso\nrelazione\nremare\nremoto\nrenna\nreplica\nreprimere\nreputare\nresa\nresidente\nresponso\nrestauro\nrete\nretina\nretorica\nrettifica\nrevocato\nriassunto\nribadire\nribelle\nribrezzo\nricarica\nricco\nricevere\nriciclato\nricordo\nricreduto\nridicolo\nridurre\nrifasare\nriflesso\nriforma\nrifugio\nrigare\nrigettato\nrighello\nrilassato\nrilevato\nrimanere\nrimbalzo\nrimedio\nrimorchio\nrinascita\nrincaro\nrinforzo\nrinnovo\nrinomato\nrinsavito\nrintocco\nrinuncia\nrinvenire\nriparato\nripetuto\nripieno\nriportare\nripresa\nripulire\nrisata\nrischio\nriserva\nrisibile\nriso\nrispetto\nristoro\nrisultato\nrisvolto\nritardo\nritegno\nritmico\nritrovo\nriunione\nriva\nriverso\nrivincita\nrivolto\nrizoma\nroba\nrobotico\nrobusto\nroccia\nroco\nrodaggio\nrodere\nroditore\nrogito\nrollio\nromantico\nrompere\nronzio\nrosolare\nrospo\nrotante\nrotondo\nrotula\nrovescio\nrubizzo\nrubrica\nruga\nrullino\nrumine\nrumoroso\nruolo\nrupe\nrussare\nrustico\nsabato\nsabbiare\nsabotato\nsagoma\nsalasso\nsaldatura\nsalgemma\nsalivare\nsalmone\nsalone\nsaltare\nsaluto\nsalvo\nsapere\nsapido\nsaporito\nsaraceno\nsarcasmo\nsarto\nsassoso\nsatellite\nsatira\nsatollo\nsaturno\nsavana\nsavio\nsaziato\nsbadiglio\nsbalzo\nsbancato\nsbarra\nsbattere\nsbavare\nsbendare\nsbirciare\nsbloccato\nsbocciato\nsbrinare\nsbruffone\nsbuffare\nscabroso\nscadenza\nscala\nscambiare\nscandalo\nscapola\nscarso\nscatenare\nscavato\nscelto\nscenico\nscettro\nscheda\nschiena\nsciarpa\nscienza\nscindere\nscippo\nsciroppo\nscivolo\nsclerare\nscodella\nscolpito\nscomparto\nsconforto\nscoprire\nscorta\nscossone\nscozzese\nscriba\nscrollare\nscrutinio\nscuderia\nscultore\nscuola\nscuro\nscusare\nsdebitare\nsdoganare\nseccatura\nsecondo\nsedano\nseggiola\nsegnalato\nsegregato\nseguito\nselciato\nselettivo\nsella\nselvaggio\nsemaforo\nsembrare\nseme\nseminato\nsempre\nsenso\nsentire\nsepolto\nsequenza\nserata\nserbato\nsereno\nserio\nserpente\nserraglio\nservire\nsestina\nsetola\nsettimana\nsfacelo\nsfaldare\nsfamato\nsfarzoso\nsfaticato\nsfera\nsfida\nsfilato\nsfinge\nsfocato\nsfoderare\nsfogo\nsfoltire\nsforzato\nsfratto\nsfruttato\nsfuggito\nsfumare\nsfuso\nsgabello\nsgarbato\nsgonfiare\nsgorbio\nsgrassato\nsguardo\nsibilo\nsiccome\nsierra\nsigla\nsignore\nsilenzio\nsillaba\nsimbolo\nsimpatico\nsimulato\nsinfonia\nsingolo\nsinistro\nsino\nsintesi\nsinusoide\nsipario\nsisma\nsistole\nsituato\nslitta\nslogatura\nsloveno\nsmarrito\nsmemorato\nsmentito\nsmeraldo\nsmilzo\nsmontare\nsmottato\nsmussato\nsnellire\nsnervato\nsnodo\nsobbalzo\nsobrio\nsoccorso\nsociale\nsodale\nsoffitto\nsogno\nsoldato\nsolenne\nsolido\nsollazzo\nsolo\nsolubile\nsolvente\nsomatico\nsomma\nsonda\nsonetto\nsonnifero\nsopire\nsoppeso\nsopra\nsorgere\nsorpasso\nsorriso\nsorso\nsorteggio\nsorvolato\nsospiro\nsosta\nsottile\nspada\nspalla\nspargere\nspatola\nspavento\nspazzola\nspecie\nspedire\nspegnere\nspelatura\nsperanza\nspessore\nspettrale\nspezzato\nspia\nspigoloso\nspillato\nspinoso\nspirale\nsplendido\nsportivo\nsposo\nspranga\nsprecare\nspronato\nspruzzo\nspuntino\nsquillo\nsradicare\nsrotolato\nstabile\nstacco\nstaffa\nstagnare\nstampato\nstantio\nstarnuto\nstasera\nstatuto\nstelo\nsteppa\nsterzo\nstiletto\nstima\nstirpe\nstivale\nstizzoso\nstonato\nstorico\nstrappo\nstregato\nstridulo\nstrozzare\nstrutto\nstuccare\nstufo\nstupendo\nsubentro\nsuccoso\nsudore\nsuggerito\nsugo\nsultano\nsuonare\nsuperbo\nsupporto\nsurgelato\nsurrogato\nsussurro\nsutura\nsvagare\nsvedese\nsveglio\nsvelare\nsvenuto\nsvezia\nsviluppo\nsvista\nsvizzera\nsvolta\nsvuotare\ntabacco\ntabulato\ntacciare\ntaciturno\ntale\ntalismano\ntampone\ntannino\ntara\ntardivo\ntargato\ntariffa\ntarpare\ntartaruga\ntasto\ntattico\ntaverna\ntavolata\ntazza\nteca\ntecnico\ntelefono\ntemerario\ntempo\ntemuto\ntendone\ntenero\ntensione\ntentacolo\nteorema\nterme\nterrazzo\nterzetto\ntesi\ntesserato\ntestato\ntetro\ntettoia\ntifare\ntigella\ntimbro\ntinto\ntipico\ntipografo\ntiraggio\ntiro\ntitanio\ntitolo\ntitubante\ntizio\ntizzone\ntoccare\ntollerare\ntolto\ntombola\ntomo\ntonfo\ntonsilla\ntopazio\ntopologia\ntoppa\ntorba\ntornare\ntorrone\ntortora\ntoscano\ntossire\ntostatura\ntotano\ntrabocco\ntrachea\ntrafila\ntragedia\ntralcio\ntramonto\ntransito\ntrapano\ntrarre\ntrasloco\ntrattato\ntrave\ntreccia\ntremolio\ntrespolo\ntributo\ntricheco\ntrifoglio\ntrillo\ntrincea\ntrio\ntristezza\ntriturato\ntrivella\ntromba\ntrono\ntroppo\ntrottola\ntrovare\ntruccato\ntubatura\ntuffato\ntulipano\ntumulto\ntunisia\nturbare\nturchino\ntuta\ntutela\nubicato\nuccello\nuccisore\nudire\nuditivo\nuffa\nufficio\nuguale\nulisse\nultimato\numano\numile\numorismo\nuncinetto\nungere\nungherese\nunicorno\nunificato\nunisono\nunitario\nunte\nuovo\nupupa\nuragano\nurgenza\nurlo\nusanza\nusato\nuscito\nusignolo\nusuraio\nutensile\nutilizzo\nutopia\nvacante\nvaccinato\nvagabondo\nvagliato\nvalanga\nvalgo\nvalico\nvalletta\nvaloroso\nvalutare\nvalvola\nvampata\nvangare\nvanitoso\nvano\nvantaggio\nvanvera\nvapore\nvarano\nvarcato\nvariante\nvasca\nvedetta\nvedova\nveduto\nvegetale\nveicolo\nvelcro\nvelina\nvelluto\nveloce\nvenato\nvendemmia\nvento\nverace\nverbale\nvergogna\nverifica\nvero\nverruca\nverticale\nvescica\nvessillo\nvestale\nveterano\nvetrina\nvetusto\nviandante\nvibrante\nvicenda\nvichingo\nvicinanza\nvidimare\nvigilia\nvigneto\nvigore\nvile\nvillano\nvimini\nvincitore\nviola\nvipera\nvirgola\nvirologo\nvirulento\nviscoso\nvisione\nvispo\nvissuto\nvisura\nvita\nvitello\nvittima\nvivanda\nvivido\nviziare\nvoce\nvoga\nvolatile\nvolere\nvolpe\nvoragine\nvulcano\nzampogna\nzanna\nzappato\nzattera\nzavorra\nzefiro\nzelante\nzelo\nzenzero\nzerbino\nzibetto\nzinco\nzircone\nzitto\nzolla\nzotico\nzucchero\nzufolo\nzulu\nzuppa`.split('\\n');\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9veC9ub2RlX21vZHVsZXMvQHNjdXJlL2JpcDM5L2VzbS93b3JkbGlzdHMvaXRhbGlhbi5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxjaGFuZFxcRG93bmxvYWRzXFxqb2hud3JpY2hraWRpbnRvcml6elxcbm9kZV9tb2R1bGVzXFxveFxcbm9kZV9tb2R1bGVzXFxAc2N1cmVcXGJpcDM5XFxlc21cXHdvcmRsaXN0c1xcaXRhbGlhbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3Qgd29yZGxpc3QgPSBgYWJhY29cbmFiYmFnbGlvXG5hYmJpbmF0b1xuYWJldGVcbmFiaXNzb1xuYWJvbGlyZVxuYWJyYXNpdm9cbmFicm9nYXRvXG5hY2NhZGVyZVxuYWNjZW5ub1xuYWNjdXNhdG9cbmFjZXRvbmVcbmFjaGlsbGVcbmFjaWRvXG5hY3F1YVxuYWNyZVxuYWNyaWxpY29cbmFjcm9iYXRhXG5hY3V0b1xuYWRhZ2lvXG5hZGRlYml0b1xuYWRkb21lXG5hZGVndWF0b1xuYWRlcmlyZVxuYWRpcGVcbmFkb3R0YXJlXG5hZHVsYXJlXG5hZmZhYmlsZVxuYWZmZXR0b1xuYWZmaXNzb1xuYWZmcmFudG9cbmFmb3Jpc21hXG5hZm9zb1xuYWZyaWNhbm9cbmFnYXZlXG5hZ2VudGVcbmFnZXZvbGVcbmFnZ2FuY2lvXG5hZ2lyZVxuYWdpdGFyZVxuYWdvbmlzbW9cbmFncmljb2xvXG5hZ3J1bWV0b1xuYWd1enpvXG5hbGFiYXJkYVxuYWxhdG9cbmFsYmF0cm9cbmFsYmVyYXRvXG5hbGJvXG5hbGJ1bWVcbmFsY2VcbmFsY29saWNvXG5hbGV0dG9uZVxuYWxmYVxuYWxnZWJyYVxuYWxpYW50ZVxuYWxpYmlcbmFsaW1lbnRvXG5hbGxhZ2F0b1xuYWxsZWdyb1xuYWxsaWV2b1xuYWxsb2RvbGFcbmFsbHVzaXZvXG5hbG1lbm9cbmFsb2dlbm9cbmFscGFjYVxuYWxwZXN0cmVcbmFsdGFsZW5hXG5hbHRlcm5vXG5hbHRpY2Npb1xuYWx0cm92ZVxuYWx1bm5vXG5hbHZlb2xvXG5hbHphcmVcbmFtYWxnYW1hXG5hbWFuaXRhXG5hbWFyZW5hXG5hbWJpdG9cbmFtYnJhdG9cbmFtZWJhXG5hbWVyaWNhXG5hbWV0aXN0YVxuYW1pY29cbmFtbWFzc29cbmFtbWVuZGFcbmFtbWlyYXJlXG5hbW1vbml0b1xuYW1vcmVcbmFtcGlvXG5hbXBsaWFyZVxuYW11bGV0b1xuYW5hY2FyZG9cbmFuYWdyYWZlXG5hbmFsaXN0YVxuYW5hcmNoaWFcbmFuYXRyYVxuYW5jYVxuYW5jZWxsYVxuYW5jb3JhXG5hbmRhcmVcbmFuZHJlYVxuYW5lbGxvXG5hbmdlbG9cbmFuZ29sYXJlXG5hbmd1c3RvXG5hbmltYVxuYW5uZWdhcmVcbmFubmlkYXRvXG5hbm5vXG5hbm51bmNpb1xuYW5vbmltb1xuYW50aWNpcG9cbmFuemlcbmFwYXRpY29cbmFwZXJ0dXJhXG5hcG9kZVxuYXBwYXJpcmVcbmFwcGV0aXRvXG5hcHBvZ2dpb1xuYXBwcm9kb1xuYXBwdW50b1xuYXByaWxlXG5hcmFiaWNhXG5hcmFjaGlkZVxuYXJhZ29zdGFcbmFyYWxkaWNhXG5hcmFuY2lvXG5hcmF0dXJhXG5hcmF6em9cbmFyYml0cm9cbmFyY2hpdmlvXG5hcmRpdG9cbmFyZW5pbGVcbmFyZ2VudG9cbmFyZ2luZVxuYXJndXRvXG5hcmlhXG5hcm1vbmlhXG5hcm5lc2VcbmFycmVkYXRvXG5hcnJpbmdhXG5hcnJvc3RvXG5hcnNlbmljb1xuYXJzb1xuYXJ0ZWZpY2VcbmFyemlsbG9cbmFzY2l1dHRvXG5hc2NvbHRvXG5hc2Vwc2lcbmFzZXR0aWNvXG5hc2ZhbHRvXG5hc2lub1xuYXNvbGFcbmFzcGlyYXRvXG5hc3Byb1xuYXNzYWdnaW9cbmFzc2VcbmFzc29sdXRvXG5hc3N1cmRvXG5hc3RhXG5hc3RlbnV0b1xuYXN0aWNlXG5hc3RyYXR0b1xuYXRhdmljb1xuYXRlaXNtb1xuYXRvbWljb1xuYXRvbm9cbmF0dGVzYVxuYXR0aXZhcmVcbmF0dG9ybm9cbmF0dHJpdG9cbmF0dHVhbGVcbmF1c2lsaW9cbmF1c3RyaWFcbmF1dGlzdGFcbmF1dG9ub21vXG5hdXR1bm5vXG5hdmFuemF0b1xuYXZlcmVcbmF2dmVuaXJlXG5hdnZpc29cbmF2dm9sZ2VyZVxuYXppb25lXG5hem90b1xuYXp6aW1vXG5henp1cnJvXG5iYWJlbGVcbmJhY2Nhbm9cbmJhY2lub1xuYmFjb1xuYmFkZXNzYVxuYmFkaWxhdGFcbmJhZ25hdG9cbmJhaXRhXG5iYWxjb25lXG5iYWxkb1xuYmFsZW5hXG5iYWxsYXRhXG5iYWx6YW5vXG5iYW1iaW5vXG5iYW5kaXJlXG5iYXJhb25kYVxuYmFyYmFyb1xuYmFyY2FcbmJhcml0b25vXG5iYXJsdW1lXG5iYXJvY2NvXG5iYXNpbGljb1xuYmFzc29cbmJhdG9zdGFcbmJhdHR1dG9cbmJhdWxlXG5iYXZhXG5iYXZvc2FcbmJlY2NvXG5iZWZmYVxuYmVsZ2lvXG5iZWx2YVxuYmVuZGFcbmJlbmV2b2xlXG5iZW5pZ25vXG5iZW56aW5hXG5iZXJlXG5iZXJsaW5hXG5iZXRhXG5iaWJpdGFcbmJpY2lcbmJpZG9uZVxuYmlmaWRvXG5iaWdhXG5iaWxhbmNpYVxuYmltYm9cbmJpbm9jb2xvXG5iaW9sb2dvXG5iaXBlZGVcbmJpcG9sYXJlXG5iaXJiYW50ZVxuYmlycmFcbmJpc2NvdHRvXG5iaXNlc3RvXG5iaXNub25ub1xuYmlzb250ZVxuYmlzdHVyaVxuYml6emFycm9cbmJsYW5kb1xuYmxhdHRhXG5ib2xsaXRvXG5ib25pZmljb1xuYm9yZG9cbmJvc2NvXG5ib3Rhbmljb1xuYm90dGlub1xuYm96em9sb1xuYnJhY2Npb1xuYnJhZGlwb1xuYnJhbWFcbmJyYW5jYVxuYnJhdnVyYVxuYnJldGVsbGFcbmJyZXZldHRvXG5icmV6emFcbmJyaWdsaWFcbmJyaWxsYW50ZVxuYnJpbmRhcmVcbmJyb2Njb2xvXG5icm9kb1xuYnJvbnppbmFcbmJydWxsb1xuYnJ1bm9cbmJ1YmJvbmVcbmJ1Y2FcbmJ1ZGlub1xuYnVmZm9uZVxuYnVpb1xuYnVsYm9cbmJ1b25vXG5idXJsb25lXG5idXJyYXNjYVxuYnVzc29sYVxuYnVzdGFcbmNhZGV0dG9cbmNhZHVjb1xuY2FsYW1hcm9cbmNhbGNvbG9cbmNhbGVzc2VcbmNhbGlicm9cbmNhbG1vXG5jYWxvcmlhXG5jYW1idXNhXG5jYW1lcmF0YVxuY2FtaWNpYVxuY2FtbWlub1xuY2Ftb2xhXG5jYW1wYWxlXG5jYW5hcGFcbmNhbmRlbGFcbmNhbmVcbmNhbmlub1xuY2Fub3R0b1xuY2FudGluYVxuY2FwYWNlXG5jYXBlbGxvXG5jYXBpdG9sb1xuY2Fwb2dpcm9cbmNhcHBlcm9cbmNhcHJhXG5jYXBzdWxhXG5jYXJhcGFjZVxuY2FyY2Fzc2FcbmNhcmRvXG5jYXJpc21hXG5jYXJvdmFuYVxuY2FycmV0dG9cbmNhcnRvbGluYVxuY2FzYWNjaW9cbmNhc2NhdGFcbmNhc2VybWFcbmNhc29cbmNhc3NvbmVcbmNhc3RlbGxvXG5jYXN1YWxlXG5jYXRhc3RhXG5jYXRlbmFcbmNhdHJhbWVcbmNhdXRvXG5jYXZpbGxvXG5jZWRpYmlsZVxuY2VkcmF0YVxuY2VmYWxvXG5jZWxlYnJlXG5jZWxsdWxhcmVcbmNlbmFcbmNlbm9uZVxuY2VudGVzaW1vXG5jZXJhbWljYVxuY2VyY2FyZVxuY2VydG9cbmNlcnVtZVxuY2VydmVsbG9cbmNlc29pYVxuY2VzcG9cbmNldG9cbmNoZWxhXG5jaGlhcm9cbmNoaWNjYVxuY2hpZWRlcmVcbmNoaW1lcmFcbmNoaW5hXG5jaGlydXJnb1xuY2hpdGFycmFcbmNpYW9cbmNpY2xpc21vXG5jaWZyYXJlXG5jaWdub1xuY2lsaW5kcm9cbmNpb3R0b2xvXG5jaXJjYVxuY2lycm9zaVxuY2l0cmljb1xuY2l0dGFkaW5vXG5jaXVmZm9cbmNpdmV0dGFcbmNpdmlsZVxuY2xhc3NpY29cbmNsaW5pY2FcbmNsb3JvXG5jb2Njb1xuY29kYXJkb1xuY29kaWNlXG5jb2VyZW50ZVxuY29nbm9tZVxuY29sbGFyZVxuY29sbWF0b1xuY29sb3JlXG5jb2xwb3NvXG5jb2x0aXZhdG9cbmNvbHphXG5jb21hXG5jb21ldGFcbmNvbW1hbmRvXG5jb21vZG9cbmNvbXB1dGVyXG5jb211bmVcbmNvbmNpc29cbmNvbmR1cnJlXG5jb25mZXJtYVxuY29uZ2VsYXJlXG5jb25pdWdlXG5jb25uZXNzb1xuY29ub3NjZXJlXG5jb25zdW1vXG5jb250aW51b1xuY29udmVnbm9cbmNvcGVydG9cbmNvcGlvbmVcbmNvcHBpYVxuY29wcmljYXBvXG5jb3JhenphXG5jb3JkYXRhXG5jb3JpY2F0b1xuY29ybmljZVxuY29yb2xsYVxuY29ycG9cbmNvcnJlZG9cbmNvcnNpYVxuY29ydGVzZVxuY29zbWljb1xuY29zdGFudGVcbmNvdHR1cmFcbmNvdmF0b1xuY3JhdGVyZVxuY3JhdmF0dGFcbmNyZWF0b1xuY3JlZGVyZVxuY3JlbW9zb1xuY3Jlc2NpdGFcbmNyZXRhXG5jcmljZXRvXG5jcmluYWxlXG5jcmlzaVxuY3JpdGljb1xuY3JvY2VcbmNyb25hY2FcbmNyb3N0YXRhXG5jcnVjaWFsZVxuY3J1c2NhXG5jdWNpcmVcbmN1Y3Vsb1xuY3VnaW5vXG5jdWxsYXRvXG5jdXBvbGFcbmN1cmF0b3JlXG5jdXJzb3JlXG5jdXJ2b1xuY3VzY2lub1xuY3VzdG9kZVxuZGFkb1xuZGFpbm9cbmRhbG1hdGFcbmRhbWVyaW5vXG5kYW5pZWxhXG5kYW5ub3NvXG5kYW56YXJlXG5kYXRhdG9cbmRhdmFudGlcbmRhdnZlcm9cbmRlYnV0dG9cbmRlY2VubmlvXG5kZWNpc29cbmRlY2xpbm9cbmRlY29sbG9cbmRlY3JldG9cbmRlZGljYXRvXG5kZWZpbml0b1xuZGVmb3JtZVxuZGVnbm9cbmRlbGVnYXJlXG5kZWxmaW5vXG5kZWxpcmlvXG5kZWx0YVxuZGVtZW56YVxuZGVub3RhdG9cbmRlbnRyb1xuZGVwb3NpdG9cbmRlcmFwYXRhXG5kZXJpdmFyZVxuZGVyb2dhXG5kZXNjcml0dG9cbmRlc2VydG9cbmRlc2lkZXJpb1xuZGVzdW1lcmVcbmRldGVyc2l2b1xuZGV2b3RvXG5kaWFtZXRyb1xuZGljZW1icmVcbmRpZWRyb1xuZGlmZXNvXG5kaWZmdXNvXG5kaWdlcmlyZVxuZGlnaXRhbGVcbmRpbHV2aW9cbmRpbmFtaWNvXG5kaW5uYW56aVxuZGlwaW50b1xuZGlwbG9tYVxuZGlwb2xvXG5kaXJhZGFyZVxuZGlyZVxuZGlyb3R0b1xuZGlydXBvXG5kaXNhZ2lvXG5kaXNjcmV0b1xuZGlzZmFyZVxuZGlzZ2Vsb1xuZGlzcG9zdG9cbmRpc3RhbnphXG5kaXN1bWFub1xuZGl0b1xuZGl2YW5vXG5kaXZlbHRvXG5kaXZpZGVyZVxuZGl2b3JhdG9cbmRvYmxvbmVcbmRvY2VudGVcbmRvZ2FuYWxlXG5kb2dtYVxuZG9sY2VcbmRvbWF0b1xuZG9tZW5pY2FcbmRvbWluYXJlXG5kb25kb2xvXG5kb25vXG5kb3JtaXJlXG5kb3RlXG5kb3R0b3JlXG5kb3Z1dG9cbmRvenppbmFcbmRyYWdvXG5kcnVpZG9cbmR1YmJpb1xuZHViaXRhcmVcbmR1Y2FsZVxuZHVuYVxuZHVvbW9cbmR1cGxpY2VcbmR1cmF0dXJvXG5lYmFub1xuZWNjZXNzb1xuZWNjb1xuZWNsaXNzaVxuZWNvbm9taWFcbmVkZXJhXG5lZGljb2xhXG5lZGlsZVxuZWRpdG9yaWFcbmVkdWNhcmVcbmVnZW1vbmlhXG5lZ2xpXG5lZ29pc21vXG5lZ3JlZ2lvXG5lbGFib3JhdG9cbmVsYXJnaXJlXG5lbGVnYW50ZVxuZWxlbmNhdG9cbmVsZXR0b1xuZWxldmFyZVxuZWxmaWNvXG5lbGljYVxuZWxtb1xuZWxzYVxuZWx1c29cbmVtYW5hdG9cbmVtYmxlbWFcbmVtZXNzb1xuZW1pcm9cbmVtb3Rpdm9cbmVtb3ppb25lXG5lbXBpcmljb1xuZW11bG9cbmVuZGVtaWNvXG5lbmR1cm9cbmVuZXJnaWFcbmVuZmFzaVxuZW5vdGVjYVxuZW50cmFyZVxuZW56aW1hXG5lcGF0aXRlXG5lcGlsb2dvXG5lcGlzb2Rpb1xuZXBvY2FsZVxuZXBwdXJlXG5lcXVhdG9yZVxuZXJhcmlvXG5lcmJhXG5lcmJvc29cbmVyZWRlXG5lcmVtaXRhXG5lcmlnZXJlXG5lcm1ldGljb1xuZXJvZVxuZXJvc2l2b1xuZXJyYW50ZVxuZXNhZ29ub1xuZXNhbWVcbmVzYW5pbWVcbmVzYXVkaXJlXG5lc2NhXG5lc2VtcGlvXG5lc2VyY2l0b1xuZXNpYml0b1xuZXNpZ2VudGVcbmVzaXN0ZXJlXG5lc2l0b1xuZXNvZmFnb1xuZXNvcnRhdG9cbmVzb3NvXG5lc3BhbnNvXG5lc3ByZXNzb1xuZXNzZW56YVxuZXNzb1xuZXN0ZXNvXG5lc3RpbWFyZVxuZXN0b25pYVxuZXN0cm9zb1xuZXN1bHRhcmVcbmV0aWxpY29cbmV0bmljb1xuZXRydXNjb1xuZXR0b1xuZXVjbGlkZW9cbmV1cm9wYVxuZXZhc29cbmV2aWRlbnphXG5ldml0YXRvXG5ldm9sdXRvXG5ldnZpdmFcbmZhYmJyaWNhXG5mYWNjZW5kYVxuZmFjaGlyb1xuZmFsY29cbmZhbWlnbGlhXG5mYW5hbGVcbmZhbmZhcmFcbmZhbmdvXG5mYW50YXNtYVxuZmFyZVxuZmFyZmFsbGFcbmZhcmlub3NvXG5mYXJtYWNvXG5mYXNjaWFcbmZhc3Rvc29cbmZhc3VsbG9cbmZhdGljYXJlXG5mYXRvXG5mYXZvbG9zb1xuZmViYnJlXG5mZWNvbGFcbmZlZGVcbmZlZ2F0b1xuZmVscGFcbmZlbHRyb1xuZmVtbWluYVxuZmVuZGVyZVxuZmVub21lbm9cbmZlcm1lbnRvXG5mZXJyb1xuZmVydGlsZVxuZmVzc3VyYVxuZmVzdGl2b1xuZmV0dGFcbmZldWRvXG5maWFiYVxuZmlkdWNpYVxuZmlmYVxuZmlndXJhdG9cbmZpbG9cbmZpbmFuemFcbmZpbmVzdHJhXG5maW5pcmVcbmZpb3JlXG5maXNjYWxlXG5maXNpY29cbmZpdW1lXG5mbGFjb25lXG5mbGFtZW5jb1xuZmxlYm9cbmZsZW1tYVxuZmxvcmlkb1xuZmx1ZW50ZVxuZmx1b3JvXG5mb2JpY29cbmZvY2FjY2lhXG5mb2Nvc29cbmZvZGVyYXRvXG5mb2dsaW9cbmZvbGF0YVxuZm9sY2xvcmVcbmZvbGdvcmVcbmZvbmRlbnRlXG5mb25ldGljb1xuZm9uaWFcbmZvbnRhbmFcbmZvcmJpdG9cbmZvcmNoZXR0YVxuZm9yZXN0YVxuZm9ybWljYVxuZm9ybmFpb1xuZm9yb1xuZm9ydGV6emFcbmZvcnphcmVcbmZvc2ZhdG9cbmZvc3NvXG5mcmFjYXNzb1xuZnJhbmFcbmZyYXNzaW5vXG5mcmF0ZWxsb1xuZnJlY2NldHRhXG5mcmVuYXRhXG5mcmVzY29cbmZyaWdvXG5mcm9sbGlub1xuZnJvbmRlXG5mcnVnYWxlXG5mcnV0dGFcbmZ1Y2lsYXRhXG5mdWNzaWFcbmZ1Z2dlbnRlXG5mdWxtaW5lXG5mdWx2b1xuZnVtYW50ZVxuZnVtZXR0b1xuZnVtb3NvXG5mdW5lXG5mdW56aW9uZVxuZnVvY29cbmZ1cmJvXG5mdXJnb25lXG5mdXJvcmVcbmZ1c29cbmZ1dGlsZVxuZ2FiYmlhbm9cbmdhZmZlXG5nYWxhdGVvXG5nYWxsaW5hXG5nYWxvcHBvXG5nYW1iZXJvXG5nYW1tYVxuZ2FyYW56aWFcbmdhcmJvXG5nYXJvZmFub1xuZ2Fyem9uZVxuZ2FzZG90dG9cbmdhc29saW9cbmdhc3RyaWNvXG5nYXR0b1xuZ2F1ZGlvXG5nYXplYm9cbmdhenplbGxhXG5nZWNvXG5nZWxhdGluYVxuZ2Vsc29cbmdlbWVsbG9cbmdlbW1hdG9cbmdlbmVcbmdlbml0b3JlXG5nZW5uYWlvXG5nZW5vdGlwb1xuZ2VyZ29cbmdoZXBhcmRvXG5naGlhY2Npb1xuZ2hpc2FcbmdpYWxsb1xuZ2lsZGFcbmdpbmVwcm9cbmdpb2NhcmVcbmdpb2llbGxvXG5naW9ybm9cbmdpb3ZlXG5naXJhdG9cbmdpcm9uZVxuZ2l0dGF0YVxuZ2l1ZGl6aW9cbmdpdXJhdG9cbmdpdXN0b1xuZ2xvYnVsb1xuZ2x1dGluZVxuZ25vbW9cbmdvYmJhXG5nb2xmXG5nb21pdG9cbmdvbW1vbmVcbmdvbmZpb1xuZ29ubmFcbmdvdmVybm9cbmdyYWNpbGVcbmdyYWRvXG5ncmFmaWNvXG5ncmFtbW9cbmdyYW5kZVxuZ3JhdHRhcmVcbmdyYXZvc29cbmdyYXppYVxuZ3JlY2FcbmdyZWdnZVxuZ3JpZm9uZVxuZ3JpZ2lvXG5ncmluemFcbmdyb3R0YVxuZ3J1cHBvXG5ndWFkYWdub1xuZ3VhaW9cbmd1YW50b1xuZ3VhcmRhcmVcbmd1Zm9cbmd1aWRhcmVcbmliZXJuYXRvXG5pY29uYVxuaWRlbnRpY29cbmlkaWxsaW9cbmlkb2xvXG5pZHJhXG5pZHJpY29cbmlkcm9nZW5vXG5pZ2llbmVcbmlnbmFyb1xuaWdub3JhdG9cbmlsYXJlXG5pbGxlc29cbmlsbG9naWNvXG5pbGx1ZGVyZVxuaW1iYWxsb1xuaW1iZXZ1dG9cbmltYm9jY29cbmltYnV0b1xuaW1tYW5lXG5pbW1lcnNvXG5pbW1vbGF0b1xuaW1wYWNjb1xuaW1wZXRvXG5pbXBpZWdvXG5pbXBvcnRvXG5pbXByb250YVxuaW5hbGFyZVxuaW5hcmNhcmVcbmluYXR0aXZvXG5pbmNhbnRvXG5pbmNlbmRpb1xuaW5jaGlub1xuaW5jaXNpdm9cbmluY2x1c29cbmluY29udHJvXG5pbmNyb2Npb1xuaW5jdWJvXG5pbmRhZ2luZVxuaW5kaWFcbmluZG9sZVxuaW5lZGl0b1xuaW5mYXR0aVxuaW5maWxhcmVcbmluZmxpdHRvXG5pbmdhZ2dpb1xuaW5nZWdub1xuaW5nbGVzZVxuaW5nb3Jkb1xuaW5ncm9zc29cbmlubmVzY29cbmlub2RvcmVcbmlub2x0cmFyZVxuaW5vbmRhdG9cbmluc2Fub1xuaW5zZXR0b1xuaW5zaWVtZVxuaW5zb25uaWFcbmluc3VsaW5hXG5pbnRhc2F0b1xuaW50ZXJvXG5pbnRvbmFjb1xuaW50dWl0b1xuaW51bWlkaXJlXG5pbnZhbGlkb1xuaW52ZWNlXG5pbnZpdG9cbmlwZXJib2xlXG5pcG5vdGljb1xuaXBvdGVzaVxuaXBwaWNhXG5pcmlkZVxuaXJsYW5kYVxuaXJvbmljb1xuaXJyaWdhdG9cbmlycm9yYXJlXG5pc29sYXRvXG5pc290b3BvXG5pc3Rlcmljb1xuaXN0aXR1dG9cbmlzdHJpY2Vcbml0YWxpYVxuaXRlcmFyZVxubGFiYnJvXG5sYWJpcmludG9cbmxhY2NhXG5sYWNlcmF0b1xubGFjcmltYVxubGFjdW5hXG5sYWRkb3ZlXG5sYWdvXG5sYW1wb1xubGFuY2V0dGFcbmxhbnRlcm5hXG5sYXJkb3NvXG5sYXJnYVxubGFyaW5nZVxubGFzdHJhXG5sYXRlbnphXG5sYXRpbm9cbmxhdHR1Z2FcbmxhdmFnbmFcbmxhdm9yb1xubGVnYWxlXG5sZWdnZXJvXG5sZW1ib1xubGVudGV6emFcbmxlbnphXG5sZW9uZVxubGVwcmVcbmxlc2l2b1xubGVzc2F0b1xubGVzdG9cbmxldHRlcmFsZVxubGV2YVxubGV2aWdhdG9cbmxpYmVyb1xubGlkb1xubGlldml0b1xubGlsbGFcbmxpbWF0dXJhXG5saW1pdGFyZVxubGltcGlkb1xubGluZWFyZVxubGluZ3VhXG5saXF1aWRvXG5saXJhXG5saXJpY2Fcbmxpc2NhXG5saXRlXG5saXRpZ2lvXG5saXZyZWFcbmxvY2FuZGFcbmxvZGVcbmxvZ2ljYVxubG9tYmFyZVxubG9uZHJhXG5sb25nZXZvXG5sb3F1YWNlXG5sb3JlbnpvXG5sb3RvXG5sb3R0ZXJpYVxubHVjZVxubHVjaWRhdG9cbmx1bWFjYVxubHVtaW5vc29cbmx1bmdvXG5sdXBvXG5sdXBwb2xvXG5sdXNpbmdhXG5sdXNzb1xubHV0dG9cbm1hY2Ficm9cbm1hY2NoaW5hXG5tYWNlcm9cbm1hY2luYXRvXG5tYWRhbWFcbm1hZ2ljb1xubWFnbGlhXG5tYWduZXRlXG5tYWdyb1xubWFpb2xpY2Fcbm1hbGFmZWRlXG5tYWxncmFkb1xubWFsaW50ZXNvXG5tYWxzYW5vXG5tYWx0b1xubWFsdW1vcmVcbm1hbmFcbm1hbmNpYVxubWFuZG9ybGFcbm1hbmdpYXJlXG5tYW5pZmVzdG9cbm1hbm5hcm9cbm1hbm92cmFcbm1hbnNhcmRhXG5tYW50aWRlXG5tYW51YnJpb1xubWFwcGFcbm1hcmF0b25hXG5tYXJjaXJlXG5tYXJldHRhXG5tYXJtb1xubWFyc3VwaW9cbm1hc2NoZXJhXG5tYXNzYWlhXG5tYXN0aW5vXG5tYXRlcmFzc29cbm1hdHJpY29sYVxubWF0dG9uZVxubWF0dXJvXG5tYXp1cmNhXG5tZWFuZHJvXG5tZWNjYW5pY29cbm1lY2VuYXRlXG5tZWRlc2ltb1xubWVkaXRhcmVcbm1lZ2Fcbm1lbGFzc2Fcbm1lbGlzXG5tZWxvZGlhXG5tZW5pbmdlXG5tZW5vXG5tZW5zb2xhXG5tZXJjdXJpb1xubWVyZW5kYVxubWVybG9cbm1lc2NoaW5vXG5tZXNlXG5tZXNzZXJlXG5tZXN0b2xvXG5tZXRhbGxvXG5tZXRvZG9cbm1ldHRlcmVcbm1pYWdvbGFyZVxubWljYVxubWljZWxpb1xubWljaGVsZVxubWljcm9ib1xubWlkb2xsb1xubWllbGVcbm1pZ2xpb3JlXG5taWxhbm9cbm1pbGl0ZVxubWltb3NhXG5taW5lcmFsZVxubWluaVxubWlub3JlXG5taXJpbm9cbm1pcnRpbGxvXG5taXNjZWxhXG5taXNzaXZhXG5taXN0b1xubWlzdXJhcmVcbm1pdGV6emFcbm1pdGlnYXJlXG5taXRyYVxubWl0dGVudGVcbm1uZW1vbmljb1xubW9kZWxsb1xubW9kaWZpY2Fcbm1vZHVsb1xubW9nYW5vXG5tb2dpb1xubW9sZVxubW9sb3Nzb1xubW9uYXN0ZXJvXG5tb25jb1xubW9uZGluYVxubW9uZXRhcmlvXG5tb25pbGVcbm1vbm90b25vXG5tb25zb25lXG5tb250YXRvXG5tb252aXNvXG5tb3JhXG5tb3JkZXJlXG5tb3JzaWNhdG9cbm1vc3Ryb1xubW90aXZhdG9cbm1vdG9zZWdhXG5tb3R0b1xubW92ZW56YVxubW92aW1lbnRvXG5tb3p6b1xubXVjY2Fcbm11Y29zYVxubXVmZmFcbm11Z2hldHRvXG5tdWduYWlvXG5tdWxhdHRvXG5tdWxpbmVsbG9cbm11bHRpcGxvXG5tdW1taWFcbm11bnRvXG5tdW92ZXJlXG5tdXJhbGVcbm11c2Fcbm11c2NvbG9cbm11c2ljYVxubXV0ZXZvbGVcbm11dG9cbm5hYmFiYm9cbm5hZnRhXG5uYW5vbWV0cm9cbm5hcmNpc29cbm5hcmljZVxubmFycmF0b1xubmFzY2VyZVxubmFzdHJhcmVcbm5hdHVyYWxlXG5uYXV0aWNhXG5uYXZpZ2xpb1xubmVidWxvc2Fcbm5lY3Jvc2lcbm5lZ2F0aXZvXG5uZWdvemlvXG5uZW1tZW5vXG5uZW9maXRhXG5uZXJldHRvXG5uZXJ2b1xubmVzc3Vub1xubmV0dHVub1xubmV1dHJhbGVcbm5ldmVcbm5ldnJvdGljb1xubmljY2hpYVxubmluZmFcbm5pdGlkb1xubm9iaWxlXG5ub2Npdm9cbm5vZG9cbm5vbWVcbm5vbWluYVxubm9yZGljb1xubm9ybWFsZVxubm9ydmVnZXNlXG5ub3N0cmFub1xubm90YXJlXG5ub3RpemlhXG5ub3R0dXJub1xubm92ZWxsYVxubnVjbGVvXG5udWxsYVxubnVtZXJvXG5udW92b1xubnV0cmlyZVxubnV2b2xhXG5udXppYWxlXG5vYXNpXG5vYmJlZGlyZVxub2JibGlnb1xub2JlbGlzY29cbm9ibGlvXG5vYm9sb1xub2Jzb2xldG9cbm9jY2FzaW9uZVxub2NjaGlvXG5vY2NpZGVudGVcbm9jY29ycmVyZVxub2NjdWx0YXJlXG5vY3JhXG5vY3VsYXRvXG5vZGllcm5vXG5vZG9yYXJlXG5vZmZlcnRhXG5vZmZyaXJlXG5vZmZ1c2NhdG9cbm9nZ2V0dG9cbm9nZ2lcbm9nbnVub1xub2xhbmRlc2Vcbm9sZmF0dG9cbm9saWF0b1xub2xpdmFcbm9sb2dyYW1tYVxub2x0cmVcbm9tYWdnaW9cbm9tYmVsaWNvXG5vbWJyYVxub21lZ2Fcbm9taXNzaW9uZVxub25kb3NvXG5vbmVyZVxub25pY2Vcbm9ubml2b3JvXG5vbm9yZXZvbGVcbm9udGFcbm9wZXJhdG9cbm9waW5pb25lXG5vcHBvc3RvXG5vcmFjb2xvXG5vcmFmb1xub3JkaW5lXG5vcmVjY2hpbm9cbm9yZWZpY2Vcbm9yZmFub1xub3JnYW5pY29cbm9yaWdpbmVcbm9yaXp6b250ZVxub3JtYVxub3JtZWdnaW9cbm9ybmF0aXZvXG5vcm9sb2dpb1xub3JyZW5kb1xub3JyaWJpbGVcbm9ydGVuc2lhXG5vcnRpY2Fcbm9yemF0YVxub3J6b1xub3NhcmVcbm9zY3VyYXJlXG5vc21vc2lcbm9zcGVkYWxlXG5vc3BpdGVcbm9zc2Fcbm9zc2lkYXJlXG5vc3RhY29sb1xub3N0ZVxub3RpdGVcbm90cmVcbm90dGFnb25vXG5vdHRpbW9cbm90dG9icmVcbm92YWxlXG5vdmVzdFxub3Zpbm9cbm92aXBhcm9cbm92b2NpdG9cbm92dW5xdWVcbm92dmlhcmVcbm96aW9cbnBhY2NoZXR0b1xucGFjZVxucGFjaWZpY29cbnBhZGVsbGFcbnBhZHJvbmVcbnBhZXNlXG5wYWdhXG5wYWdpbmFcbnBhbGF6emluYVxucGFsZXNhcmVcbnBhbGxpZG9cbnBhbG9cbnBhbHVkZVxucGFuZG9yb1xucGFubmVsbG9cbnBhb2xvXG5wYW9uYXp6b1xucGFwcmljYVxucGFyYWJvbGFcbnBhcmNlbGxhXG5wYXJlcmVcbnBhcmdvbG9cbnBhcmlcbnBhcmxhdG9cbnBhcm9sYVxucGFydGlyZVxucGFydmVuemFcbnBhcnppYWxlXG5wYXNzaXZvXG5wYXN0aWNjYVxucGF0YWNjYVxucGF0b2xvZ2lhXG5wYXR0dW1lXG5wYXZvbmVcbnBlY2NhdG9cbnBlZGFsYXJlXG5wZWRvbmFsZVxucGVnZ2lvXG5wZWxvc29cbnBlbmFyZVxucGVuZGljZVxucGVuaXNvbGFcbnBlbm51dG9cbnBlbm9tYnJhXG5wZW5zYXJlXG5wZW50b2xhXG5wZXBlXG5wZXBpdGFcbnBlcmJlbmVcbnBlcmNvcnNvXG5wZXJkb25hdG9cbnBlcmZvcmFyZVxucGVyZ2FtZW5hXG5wZXJpb2RvXG5wZXJtZXNzb1xucGVybm9cbnBlcnBsZXNzb1xucGVyc3Vhc29cbnBlcnR1Z2lvXG5wZXJ2YXNvXG5wZXNhdG9yZVxucGVzaXN0YVxucGVzb1xucGVzdGlmZXJvXG5wZXRhbG9cbnBldHRpbmVcbnBldHVsYW50ZVxucGV6em9cbnBpYWNlcmVcbnBpYW50YVxucGlhdHRpbm9cbnBpY2Npbm9cbnBpY296emFcbnBpZWdhXG5waWV0cmFcbnBpZmZlcm9cbnBpZ2lhbWFcbnBpZ29saW9cbnBpZ3JvXG5waWxhXG5waWxpZmVyb1xucGlsbG9sYVxucGlsb3RhXG5waW1wYW50ZVxucGluZXRhXG5waW5uYVxucGlub2xvXG5waW9nZ2lhXG5waW9tYm9cbnBpcmFtaWRlXG5waXJldGljb1xucGlyaXRlXG5waXJvbGlzaVxucGl0b25lXG5waXp6aWNvXG5wbGFjZWJvXG5wbGFuYXJlXG5wbGFzbWFcbnBsYXRhbm9cbnBsZW5hcmlvXG5wb2NoZXp6YVxucG9kZXJvc29cbnBvZGlzbW9cbnBvZXNpYVxucG9nZ2lhcmVcbnBvbGVudGFcbnBvbGlnb25vXG5wb2xsaWNlXG5wb2xtb25pdGVcbnBvbHBldHRhXG5wb2xzb1xucG9sdHJvbmFcbnBvbHZlcmVcbnBvbWljZVxucG9tb2Rvcm9cbnBvbnRlXG5wb3BvbG9zb1xucG9yZmlkb1xucG9yb3NvXG5wb3Jwb3JhXG5wb3JyZVxucG9ydGF0YVxucG9zYVxucG9zaXRpdm9cbnBvc3Nlc3NvXG5wb3N0dWxhdG9cbnBvdGFzc2lvXG5wb3RlcmVcbnByYW56b1xucHJhc3NpXG5wcmF0aWNhXG5wcmVjbHVzb1xucHJlZGljYVxucHJlZmlzc29cbnByZWdpYXRvXG5wcmVsaWV2b1xucHJlbWVyZVxucHJlbm90YXJlXG5wcmVwYXJhdG9cbnByZXNlbnphXG5wcmV0ZXN0b1xucHJldmFsc29cbnByaW1hXG5wcmluY2lwZVxucHJpdmF0b1xucHJvYmxlbWFcbnByb2N1cmFcbnByb2R1cnJlXG5wcm9mdW1vXG5wcm9nZXR0b1xucHJvbHVuZ2FcbnByb21lc3NhXG5wcm9ub21lXG5wcm9wb3N0YVxucHJvcm9nYVxucHJvdGVzb1xucHJvdmFcbnBydWRlbnRlXG5wcnVnbmFcbnBydXJpdG9cbnBzaWNoZVxucHViYmxpY29cbnB1ZGljYVxucHVnaWxhdG9cbnB1Z25vXG5wdWxjZVxucHVsaXRvXG5wdWxzYW50ZVxucHVudGFyZVxucHVwYXp6b1xucHVwaWxsYVxucHVyb1xucXVhZHJvXG5xdWFsY29zYVxucXVhc2lcbnF1ZXJlbGFcbnF1b3RhXG5yYWNjb2x0b1xucmFkZG9wcGlvXG5yYWRpY2FsZVxucmFkdW5hdG9cbnJhZmZpY2FcbnJhZ2F6em9cbnJhZ2lvbmVcbnJhZ25vXG5yYW1hcnJvXG5yYW1pbmdvXG5yYW1vXG5yYW5kYWdpb1xucmFudG9sYXJlXG5yYXBhdG9cbnJhcGluYVxucmFwcHJlc29cbnJhc2F0dXJhXG5yYXNjaGlhdG9cbnJhc2VudGVcbnJhc3NlZ25hXG5yYXN0cmVsbG9cbnJhdGFcbnJhdnZlZHV0b1xucmVhbGVcbnJlY2VwaXJlXG5yZWNpbnRvXG5yZWNsdXRhXG5yZWNvbmRpdG9cbnJlY3VwZXJvXG5yZWRkaXRvXG5yZWRpbWVyZVxucmVnYWxhdG9cbnJlZ2lzdHJvXG5yZWdvbGFcbnJlZ3Jlc3NvXG5yZWxhemlvbmVcbnJlbWFyZVxucmVtb3RvXG5yZW5uYVxucmVwbGljYVxucmVwcmltZXJlXG5yZXB1dGFyZVxucmVzYVxucmVzaWRlbnRlXG5yZXNwb25zb1xucmVzdGF1cm9cbnJldGVcbnJldGluYVxucmV0b3JpY2FcbnJldHRpZmljYVxucmV2b2NhdG9cbnJpYXNzdW50b1xucmliYWRpcmVcbnJpYmVsbGVcbnJpYnJlenpvXG5yaWNhcmljYVxucmljY29cbnJpY2V2ZXJlXG5yaWNpY2xhdG9cbnJpY29yZG9cbnJpY3JlZHV0b1xucmlkaWNvbG9cbnJpZHVycmVcbnJpZmFzYXJlXG5yaWZsZXNzb1xucmlmb3JtYVxucmlmdWdpb1xucmlnYXJlXG5yaWdldHRhdG9cbnJpZ2hlbGxvXG5yaWxhc3NhdG9cbnJpbGV2YXRvXG5yaW1hbmVyZVxucmltYmFsem9cbnJpbWVkaW9cbnJpbW9yY2hpb1xucmluYXNjaXRhXG5yaW5jYXJvXG5yaW5mb3J6b1xucmlubm92b1xucmlub21hdG9cbnJpbnNhdml0b1xucmludG9jY29cbnJpbnVuY2lhXG5yaW52ZW5pcmVcbnJpcGFyYXRvXG5yaXBldHV0b1xucmlwaWVub1xucmlwb3J0YXJlXG5yaXByZXNhXG5yaXB1bGlyZVxucmlzYXRhXG5yaXNjaGlvXG5yaXNlcnZhXG5yaXNpYmlsZVxucmlzb1xucmlzcGV0dG9cbnJpc3Rvcm9cbnJpc3VsdGF0b1xucmlzdm9sdG9cbnJpdGFyZG9cbnJpdGVnbm9cbnJpdG1pY29cbnJpdHJvdm9cbnJpdW5pb25lXG5yaXZhXG5yaXZlcnNvXG5yaXZpbmNpdGFcbnJpdm9sdG9cbnJpem9tYVxucm9iYVxucm9ib3RpY29cbnJvYnVzdG9cbnJvY2NpYVxucm9jb1xucm9kYWdnaW9cbnJvZGVyZVxucm9kaXRvcmVcbnJvZ2l0b1xucm9sbGlvXG5yb21hbnRpY29cbnJvbXBlcmVcbnJvbnppb1xucm9zb2xhcmVcbnJvc3BvXG5yb3RhbnRlXG5yb3RvbmRvXG5yb3R1bGFcbnJvdmVzY2lvXG5ydWJpenpvXG5ydWJyaWNhXG5ydWdhXG5ydWxsaW5vXG5ydW1pbmVcbnJ1bW9yb3NvXG5ydW9sb1xucnVwZVxucnVzc2FyZVxucnVzdGljb1xuc2FiYXRvXG5zYWJiaWFyZVxuc2Fib3RhdG9cbnNhZ29tYVxuc2FsYXNzb1xuc2FsZGF0dXJhXG5zYWxnZW1tYVxuc2FsaXZhcmVcbnNhbG1vbmVcbnNhbG9uZVxuc2FsdGFyZVxuc2FsdXRvXG5zYWx2b1xuc2FwZXJlXG5zYXBpZG9cbnNhcG9yaXRvXG5zYXJhY2Vub1xuc2FyY2FzbW9cbnNhcnRvXG5zYXNzb3NvXG5zYXRlbGxpdGVcbnNhdGlyYVxuc2F0b2xsb1xuc2F0dXJub1xuc2F2YW5hXG5zYXZpb1xuc2F6aWF0b1xuc2JhZGlnbGlvXG5zYmFsem9cbnNiYW5jYXRvXG5zYmFycmFcbnNiYXR0ZXJlXG5zYmF2YXJlXG5zYmVuZGFyZVxuc2JpcmNpYXJlXG5zYmxvY2NhdG9cbnNib2NjaWF0b1xuc2JyaW5hcmVcbnNicnVmZm9uZVxuc2J1ZmZhcmVcbnNjYWJyb3NvXG5zY2FkZW56YVxuc2NhbGFcbnNjYW1iaWFyZVxuc2NhbmRhbG9cbnNjYXBvbGFcbnNjYXJzb1xuc2NhdGVuYXJlXG5zY2F2YXRvXG5zY2VsdG9cbnNjZW5pY29cbnNjZXR0cm9cbnNjaGVkYVxuc2NoaWVuYVxuc2NpYXJwYVxuc2NpZW56YVxuc2NpbmRlcmVcbnNjaXBwb1xuc2Npcm9wcG9cbnNjaXZvbG9cbnNjbGVyYXJlXG5zY29kZWxsYVxuc2NvbHBpdG9cbnNjb21wYXJ0b1xuc2NvbmZvcnRvXG5zY29wcmlyZVxuc2NvcnRhXG5zY29zc29uZVxuc2Nvenplc2VcbnNjcmliYVxuc2Nyb2xsYXJlXG5zY3J1dGluaW9cbnNjdWRlcmlhXG5zY3VsdG9yZVxuc2N1b2xhXG5zY3Vyb1xuc2N1c2FyZVxuc2RlYml0YXJlXG5zZG9nYW5hcmVcbnNlY2NhdHVyYVxuc2Vjb25kb1xuc2VkYW5vXG5zZWdnaW9sYVxuc2VnbmFsYXRvXG5zZWdyZWdhdG9cbnNlZ3VpdG9cbnNlbGNpYXRvXG5zZWxldHRpdm9cbnNlbGxhXG5zZWx2YWdnaW9cbnNlbWFmb3JvXG5zZW1icmFyZVxuc2VtZVxuc2VtaW5hdG9cbnNlbXByZVxuc2Vuc29cbnNlbnRpcmVcbnNlcG9sdG9cbnNlcXVlbnphXG5zZXJhdGFcbnNlcmJhdG9cbnNlcmVub1xuc2VyaW9cbnNlcnBlbnRlXG5zZXJyYWdsaW9cbnNlcnZpcmVcbnNlc3RpbmFcbnNldG9sYVxuc2V0dGltYW5hXG5zZmFjZWxvXG5zZmFsZGFyZVxuc2ZhbWF0b1xuc2Zhcnpvc29cbnNmYXRpY2F0b1xuc2ZlcmFcbnNmaWRhXG5zZmlsYXRvXG5zZmluZ2VcbnNmb2NhdG9cbnNmb2RlcmFyZVxuc2ZvZ29cbnNmb2x0aXJlXG5zZm9yemF0b1xuc2ZyYXR0b1xuc2ZydXR0YXRvXG5zZnVnZ2l0b1xuc2Z1bWFyZVxuc2Z1c29cbnNnYWJlbGxvXG5zZ2FyYmF0b1xuc2dvbmZpYXJlXG5zZ29yYmlvXG5zZ3Jhc3NhdG9cbnNndWFyZG9cbnNpYmlsb1xuc2ljY29tZVxuc2llcnJhXG5zaWdsYVxuc2lnbm9yZVxuc2lsZW56aW9cbnNpbGxhYmFcbnNpbWJvbG9cbnNpbXBhdGljb1xuc2ltdWxhdG9cbnNpbmZvbmlhXG5zaW5nb2xvXG5zaW5pc3Ryb1xuc2lub1xuc2ludGVzaVxuc2ludXNvaWRlXG5zaXBhcmlvXG5zaXNtYVxuc2lzdG9sZVxuc2l0dWF0b1xuc2xpdHRhXG5zbG9nYXR1cmFcbnNsb3Zlbm9cbnNtYXJyaXRvXG5zbWVtb3JhdG9cbnNtZW50aXRvXG5zbWVyYWxkb1xuc21pbHpvXG5zbW9udGFyZVxuc21vdHRhdG9cbnNtdXNzYXRvXG5zbmVsbGlyZVxuc25lcnZhdG9cbnNub2RvXG5zb2JiYWx6b1xuc29icmlvXG5zb2Njb3Jzb1xuc29jaWFsZVxuc29kYWxlXG5zb2ZmaXR0b1xuc29nbm9cbnNvbGRhdG9cbnNvbGVubmVcbnNvbGlkb1xuc29sbGF6em9cbnNvbG9cbnNvbHViaWxlXG5zb2x2ZW50ZVxuc29tYXRpY29cbnNvbW1hXG5zb25kYVxuc29uZXR0b1xuc29ubmlmZXJvXG5zb3BpcmVcbnNvcHBlc29cbnNvcHJhXG5zb3JnZXJlXG5zb3JwYXNzb1xuc29ycmlzb1xuc29yc29cbnNvcnRlZ2dpb1xuc29ydm9sYXRvXG5zb3NwaXJvXG5zb3N0YVxuc290dGlsZVxuc3BhZGFcbnNwYWxsYVxuc3BhcmdlcmVcbnNwYXRvbGFcbnNwYXZlbnRvXG5zcGF6em9sYVxuc3BlY2llXG5zcGVkaXJlXG5zcGVnbmVyZVxuc3BlbGF0dXJhXG5zcGVyYW56YVxuc3Blc3NvcmVcbnNwZXR0cmFsZVxuc3BlenphdG9cbnNwaWFcbnNwaWdvbG9zb1xuc3BpbGxhdG9cbnNwaW5vc29cbnNwaXJhbGVcbnNwbGVuZGlkb1xuc3BvcnRpdm9cbnNwb3NvXG5zcHJhbmdhXG5zcHJlY2FyZVxuc3Byb25hdG9cbnNwcnV6em9cbnNwdW50aW5vXG5zcXVpbGxvXG5zcmFkaWNhcmVcbnNyb3RvbGF0b1xuc3RhYmlsZVxuc3RhY2NvXG5zdGFmZmFcbnN0YWduYXJlXG5zdGFtcGF0b1xuc3RhbnRpb1xuc3Rhcm51dG9cbnN0YXNlcmFcbnN0YXR1dG9cbnN0ZWxvXG5zdGVwcGFcbnN0ZXJ6b1xuc3RpbGV0dG9cbnN0aW1hXG5zdGlycGVcbnN0aXZhbGVcbnN0aXp6b3NvXG5zdG9uYXRvXG5zdG9yaWNvXG5zdHJhcHBvXG5zdHJlZ2F0b1xuc3RyaWR1bG9cbnN0cm96emFyZVxuc3RydXR0b1xuc3R1Y2NhcmVcbnN0dWZvXG5zdHVwZW5kb1xuc3ViZW50cm9cbnN1Y2Nvc29cbnN1ZG9yZVxuc3VnZ2VyaXRvXG5zdWdvXG5zdWx0YW5vXG5zdW9uYXJlXG5zdXBlcmJvXG5zdXBwb3J0b1xuc3VyZ2VsYXRvXG5zdXJyb2dhdG9cbnN1c3N1cnJvXG5zdXR1cmFcbnN2YWdhcmVcbnN2ZWRlc2VcbnN2ZWdsaW9cbnN2ZWxhcmVcbnN2ZW51dG9cbnN2ZXppYVxuc3ZpbHVwcG9cbnN2aXN0YVxuc3ZpenplcmFcbnN2b2x0YVxuc3Z1b3RhcmVcbnRhYmFjY29cbnRhYnVsYXRvXG50YWNjaWFyZVxudGFjaXR1cm5vXG50YWxlXG50YWxpc21hbm9cbnRhbXBvbmVcbnRhbm5pbm9cbnRhcmFcbnRhcmRpdm9cbnRhcmdhdG9cbnRhcmlmZmFcbnRhcnBhcmVcbnRhcnRhcnVnYVxudGFzdG9cbnRhdHRpY29cbnRhdmVybmFcbnRhdm9sYXRhXG50YXp6YVxudGVjYVxudGVjbmljb1xudGVsZWZvbm9cbnRlbWVyYXJpb1xudGVtcG9cbnRlbXV0b1xudGVuZG9uZVxudGVuZXJvXG50ZW5zaW9uZVxudGVudGFjb2xvXG50ZW9yZW1hXG50ZXJtZVxudGVycmF6em9cbnRlcnpldHRvXG50ZXNpXG50ZXNzZXJhdG9cbnRlc3RhdG9cbnRldHJvXG50ZXR0b2lhXG50aWZhcmVcbnRpZ2VsbGFcbnRpbWJyb1xudGludG9cbnRpcGljb1xudGlwb2dyYWZvXG50aXJhZ2dpb1xudGlyb1xudGl0YW5pb1xudGl0b2xvXG50aXR1YmFudGVcbnRpemlvXG50aXp6b25lXG50b2NjYXJlXG50b2xsZXJhcmVcbnRvbHRvXG50b21ib2xhXG50b21vXG50b25mb1xudG9uc2lsbGFcbnRvcGF6aW9cbnRvcG9sb2dpYVxudG9wcGFcbnRvcmJhXG50b3JuYXJlXG50b3Jyb25lXG50b3J0b3JhXG50b3NjYW5vXG50b3NzaXJlXG50b3N0YXR1cmFcbnRvdGFub1xudHJhYm9jY29cbnRyYWNoZWFcbnRyYWZpbGFcbnRyYWdlZGlhXG50cmFsY2lvXG50cmFtb250b1xudHJhbnNpdG9cbnRyYXBhbm9cbnRyYXJyZVxudHJhc2xvY29cbnRyYXR0YXRvXG50cmF2ZVxudHJlY2NpYVxudHJlbW9saW9cbnRyZXNwb2xvXG50cmlidXRvXG50cmljaGVjb1xudHJpZm9nbGlvXG50cmlsbG9cbnRyaW5jZWFcbnRyaW9cbnRyaXN0ZXp6YVxudHJpdHVyYXRvXG50cml2ZWxsYVxudHJvbWJhXG50cm9ub1xudHJvcHBvXG50cm90dG9sYVxudHJvdmFyZVxudHJ1Y2NhdG9cbnR1YmF0dXJhXG50dWZmYXRvXG50dWxpcGFub1xudHVtdWx0b1xudHVuaXNpYVxudHVyYmFyZVxudHVyY2hpbm9cbnR1dGFcbnR1dGVsYVxudWJpY2F0b1xudWNjZWxsb1xudWNjaXNvcmVcbnVkaXJlXG51ZGl0aXZvXG51ZmZhXG51ZmZpY2lvXG51Z3VhbGVcbnVsaXNzZVxudWx0aW1hdG9cbnVtYW5vXG51bWlsZVxudW1vcmlzbW9cbnVuY2luZXR0b1xudW5nZXJlXG51bmdoZXJlc2VcbnVuaWNvcm5vXG51bmlmaWNhdG9cbnVuaXNvbm9cbnVuaXRhcmlvXG51bnRlXG51b3ZvXG51cHVwYVxudXJhZ2Fub1xudXJnZW56YVxudXJsb1xudXNhbnphXG51c2F0b1xudXNjaXRvXG51c2lnbm9sb1xudXN1cmFpb1xudXRlbnNpbGVcbnV0aWxpenpvXG51dG9waWFcbnZhY2FudGVcbnZhY2NpbmF0b1xudmFnYWJvbmRvXG52YWdsaWF0b1xudmFsYW5nYVxudmFsZ29cbnZhbGljb1xudmFsbGV0dGFcbnZhbG9yb3NvXG52YWx1dGFyZVxudmFsdm9sYVxudmFtcGF0YVxudmFuZ2FyZVxudmFuaXRvc29cbnZhbm9cbnZhbnRhZ2dpb1xudmFudmVyYVxudmFwb3JlXG52YXJhbm9cbnZhcmNhdG9cbnZhcmlhbnRlXG52YXNjYVxudmVkZXR0YVxudmVkb3ZhXG52ZWR1dG9cbnZlZ2V0YWxlXG52ZWljb2xvXG52ZWxjcm9cbnZlbGluYVxudmVsbHV0b1xudmVsb2NlXG52ZW5hdG9cbnZlbmRlbW1pYVxudmVudG9cbnZlcmFjZVxudmVyYmFsZVxudmVyZ29nbmFcbnZlcmlmaWNhXG52ZXJvXG52ZXJydWNhXG52ZXJ0aWNhbGVcbnZlc2NpY2FcbnZlc3NpbGxvXG52ZXN0YWxlXG52ZXRlcmFub1xudmV0cmluYVxudmV0dXN0b1xudmlhbmRhbnRlXG52aWJyYW50ZVxudmljZW5kYVxudmljaGluZ29cbnZpY2luYW56YVxudmlkaW1hcmVcbnZpZ2lsaWFcbnZpZ25ldG9cbnZpZ29yZVxudmlsZVxudmlsbGFub1xudmltaW5pXG52aW5jaXRvcmVcbnZpb2xhXG52aXBlcmFcbnZpcmdvbGFcbnZpcm9sb2dvXG52aXJ1bGVudG9cbnZpc2Nvc29cbnZpc2lvbmVcbnZpc3BvXG52aXNzdXRvXG52aXN1cmFcbnZpdGFcbnZpdGVsbG9cbnZpdHRpbWFcbnZpdmFuZGFcbnZpdmlkb1xudml6aWFyZVxudm9jZVxudm9nYVxudm9sYXRpbGVcbnZvbGVyZVxudm9scGVcbnZvcmFnaW5lXG52dWxjYW5vXG56YW1wb2duYVxuemFubmFcbnphcHBhdG9cbnphdHRlcmFcbnphdm9ycmFcbnplZmlyb1xuemVsYW50ZVxuemVsb1xuemVuemVyb1xuemVyYmlub1xuemliZXR0b1xuemluY29cbnppcmNvbmVcbnppdHRvXG56b2xsYVxuem90aWNvXG56dWNjaGVyb1xuenVmb2xvXG56dWx1XG56dXBwYWAuc3BsaXQoJ1xcbicpO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ox/node_modules/@scure/bip39/esm/wordlists/italian.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ox/node_modules/@scure/bip39/esm/wordlists/japanese.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/ox/node_modules/@scure/bip39/esm/wordlists/japanese.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   wordlist: () => (/* binding */ wordlist)\n/* harmony export */ });\nconst wordlist = `あいこくしん\nあいさつ\nあいだ\nあおぞら\nあかちゃん\nあきる\nあけがた\nあける\nあこがれる\nあさい\nあさひ\nあしあと\nあじわう\nあずかる\nあずき\nあそぶ\nあたえる\nあたためる\nあたりまえ\nあたる\nあつい\nあつかう\nあっしゅく\nあつまり\nあつめる\nあてな\nあてはまる\nあひる\nあぶら\nあぶる\nあふれる\nあまい\nあまど\nあまやかす\nあまり\nあみもの\nあめりか\nあやまる\nあゆむ\nあらいぐま\nあらし\nあらすじ\nあらためる\nあらゆる\nあらわす\nありがとう\nあわせる\nあわてる\nあんい\nあんがい\nあんこ\nあんぜん\nあんてい\nあんない\nあんまり\nいいだす\nいおん\nいがい\nいがく\nいきおい\nいきなり\nいきもの\nいきる\nいくじ\nいくぶん\nいけばな\nいけん\nいこう\nいこく\nいこつ\nいさましい\nいさん\nいしき\nいじゅう\nいじょう\nいじわる\nいずみ\nいずれ\nいせい\nいせえび\nいせかい\nいせき\nいぜん\nいそうろう\nいそがしい\nいだい\nいだく\nいたずら\nいたみ\nいたりあ\nいちおう\nいちじ\nいちど\nいちば\nいちぶ\nいちりゅう\nいつか\nいっしゅん\nいっせい\nいっそう\nいったん\nいっち\nいってい\nいっぽう\nいてざ\nいてん\nいどう\nいとこ\nいない\nいなか\nいねむり\nいのち\nいのる\nいはつ\nいばる\nいはん\nいびき\nいひん\nいふく\nいへん\nいほう\nいみん\nいもうと\nいもたれ\nいもり\nいやがる\nいやす\nいよかん\nいよく\nいらい\nいらすと\nいりぐち\nいりょう\nいれい\nいれもの\nいれる\nいろえんぴつ\nいわい\nいわう\nいわかん\nいわば\nいわゆる\nいんげんまめ\nいんさつ\nいんしょう\nいんよう\nうえき\nうえる\nうおざ\nうがい\nうかぶ\nうかべる\nうきわ\nうくらいな\nうくれれ\nうけたまわる\nうけつけ\nうけとる\nうけもつ\nうける\nうごかす\nうごく\nうこん\nうさぎ\nうしなう\nうしろがみ\nうすい\nうすぎ\nうすぐらい\nうすめる\nうせつ\nうちあわせ\nうちがわ\nうちき\nうちゅう\nうっかり\nうつくしい\nうったえる\nうつる\nうどん\nうなぎ\nうなじ\nうなずく\nうなる\nうねる\nうのう\nうぶげ\nうぶごえ\nうまれる\nうめる\nうもう\nうやまう\nうよく\nうらがえす\nうらぐち\nうらない\nうりあげ\nうりきれ\nうるさい\nうれしい\nうれゆき\nうれる\nうろこ\nうわき\nうわさ\nうんこう\nうんちん\nうんてん\nうんどう\nえいえん\nえいが\nえいきょう\nえいご\nえいせい\nえいぶん\nえいよう\nえいわ\nえおり\nえがお\nえがく\nえきたい\nえくせる\nえしゃく\nえすて\nえつらん\nえのぐ\nえほうまき\nえほん\nえまき\nえもじ\nえもの\nえらい\nえらぶ\nえりあ\nえんえん\nえんかい\nえんぎ\nえんげき\nえんしゅう\nえんぜつ\nえんそく\nえんちょう\nえんとつ\nおいかける\nおいこす\nおいしい\nおいつく\nおうえん\nおうさま\nおうじ\nおうせつ\nおうたい\nおうふく\nおうべい\nおうよう\nおえる\nおおい\nおおう\nおおどおり\nおおや\nおおよそ\nおかえり\nおかず\nおがむ\nおかわり\nおぎなう\nおきる\nおくさま\nおくじょう\nおくりがな\nおくる\nおくれる\nおこす\nおこなう\nおこる\nおさえる\nおさない\nおさめる\nおしいれ\nおしえる\nおじぎ\nおじさん\nおしゃれ\nおそらく\nおそわる\nおたがい\nおたく\nおだやか\nおちつく\nおっと\nおつり\nおでかけ\nおとしもの\nおとなしい\nおどり\nおどろかす\nおばさん\nおまいり\nおめでとう\nおもいで\nおもう\nおもたい\nおもちゃ\nおやつ\nおやゆび\nおよぼす\nおらんだ\nおろす\nおんがく\nおんけい\nおんしゃ\nおんせん\nおんだん\nおんちゅう\nおんどけい\nかあつ\nかいが\nがいき\nがいけん\nがいこう\nかいさつ\nかいしゃ\nかいすいよく\nかいぜん\nかいぞうど\nかいつう\nかいてん\nかいとう\nかいふく\nがいへき\nかいほう\nかいよう\nがいらい\nかいわ\nかえる\nかおり\nかかえる\nかがく\nかがし\nかがみ\nかくご\nかくとく\nかざる\nがぞう\nかたい\nかたち\nがちょう\nがっきゅう\nがっこう\nがっさん\nがっしょう\nかなざわし\nかのう\nがはく\nかぶか\nかほう\nかほご\nかまう\nかまぼこ\nかめれおん\nかゆい\nかようび\nからい\nかるい\nかろう\nかわく\nかわら\nがんか\nかんけい\nかんこう\nかんしゃ\nかんそう\nかんたん\nかんち\nがんばる\nきあい\nきあつ\nきいろ\nぎいん\nきうい\nきうん\nきえる\nきおう\nきおく\nきおち\nきおん\nきかい\nきかく\nきかんしゃ\nききて\nきくばり\nきくらげ\nきけんせい\nきこう\nきこえる\nきこく\nきさい\nきさく\nきさま\nきさらぎ\nぎじかがく\nぎしき\nぎじたいけん\nぎじにってい\nぎじゅつしゃ\nきすう\nきせい\nきせき\nきせつ\nきそう\nきぞく\nきぞん\nきたえる\nきちょう\nきつえん\nぎっちり\nきつつき\nきつね\nきてい\nきどう\nきどく\nきない\nきなが\nきなこ\nきぬごし\nきねん\nきのう\nきのした\nきはく\nきびしい\nきひん\nきふく\nきぶん\nきぼう\nきほん\nきまる\nきみつ\nきむずかしい\nきめる\nきもだめし\nきもち\nきもの\nきゃく\nきやく\nぎゅうにく\nきよう\nきょうりゅう\nきらい\nきらく\nきりん\nきれい\nきれつ\nきろく\nぎろん\nきわめる\nぎんいろ\nきんかくじ\nきんじょ\nきんようび\nぐあい\nくいず\nくうかん\nくうき\nくうぐん\nくうこう\nぐうせい\nくうそう\nぐうたら\nくうふく\nくうぼ\nくかん\nくきょう\nくげん\nぐこう\nくさい\nくさき\nくさばな\nくさる\nくしゃみ\nくしょう\nくすのき\nくすりゆび\nくせげ\nくせん\nぐたいてき\nくださる\nくたびれる\nくちこみ\nくちさき\nくつした\nぐっすり\nくつろぐ\nくとうてん\nくどく\nくなん\nくねくね\nくのう\nくふう\nくみあわせ\nくみたてる\nくめる\nくやくしょ\nくらす\nくらべる\nくるま\nくれる\nくろう\nくわしい\nぐんかん\nぐんしょく\nぐんたい\nぐんて\nけあな\nけいかく\nけいけん\nけいこ\nけいさつ\nげいじゅつ\nけいたい\nげいのうじん\nけいれき\nけいろ\nけおとす\nけおりもの\nげきか\nげきげん\nげきだん\nげきちん\nげきとつ\nげきは\nげきやく\nげこう\nげこくじょう\nげざい\nけさき\nげざん\nけしき\nけしごむ\nけしょう\nげすと\nけたば\nけちゃっぷ\nけちらす\nけつあつ\nけつい\nけつえき\nけっこん\nけつじょ\nけっせき\nけってい\nけつまつ\nげつようび\nげつれい\nけつろん\nげどく\nけとばす\nけとる\nけなげ\nけなす\nけなみ\nけぬき\nげねつ\nけねん\nけはい\nげひん\nけぶかい\nげぼく\nけまり\nけみかる\nけむし\nけむり\nけもの\nけらい\nけろけろ\nけわしい\nけんい\nけんえつ\nけんお\nけんか\nげんき\nけんげん\nけんこう\nけんさく\nけんしゅう\nけんすう\nげんそう\nけんちく\nけんてい\nけんとう\nけんない\nけんにん\nげんぶつ\nけんま\nけんみん\nけんめい\nけんらん\nけんり\nこあくま\nこいぬ\nこいびと\nごうい\nこうえん\nこうおん\nこうかん\nごうきゅう\nごうけい\nこうこう\nこうさい\nこうじ\nこうすい\nごうせい\nこうそく\nこうたい\nこうちゃ\nこうつう\nこうてい\nこうどう\nこうない\nこうはい\nごうほう\nごうまん\nこうもく\nこうりつ\nこえる\nこおり\nごかい\nごがつ\nごかん\nこくご\nこくさい\nこくとう\nこくない\nこくはく\nこぐま\nこけい\nこける\nここのか\nこころ\nこさめ\nこしつ\nこすう\nこせい\nこせき\nこぜん\nこそだて\nこたい\nこたえる\nこたつ\nこちょう\nこっか\nこつこつ\nこつばん\nこつぶ\nこてい\nこてん\nことがら\nことし\nことば\nことり\nこなごな\nこねこね\nこのまま\nこのみ\nこのよ\nごはん\nこひつじ\nこふう\nこふん\nこぼれる\nごまあぶら\nこまかい\nごますり\nこまつな\nこまる\nこむぎこ\nこもじ\nこもち\nこもの\nこもん\nこやく\nこやま\nこゆう\nこゆび\nこよい\nこよう\nこりる\nこれくしょん\nころっけ\nこわもて\nこわれる\nこんいん\nこんかい\nこんき\nこんしゅう\nこんすい\nこんだて\nこんとん\nこんなん\nこんびに\nこんぽん\nこんまけ\nこんや\nこんれい\nこんわく\nざいえき\nさいかい\nさいきん\nざいげん\nざいこ\nさいしょ\nさいせい\nざいたく\nざいちゅう\nさいてき\nざいりょう\nさうな\nさかいし\nさがす\nさかな\nさかみち\nさがる\nさぎょう\nさくし\nさくひん\nさくら\nさこく\nさこつ\nさずかる\nざせき\nさたん\nさつえい\nざつおん\nざっか\nざつがく\nさっきょく\nざっし\nさつじん\nざっそう\nさつたば\nさつまいも\nさてい\nさといも\nさとう\nさとおや\nさとし\nさとる\nさのう\nさばく\nさびしい\nさべつ\nさほう\nさほど\nさます\nさみしい\nさみだれ\nさむけ\nさめる\nさやえんどう\nさゆう\nさよう\nさよく\nさらだ\nざるそば\nさわやか\nさわる\nさんいん\nさんか\nさんきゃく\nさんこう\nさんさい\nざんしょ\nさんすう\nさんせい\nさんそ\nさんち\nさんま\nさんみ\nさんらん\nしあい\nしあげ\nしあさって\nしあわせ\nしいく\nしいん\nしうち\nしえい\nしおけ\nしかい\nしかく\nじかん\nしごと\nしすう\nじだい\nしたうけ\nしたぎ\nしたて\nしたみ\nしちょう\nしちりん\nしっかり\nしつじ\nしつもん\nしてい\nしてき\nしてつ\nじてん\nじどう\nしなぎれ\nしなもの\nしなん\nしねま\nしねん\nしのぐ\nしのぶ\nしはい\nしばかり\nしはつ\nしはらい\nしはん\nしひょう\nしふく\nじぶん\nしへい\nしほう\nしほん\nしまう\nしまる\nしみん\nしむける\nじむしょ\nしめい\nしめる\nしもん\nしゃいん\nしゃうん\nしゃおん\nじゃがいも\nしやくしょ\nしゃくほう\nしゃけん\nしゃこ\nしゃざい\nしゃしん\nしゃせん\nしゃそう\nしゃたい\nしゃちょう\nしゃっきん\nじゃま\nしゃりん\nしゃれい\nじゆう\nじゅうしょ\nしゅくはく\nじゅしん\nしゅっせき\nしゅみ\nしゅらば\nじゅんばん\nしょうかい\nしょくたく\nしょっけん\nしょどう\nしょもつ\nしらせる\nしらべる\nしんか\nしんこう\nじんじゃ\nしんせいじ\nしんちく\nしんりん\nすあげ\nすあし\nすあな\nずあん\nすいえい\nすいか\nすいとう\nずいぶん\nすいようび\nすうがく\nすうじつ\nすうせん\nすおどり\nすきま\nすくう\nすくない\nすける\nすごい\nすこし\nずさん\nすずしい\nすすむ\nすすめる\nすっかり\nずっしり\nずっと\nすてき\nすてる\nすねる\nすのこ\nすはだ\nすばらしい\nずひょう\nずぶぬれ\nすぶり\nすふれ\nすべて\nすべる\nずほう\nすぼん\nすまい\nすめし\nすもう\nすやき\nすらすら\nするめ\nすれちがう\nすろっと\nすわる\nすんぜん\nすんぽう\nせあぶら\nせいかつ\nせいげん\nせいじ\nせいよう\nせおう\nせかいかん\nせきにん\nせきむ\nせきゆ\nせきらんうん\nせけん\nせこう\nせすじ\nせたい\nせたけ\nせっかく\nせっきゃく\nぜっく\nせっけん\nせっこつ\nせっさたくま\nせつぞく\nせつだん\nせつでん\nせっぱん\nせつび\nせつぶん\nせつめい\nせつりつ\nせなか\nせのび\nせはば\nせびろ\nせぼね\nせまい\nせまる\nせめる\nせもたれ\nせりふ\nぜんあく\nせんい\nせんえい\nせんか\nせんきょ\nせんく\nせんげん\nぜんご\nせんさい\nせんしゅ\nせんすい\nせんせい\nせんぞ\nせんたく\nせんちょう\nせんてい\nせんとう\nせんぬき\nせんねん\nせんぱい\nぜんぶ\nぜんぽう\nせんむ\nせんめんじょ\nせんもん\nせんやく\nせんゆう\nせんよう\nぜんら\nぜんりゃく\nせんれい\nせんろ\nそあく\nそいとげる\nそいね\nそうがんきょう\nそうき\nそうご\nそうしん\nそうだん\nそうなん\nそうび\nそうめん\nそうり\nそえもの\nそえん\nそがい\nそげき\nそこう\nそこそこ\nそざい\nそしな\nそせい\nそせん\nそそぐ\nそだてる\nそつう\nそつえん\nそっかん\nそつぎょう\nそっけつ\nそっこう\nそっせん\nそっと\nそとがわ\nそとづら\nそなえる\nそなた\nそふぼ\nそぼく\nそぼろ\nそまつ\nそまる\nそむく\nそむりえ\nそめる\nそもそも\nそよかぜ\nそらまめ\nそろう\nそんかい\nそんけい\nそんざい\nそんしつ\nそんぞく\nそんちょう\nぞんび\nぞんぶん\nそんみん\nたあい\nたいいん\nたいうん\nたいえき\nたいおう\nだいがく\nたいき\nたいぐう\nたいけん\nたいこ\nたいざい\nだいじょうぶ\nだいすき\nたいせつ\nたいそう\nだいたい\nたいちょう\nたいてい\nだいどころ\nたいない\nたいねつ\nたいのう\nたいはん\nだいひょう\nたいふう\nたいへん\nたいほ\nたいまつばな\nたいみんぐ\nたいむ\nたいめん\nたいやき\nたいよう\nたいら\nたいりょく\nたいる\nたいわん\nたうえ\nたえる\nたおす\nたおる\nたおれる\nたかい\nたかね\nたきび\nたくさん\nたこく\nたこやき\nたさい\nたしざん\nだじゃれ\nたすける\nたずさわる\nたそがれ\nたたかう\nたたく\nただしい\nたたみ\nたちばな\nだっかい\nだっきゃく\nだっこ\nだっしゅつ\nだったい\nたてる\nたとえる\nたなばた\nたにん\nたぬき\nたのしみ\nたはつ\nたぶん\nたべる\nたぼう\nたまご\nたまる\nだむる\nためいき\nためす\nためる\nたもつ\nたやすい\nたよる\nたらす\nたりきほんがん\nたりょう\nたりる\nたると\nたれる\nたれんと\nたろっと\nたわむれる\nだんあつ\nたんい\nたんおん\nたんか\nたんき\nたんけん\nたんご\nたんさん\nたんじょうび\nだんせい\nたんそく\nたんたい\nだんち\nたんてい\nたんとう\nだんな\nたんにん\nだんねつ\nたんのう\nたんぴん\nだんぼう\nたんまつ\nたんめい\nだんれつ\nだんろ\nだんわ\nちあい\nちあん\nちいき\nちいさい\nちえん\nちかい\nちから\nちきゅう\nちきん\nちけいず\nちけん\nちこく\nちさい\nちしき\nちしりょう\nちせい\nちそう\nちたい\nちたん\nちちおや\nちつじょ\nちてき\nちてん\nちぬき\nちぬり\nちのう\nちひょう\nちへいせん\nちほう\nちまた\nちみつ\nちみどろ\nちめいど\nちゃんこなべ\nちゅうい\nちゆりょく\nちょうし\nちょさくけん\nちらし\nちらみ\nちりがみ\nちりょう\nちるど\nちわわ\nちんたい\nちんもく\nついか\nついたち\nつうか\nつうじょう\nつうはん\nつうわ\nつかう\nつかれる\nつくね\nつくる\nつけね\nつける\nつごう\nつたえる\nつづく\nつつじ\nつつむ\nつとめる\nつながる\nつなみ\nつねづね\nつのる\nつぶす\nつまらない\nつまる\nつみき\nつめたい\nつもり\nつもる\nつよい\nつるぼ\nつるみく\nつわもの\nつわり\nてあし\nてあて\nてあみ\nていおん\nていか\nていき\nていけい\nていこく\nていさつ\nていし\nていせい\nていたい\nていど\nていねい\nていひょう\nていへん\nていぼう\nてうち\nておくれ\nてきとう\nてくび\nでこぼこ\nてさぎょう\nてさげ\nてすり\nてそう\nてちがい\nてちょう\nてつがく\nてつづき\nでっぱ\nてつぼう\nてつや\nでぬかえ\nてぬき\nてぬぐい\nてのひら\nてはい\nてぶくろ\nてふだ\nてほどき\nてほん\nてまえ\nてまきずし\nてみじか\nてみやげ\nてらす\nてれび\nてわけ\nてわたし\nでんあつ\nてんいん\nてんかい\nてんき\nてんぐ\nてんけん\nてんごく\nてんさい\nてんし\nてんすう\nでんち\nてんてき\nてんとう\nてんない\nてんぷら\nてんぼうだい\nてんめつ\nてんらんかい\nでんりょく\nでんわ\nどあい\nといれ\nどうかん\nとうきゅう\nどうぐ\nとうし\nとうむぎ\nとおい\nとおか\nとおく\nとおす\nとおる\nとかい\nとかす\nときおり\nときどき\nとくい\nとくしゅう\nとくてん\nとくに\nとくべつ\nとけい\nとける\nとこや\nとさか\nとしょかん\nとそう\nとたん\nとちゅう\nとっきゅう\nとっくん\nとつぜん\nとつにゅう\nとどける\nととのえる\nとない\nとなえる\nとなり\nとのさま\nとばす\nどぶがわ\nとほう\nとまる\nとめる\nともだち\nともる\nどようび\nとらえる\nとんかつ\nどんぶり\nないかく\nないこう\nないしょ\nないす\nないせん\nないそう\nなおす\nながい\nなくす\nなげる\nなこうど\nなさけ\nなたでここ\nなっとう\nなつやすみ\nななおし\nなにごと\nなにもの\nなにわ\nなのか\nなふだ\nなまいき\nなまえ\nなまみ\nなみだ\nなめらか\nなめる\nなやむ\nならう\nならび\nならぶ\nなれる\nなわとび\nなわばり\nにあう\nにいがた\nにうけ\nにおい\nにかい\nにがて\nにきび\nにくしみ\nにくまん\nにげる\nにさんかたんそ\nにしき\nにせもの\nにちじょう\nにちようび\nにっか\nにっき\nにっけい\nにっこう\nにっさん\nにっしょく\nにっすう\nにっせき\nにってい\nになう\nにほん\nにまめ\nにもつ\nにやり\nにゅういん\nにりんしゃ\nにわとり\nにんい\nにんか\nにんき\nにんげん\nにんしき\nにんずう\nにんそう\nにんたい\nにんち\nにんてい\nにんにく\nにんぷ\nにんまり\nにんむ\nにんめい\nにんよう\nぬいくぎ\nぬかす\nぬぐいとる\nぬぐう\nぬくもり\nぬすむ\nぬまえび\nぬめり\nぬらす\nぬんちゃく\nねあげ\nねいき\nねいる\nねいろ\nねぐせ\nねくたい\nねくら\nねこぜ\nねこむ\nねさげ\nねすごす\nねそべる\nねだん\nねつい\nねっしん\nねつぞう\nねったいぎょ\nねぶそく\nねふだ\nねぼう\nねほりはほり\nねまき\nねまわし\nねみみ\nねむい\nねむたい\nねもと\nねらう\nねわざ\nねんいり\nねんおし\nねんかん\nねんきん\nねんぐ\nねんざ\nねんし\nねんちゃく\nねんど\nねんぴ\nねんぶつ\nねんまつ\nねんりょう\nねんれい\nのいず\nのおづま\nのがす\nのきなみ\nのこぎり\nのこす\nのこる\nのせる\nのぞく\nのぞむ\nのたまう\nのちほど\nのっく\nのばす\nのはら\nのべる\nのぼる\nのみもの\nのやま\nのらいぬ\nのらねこ\nのりもの\nのりゆき\nのれん\nのんき\nばあい\nはあく\nばあさん\nばいか\nばいく\nはいけん\nはいご\nはいしん\nはいすい\nはいせん\nはいそう\nはいち\nばいばい\nはいれつ\nはえる\nはおる\nはかい\nばかり\nはかる\nはくしゅ\nはけん\nはこぶ\nはさみ\nはさん\nはしご\nばしょ\nはしる\nはせる\nぱそこん\nはそん\nはたん\nはちみつ\nはつおん\nはっかく\nはづき\nはっきり\nはっくつ\nはっけん\nはっこう\nはっさん\nはっしん\nはったつ\nはっちゅう\nはってん\nはっぴょう\nはっぽう\nはなす\nはなび\nはにかむ\nはぶらし\nはみがき\nはむかう\nはめつ\nはやい\nはやし\nはらう\nはろうぃん\nはわい\nはんい\nはんえい\nはんおん\nはんかく\nはんきょう\nばんぐみ\nはんこ\nはんしゃ\nはんすう\nはんだん\nぱんち\nぱんつ\nはんてい\nはんとし\nはんのう\nはんぱ\nはんぶん\nはんぺん\nはんぼうき\nはんめい\nはんらん\nはんろん\nひいき\nひうん\nひえる\nひかく\nひかり\nひかる\nひかん\nひくい\nひけつ\nひこうき\nひこく\nひさい\nひさしぶり\nひさん\nびじゅつかん\nひしょ\nひそか\nひそむ\nひたむき\nひだり\nひたる\nひつぎ\nひっこし\nひっし\nひつじゅひん\nひっす\nひつぜん\nぴったり\nぴっちり\nひつよう\nひてい\nひとごみ\nひなまつり\nひなん\nひねる\nひはん\nひびく\nひひょう\nひほう\nひまわり\nひまん\nひみつ\nひめい\nひめじし\nひやけ\nひやす\nひよう\nびょうき\nひらがな\nひらく\nひりつ\nひりょう\nひるま\nひるやすみ\nひれい\nひろい\nひろう\nひろき\nひろゆき\nひんかく\nひんけつ\nひんこん\nひんしゅ\nひんそう\nぴんち\nひんぱん\nびんぼう\nふあん\nふいうち\nふうけい\nふうせん\nぷうたろう\nふうとう\nふうふ\nふえる\nふおん\nふかい\nふきん\nふくざつ\nふくぶくろ\nふこう\nふさい\nふしぎ\nふじみ\nふすま\nふせい\nふせぐ\nふそく\nぶたにく\nふたん\nふちょう\nふつう\nふつか\nふっかつ\nふっき\nふっこく\nぶどう\nふとる\nふとん\nふのう\nふはい\nふひょう\nふへん\nふまん\nふみん\nふめつ\nふめん\nふよう\nふりこ\nふりる\nふるい\nふんいき\nぶんがく\nぶんぐ\nふんしつ\nぶんせき\nふんそう\nぶんぽう\nへいあん\nへいおん\nへいがい\nへいき\nへいげん\nへいこう\nへいさ\nへいしゃ\nへいせつ\nへいそ\nへいたく\nへいてん\nへいねつ\nへいわ\nへきが\nへこむ\nべにいろ\nべにしょうが\nへらす\nへんかん\nべんきょう\nべんごし\nへんさい\nへんたい\nべんり\nほあん\nほいく\nぼうぎょ\nほうこく\nほうそう\nほうほう\nほうもん\nほうりつ\nほえる\nほおん\nほかん\nほきょう\nぼきん\nほくろ\nほけつ\nほけん\nほこう\nほこる\nほしい\nほしつ\nほしゅ\nほしょう\nほせい\nほそい\nほそく\nほたて\nほたる\nぽちぶくろ\nほっきょく\nほっさ\nほったん\nほとんど\nほめる\nほんい\nほんき\nほんけ\nほんしつ\nほんやく\nまいにち\nまかい\nまかせる\nまがる\nまける\nまこと\nまさつ\nまじめ\nますく\nまぜる\nまつり\nまとめ\nまなぶ\nまぬけ\nまねく\nまほう\nまもる\nまゆげ\nまよう\nまろやか\nまわす\nまわり\nまわる\nまんが\nまんきつ\nまんぞく\nまんなか\nみいら\nみうち\nみえる\nみがく\nみかた\nみかん\nみけん\nみこん\nみじかい\nみすい\nみすえる\nみせる\nみっか\nみつかる\nみつける\nみてい\nみとめる\nみなと\nみなみかさい\nみねらる\nみのう\nみのがす\nみほん\nみもと\nみやげ\nみらい\nみりょく\nみわく\nみんか\nみんぞく\nむいか\nむえき\nむえん\nむかい\nむかう\nむかえ\nむかし\nむぎちゃ\nむける\nむげん\nむさぼる\nむしあつい\nむしば\nむじゅん\nむしろ\nむすう\nむすこ\nむすぶ\nむすめ\nむせる\nむせん\nむちゅう\nむなしい\nむのう\nむやみ\nむよう\nむらさき\nむりょう\nむろん\nめいあん\nめいうん\nめいえん\nめいかく\nめいきょく\nめいさい\nめいし\nめいそう\nめいぶつ\nめいれい\nめいわく\nめぐまれる\nめざす\nめした\nめずらしい\nめだつ\nめまい\nめやす\nめんきょ\nめんせき\nめんどう\nもうしあげる\nもうどうけん\nもえる\nもくし\nもくてき\nもくようび\nもちろん\nもどる\nもらう\nもんく\nもんだい\nやおや\nやける\nやさい\nやさしい\nやすい\nやすたろう\nやすみ\nやせる\nやそう\nやたい\nやちん\nやっと\nやっぱり\nやぶる\nやめる\nややこしい\nやよい\nやわらかい\nゆうき\nゆうびんきょく\nゆうべ\nゆうめい\nゆけつ\nゆしゅつ\nゆせん\nゆそう\nゆたか\nゆちゃく\nゆでる\nゆにゅう\nゆびわ\nゆらい\nゆれる\nようい\nようか\nようきゅう\nようじ\nようす\nようちえん\nよかぜ\nよかん\nよきん\nよくせい\nよくぼう\nよけい\nよごれる\nよさん\nよしゅう\nよそう\nよそく\nよっか\nよてい\nよどがわく\nよねつ\nよやく\nよゆう\nよろこぶ\nよろしい\nらいう\nらくがき\nらくご\nらくさつ\nらくだ\nらしんばん\nらせん\nらぞく\nらたい\nらっか\nられつ\nりえき\nりかい\nりきさく\nりきせつ\nりくぐん\nりくつ\nりけん\nりこう\nりせい\nりそう\nりそく\nりてん\nりねん\nりゆう\nりゅうがく\nりよう\nりょうり\nりょかん\nりょくちゃ\nりょこう\nりりく\nりれき\nりろん\nりんご\nるいけい\nるいさい\nるいじ\nるいせき\nるすばん\nるりがわら\nれいかん\nれいぎ\nれいせい\nれいぞうこ\nれいとう\nれいぼう\nれきし\nれきだい\nれんあい\nれんけい\nれんこん\nれんさい\nれんしゅう\nれんぞく\nれんらく\nろうか\nろうご\nろうじん\nろうそく\nろくが\nろこつ\nろじうら\nろしゅつ\nろせん\nろてん\nろめん\nろれつ\nろんぎ\nろんぱ\nろんぶん\nろんり\nわかす\nわかめ\nわかやま\nわかれる\nわしつ\nわじまし\nわすれもの\nわらう\nわれる`.split('\\n');\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ox/node_modules/@scure/bip39/esm/wordlists/japanese.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ox/node_modules/@scure/bip39/esm/wordlists/korean.js":
/*!***************************************************************************!*\
  !*** ./node_modules/ox/node_modules/@scure/bip39/esm/wordlists/korean.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   wordlist: () => (/* binding */ wordlist)\n/* harmony export */ });\nconst wordlist = `가격\n가끔\n가난\n가능\n가득\n가르침\n가뭄\n가방\n가상\n가슴\n가운데\n가을\n가이드\n가입\n가장\n가정\n가족\n가죽\n각오\n각자\n간격\n간부\n간섭\n간장\n간접\n간판\n갈등\n갈비\n갈색\n갈증\n감각\n감기\n감소\n감수성\n감자\n감정\n갑자기\n강남\n강당\n강도\n강력히\n강변\n강북\n강사\n강수량\n강아지\n강원도\n강의\n강제\n강조\n같이\n개구리\n개나리\n개방\n개별\n개선\n개성\n개인\n객관적\n거실\n거액\n거울\n거짓\n거품\n걱정\n건강\n건물\n건설\n건조\n건축\n걸음\n검사\n검토\n게시판\n게임\n겨울\n견해\n결과\n결국\n결론\n결석\n결승\n결심\n결정\n결혼\n경계\n경고\n경기\n경력\n경복궁\n경비\n경상도\n경영\n경우\n경쟁\n경제\n경주\n경찰\n경치\n경향\n경험\n계곡\n계단\n계란\n계산\n계속\n계약\n계절\n계층\n계획\n고객\n고구려\n고궁\n고급\n고등학생\n고무신\n고민\n고양이\n고장\n고전\n고집\n고춧가루\n고통\n고향\n곡식\n골목\n골짜기\n골프\n공간\n공개\n공격\n공군\n공급\n공기\n공동\n공무원\n공부\n공사\n공식\n공업\n공연\n공원\n공장\n공짜\n공책\n공통\n공포\n공항\n공휴일\n과목\n과일\n과장\n과정\n과학\n관객\n관계\n관광\n관념\n관람\n관련\n관리\n관습\n관심\n관점\n관찰\n광경\n광고\n광장\n광주\n괴로움\n굉장히\n교과서\n교문\n교복\n교실\n교양\n교육\n교장\n교직\n교통\n교환\n교훈\n구경\n구름\n구멍\n구별\n구분\n구석\n구성\n구속\n구역\n구입\n구청\n구체적\n국가\n국기\n국내\n국립\n국물\n국민\n국수\n국어\n국왕\n국적\n국제\n국회\n군대\n군사\n군인\n궁극적\n권리\n권위\n권투\n귀국\n귀신\n규정\n규칙\n균형\n그날\n그냥\n그늘\n그러나\n그룹\n그릇\n그림\n그제서야\n그토록\n극복\n극히\n근거\n근교\n근래\n근로\n근무\n근본\n근원\n근육\n근처\n글씨\n글자\n금강산\n금고\n금년\n금메달\n금액\n금연\n금요일\n금지\n긍정적\n기간\n기관\n기념\n기능\n기독교\n기둥\n기록\n기름\n기법\n기본\n기분\n기쁨\n기숙사\n기술\n기억\n기업\n기온\n기운\n기원\n기적\n기준\n기침\n기혼\n기획\n긴급\n긴장\n길이\n김밥\n김치\n김포공항\n깍두기\n깜빡\n깨달음\n깨소금\n껍질\n꼭대기\n꽃잎\n나들이\n나란히\n나머지\n나물\n나침반\n나흘\n낙엽\n난방\n날개\n날씨\n날짜\n남녀\n남대문\n남매\n남산\n남자\n남편\n남학생\n낭비\n낱말\n내년\n내용\n내일\n냄비\n냄새\n냇물\n냉동\n냉면\n냉방\n냉장고\n넥타이\n넷째\n노동\n노란색\n노력\n노인\n녹음\n녹차\n녹화\n논리\n논문\n논쟁\n놀이\n농구\n농담\n농민\n농부\n농업\n농장\n농촌\n높이\n눈동자\n눈물\n눈썹\n뉴욕\n느낌\n늑대\n능동적\n능력\n다방\n다양성\n다음\n다이어트\n다행\n단계\n단골\n단독\n단맛\n단순\n단어\n단위\n단점\n단체\n단추\n단편\n단풍\n달걀\n달러\n달력\n달리\n닭고기\n담당\n담배\n담요\n담임\n답변\n답장\n당근\n당분간\n당연히\n당장\n대규모\n대낮\n대단히\n대답\n대도시\n대략\n대량\n대륙\n대문\n대부분\n대신\n대응\n대장\n대전\n대접\n대중\n대책\n대출\n대충\n대통령\n대학\n대한민국\n대합실\n대형\n덩어리\n데이트\n도대체\n도덕\n도둑\n도망\n도서관\n도심\n도움\n도입\n도자기\n도저히\n도전\n도중\n도착\n독감\n독립\n독서\n독일\n독창적\n동화책\n뒷모습\n뒷산\n딸아이\n마누라\n마늘\n마당\n마라톤\n마련\n마무리\n마사지\n마약\n마요네즈\n마을\n마음\n마이크\n마중\n마지막\n마찬가지\n마찰\n마흔\n막걸리\n막내\n막상\n만남\n만두\n만세\n만약\n만일\n만점\n만족\n만화\n많이\n말기\n말씀\n말투\n맘대로\n망원경\n매년\n매달\n매력\n매번\n매스컴\n매일\n매장\n맥주\n먹이\n먼저\n먼지\n멀리\n메일\n며느리\n며칠\n면담\n멸치\n명단\n명령\n명예\n명의\n명절\n명칭\n명함\n모금\n모니터\n모델\n모든\n모범\n모습\n모양\n모임\n모조리\n모집\n모퉁이\n목걸이\n목록\n목사\n목소리\n목숨\n목적\n목표\n몰래\n몸매\n몸무게\n몸살\n몸속\n몸짓\n몸통\n몹시\n무관심\n무궁화\n무더위\n무덤\n무릎\n무슨\n무엇\n무역\n무용\n무조건\n무지개\n무척\n문구\n문득\n문법\n문서\n문제\n문학\n문화\n물가\n물건\n물결\n물고기\n물론\n물리학\n물음\n물질\n물체\n미국\n미디어\n미사일\n미술\n미역\n미용실\n미움\n미인\n미팅\n미혼\n민간\n민족\n민주\n믿음\n밀가루\n밀리미터\n밑바닥\n바가지\n바구니\n바나나\n바늘\n바닥\n바닷가\n바람\n바이러스\n바탕\n박물관\n박사\n박수\n반대\n반드시\n반말\n반발\n반성\n반응\n반장\n반죽\n반지\n반찬\n받침\n발가락\n발걸음\n발견\n발달\n발레\n발목\n발바닥\n발생\n발음\n발자국\n발전\n발톱\n발표\n밤하늘\n밥그릇\n밥맛\n밥상\n밥솥\n방금\n방면\n방문\n방바닥\n방법\n방송\n방식\n방안\n방울\n방지\n방학\n방해\n방향\n배경\n배꼽\n배달\n배드민턴\n백두산\n백색\n백성\n백인\n백제\n백화점\n버릇\n버섯\n버튼\n번개\n번역\n번지\n번호\n벌금\n벌레\n벌써\n범위\n범인\n범죄\n법률\n법원\n법적\n법칙\n베이징\n벨트\n변경\n변동\n변명\n변신\n변호사\n변화\n별도\n별명\n별일\n병실\n병아리\n병원\n보관\n보너스\n보라색\n보람\n보름\n보상\n보안\n보자기\n보장\n보전\n보존\n보통\n보편적\n보험\n복도\n복사\n복숭아\n복습\n볶음\n본격적\n본래\n본부\n본사\n본성\n본인\n본질\n볼펜\n봉사\n봉지\n봉투\n부근\n부끄러움\n부담\n부동산\n부문\n부분\n부산\n부상\n부엌\n부인\n부작용\n부장\n부정\n부족\n부지런히\n부친\n부탁\n부품\n부회장\n북부\n북한\n분노\n분량\n분리\n분명\n분석\n분야\n분위기\n분필\n분홍색\n불고기\n불과\n불교\n불꽃\n불만\n불법\n불빛\n불안\n불이익\n불행\n브랜드\n비극\n비난\n비닐\n비둘기\n비디오\n비로소\n비만\n비명\n비밀\n비바람\n비빔밥\n비상\n비용\n비율\n비중\n비타민\n비판\n빌딩\n빗물\n빗방울\n빗줄기\n빛깔\n빨간색\n빨래\n빨리\n사건\n사계절\n사나이\n사냥\n사람\n사랑\n사립\n사모님\n사물\n사방\n사상\n사생활\n사설\n사슴\n사실\n사업\n사용\n사월\n사장\n사전\n사진\n사촌\n사춘기\n사탕\n사투리\n사흘\n산길\n산부인과\n산업\n산책\n살림\n살인\n살짝\n삼계탕\n삼국\n삼십\n삼월\n삼촌\n상관\n상금\n상대\n상류\n상반기\n상상\n상식\n상업\n상인\n상자\n상점\n상처\n상추\n상태\n상표\n상품\n상황\n새벽\n색깔\n색연필\n생각\n생명\n생물\n생방송\n생산\n생선\n생신\n생일\n생활\n서랍\n서른\n서명\n서민\n서비스\n서양\n서울\n서적\n서점\n서쪽\n서클\n석사\n석유\n선거\n선물\n선배\n선생\n선수\n선원\n선장\n선전\n선택\n선풍기\n설거지\n설날\n설렁탕\n설명\n설문\n설사\n설악산\n설치\n설탕\n섭씨\n성공\n성당\n성명\n성별\n성인\n성장\n성적\n성질\n성함\n세금\n세미나\n세상\n세월\n세종대왕\n세탁\n센터\n센티미터\n셋째\n소규모\n소극적\n소금\n소나기\n소년\n소득\n소망\n소문\n소설\n소속\n소아과\n소용\n소원\n소음\n소중히\n소지품\n소질\n소풍\n소형\n속담\n속도\n속옷\n손가락\n손길\n손녀\n손님\n손등\n손목\n손뼉\n손실\n손질\n손톱\n손해\n솔직히\n솜씨\n송아지\n송이\n송편\n쇠고기\n쇼핑\n수건\n수년\n수단\n수돗물\n수동적\n수면\n수명\n수박\n수상\n수석\n수술\n수시로\n수업\n수염\n수영\n수입\n수준\n수집\n수출\n수컷\n수필\n수학\n수험생\n수화기\n숙녀\n숙소\n숙제\n순간\n순서\n순수\n순식간\n순위\n숟가락\n술병\n술집\n숫자\n스님\n스물\n스스로\n스승\n스웨터\n스위치\n스케이트\n스튜디오\n스트레스\n스포츠\n슬쩍\n슬픔\n습관\n습기\n승객\n승리\n승부\n승용차\n승진\n시각\n시간\n시골\n시금치\n시나리오\n시댁\n시리즈\n시멘트\n시민\n시부모\n시선\n시설\n시스템\n시아버지\n시어머니\n시월\n시인\n시일\n시작\n시장\n시절\n시점\n시중\n시즌\n시집\n시청\n시합\n시험\n식구\n식기\n식당\n식량\n식료품\n식물\n식빵\n식사\n식생활\n식초\n식탁\n식품\n신고\n신규\n신념\n신문\n신발\n신비\n신사\n신세\n신용\n신제품\n신청\n신체\n신화\n실감\n실내\n실력\n실례\n실망\n실수\n실습\n실시\n실장\n실정\n실질적\n실천\n실체\n실컷\n실태\n실패\n실험\n실현\n심리\n심부름\n심사\n심장\n심정\n심판\n쌍둥이\n씨름\n씨앗\n아가씨\n아나운서\n아드님\n아들\n아쉬움\n아스팔트\n아시아\n아울러\n아저씨\n아줌마\n아직\n아침\n아파트\n아프리카\n아픔\n아홉\n아흔\n악기\n악몽\n악수\n안개\n안경\n안과\n안내\n안녕\n안동\n안방\n안부\n안주\n알루미늄\n알코올\n암시\n암컷\n압력\n앞날\n앞문\n애인\n애정\n액수\n앨범\n야간\n야단\n야옹\n약간\n약국\n약속\n약수\n약점\n약품\n약혼녀\n양념\n양력\n양말\n양배추\n양주\n양파\n어둠\n어려움\n어른\n어젯밤\n어쨌든\n어쩌다가\n어쩐지\n언니\n언덕\n언론\n언어\n얼굴\n얼른\n얼음\n얼핏\n엄마\n업무\n업종\n업체\n엉덩이\n엉망\n엉터리\n엊그제\n에너지\n에어컨\n엔진\n여건\n여고생\n여관\n여군\n여권\n여대생\n여덟\n여동생\n여든\n여론\n여름\n여섯\n여성\n여왕\n여인\n여전히\n여직원\n여학생\n여행\n역사\n역시\n역할\n연결\n연구\n연극\n연기\n연락\n연설\n연세\n연속\n연습\n연애\n연예인\n연인\n연장\n연주\n연출\n연필\n연합\n연휴\n열기\n열매\n열쇠\n열심히\n열정\n열차\n열흘\n염려\n엽서\n영국\n영남\n영상\n영양\n영역\n영웅\n영원히\n영하\n영향\n영혼\n영화\n옆구리\n옆방\n옆집\n예감\n예금\n예방\n예산\n예상\n예선\n예술\n예습\n예식장\n예약\n예전\n예절\n예정\n예컨대\n옛날\n오늘\n오락\n오랫동안\n오렌지\n오로지\n오른발\n오븐\n오십\n오염\n오월\n오전\n오직\n오징어\n오페라\n오피스텔\n오히려\n옥상\n옥수수\n온갖\n온라인\n온몸\n온종일\n온통\n올가을\n올림픽\n올해\n옷차림\n와이셔츠\n와인\n완성\n완전\n왕비\n왕자\n왜냐하면\n왠지\n외갓집\n외국\n외로움\n외삼촌\n외출\n외침\n외할머니\n왼발\n왼손\n왼쪽\n요금\n요일\n요즘\n요청\n용기\n용서\n용어\n우산\n우선\n우승\n우연히\n우정\n우체국\n우편\n운동\n운명\n운반\n운전\n운행\n울산\n울음\n움직임\n웃어른\n웃음\n워낙\n원고\n원래\n원서\n원숭이\n원인\n원장\n원피스\n월급\n월드컵\n월세\n월요일\n웨이터\n위반\n위법\n위성\n위원\n위험\n위협\n윗사람\n유난히\n유럽\n유명\n유물\n유산\n유적\n유치원\n유학\n유행\n유형\n육군\n육상\n육십\n육체\n은행\n음력\n음료\n음반\n음성\n음식\n음악\n음주\n의견\n의논\n의문\n의복\n의식\n의심\n의외로\n의욕\n의원\n의학\n이것\n이곳\n이념\n이놈\n이달\n이대로\n이동\n이렇게\n이력서\n이론적\n이름\n이민\n이발소\n이별\n이불\n이빨\n이상\n이성\n이슬\n이야기\n이용\n이웃\n이월\n이윽고\n이익\n이전\n이중\n이튿날\n이틀\n이혼\n인간\n인격\n인공\n인구\n인근\n인기\n인도\n인류\n인물\n인생\n인쇄\n인연\n인원\n인재\n인종\n인천\n인체\n인터넷\n인하\n인형\n일곱\n일기\n일단\n일대\n일등\n일반\n일본\n일부\n일상\n일생\n일손\n일요일\n일월\n일정\n일종\n일주일\n일찍\n일체\n일치\n일행\n일회용\n임금\n임무\n입대\n입력\n입맛\n입사\n입술\n입시\n입원\n입장\n입학\n자가용\n자격\n자극\n자동\n자랑\n자부심\n자식\n자신\n자연\n자원\n자율\n자전거\n자정\n자존심\n자판\n작가\n작년\n작성\n작업\n작용\n작은딸\n작품\n잔디\n잔뜩\n잔치\n잘못\n잠깐\n잠수함\n잠시\n잠옷\n잠자리\n잡지\n장관\n장군\n장기간\n장래\n장례\n장르\n장마\n장면\n장모\n장미\n장비\n장사\n장소\n장식\n장애인\n장인\n장점\n장차\n장학금\n재능\n재빨리\n재산\n재생\n재작년\n재정\n재채기\n재판\n재학\n재활용\n저것\n저고리\n저곳\n저녁\n저런\n저렇게\n저번\n저울\n저절로\n저축\n적극\n적당히\n적성\n적용\n적응\n전개\n전공\n전기\n전달\n전라도\n전망\n전문\n전반\n전부\n전세\n전시\n전용\n전자\n전쟁\n전주\n전철\n전체\n전통\n전혀\n전후\n절대\n절망\n절반\n절약\n절차\n점검\n점수\n점심\n점원\n점점\n점차\n접근\n접시\n접촉\n젓가락\n정거장\n정도\n정류장\n정리\n정말\n정면\n정문\n정반대\n정보\n정부\n정비\n정상\n정성\n정오\n정원\n정장\n정지\n정치\n정확히\n제공\n제과점\n제대로\n제목\n제발\n제법\n제삿날\n제안\n제일\n제작\n제주도\n제출\n제품\n제한\n조각\n조건\n조금\n조깅\n조명\n조미료\n조상\n조선\n조용히\n조절\n조정\n조직\n존댓말\n존재\n졸업\n졸음\n종교\n종로\n종류\n종소리\n종업원\n종종\n종합\n좌석\n죄인\n주관적\n주름\n주말\n주머니\n주먹\n주문\n주민\n주방\n주변\n주식\n주인\n주일\n주장\n주전자\n주택\n준비\n줄거리\n줄기\n줄무늬\n중간\n중계방송\n중국\n중년\n중단\n중독\n중반\n중부\n중세\n중소기업\n중순\n중앙\n중요\n중학교\n즉석\n즉시\n즐거움\n증가\n증거\n증권\n증상\n증세\n지각\n지갑\n지경\n지극히\n지금\n지급\n지능\n지름길\n지리산\n지방\n지붕\n지식\n지역\n지우개\n지원\n지적\n지점\n지진\n지출\n직선\n직업\n직원\n직장\n진급\n진동\n진로\n진료\n진리\n진짜\n진찰\n진출\n진통\n진행\n질문\n질병\n질서\n짐작\n집단\n집안\n집중\n짜증\n찌꺼기\n차남\n차라리\n차량\n차림\n차별\n차선\n차츰\n착각\n찬물\n찬성\n참가\n참기름\n참새\n참석\n참여\n참외\n참조\n찻잔\n창가\n창고\n창구\n창문\n창밖\n창작\n창조\n채널\n채점\n책가방\n책방\n책상\n책임\n챔피언\n처벌\n처음\n천국\n천둥\n천장\n천재\n천천히\n철도\n철저히\n철학\n첫날\n첫째\n청년\n청바지\n청소\n청춘\n체계\n체력\n체온\n체육\n체중\n체험\n초등학생\n초반\n초밥\n초상화\n초순\n초여름\n초원\n초저녁\n초점\n초청\n초콜릿\n촛불\n총각\n총리\n총장\n촬영\n최근\n최상\n최선\n최신\n최악\n최종\n추석\n추억\n추진\n추천\n추측\n축구\n축소\n축제\n축하\n출근\n출발\n출산\n출신\n출연\n출입\n출장\n출판\n충격\n충고\n충돌\n충분히\n충청도\n취업\n취직\n취향\n치약\n친구\n친척\n칠십\n칠월\n칠판\n침대\n침묵\n침실\n칫솔\n칭찬\n카메라\n카운터\n칼국수\n캐릭터\n캠퍼스\n캠페인\n커튼\n컨디션\n컬러\n컴퓨터\n코끼리\n코미디\n콘서트\n콜라\n콤플렉스\n콩나물\n쾌감\n쿠데타\n크림\n큰길\n큰딸\n큰소리\n큰아들\n큰어머니\n큰일\n큰절\n클래식\n클럽\n킬로\n타입\n타자기\n탁구\n탁자\n탄생\n태권도\n태양\n태풍\n택시\n탤런트\n터널\n터미널\n테니스\n테스트\n테이블\n텔레비전\n토론\n토마토\n토요일\n통계\n통과\n통로\n통신\n통역\n통일\n통장\n통제\n통증\n통합\n통화\n퇴근\n퇴원\n퇴직금\n튀김\n트럭\n특급\n특별\n특성\n특수\n특징\n특히\n튼튼히\n티셔츠\n파란색\n파일\n파출소\n판결\n판단\n판매\n판사\n팔십\n팔월\n팝송\n패션\n팩스\n팩시밀리\n팬티\n퍼센트\n페인트\n편견\n편의\n편지\n편히\n평가\n평균\n평생\n평소\n평양\n평일\n평화\n포스터\n포인트\n포장\n포함\n표면\n표정\n표준\n표현\n품목\n품질\n풍경\n풍속\n풍습\n프랑스\n프린터\n플라스틱\n피곤\n피망\n피아노\n필름\n필수\n필요\n필자\n필통\n핑계\n하느님\n하늘\n하드웨어\n하룻밤\n하반기\n하숙집\n하순\n하여튼\n하지만\n하천\n하품\n하필\n학과\n학교\n학급\n학기\n학년\n학력\n학번\n학부모\n학비\n학생\n학술\n학습\n학용품\n학원\n학위\n학자\n학점\n한계\n한글\n한꺼번에\n한낮\n한눈\n한동안\n한때\n한라산\n한마디\n한문\n한번\n한복\n한식\n한여름\n한쪽\n할머니\n할아버지\n할인\n함께\n함부로\n합격\n합리적\n항공\n항구\n항상\n항의\n해결\n해군\n해답\n해당\n해물\n해석\n해설\n해수욕장\n해안\n핵심\n핸드백\n햄버거\n햇볕\n햇살\n행동\n행복\n행사\n행운\n행위\n향기\n향상\n향수\n허락\n허용\n헬기\n현관\n현금\n현대\n현상\n현실\n현장\n현재\n현지\n혈액\n협력\n형부\n형사\n형수\n형식\n형제\n형태\n형편\n혜택\n호기심\n호남\n호랑이\n호박\n호텔\n호흡\n혹시\n홀로\n홈페이지\n홍보\n홍수\n홍차\n화면\n화분\n화살\n화요일\n화장\n화학\n확보\n확인\n확장\n확정\n환갑\n환경\n환영\n환율\n환자\n활기\n활동\n활발히\n활용\n활짝\n회견\n회관\n회복\n회색\n회원\n회장\n회전\n횟수\n횡단보도\n효율적\n후반\n후춧가루\n훈련\n훨씬\n휴식\n휴일\n흉내\n흐름\n흑백\n흑인\n흔적\n흔히\n흥미\n흥분\n희곡\n희망\n희생\n흰색\n힘껏`.split('\\n');\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ox/node_modules/@scure/bip39/esm/wordlists/korean.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ox/node_modules/@scure/bip39/esm/wordlists/portuguese.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/ox/node_modules/@scure/bip39/esm/wordlists/portuguese.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   wordlist: () => (/* binding */ wordlist)\n/* harmony export */ });\nconst wordlist = `abacate\nabaixo\nabalar\nabater\nabduzir\nabelha\naberto\nabismo\nabotoar\nabranger\nabreviar\nabrigar\nabrupto\nabsinto\nabsoluto\nabsurdo\nabutre\nacabado\nacalmar\nacampar\nacanhar\nacaso\naceitar\nacelerar\nacenar\nacervo\nacessar\nacetona\nachatar\nacidez\nacima\nacionado\nacirrar\naclamar\naclive\nacolhida\nacomodar\nacoplar\nacordar\nacumular\nacusador\nadaptar\nadega\nadentro\nadepto\nadequar\naderente\nadesivo\nadeus\nadiante\naditivo\nadjetivo\nadjunto\nadmirar\nadorar\nadquirir\nadubo\nadverso\nadvogado\naeronave\nafastar\naferir\nafetivo\nafinador\nafivelar\naflito\nafluente\nafrontar\nagachar\nagarrar\nagasalho\nagenciar\nagilizar\nagiota\nagitado\nagora\nagradar\nagreste\nagrupar\naguardar\nagulha\najoelhar\najudar\najustar\nalameda\nalarme\nalastrar\nalavanca\nalbergue\nalbino\nalcatra\naldeia\nalecrim\nalegria\nalertar\nalface\nalfinete\nalgum\nalheio\naliar\nalicate\nalienar\nalinhar\naliviar\nalmofada\nalocar\nalpiste\nalterar\naltitude\nalucinar\nalugar\naluno\nalusivo\nalvo\namaciar\namador\namarelo\namassar\nambas\nambiente\nameixa\namenizar\namido\namistoso\namizade\namolador\namontoar\namoroso\namostra\namparar\nampliar\nampola\nanagrama\nanalisar\nanarquia\nanatomia\nandaime\nanel\nanexo\nangular\nanimar\nanjo\nanomalia\nanotado\nansioso\nanterior\nanuidade\nanunciar\nanzol\napagador\napalpar\napanhado\napego\napelido\napertada\napesar\napetite\napito\naplauso\naplicada\napoio\napontar\naposta\naprendiz\naprovar\naquecer\narame\naranha\narara\narcada\nardente\nareia\narejar\narenito\naresta\nargiloso\nargola\narma\narquivo\narraial\narrebate\narriscar\narroba\narrumar\narsenal\narterial\nartigo\narvoredo\nasfaltar\nasilado\naspirar\nassador\nassinar\nassoalho\nassunto\nastral\natacado\natadura\natalho\natarefar\natear\natender\naterro\nateu\natingir\natirador\nativo\natoleiro\natracar\natrevido\natriz\natual\natum\nauditor\naumentar\naura\naurora\nautismo\nautoria\nautuar\navaliar\navante\navaria\navental\navesso\naviador\navisar\navulso\naxila\nazarar\nazedo\nazeite\nazulejo\nbabar\nbabosa\nbacalhau\nbacharel\nbacia\nbagagem\nbaiano\nbailar\nbaioneta\nbairro\nbaixista\nbajular\nbaleia\nbaliza\nbalsa\nbanal\nbandeira\nbanho\nbanir\nbanquete\nbarato\nbarbado\nbaronesa\nbarraca\nbarulho\nbaseado\nbastante\nbatata\nbatedor\nbatida\nbatom\nbatucar\nbaunilha\nbeber\nbeijo\nbeirada\nbeisebol\nbeldade\nbeleza\nbelga\nbeliscar\nbendito\nbengala\nbenzer\nberimbau\nberlinda\nberro\nbesouro\nbexiga\nbezerro\nbico\nbicudo\nbienal\nbifocal\nbifurcar\nbigorna\nbilhete\nbimestre\nbimotor\nbiologia\nbiombo\nbiosfera\nbipolar\nbirrento\nbiscoito\nbisneto\nbispo\nbissexto\nbitola\nbizarro\nblindado\nbloco\nbloquear\nboato\nbobagem\nbocado\nbocejo\nbochecha\nboicotar\nbolada\nboletim\nbolha\nbolo\nbombeiro\nbonde\nboneco\nbonita\nborbulha\nborda\nboreal\nborracha\nbovino\nboxeador\nbranco\nbrasa\nbraveza\nbreu\nbriga\nbrilho\nbrincar\nbroa\nbrochura\nbronzear\nbroto\nbruxo\nbucha\nbudismo\nbufar\nbule\nburaco\nbusca\nbusto\nbuzina\ncabana\ncabelo\ncabide\ncabo\ncabrito\ncacau\ncacetada\ncachorro\ncacique\ncadastro\ncadeado\ncafezal\ncaiaque\ncaipira\ncaixote\ncajado\ncaju\ncalafrio\ncalcular\ncaldeira\ncalibrar\ncalmante\ncalota\ncamada\ncambista\ncamisa\ncamomila\ncampanha\ncamuflar\ncanavial\ncancelar\ncaneta\ncanguru\ncanhoto\ncanivete\ncanoa\ncansado\ncantar\ncanudo\ncapacho\ncapela\ncapinar\ncapotar\ncapricho\ncaptador\ncapuz\ncaracol\ncarbono\ncardeal\ncareca\ncarimbar\ncarneiro\ncarpete\ncarreira\ncartaz\ncarvalho\ncasaco\ncasca\ncasebre\ncastelo\ncasulo\ncatarata\ncativar\ncaule\ncausador\ncautelar\ncavalo\ncaverna\ncebola\ncedilha\ncegonha\ncelebrar\ncelular\ncenoura\ncenso\ncenteio\ncercar\ncerrado\ncerteiro\ncerveja\ncetim\ncevada\nchacota\nchaleira\nchamado\nchapada\ncharme\nchatice\nchave\nchefe\nchegada\ncheiro\ncheque\nchicote\nchifre\nchinelo\nchocalho\nchover\nchumbo\nchutar\nchuva\ncicatriz\nciclone\ncidade\ncidreira\nciente\ncigana\ncimento\ncinto\ncinza\nciranda\ncircuito\ncirurgia\ncitar\nclareza\nclero\nclicar\nclone\nclube\ncoado\ncoagir\ncobaia\ncobertor\ncobrar\ncocada\ncoelho\ncoentro\ncoeso\ncogumelo\ncoibir\ncoifa\ncoiote\ncolar\ncoleira\ncolher\ncolidir\ncolmeia\ncolono\ncoluna\ncomando\ncombinar\ncomentar\ncomitiva\ncomover\ncomplexo\ncomum\nconcha\ncondor\nconectar\nconfuso\ncongelar\nconhecer\nconjugar\nconsumir\ncontrato\nconvite\ncooperar\ncopeiro\ncopiador\ncopo\ncoquetel\ncoragem\ncordial\ncorneta\ncoronha\ncorporal\ncorreio\ncortejo\ncoruja\ncorvo\ncosseno\ncostela\ncotonete\ncouro\ncouve\ncovil\ncozinha\ncratera\ncravo\ncreche\ncredor\ncreme\ncrer\ncrespo\ncriada\ncriminal\ncrioulo\ncrise\ncriticar\ncrosta\ncrua\ncruzeiro\ncubano\ncueca\ncuidado\ncujo\nculatra\nculminar\nculpar\ncultura\ncumprir\ncunhado\ncupido\ncurativo\ncurral\ncursar\ncurto\ncuspir\ncustear\ncutelo\ndamasco\ndatar\ndebater\ndebitar\ndeboche\ndebulhar\ndecalque\ndecimal\ndeclive\ndecote\ndecretar\ndedal\ndedicado\ndeduzir\ndefesa\ndefumar\ndegelo\ndegrau\ndegustar\ndeitado\ndeixar\ndelator\ndelegado\ndelinear\ndelonga\ndemanda\ndemitir\ndemolido\ndentista\ndepenado\ndepilar\ndepois\ndepressa\ndepurar\nderiva\nderramar\ndesafio\ndesbotar\ndescanso\ndesenho\ndesfiado\ndesgaste\ndesigual\ndeslize\ndesmamar\ndesova\ndespesa\ndestaque\ndesviar\ndetalhar\ndetentor\ndetonar\ndetrito\ndeusa\ndever\ndevido\ndevotado\ndezena\ndiagrama\ndialeto\ndidata\ndifuso\ndigitar\ndilatado\ndiluente\ndiminuir\ndinastia\ndinheiro\ndiocese\ndireto\ndiscreta\ndisfarce\ndisparo\ndisquete\ndissipar\ndistante\nditador\ndiurno\ndiverso\ndivisor\ndivulgar\ndizer\ndobrador\ndolorido\ndomador\ndominado\ndonativo\ndonzela\ndormente\ndorsal\ndosagem\ndourado\ndoutor\ndrenagem\ndrible\ndrogaria\nduelar\nduende\ndueto\nduplo\nduquesa\ndurante\nduvidoso\neclodir\necoar\necologia\nedificar\nedital\neducado\nefeito\nefetivar\nejetar\nelaborar\neleger\neleitor\nelenco\nelevador\neliminar\nelogiar\nembargo\nembolado\nembrulho\nembutido\nemenda\nemergir\nemissor\nempatia\nempenho\nempinado\nempolgar\nemprego\nempurrar\nemulador\nencaixe\nencenado\nenchente\nencontro\nendeusar\nendossar\nenfaixar\nenfeite\nenfim\nengajado\nengenho\nenglobar\nengomado\nengraxar\nenguia\nenjoar\nenlatar\nenquanto\nenraizar\nenrolado\nenrugar\nensaio\nenseada\nensino\nensopado\nentanto\nenteado\nentidade\nentortar\nentrada\nentulho\nenvergar\nenviado\nenvolver\nenxame\nenxerto\nenxofre\nenxuto\nepiderme\nequipar\nereto\nerguido\nerrata\nerva\nervilha\nesbanjar\nesbelto\nescama\nescola\nescrita\nescuta\nesfinge\nesfolar\nesfregar\nesfumado\nesgrima\nesmalte\nespanto\nespelho\nespiga\nesponja\nespreita\nespumar\nesquerda\nestaca\nesteira\nesticar\nestofado\nestrela\nestudo\nesvaziar\netanol\netiqueta\neuforia\neuropeu\nevacuar\nevaporar\nevasivo\neventual\nevidente\nevoluir\nexagero\nexalar\nexaminar\nexato\nexausto\nexcesso\nexcitar\nexclamar\nexecutar\nexemplo\nexibir\nexigente\nexonerar\nexpandir\nexpelir\nexpirar\nexplanar\nexposto\nexpresso\nexpulsar\nexterno\nextinto\nextrato\nfabricar\nfabuloso\nfaceta\nfacial\nfada\nfadiga\nfaixa\nfalar\nfalta\nfamiliar\nfandango\nfanfarra\nfantoche\nfardado\nfarelo\nfarinha\nfarofa\nfarpa\nfartura\nfatia\nfator\nfavorita\nfaxina\nfazenda\nfechado\nfeijoada\nfeirante\nfelino\nfeminino\nfenda\nfeno\nfera\nferiado\nferrugem\nferver\nfestejar\nfetal\nfeudal\nfiapo\nfibrose\nficar\nficheiro\nfigurado\nfileira\nfilho\nfilme\nfiltrar\nfirmeza\nfisgada\nfissura\nfita\nfivela\nfixador\nfixo\nflacidez\nflamingo\nflanela\nflechada\nflora\nflutuar\nfluxo\nfocal\nfocinho\nfofocar\nfogo\nfoguete\nfoice\nfolgado\nfolheto\nforjar\nformiga\nforno\nforte\nfosco\nfossa\nfragata\nfralda\nfrango\nfrasco\nfraterno\nfreira\nfrente\nfretar\nfrieza\nfriso\nfritura\nfronha\nfrustrar\nfruteira\nfugir\nfulano\nfuligem\nfundar\nfungo\nfunil\nfurador\nfurioso\nfutebol\ngabarito\ngabinete\ngado\ngaiato\ngaiola\ngaivota\ngalega\ngalho\ngalinha\ngalocha\nganhar\ngaragem\ngarfo\ngargalo\ngarimpo\ngaroupa\ngarrafa\ngasoduto\ngasto\ngata\ngatilho\ngaveta\ngazela\ngelado\ngeleia\ngelo\ngemada\ngemer\ngemido\ngeneroso\ngengiva\ngenial\ngenoma\ngenro\ngeologia\ngerador\ngerminar\ngesso\ngestor\nginasta\ngincana\ngingado\ngirafa\ngirino\nglacial\nglicose\nglobal\nglorioso\ngoela\ngoiaba\ngolfe\ngolpear\ngordura\ngorjeta\ngorro\ngostoso\ngoteira\ngovernar\ngracejo\ngradual\ngrafite\ngralha\ngrampo\ngranada\ngratuito\ngraveto\ngraxa\ngrego\ngrelhar\ngreve\ngrilo\ngrisalho\ngritaria\ngrosso\ngrotesco\ngrudado\ngrunhido\ngruta\nguache\nguarani\nguaxinim\nguerrear\nguiar\nguincho\nguisado\ngula\nguloso\nguru\nhabitar\nharmonia\nhaste\nhaver\nhectare\nherdar\nheresia\nhesitar\nhiato\nhibernar\nhidratar\nhiena\nhino\nhipismo\nhipnose\nhipoteca\nhoje\nholofote\nhomem\nhonesto\nhonrado\nhormonal\nhospedar\nhumorado\niate\nideia\nidoso\nignorado\nigreja\niguana\nileso\nilha\niludido\niluminar\nilustrar\nimagem\nimediato\nimenso\nimersivo\niminente\nimitador\nimortal\nimpacto\nimpedir\nimplante\nimpor\nimprensa\nimpune\nimunizar\ninalador\ninapto\ninativo\nincenso\ninchar\nincidir\nincluir\nincolor\nindeciso\nindireto\nindutor\nineficaz\ninerente\ninfantil\ninfestar\ninfinito\ninflamar\ninformal\ninfrator\ningerir\ninibido\ninicial\ninimigo\ninjetar\ninocente\ninodoro\ninovador\ninox\ninquieto\ninscrito\ninseto\ninsistir\ninspetor\ninstalar\ninsulto\nintacto\nintegral\nintimar\nintocado\nintriga\ninvasor\ninverno\ninvicto\ninvocar\niogurte\niraniano\nironizar\nirreal\nirritado\nisca\nisento\nisolado\nisqueiro\nitaliano\njaneiro\njangada\njanta\njararaca\njardim\njarro\njasmim\njato\njavali\njazida\njejum\njoaninha\njoelhada\njogador\njoia\njornal\njorrar\njovem\njuba\njudeu\njudoca\njuiz\njulgador\njulho\njurado\njurista\njuro\njusta\nlabareda\nlaboral\nlacre\nlactante\nladrilho\nlagarta\nlagoa\nlaje\nlamber\nlamentar\nlaminar\nlampejo\nlanche\nlapidar\nlapso\nlaranja\nlareira\nlargura\nlasanha\nlastro\nlateral\nlatido\nlavanda\nlavoura\nlavrador\nlaxante\nlazer\nlealdade\nlebre\nlegado\nlegendar\nlegista\nleigo\nleiloar\nleitura\nlembrete\nleme\nlenhador\nlentilha\nleoa\nlesma\nleste\nletivo\nletreiro\nlevar\nleveza\nlevitar\nliberal\nlibido\nliderar\nligar\nligeiro\nlimitar\nlimoeiro\nlimpador\nlinda\nlinear\nlinhagem\nliquidez\nlistagem\nlisura\nlitoral\nlivro\nlixa\nlixeira\nlocador\nlocutor\nlojista\nlombo\nlona\nlonge\nlontra\nlorde\nlotado\nloteria\nloucura\nlousa\nlouvar\nluar\nlucidez\nlucro\nluneta\nlustre\nlutador\nluva\nmacaco\nmacete\nmachado\nmacio\nmadeira\nmadrinha\nmagnata\nmagreza\nmaior\nmais\nmalandro\nmalha\nmalote\nmaluco\nmamilo\nmamoeiro\nmamute\nmanada\nmancha\nmandato\nmanequim\nmanhoso\nmanivela\nmanobrar\nmansa\nmanter\nmanusear\nmapeado\nmaquinar\nmarcador\nmaresia\nmarfim\nmargem\nmarinho\nmarmita\nmaroto\nmarquise\nmarreco\nmartelo\nmarujo\nmascote\nmasmorra\nmassagem\nmastigar\nmatagal\nmaterno\nmatinal\nmatutar\nmaxilar\nmedalha\nmedida\nmedusa\nmegafone\nmeiga\nmelancia\nmelhor\nmembro\nmemorial\nmenino\nmenos\nmensagem\nmental\nmerecer\nmergulho\nmesada\nmesclar\nmesmo\nmesquita\nmestre\nmetade\nmeteoro\nmetragem\nmexer\nmexicano\nmicro\nmigalha\nmigrar\nmilagre\nmilenar\nmilhar\nmimado\nminerar\nminhoca\nministro\nminoria\nmiolo\nmirante\nmirtilo\nmisturar\nmocidade\nmoderno\nmodular\nmoeda\nmoer\nmoinho\nmoita\nmoldura\nmoleza\nmolho\nmolinete\nmolusco\nmontanha\nmoqueca\nmorango\nmorcego\nmordomo\nmorena\nmosaico\nmosquete\nmostarda\nmotel\nmotim\nmoto\nmotriz\nmuda\nmuito\nmulata\nmulher\nmultar\nmundial\nmunido\nmuralha\nmurcho\nmuscular\nmuseu\nmusical\nnacional\nnadador\nnaja\nnamoro\nnarina\nnarrado\nnascer\nnativa\nnatureza\nnavalha\nnavegar\nnavio\nneblina\nnebuloso\nnegativa\nnegociar\nnegrito\nnervoso\nneta\nneural\nnevasca\nnevoeiro\nninar\nninho\nnitidez\nnivelar\nnobreza\nnoite\nnoiva\nnomear\nnominal\nnordeste\nnortear\nnotar\nnoticiar\nnoturno\nnovelo\nnovilho\nnovo\nnublado\nnudez\nnumeral\nnupcial\nnutrir\nnuvem\nobcecado\nobedecer\nobjetivo\nobrigado\nobscuro\nobstetra\nobter\nobturar\nocidente\nocioso\nocorrer\noculista\nocupado\nofegante\nofensiva\noferenda\noficina\nofuscado\nogiva\nolaria\noleoso\nolhar\noliveira\nombro\nomelete\nomisso\nomitir\nondulado\noneroso\nontem\nopcional\noperador\noponente\noportuno\noposto\norar\norbitar\nordem\nordinal\norfanato\norgasmo\norgulho\noriental\norigem\noriundo\norla\nortodoxo\norvalho\noscilar\nossada\nosso\nostentar\notimismo\nousadia\noutono\noutubro\nouvido\novelha\novular\noxidar\noxigenar\npacato\npaciente\npacote\npactuar\npadaria\npadrinho\npagar\npagode\npainel\npairar\npaisagem\npalavra\npalestra\npalheta\npalito\npalmada\npalpitar\npancada\npanela\npanfleto\npanqueca\npantanal\npapagaio\npapelada\npapiro\nparafina\nparcial\npardal\nparede\npartida\npasmo\npassado\npastel\npatamar\npatente\npatinar\npatrono\npaulada\npausar\npeculiar\npedalar\npedestre\npediatra\npedra\npegada\npeitoral\npeixe\npele\npelicano\npenca\npendurar\npeneira\npenhasco\npensador\npente\nperceber\nperfeito\npergunta\nperito\npermitir\nperna\nperplexo\npersiana\npertence\nperuca\npescado\npesquisa\npessoa\npetiscar\npiada\npicado\npiedade\npigmento\npilastra\npilhado\npilotar\npimenta\npincel\npinguim\npinha\npinote\npintar\npioneiro\npipoca\npiquete\npiranha\npires\npirueta\npiscar\npistola\npitanga\npivete\nplanta\nplaqueta\nplatina\nplebeu\nplumagem\npluvial\npneu\npoda\npoeira\npoetisa\npolegada\npoliciar\npoluente\npolvilho\npomar\npomba\nponderar\npontaria\npopuloso\nporta\npossuir\npostal\npote\npoupar\npouso\npovoar\npraia\nprancha\nprato\npraxe\nprece\npredador\nprefeito\npremiar\nprensar\npreparar\npresilha\npretexto\nprevenir\nprezar\nprimata\nprincesa\nprisma\nprivado\nprocesso\nproduto\nprofeta\nproibido\nprojeto\nprometer\npropagar\nprosa\nprotetor\nprovador\npublicar\npudim\npular\npulmonar\npulseira\npunhal\npunir\npupilo\npureza\npuxador\nquadra\nquantia\nquarto\nquase\nquebrar\nqueda\nqueijo\nquente\nquerido\nquimono\nquina\nquiosque\nrabanada\nrabisco\nrachar\nracionar\nradial\nraiar\nrainha\nraio\nraiva\nrajada\nralado\nramal\nranger\nranhura\nrapadura\nrapel\nrapidez\nraposa\nraquete\nraridade\nrasante\nrascunho\nrasgar\nraspador\nrasteira\nrasurar\nratazana\nratoeira\nrealeza\nreanimar\nreaver\nrebaixar\nrebelde\nrebolar\nrecado\nrecente\nrecheio\nrecibo\nrecordar\nrecrutar\nrecuar\nrede\nredimir\nredonda\nreduzida\nreenvio\nrefinar\nrefletir\nrefogar\nrefresco\nrefugiar\nregalia\nregime\nregra\nreinado\nreitor\nrejeitar\nrelativo\nremador\nremendo\nremorso\nrenovado\nreparo\nrepelir\nrepleto\nrepolho\nrepresa\nrepudiar\nrequerer\nresenha\nresfriar\nresgatar\nresidir\nresolver\nrespeito\nressaca\nrestante\nresumir\nretalho\nreter\nretirar\nretomada\nretratar\nrevelar\nrevisor\nrevolta\nriacho\nrica\nrigidez\nrigoroso\nrimar\nringue\nrisada\nrisco\nrisonho\nrobalo\nrochedo\nrodada\nrodeio\nrodovia\nroedor\nroleta\nromano\nroncar\nrosado\nroseira\nrosto\nrota\nroteiro\nrotina\nrotular\nrouco\nroupa\nroxo\nrubro\nrugido\nrugoso\nruivo\nrumo\nrupestre\nrusso\nsabor\nsaciar\nsacola\nsacudir\nsadio\nsafira\nsaga\nsagrada\nsaibro\nsalada\nsaleiro\nsalgado\nsaliva\nsalpicar\nsalsicha\nsaltar\nsalvador\nsambar\nsamurai\nsanar\nsanfona\nsangue\nsanidade\nsapato\nsarda\nsargento\nsarjeta\nsaturar\nsaudade\nsaxofone\nsazonal\nsecar\nsecular\nseda\nsedento\nsediado\nsedoso\nsedutor\nsegmento\nsegredo\nsegundo\nseiva\nseleto\nselvagem\nsemanal\nsemente\nsenador\nsenhor\nsensual\nsentado\nseparado\nsereia\nseringa\nserra\nservo\nsetembro\nsetor\nsigilo\nsilhueta\nsilicone\nsimetria\nsimpatia\nsimular\nsinal\nsincero\nsingular\nsinopse\nsintonia\nsirene\nsiri\nsituado\nsoberano\nsobra\nsocorro\nsogro\nsoja\nsolda\nsoletrar\nsolteiro\nsombrio\nsonata\nsondar\nsonegar\nsonhador\nsono\nsoprano\nsoquete\nsorrir\nsorteio\nsossego\nsotaque\nsoterrar\nsovado\nsozinho\nsuavizar\nsubida\nsubmerso\nsubsolo\nsubtrair\nsucata\nsucesso\nsuco\nsudeste\nsufixo\nsugador\nsugerir\nsujeito\nsulfato\nsumir\nsuor\nsuperior\nsuplicar\nsuposto\nsuprimir\nsurdina\nsurfista\nsurpresa\nsurreal\nsurtir\nsuspiro\nsustento\ntabela\ntablete\ntabuada\ntacho\ntagarela\ntalher\ntalo\ntalvez\ntamanho\ntamborim\ntampa\ntangente\ntanto\ntapar\ntapioca\ntardio\ntarefa\ntarja\ntarraxa\ntatuagem\ntaurino\ntaxativo\ntaxista\nteatral\ntecer\ntecido\nteclado\ntedioso\nteia\nteimar\ntelefone\ntelhado\ntempero\ntenente\ntensor\ntentar\ntermal\nterno\nterreno\ntese\ntesoura\ntestado\nteto\ntextura\ntexugo\ntiara\ntigela\ntijolo\ntimbrar\ntimidez\ntingido\ntinteiro\ntiragem\ntitular\ntoalha\ntocha\ntolerar\ntolice\ntomada\ntomilho\ntonel\ntontura\ntopete\ntora\ntorcido\ntorneio\ntorque\ntorrada\ntorto\ntostar\ntouca\ntoupeira\ntoxina\ntrabalho\ntracejar\ntradutor\ntrafegar\ntrajeto\ntrama\ntrancar\ntrapo\ntraseiro\ntratador\ntravar\ntreino\ntremer\ntrepidar\ntrevo\ntriagem\ntribo\ntriciclo\ntridente\ntrilogia\ntrindade\ntriplo\ntriturar\ntriunfal\ntrocar\ntrombeta\ntrova\ntrunfo\ntruque\ntubular\ntucano\ntudo\ntulipa\ntupi\nturbo\nturma\nturquesa\ntutelar\ntutorial\nuivar\numbigo\nunha\nunidade\nuniforme\nurologia\nurso\nurtiga\nurubu\nusado\nusina\nusufruir\nvacina\nvadiar\nvagaroso\nvaidoso\nvala\nvalente\nvalidade\nvalores\nvantagem\nvaqueiro\nvaranda\nvareta\nvarrer\nvascular\nvasilha\nvassoura\nvazar\nvazio\nveado\nvedar\nvegetar\nveicular\nveleiro\nvelhice\nveludo\nvencedor\nvendaval\nvenerar\nventre\nverbal\nverdade\nvereador\nvergonha\nvermelho\nverniz\nversar\nvertente\nvespa\nvestido\nvetorial\nviaduto\nviagem\nviajar\nviatura\nvibrador\nvideira\nvidraria\nviela\nviga\nvigente\nvigiar\nvigorar\nvilarejo\nvinco\nvinheta\nvinil\nvioleta\nvirada\nvirtude\nvisitar\nvisto\nvitral\nviveiro\nvizinho\nvoador\nvoar\nvogal\nvolante\nvoleibol\nvoltagem\nvolumoso\nvontade\nvulto\nvuvuzela\nxadrez\nxarope\nxeque\nxeretar\nxerife\nxingar\nzangado\nzarpar\nzebu\nzelador\nzombar\nzoologia\nzumbido`.split('\\n');\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ox/node_modules/@scure/bip39/esm/wordlists/portuguese.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ox/node_modules/@scure/bip39/esm/wordlists/simplified-chinese.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/ox/node_modules/@scure/bip39/esm/wordlists/simplified-chinese.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   wordlist: () => (/* binding */ wordlist)\n/* harmony export */ });\nconst wordlist = `的\n一\n是\n在\n不\n了\n有\n和\n人\n这\n中\n大\n为\n上\n个\n国\n我\n以\n要\n他\n时\n来\n用\n们\n生\n到\n作\n地\n于\n出\n就\n分\n对\n成\n会\n可\n主\n发\n年\n动\n同\n工\n也\n能\n下\n过\n子\n说\n产\n种\n面\n而\n方\n后\n多\n定\n行\n学\n法\n所\n民\n得\n经\n十\n三\n之\n进\n着\n等\n部\n度\n家\n电\n力\n里\n如\n水\n化\n高\n自\n二\n理\n起\n小\n物\n现\n实\n加\n量\n都\n两\n体\n制\n机\n当\n使\n点\n从\n业\n本\n去\n把\n性\n好\n应\n开\n它\n合\n还\n因\n由\n其\n些\n然\n前\n外\n天\n政\n四\n日\n那\n社\n义\n事\n平\n形\n相\n全\n表\n间\n样\n与\n关\n各\n重\n新\n线\n内\n数\n正\n心\n反\n你\n明\n看\n原\n又\n么\n利\n比\n或\n但\n质\n气\n第\n向\n道\n命\n此\n变\n条\n只\n没\n结\n解\n问\n意\n建\n月\n公\n无\n系\n军\n很\n情\n者\n最\n立\n代\n想\n已\n通\n并\n提\n直\n题\n党\n程\n展\n五\n果\n料\n象\n员\n革\n位\n入\n常\n文\n总\n次\n品\n式\n活\n设\n及\n管\n特\n件\n长\n求\n老\n头\n基\n资\n边\n流\n路\n级\n少\n图\n山\n统\n接\n知\n较\n将\n组\n见\n计\n别\n她\n手\n角\n期\n根\n论\n运\n农\n指\n几\n九\n区\n强\n放\n决\n西\n被\n干\n做\n必\n战\n先\n回\n则\n任\n取\n据\n处\n队\n南\n给\n色\n光\n门\n即\n保\n治\n北\n造\n百\n规\n热\n领\n七\n海\n口\n东\n导\n器\n压\n志\n世\n金\n增\n争\n济\n阶\n油\n思\n术\n极\n交\n受\n联\n什\n认\n六\n共\n权\n收\n证\n改\n清\n美\n再\n采\n转\n更\n单\n风\n切\n打\n白\n教\n速\n花\n带\n安\n场\n身\n车\n例\n真\n务\n具\n万\n每\n目\n至\n达\n走\n积\n示\n议\n声\n报\n斗\n完\n类\n八\n离\n华\n名\n确\n才\n科\n张\n信\n马\n节\n话\n米\n整\n空\n元\n况\n今\n集\n温\n传\n土\n许\n步\n群\n广\n石\n记\n需\n段\n研\n界\n拉\n林\n律\n叫\n且\n究\n观\n越\n织\n装\n影\n算\n低\n持\n音\n众\n书\n布\n复\n容\n儿\n须\n际\n商\n非\n验\n连\n断\n深\n难\n近\n矿\n千\n周\n委\n素\n技\n备\n半\n办\n青\n省\n列\n习\n响\n约\n支\n般\n史\n感\n劳\n便\n团\n往\n酸\n历\n市\n克\n何\n除\n消\n构\n府\n称\n太\n准\n精\n值\n号\n率\n族\n维\n划\n选\n标\n写\n存\n候\n毛\n亲\n快\n效\n斯\n院\n查\n江\n型\n眼\n王\n按\n格\n养\n易\n置\n派\n层\n片\n始\n却\n专\n状\n育\n厂\n京\n识\n适\n属\n圆\n包\n火\n住\n调\n满\n县\n局\n照\n参\n红\n细\n引\n听\n该\n铁\n价\n严\n首\n底\n液\n官\n德\n随\n病\n苏\n失\n尔\n死\n讲\n配\n女\n黄\n推\n显\n谈\n罪\n神\n艺\n呢\n席\n含\n企\n望\n密\n批\n营\n项\n防\n举\n球\n英\n氧\n势\n告\n李\n台\n落\n木\n帮\n轮\n破\n亚\n师\n围\n注\n远\n字\n材\n排\n供\n河\n态\n封\n另\n施\n减\n树\n溶\n怎\n止\n案\n言\n士\n均\n武\n固\n叶\n鱼\n波\n视\n仅\n费\n紧\n爱\n左\n章\n早\n朝\n害\n续\n轻\n服\n试\n食\n充\n兵\n源\n判\n护\n司\n足\n某\n练\n差\n致\n板\n田\n降\n黑\n犯\n负\n击\n范\n继\n兴\n似\n余\n坚\n曲\n输\n修\n故\n城\n夫\n够\n送\n笔\n船\n占\n右\n财\n吃\n富\n春\n职\n觉\n汉\n画\n功\n巴\n跟\n虽\n杂\n飞\n检\n吸\n助\n升\n阳\n互\n初\n创\n抗\n考\n投\n坏\n策\n古\n径\n换\n未\n跑\n留\n钢\n曾\n端\n责\n站\n简\n述\n钱\n副\n尽\n帝\n射\n草\n冲\n承\n独\n令\n限\n阿\n宣\n环\n双\n请\n超\n微\n让\n控\n州\n良\n轴\n找\n否\n纪\n益\n依\n优\n顶\n础\n载\n倒\n房\n突\n坐\n粉\n敌\n略\n客\n袁\n冷\n胜\n绝\n析\n块\n剂\n测\n丝\n协\n诉\n念\n陈\n仍\n罗\n盐\n友\n洋\n错\n苦\n夜\n刑\n移\n频\n逐\n靠\n混\n母\n短\n皮\n终\n聚\n汽\n村\n云\n哪\n既\n距\n卫\n停\n烈\n央\n察\n烧\n迅\n境\n若\n印\n洲\n刻\n括\n激\n孔\n搞\n甚\n室\n待\n核\n校\n散\n侵\n吧\n甲\n游\n久\n菜\n味\n旧\n模\n湖\n货\n损\n预\n阻\n毫\n普\n稳\n乙\n妈\n植\n息\n扩\n银\n语\n挥\n酒\n守\n拿\n序\n纸\n医\n缺\n雨\n吗\n针\n刘\n啊\n急\n唱\n误\n训\n愿\n审\n附\n获\n茶\n鲜\n粮\n斤\n孩\n脱\n硫\n肥\n善\n龙\n演\n父\n渐\n血\n欢\n械\n掌\n歌\n沙\n刚\n攻\n谓\n盾\n讨\n晚\n粒\n乱\n燃\n矛\n乎\n杀\n药\n宁\n鲁\n贵\n钟\n煤\n读\n班\n伯\n香\n介\n迫\n句\n丰\n培\n握\n兰\n担\n弦\n蛋\n沉\n假\n穿\n执\n答\n乐\n谁\n顺\n烟\n缩\n征\n脸\n喜\n松\n脚\n困\n异\n免\n背\n星\n福\n买\n染\n井\n概\n慢\n怕\n磁\n倍\n祖\n皇\n促\n静\n补\n评\n翻\n肉\n践\n尼\n衣\n宽\n扬\n棉\n希\n伤\n操\n垂\n秋\n宜\n氢\n套\n督\n振\n架\n亮\n末\n宪\n庆\n编\n牛\n触\n映\n雷\n销\n诗\n座\n居\n抓\n裂\n胞\n呼\n娘\n景\n威\n绿\n晶\n厚\n盟\n衡\n鸡\n孙\n延\n危\n胶\n屋\n乡\n临\n陆\n顾\n掉\n呀\n灯\n岁\n措\n束\n耐\n剧\n玉\n赵\n跳\n哥\n季\n课\n凯\n胡\n额\n款\n绍\n卷\n齐\n伟\n蒸\n殖\n永\n宗\n苗\n川\n炉\n岩\n弱\n零\n杨\n奏\n沿\n露\n杆\n探\n滑\n镇\n饭\n浓\n航\n怀\n赶\n库\n夺\n伊\n灵\n税\n途\n灭\n赛\n归\n召\n鼓\n播\n盘\n裁\n险\n康\n唯\n录\n菌\n纯\n借\n糖\n盖\n横\n符\n私\n努\n堂\n域\n枪\n润\n幅\n哈\n竟\n熟\n虫\n泽\n脑\n壤\n碳\n欧\n遍\n侧\n寨\n敢\n彻\n虑\n斜\n薄\n庭\n纳\n弹\n饲\n伸\n折\n麦\n湿\n暗\n荷\n瓦\n塞\n床\n筑\n恶\n户\n访\n塔\n奇\n透\n梁\n刀\n旋\n迹\n卡\n氯\n遇\n份\n毒\n泥\n退\n洗\n摆\n灰\n彩\n卖\n耗\n夏\n择\n忙\n铜\n献\n硬\n予\n繁\n圈\n雪\n函\n亦\n抽\n篇\n阵\n阴\n丁\n尺\n追\n堆\n雄\n迎\n泛\n爸\n楼\n避\n谋\n吨\n野\n猪\n旗\n累\n偏\n典\n馆\n索\n秦\n脂\n潮\n爷\n豆\n忽\n托\n惊\n塑\n遗\n愈\n朱\n替\n纤\n粗\n倾\n尚\n痛\n楚\n谢\n奋\n购\n磨\n君\n池\n旁\n碎\n骨\n监\n捕\n弟\n暴\n割\n贯\n殊\n释\n词\n亡\n壁\n顿\n宝\n午\n尘\n闻\n揭\n炮\n残\n冬\n桥\n妇\n警\n综\n招\n吴\n付\n浮\n遭\n徐\n您\n摇\n谷\n赞\n箱\n隔\n订\n男\n吹\n园\n纷\n唐\n败\n宋\n玻\n巨\n耕\n坦\n荣\n闭\n湾\n键\n凡\n驻\n锅\n救\n恩\n剥\n凝\n碱\n齿\n截\n炼\n麻\n纺\n禁\n废\n盛\n版\n缓\n净\n睛\n昌\n婚\n涉\n筒\n嘴\n插\n岸\n朗\n庄\n街\n藏\n姑\n贸\n腐\n奴\n啦\n惯\n乘\n伙\n恢\n匀\n纱\n扎\n辩\n耳\n彪\n臣\n亿\n璃\n抵\n脉\n秀\n萨\n俄\n网\n舞\n店\n喷\n纵\n寸\n汗\n挂\n洪\n贺\n闪\n柬\n爆\n烯\n津\n稻\n墙\n软\n勇\n像\n滚\n厘\n蒙\n芳\n肯\n坡\n柱\n荡\n腿\n仪\n旅\n尾\n轧\n冰\n贡\n登\n黎\n削\n钻\n勒\n逃\n障\n氨\n郭\n峰\n币\n港\n伏\n轨\n亩\n毕\n擦\n莫\n刺\n浪\n秘\n援\n株\n健\n售\n股\n岛\n甘\n泡\n睡\n童\n铸\n汤\n阀\n休\n汇\n舍\n牧\n绕\n炸\n哲\n磷\n绩\n朋\n淡\n尖\n启\n陷\n柴\n呈\n徒\n颜\n泪\n稍\n忘\n泵\n蓝\n拖\n洞\n授\n镜\n辛\n壮\n锋\n贫\n虚\n弯\n摩\n泰\n幼\n廷\n尊\n窗\n纲\n弄\n隶\n疑\n氏\n宫\n姐\n震\n瑞\n怪\n尤\n琴\n循\n描\n膜\n违\n夹\n腰\n缘\n珠\n穷\n森\n枝\n竹\n沟\n催\n绳\n忆\n邦\n剩\n幸\n浆\n栏\n拥\n牙\n贮\n礼\n滤\n钠\n纹\n罢\n拍\n咱\n喊\n袖\n埃\n勤\n罚\n焦\n潜\n伍\n墨\n欲\n缝\n姓\n刊\n饱\n仿\n奖\n铝\n鬼\n丽\n跨\n默\n挖\n链\n扫\n喝\n袋\n炭\n污\n幕\n诸\n弧\n励\n梅\n奶\n洁\n灾\n舟\n鉴\n苯\n讼\n抱\n毁\n懂\n寒\n智\n埔\n寄\n届\n跃\n渡\n挑\n丹\n艰\n贝\n碰\n拔\n爹\n戴\n码\n梦\n芽\n熔\n赤\n渔\n哭\n敬\n颗\n奔\n铅\n仲\n虎\n稀\n妹\n乏\n珍\n申\n桌\n遵\n允\n隆\n螺\n仓\n魏\n锐\n晓\n氮\n兼\n隐\n碍\n赫\n拨\n忠\n肃\n缸\n牵\n抢\n博\n巧\n壳\n兄\n杜\n讯\n诚\n碧\n祥\n柯\n页\n巡\n矩\n悲\n灌\n龄\n伦\n票\n寻\n桂\n铺\n圣\n恐\n恰\n郑\n趣\n抬\n荒\n腾\n贴\n柔\n滴\n猛\n阔\n辆\n妻\n填\n撤\n储\n签\n闹\n扰\n紫\n砂\n递\n戏\n吊\n陶\n伐\n喂\n疗\n瓶\n婆\n抚\n臂\n摸\n忍\n虾\n蜡\n邻\n胸\n巩\n挤\n偶\n弃\n槽\n劲\n乳\n邓\n吉\n仁\n烂\n砖\n租\n乌\n舰\n伴\n瓜\n浅\n丙\n暂\n燥\n橡\n柳\n迷\n暖\n牌\n秧\n胆\n详\n簧\n踏\n瓷\n谱\n呆\n宾\n糊\n洛\n辉\n愤\n竞\n隙\n怒\n粘\n乃\n绪\n肩\n籍\n敏\n涂\n熙\n皆\n侦\n悬\n掘\n享\n纠\n醒\n狂\n锁\n淀\n恨\n牲\n霸\n爬\n赏\n逆\n玩\n陵\n祝\n秒\n浙\n貌\n役\n彼\n悉\n鸭\n趋\n凤\n晨\n畜\n辈\n秩\n卵\n署\n梯\n炎\n滩\n棋\n驱\n筛\n峡\n冒\n啥\n寿\n译\n浸\n泉\n帽\n迟\n硅\n疆\n贷\n漏\n稿\n冠\n嫩\n胁\n芯\n牢\n叛\n蚀\n奥\n鸣\n岭\n羊\n凭\n串\n塘\n绘\n酵\n融\n盆\n锡\n庙\n筹\n冻\n辅\n摄\n袭\n筋\n拒\n僚\n旱\n钾\n鸟\n漆\n沈\n眉\n疏\n添\n棒\n穗\n硝\n韩\n逼\n扭\n侨\n凉\n挺\n碗\n栽\n炒\n杯\n患\n馏\n劝\n豪\n辽\n勃\n鸿\n旦\n吏\n拜\n狗\n埋\n辊\n掩\n饮\n搬\n骂\n辞\n勾\n扣\n估\n蒋\n绒\n雾\n丈\n朵\n姆\n拟\n宇\n辑\n陕\n雕\n偿\n蓄\n崇\n剪\n倡\n厅\n咬\n驶\n薯\n刷\n斥\n番\n赋\n奉\n佛\n浇\n漫\n曼\n扇\n钙\n桃\n扶\n仔\n返\n俗\n亏\n腔\n鞋\n棱\n覆\n框\n悄\n叔\n撞\n骗\n勘\n旺\n沸\n孤\n吐\n孟\n渠\n屈\n疾\n妙\n惜\n仰\n狠\n胀\n谐\n抛\n霉\n桑\n岗\n嘛\n衰\n盗\n渗\n脏\n赖\n涌\n甜\n曹\n阅\n肌\n哩\n厉\n烃\n纬\n毅\n昨\n伪\n症\n煮\n叹\n钉\n搭\n茎\n笼\n酷\n偷\n弓\n锥\n恒\n杰\n坑\n鼻\n翼\n纶\n叙\n狱\n逮\n罐\n络\n棚\n抑\n膨\n蔬\n寺\n骤\n穆\n冶\n枯\n册\n尸\n凸\n绅\n坯\n牺\n焰\n轰\n欣\n晋\n瘦\n御\n锭\n锦\n丧\n旬\n锻\n垄\n搜\n扑\n邀\n亭\n酯\n迈\n舒\n脆\n酶\n闲\n忧\n酚\n顽\n羽\n涨\n卸\n仗\n陪\n辟\n惩\n杭\n姚\n肚\n捉\n飘\n漂\n昆\n欺\n吾\n郎\n烷\n汁\n呵\n饰\n萧\n雅\n邮\n迁\n燕\n撒\n姻\n赴\n宴\n烦\n债\n帐\n斑\n铃\n旨\n醇\n董\n饼\n雏\n姿\n拌\n傅\n腹\n妥\n揉\n贤\n拆\n歪\n葡\n胺\n丢\n浩\n徽\n昂\n垫\n挡\n览\n贪\n慰\n缴\n汪\n慌\n冯\n诺\n姜\n谊\n凶\n劣\n诬\n耀\n昏\n躺\n盈\n骑\n乔\n溪\n丛\n卢\n抹\n闷\n咨\n刮\n驾\n缆\n悟\n摘\n铒\n掷\n颇\n幻\n柄\n惠\n惨\n佳\n仇\n腊\n窝\n涤\n剑\n瞧\n堡\n泼\n葱\n罩\n霍\n捞\n胎\n苍\n滨\n俩\n捅\n湘\n砍\n霞\n邵\n萄\n疯\n淮\n遂\n熊\n粪\n烘\n宿\n档\n戈\n驳\n嫂\n裕\n徙\n箭\n捐\n肠\n撑\n晒\n辨\n殿\n莲\n摊\n搅\n酱\n屏\n疫\n哀\n蔡\n堵\n沫\n皱\n畅\n叠\n阁\n莱\n敲\n辖\n钩\n痕\n坝\n巷\n饿\n祸\n丘\n玄\n溜\n曰\n逻\n彭\n尝\n卿\n妨\n艇\n吞\n韦\n怨\n矮\n歇`.split('\\n');\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ox/node_modules/@scure/bip39/esm/wordlists/simplified-chinese.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ox/node_modules/@scure/bip39/esm/wordlists/spanish.js":
/*!****************************************************************************!*\
  !*** ./node_modules/ox/node_modules/@scure/bip39/esm/wordlists/spanish.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   wordlist: () => (/* binding */ wordlist)\n/* harmony export */ });\nconst wordlist = `ábaco\nabdomen\nabeja\nabierto\nabogado\nabono\naborto\nabrazo\nabrir\nabuelo\nabuso\nacabar\nacademia\nacceso\nacción\naceite\nacelga\nacento\naceptar\nácido\naclarar\nacné\nacoger\nacoso\nactivo\nacto\nactriz\nactuar\nacudir\nacuerdo\nacusar\nadicto\nadmitir\nadoptar\nadorno\naduana\nadulto\naéreo\nafectar\nafición\nafinar\nafirmar\nágil\nagitar\nagonía\nagosto\nagotar\nagregar\nagrio\nagua\nagudo\náguila\naguja\nahogo\nahorro\naire\naislar\najedrez\najeno\najuste\nalacrán\nalambre\nalarma\nalba\nálbum\nalcalde\naldea\nalegre\nalejar\nalerta\naleta\nalfiler\nalga\nalgodón\naliado\naliento\nalivio\nalma\nalmeja\nalmíbar\naltar\nalteza\naltivo\nalto\naltura\nalumno\nalzar\namable\namante\namapola\namargo\namasar\námbar\námbito\nameno\namigo\namistad\namor\namparo\namplio\nancho\nanciano\nancla\nandar\nandén\nanemia\nángulo\nanillo\nánimo\nanís\nanotar\nantena\nantiguo\nantojo\nanual\nanular\nanuncio\nañadir\nañejo\naño\napagar\naparato\napetito\napio\naplicar\napodo\naporte\napoyo\naprender\naprobar\napuesta\napuro\narado\naraña\narar\nárbitro\nárbol\narbusto\narchivo\narco\narder\nardilla\narduo\nárea\nárido\naries\narmonía\narnés\naroma\narpa\narpón\narreglo\narroz\narruga\narte\nartista\nasa\nasado\nasalto\nascenso\nasegurar\naseo\nasesor\nasiento\nasilo\nasistir\nasno\nasombro\náspero\nastilla\nastro\nastuto\nasumir\nasunto\natajo\nataque\natar\natento\nateo\nático\natleta\nátomo\natraer\natroz\natún\naudaz\naudio\nauge\naula\naumento\nausente\nautor\naval\navance\navaro\nave\navellana\navena\navestruz\navión\naviso\nayer\nayuda\nayuno\nazafrán\nazar\nazote\nazúcar\nazufre\nazul\nbaba\nbabor\nbache\nbahía\nbaile\nbajar\nbalanza\nbalcón\nbalde\nbambú\nbanco\nbanda\nbaño\nbarba\nbarco\nbarniz\nbarro\nbáscula\nbastón\nbasura\nbatalla\nbatería\nbatir\nbatuta\nbaúl\nbazar\nbebé\nbebida\nbello\nbesar\nbeso\nbestia\nbicho\nbien\nbingo\nblanco\nbloque\nblusa\nboa\nbobina\nbobo\nboca\nbocina\nboda\nbodega\nboina\nbola\nbolero\nbolsa\nbomba\nbondad\nbonito\nbono\nbonsái\nborde\nborrar\nbosque\nbote\nbotín\nbóveda\nbozal\nbravo\nbrazo\nbrecha\nbreve\nbrillo\nbrinco\nbrisa\nbroca\nbroma\nbronce\nbrote\nbruja\nbrusco\nbruto\nbuceo\nbucle\nbueno\nbuey\nbufanda\nbufón\nbúho\nbuitre\nbulto\nburbuja\nburla\nburro\nbuscar\nbutaca\nbuzón\ncaballo\ncabeza\ncabina\ncabra\ncacao\ncadáver\ncadena\ncaer\ncafé\ncaída\ncaimán\ncaja\ncajón\ncal\ncalamar\ncalcio\ncaldo\ncalidad\ncalle\ncalma\ncalor\ncalvo\ncama\ncambio\ncamello\ncamino\ncampo\ncáncer\ncandil\ncanela\ncanguro\ncanica\ncanto\ncaña\ncañón\ncaoba\ncaos\ncapaz\ncapitán\ncapote\ncaptar\ncapucha\ncara\ncarbón\ncárcel\ncareta\ncarga\ncariño\ncarne\ncarpeta\ncarro\ncarta\ncasa\ncasco\ncasero\ncaspa\ncastor\ncatorce\ncatre\ncaudal\ncausa\ncazo\ncebolla\nceder\ncedro\ncelda\ncélebre\nceloso\ncélula\ncemento\nceniza\ncentro\ncerca\ncerdo\ncereza\ncero\ncerrar\ncerteza\ncésped\ncetro\nchacal\nchaleco\nchampú\nchancla\nchapa\ncharla\nchico\nchiste\nchivo\nchoque\nchoza\nchuleta\nchupar\nciclón\nciego\ncielo\ncien\ncierto\ncifra\ncigarro\ncima\ncinco\ncine\ncinta\nciprés\ncirco\nciruela\ncisne\ncita\nciudad\nclamor\nclan\nclaro\nclase\nclave\ncliente\nclima\nclínica\ncobre\ncocción\ncochino\ncocina\ncoco\ncódigo\ncodo\ncofre\ncoger\ncohete\ncojín\ncojo\ncola\ncolcha\ncolegio\ncolgar\ncolina\ncollar\ncolmo\ncolumna\ncombate\ncomer\ncomida\ncómodo\ncompra\nconde\nconejo\nconga\nconocer\nconsejo\ncontar\ncopa\ncopia\ncorazón\ncorbata\ncorcho\ncordón\ncorona\ncorrer\ncoser\ncosmos\ncosta\ncráneo\ncráter\ncrear\ncrecer\ncreído\ncrema\ncría\ncrimen\ncripta\ncrisis\ncromo\ncrónica\ncroqueta\ncrudo\ncruz\ncuadro\ncuarto\ncuatro\ncubo\ncubrir\ncuchara\ncuello\ncuento\ncuerda\ncuesta\ncueva\ncuidar\nculebra\nculpa\nculto\ncumbre\ncumplir\ncuna\ncuneta\ncuota\ncupón\ncúpula\ncurar\ncurioso\ncurso\ncurva\ncutis\ndama\ndanza\ndar\ndardo\ndátil\ndeber\ndébil\ndécada\ndecir\ndedo\ndefensa\ndefinir\ndejar\ndelfín\ndelgado\ndelito\ndemora\ndenso\ndental\ndeporte\nderecho\nderrota\ndesayuno\ndeseo\ndesfile\ndesnudo\ndestino\ndesvío\ndetalle\ndetener\ndeuda\ndía\ndiablo\ndiadema\ndiamante\ndiana\ndiario\ndibujo\ndictar\ndiente\ndieta\ndiez\ndifícil\ndigno\ndilema\ndiluir\ndinero\ndirecto\ndirigir\ndisco\ndiseño\ndisfraz\ndiva\ndivino\ndoble\ndoce\ndolor\ndomingo\ndon\ndonar\ndorado\ndormir\ndorso\ndos\ndosis\ndragón\ndroga\nducha\nduda\nduelo\ndueño\ndulce\ndúo\nduque\ndurar\ndureza\nduro\nébano\nebrio\nechar\neco\necuador\nedad\nedición\nedificio\neditor\neducar\nefecto\neficaz\neje\nejemplo\nelefante\nelegir\nelemento\nelevar\nelipse\nélite\nelixir\nelogio\neludir\nembudo\nemitir\nemoción\nempate\nempeño\nempleo\nempresa\nenano\nencargo\nenchufe\nencía\nenemigo\nenero\nenfado\nenfermo\nengaño\nenigma\nenlace\nenorme\nenredo\nensayo\nenseñar\nentero\nentrar\nenvase\nenvío\népoca\nequipo\nerizo\nescala\nescena\nescolar\nescribir\nescudo\nesencia\nesfera\nesfuerzo\nespada\nespejo\nespía\nesposa\nespuma\nesquí\nestar\neste\nestilo\nestufa\netapa\neterno\nética\netnia\nevadir\nevaluar\nevento\nevitar\nexacto\nexamen\nexceso\nexcusa\nexento\nexigir\nexilio\nexistir\néxito\nexperto\nexplicar\nexponer\nextremo\nfábrica\nfábula\nfachada\nfácil\nfactor\nfaena\nfaja\nfalda\nfallo\nfalso\nfaltar\nfama\nfamilia\nfamoso\nfaraón\nfarmacia\nfarol\nfarsa\nfase\nfatiga\nfauna\nfavor\nfax\nfebrero\nfecha\nfeliz\nfeo\nferia\nferoz\nfértil\nfervor\nfestín\nfiable\nfianza\nfiar\nfibra\nficción\nficha\nfideo\nfiebre\nfiel\nfiera\nfiesta\nfigura\nfijar\nfijo\nfila\nfilete\nfilial\nfiltro\nfin\nfinca\nfingir\nfinito\nfirma\nflaco\nflauta\nflecha\nflor\nflota\nfluir\nflujo\nflúor\nfobia\nfoca\nfogata\nfogón\nfolio\nfolleto\nfondo\nforma\nforro\nfortuna\nforzar\nfosa\nfoto\nfracaso\nfrágil\nfranja\nfrase\nfraude\nfreír\nfreno\nfresa\nfrío\nfrito\nfruta\nfuego\nfuente\nfuerza\nfuga\nfumar\nfunción\nfunda\nfurgón\nfuria\nfusil\nfútbol\nfuturo\ngacela\ngafas\ngaita\ngajo\ngala\ngalería\ngallo\ngamba\nganar\ngancho\nganga\nganso\ngaraje\ngarza\ngasolina\ngastar\ngato\ngavilán\ngemelo\ngemir\ngen\ngénero\ngenio\ngente\ngeranio\ngerente\ngermen\ngesto\ngigante\ngimnasio\ngirar\ngiro\nglaciar\nglobo\ngloria\ngol\ngolfo\ngoloso\ngolpe\ngoma\ngordo\ngorila\ngorra\ngota\ngoteo\ngozar\ngrada\ngráfico\ngrano\ngrasa\ngratis\ngrave\ngrieta\ngrillo\ngripe\ngris\ngrito\ngrosor\ngrúa\ngrueso\ngrumo\ngrupo\nguante\nguapo\nguardia\nguerra\nguía\nguiño\nguion\nguiso\nguitarra\ngusano\ngustar\nhaber\nhábil\nhablar\nhacer\nhacha\nhada\nhallar\nhamaca\nharina\nhaz\nhazaña\nhebilla\nhebra\nhecho\nhelado\nhelio\nhembra\nherir\nhermano\nhéroe\nhervir\nhielo\nhierro\nhígado\nhigiene\nhijo\nhimno\nhistoria\nhocico\nhogar\nhoguera\nhoja\nhombre\nhongo\nhonor\nhonra\nhora\nhormiga\nhorno\nhostil\nhoyo\nhueco\nhuelga\nhuerta\nhueso\nhuevo\nhuida\nhuir\nhumano\nhúmedo\nhumilde\nhumo\nhundir\nhuracán\nhurto\nicono\nideal\nidioma\nídolo\niglesia\niglú\nigual\nilegal\nilusión\nimagen\nimán\nimitar\nimpar\nimperio\nimponer\nimpulso\nincapaz\níndice\ninerte\ninfiel\ninforme\ningenio\ninicio\ninmenso\ninmune\ninnato\ninsecto\ninstante\ninterés\níntimo\nintuir\ninútil\ninvierno\nira\niris\nironía\nisla\nislote\njabalí\njabón\njamón\njarabe\njardín\njarra\njaula\njazmín\njefe\njeringa\njinete\njornada\njoroba\njoven\njoya\njuerga\njueves\njuez\njugador\njugo\njuguete\njuicio\njunco\njungla\njunio\njuntar\njúpiter\njurar\njusto\njuvenil\njuzgar\nkilo\nkoala\nlabio\nlacio\nlacra\nlado\nladrón\nlagarto\nlágrima\nlaguna\nlaico\nlamer\nlámina\nlámpara\nlana\nlancha\nlangosta\nlanza\nlápiz\nlargo\nlarva\nlástima\nlata\nlátex\nlatir\nlaurel\nlavar\nlazo\nleal\nlección\nleche\nlector\nleer\nlegión\nlegumbre\nlejano\nlengua\nlento\nleña\nleón\nleopardo\nlesión\nletal\nletra\nleve\nleyenda\nlibertad\nlibro\nlicor\nlíder\nlidiar\nlienzo\nliga\nligero\nlima\nlímite\nlimón\nlimpio\nlince\nlindo\nlínea\nlingote\nlino\nlinterna\nlíquido\nliso\nlista\nlitera\nlitio\nlitro\nllaga\nllama\nllanto\nllave\nllegar\nllenar\nllevar\nllorar\nllover\nlluvia\nlobo\nloción\nloco\nlocura\nlógica\nlogro\nlombriz\nlomo\nlonja\nlote\nlucha\nlucir\nlugar\nlujo\nluna\nlunes\nlupa\nlustro\nluto\nluz\nmaceta\nmacho\nmadera\nmadre\nmaduro\nmaestro\nmafia\nmagia\nmago\nmaíz\nmaldad\nmaleta\nmalla\nmalo\nmamá\nmambo\nmamut\nmanco\nmando\nmanejar\nmanga\nmaniquí\nmanjar\nmano\nmanso\nmanta\nmañana\nmapa\nmáquina\nmar\nmarco\nmarea\nmarfil\nmargen\nmarido\nmármol\nmarrón\nmartes\nmarzo\nmasa\nmáscara\nmasivo\nmatar\nmateria\nmatiz\nmatriz\nmáximo\nmayor\nmazorca\nmecha\nmedalla\nmedio\nmédula\nmejilla\nmejor\nmelena\nmelón\nmemoria\nmenor\nmensaje\nmente\nmenú\nmercado\nmerengue\nmérito\nmes\nmesón\nmeta\nmeter\nmétodo\nmetro\nmezcla\nmiedo\nmiel\nmiembro\nmiga\nmil\nmilagro\nmilitar\nmillón\nmimo\nmina\nminero\nmínimo\nminuto\nmiope\nmirar\nmisa\nmiseria\nmisil\nmismo\nmitad\nmito\nmochila\nmoción\nmoda\nmodelo\nmoho\nmojar\nmolde\nmoler\nmolino\nmomento\nmomia\nmonarca\nmoneda\nmonja\nmonto\nmoño\nmorada\nmorder\nmoreno\nmorir\nmorro\nmorsa\nmortal\nmosca\nmostrar\nmotivo\nmover\nmóvil\nmozo\nmucho\nmudar\nmueble\nmuela\nmuerte\nmuestra\nmugre\nmujer\nmula\nmuleta\nmulta\nmundo\nmuñeca\nmural\nmuro\nmúsculo\nmuseo\nmusgo\nmúsica\nmuslo\nnácar\nnación\nnadar\nnaipe\nnaranja\nnariz\nnarrar\nnasal\nnatal\nnativo\nnatural\nnáusea\nnaval\nnave\nnavidad\nnecio\nnéctar\nnegar\nnegocio\nnegro\nneón\nnervio\nneto\nneutro\nnevar\nnevera\nnicho\nnido\nniebla\nnieto\nniñez\nniño\nnítido\nnivel\nnobleza\nnoche\nnómina\nnoria\nnorma\nnorte\nnota\nnoticia\nnovato\nnovela\nnovio\nnube\nnuca\nnúcleo\nnudillo\nnudo\nnuera\nnueve\nnuez\nnulo\nnúmero\nnutria\noasis\nobeso\nobispo\nobjeto\nobra\nobrero\nobservar\nobtener\nobvio\noca\nocaso\nocéano\nochenta\nocho\nocio\nocre\noctavo\noctubre\noculto\nocupar\nocurrir\nodiar\nodio\nodisea\noeste\nofensa\noferta\noficio\nofrecer\nogro\noído\noír\nojo\nola\noleada\nolfato\nolivo\nolla\nolmo\nolor\nolvido\nombligo\nonda\nonza\nopaco\nopción\nópera\nopinar\noponer\noptar\nóptica\nopuesto\noración\norador\noral\nórbita\norca\norden\noreja\nórgano\norgía\norgullo\noriente\norigen\norilla\noro\norquesta\noruga\nosadía\noscuro\nosezno\noso\nostra\notoño\notro\noveja\nóvulo\nóxido\noxígeno\noyente\nozono\npacto\npadre\npaella\npágina\npago\npaís\npájaro\npalabra\npalco\npaleta\npálido\npalma\npaloma\npalpar\npan\npanal\npánico\npantera\npañuelo\npapá\npapel\npapilla\npaquete\nparar\nparcela\npared\nparir\nparo\npárpado\nparque\npárrafo\nparte\npasar\npaseo\npasión\npaso\npasta\npata\npatio\npatria\npausa\npauta\npavo\npayaso\npeatón\npecado\npecera\npecho\npedal\npedir\npegar\npeine\npelar\npeldaño\npelea\npeligro\npellejo\npelo\npeluca\npena\npensar\npeñón\npeón\npeor\npepino\npequeño\npera\npercha\nperder\npereza\nperfil\nperico\nperla\npermiso\nperro\npersona\npesa\npesca\npésimo\npestaña\npétalo\npetróleo\npez\npezuña\npicar\npichón\npie\npiedra\npierna\npieza\npijama\npilar\npiloto\npimienta\npino\npintor\npinza\npiña\npiojo\npipa\npirata\npisar\npiscina\npiso\npista\npitón\npizca\nplaca\nplan\nplata\nplaya\nplaza\npleito\npleno\nplomo\npluma\nplural\npobre\npoco\npoder\npodio\npoema\npoesía\npoeta\npolen\npolicía\npollo\npolvo\npomada\npomelo\npomo\npompa\nponer\nporción\nportal\nposada\nposeer\nposible\nposte\npotencia\npotro\npozo\nprado\nprecoz\npregunta\npremio\nprensa\npreso\nprevio\nprimo\npríncipe\nprisión\nprivar\nproa\nprobar\nproceso\nproducto\nproeza\nprofesor\nprograma\nprole\npromesa\npronto\npropio\npróximo\nprueba\npúblico\npuchero\npudor\npueblo\npuerta\npuesto\npulga\npulir\npulmón\npulpo\npulso\npuma\npunto\npuñal\npuño\npupa\npupila\npuré\nquedar\nqueja\nquemar\nquerer\nqueso\nquieto\nquímica\nquince\nquitar\nrábano\nrabia\nrabo\nración\nradical\nraíz\nrama\nrampa\nrancho\nrango\nrapaz\nrápido\nrapto\nrasgo\nraspa\nrato\nrayo\nraza\nrazón\nreacción\nrealidad\nrebaño\nrebote\nrecaer\nreceta\nrechazo\nrecoger\nrecreo\nrecto\nrecurso\nred\nredondo\nreducir\nreflejo\nreforma\nrefrán\nrefugio\nregalo\nregir\nregla\nregreso\nrehén\nreino\nreír\nreja\nrelato\nrelevo\nrelieve\nrelleno\nreloj\nremar\nremedio\nremo\nrencor\nrendir\nrenta\nreparto\nrepetir\nreposo\nreptil\nres\nrescate\nresina\nrespeto\nresto\nresumen\nretiro\nretorno\nretrato\nreunir\nrevés\nrevista\nrey\nrezar\nrico\nriego\nrienda\nriesgo\nrifa\nrígido\nrigor\nrincón\nriñón\nrío\nriqueza\nrisa\nritmo\nrito\nrizo\nroble\nroce\nrociar\nrodar\nrodeo\nrodilla\nroer\nrojizo\nrojo\nromero\nromper\nron\nronco\nronda\nropa\nropero\nrosa\nrosca\nrostro\nrotar\nrubí\nrubor\nrudo\nrueda\nrugir\nruido\nruina\nruleta\nrulo\nrumbo\nrumor\nruptura\nruta\nrutina\nsábado\nsaber\nsabio\nsable\nsacar\nsagaz\nsagrado\nsala\nsaldo\nsalero\nsalir\nsalmón\nsalón\nsalsa\nsalto\nsalud\nsalvar\nsamba\nsanción\nsandía\nsanear\nsangre\nsanidad\nsano\nsanto\nsapo\nsaque\nsardina\nsartén\nsastre\nsatán\nsauna\nsaxofón\nsección\nseco\nsecreto\nsecta\nsed\nseguir\nseis\nsello\nselva\nsemana\nsemilla\nsenda\nsensor\nseñal\nseñor\nseparar\nsepia\nsequía\nser\nserie\nsermón\nservir\nsesenta\nsesión\nseta\nsetenta\nsevero\nsexo\nsexto\nsidra\nsiesta\nsiete\nsiglo\nsigno\nsílaba\nsilbar\nsilencio\nsilla\nsímbolo\nsimio\nsirena\nsistema\nsitio\nsituar\nsobre\nsocio\nsodio\nsol\nsolapa\nsoldado\nsoledad\nsólido\nsoltar\nsolución\nsombra\nsondeo\nsonido\nsonoro\nsonrisa\nsopa\nsoplar\nsoporte\nsordo\nsorpresa\nsorteo\nsostén\nsótano\nsuave\nsubir\nsuceso\nsudor\nsuegra\nsuelo\nsueño\nsuerte\nsufrir\nsujeto\nsultán\nsumar\nsuperar\nsuplir\nsuponer\nsupremo\nsur\nsurco\nsureño\nsurgir\nsusto\nsutil\ntabaco\ntabique\ntabla\ntabú\ntaco\ntacto\ntajo\ntalar\ntalco\ntalento\ntalla\ntalón\ntamaño\ntambor\ntango\ntanque\ntapa\ntapete\ntapia\ntapón\ntaquilla\ntarde\ntarea\ntarifa\ntarjeta\ntarot\ntarro\ntarta\ntatuaje\ntauro\ntaza\ntazón\nteatro\ntecho\ntecla\ntécnica\ntejado\ntejer\ntejido\ntela\nteléfono\ntema\ntemor\ntemplo\ntenaz\ntender\ntener\ntenis\ntenso\nteoría\nterapia\nterco\ntérmino\nternura\nterror\ntesis\ntesoro\ntestigo\ntetera\ntexto\ntez\ntibio\ntiburón\ntiempo\ntienda\ntierra\ntieso\ntigre\ntijera\ntilde\ntimbre\ntímido\ntimo\ntinta\ntío\ntípico\ntipo\ntira\ntirón\ntitán\ntítere\ntítulo\ntiza\ntoalla\ntobillo\ntocar\ntocino\ntodo\ntoga\ntoldo\ntomar\ntono\ntonto\ntopar\ntope\ntoque\ntórax\ntorero\ntormenta\ntorneo\ntoro\ntorpedo\ntorre\ntorso\ntortuga\ntos\ntosco\ntoser\ntóxico\ntrabajo\ntractor\ntraer\ntráfico\ntrago\ntraje\ntramo\ntrance\ntrato\ntrauma\ntrazar\ntrébol\ntregua\ntreinta\ntren\ntrepar\ntres\ntribu\ntrigo\ntripa\ntriste\ntriunfo\ntrofeo\ntrompa\ntronco\ntropa\ntrote\ntrozo\ntruco\ntrueno\ntrufa\ntubería\ntubo\ntuerto\ntumba\ntumor\ntúnel\ntúnica\nturbina\nturismo\nturno\ntutor\nubicar\núlcera\numbral\nunidad\nunir\nuniverso\nuno\nuntar\nuña\nurbano\nurbe\nurgente\nurna\nusar\nusuario\nútil\nutopía\nuva\nvaca\nvacío\nvacuna\nvagar\nvago\nvaina\nvajilla\nvale\nválido\nvalle\nvalor\nválvula\nvampiro\nvara\nvariar\nvarón\nvaso\nvecino\nvector\nvehículo\nveinte\nvejez\nvela\nvelero\nveloz\nvena\nvencer\nvenda\nveneno\nvengar\nvenir\nventa\nvenus\nver\nverano\nverbo\nverde\nvereda\nverja\nverso\nverter\nvía\nviaje\nvibrar\nvicio\nvíctima\nvida\nvídeo\nvidrio\nviejo\nviernes\nvigor\nvil\nvilla\nvinagre\nvino\nviñedo\nviolín\nviral\nvirgo\nvirtud\nvisor\nvíspera\nvista\nvitamina\nviudo\nvivaz\nvivero\nvivir\nvivo\nvolcán\nvolumen\nvolver\nvoraz\nvotar\nvoto\nvoz\nvuelo\nvulgar\nyacer\nyate\nyegua\nyema\nyerno\nyeso\nyodo\nyoga\nyogur\nzafiro\nzanja\nzapato\nzarza\nzona\nzorro\nzumo\nzurdo`.split('\\n');\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ox/node_modules/@scure/bip39/esm/wordlists/spanish.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/ox/node_modules/@scure/bip39/esm/wordlists/traditional-chinese.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/ox/node_modules/@scure/bip39/esm/wordlists/traditional-chinese.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   wordlist: () => (/* binding */ wordlist)\n/* harmony export */ });\nconst wordlist = `的\n一\n是\n在\n不\n了\n有\n和\n人\n這\n中\n大\n為\n上\n個\n國\n我\n以\n要\n他\n時\n來\n用\n們\n生\n到\n作\n地\n於\n出\n就\n分\n對\n成\n會\n可\n主\n發\n年\n動\n同\n工\n也\n能\n下\n過\n子\n說\n產\n種\n面\n而\n方\n後\n多\n定\n行\n學\n法\n所\n民\n得\n經\n十\n三\n之\n進\n著\n等\n部\n度\n家\n電\n力\n裡\n如\n水\n化\n高\n自\n二\n理\n起\n小\n物\n現\n實\n加\n量\n都\n兩\n體\n制\n機\n當\n使\n點\n從\n業\n本\n去\n把\n性\n好\n應\n開\n它\n合\n還\n因\n由\n其\n些\n然\n前\n外\n天\n政\n四\n日\n那\n社\n義\n事\n平\n形\n相\n全\n表\n間\n樣\n與\n關\n各\n重\n新\n線\n內\n數\n正\n心\n反\n你\n明\n看\n原\n又\n麼\n利\n比\n或\n但\n質\n氣\n第\n向\n道\n命\n此\n變\n條\n只\n沒\n結\n解\n問\n意\n建\n月\n公\n無\n系\n軍\n很\n情\n者\n最\n立\n代\n想\n已\n通\n並\n提\n直\n題\n黨\n程\n展\n五\n果\n料\n象\n員\n革\n位\n入\n常\n文\n總\n次\n品\n式\n活\n設\n及\n管\n特\n件\n長\n求\n老\n頭\n基\n資\n邊\n流\n路\n級\n少\n圖\n山\n統\n接\n知\n較\n將\n組\n見\n計\n別\n她\n手\n角\n期\n根\n論\n運\n農\n指\n幾\n九\n區\n強\n放\n決\n西\n被\n幹\n做\n必\n戰\n先\n回\n則\n任\n取\n據\n處\n隊\n南\n給\n色\n光\n門\n即\n保\n治\n北\n造\n百\n規\n熱\n領\n七\n海\n口\n東\n導\n器\n壓\n志\n世\n金\n增\n爭\n濟\n階\n油\n思\n術\n極\n交\n受\n聯\n什\n認\n六\n共\n權\n收\n證\n改\n清\n美\n再\n採\n轉\n更\n單\n風\n切\n打\n白\n教\n速\n花\n帶\n安\n場\n身\n車\n例\n真\n務\n具\n萬\n每\n目\n至\n達\n走\n積\n示\n議\n聲\n報\n鬥\n完\n類\n八\n離\n華\n名\n確\n才\n科\n張\n信\n馬\n節\n話\n米\n整\n空\n元\n況\n今\n集\n溫\n傳\n土\n許\n步\n群\n廣\n石\n記\n需\n段\n研\n界\n拉\n林\n律\n叫\n且\n究\n觀\n越\n織\n裝\n影\n算\n低\n持\n音\n眾\n書\n布\n复\n容\n兒\n須\n際\n商\n非\n驗\n連\n斷\n深\n難\n近\n礦\n千\n週\n委\n素\n技\n備\n半\n辦\n青\n省\n列\n習\n響\n約\n支\n般\n史\n感\n勞\n便\n團\n往\n酸\n歷\n市\n克\n何\n除\n消\n構\n府\n稱\n太\n準\n精\n值\n號\n率\n族\n維\n劃\n選\n標\n寫\n存\n候\n毛\n親\n快\n效\n斯\n院\n查\n江\n型\n眼\n王\n按\n格\n養\n易\n置\n派\n層\n片\n始\n卻\n專\n狀\n育\n廠\n京\n識\n適\n屬\n圓\n包\n火\n住\n調\n滿\n縣\n局\n照\n參\n紅\n細\n引\n聽\n該\n鐵\n價\n嚴\n首\n底\n液\n官\n德\n隨\n病\n蘇\n失\n爾\n死\n講\n配\n女\n黃\n推\n顯\n談\n罪\n神\n藝\n呢\n席\n含\n企\n望\n密\n批\n營\n項\n防\n舉\n球\n英\n氧\n勢\n告\n李\n台\n落\n木\n幫\n輪\n破\n亞\n師\n圍\n注\n遠\n字\n材\n排\n供\n河\n態\n封\n另\n施\n減\n樹\n溶\n怎\n止\n案\n言\n士\n均\n武\n固\n葉\n魚\n波\n視\n僅\n費\n緊\n愛\n左\n章\n早\n朝\n害\n續\n輕\n服\n試\n食\n充\n兵\n源\n判\n護\n司\n足\n某\n練\n差\n致\n板\n田\n降\n黑\n犯\n負\n擊\n范\n繼\n興\n似\n餘\n堅\n曲\n輸\n修\n故\n城\n夫\n夠\n送\n筆\n船\n佔\n右\n財\n吃\n富\n春\n職\n覺\n漢\n畫\n功\n巴\n跟\n雖\n雜\n飛\n檢\n吸\n助\n昇\n陽\n互\n初\n創\n抗\n考\n投\n壞\n策\n古\n徑\n換\n未\n跑\n留\n鋼\n曾\n端\n責\n站\n簡\n述\n錢\n副\n盡\n帝\n射\n草\n衝\n承\n獨\n令\n限\n阿\n宣\n環\n雙\n請\n超\n微\n讓\n控\n州\n良\n軸\n找\n否\n紀\n益\n依\n優\n頂\n礎\n載\n倒\n房\n突\n坐\n粉\n敵\n略\n客\n袁\n冷\n勝\n絕\n析\n塊\n劑\n測\n絲\n協\n訴\n念\n陳\n仍\n羅\n鹽\n友\n洋\n錯\n苦\n夜\n刑\n移\n頻\n逐\n靠\n混\n母\n短\n皮\n終\n聚\n汽\n村\n雲\n哪\n既\n距\n衛\n停\n烈\n央\n察\n燒\n迅\n境\n若\n印\n洲\n刻\n括\n激\n孔\n搞\n甚\n室\n待\n核\n校\n散\n侵\n吧\n甲\n遊\n久\n菜\n味\n舊\n模\n湖\n貨\n損\n預\n阻\n毫\n普\n穩\n乙\n媽\n植\n息\n擴\n銀\n語\n揮\n酒\n守\n拿\n序\n紙\n醫\n缺\n雨\n嗎\n針\n劉\n啊\n急\n唱\n誤\n訓\n願\n審\n附\n獲\n茶\n鮮\n糧\n斤\n孩\n脫\n硫\n肥\n善\n龍\n演\n父\n漸\n血\n歡\n械\n掌\n歌\n沙\n剛\n攻\n謂\n盾\n討\n晚\n粒\n亂\n燃\n矛\n乎\n殺\n藥\n寧\n魯\n貴\n鐘\n煤\n讀\n班\n伯\n香\n介\n迫\n句\n豐\n培\n握\n蘭\n擔\n弦\n蛋\n沉\n假\n穿\n執\n答\n樂\n誰\n順\n煙\n縮\n徵\n臉\n喜\n松\n腳\n困\n異\n免\n背\n星\n福\n買\n染\n井\n概\n慢\n怕\n磁\n倍\n祖\n皇\n促\n靜\n補\n評\n翻\n肉\n踐\n尼\n衣\n寬\n揚\n棉\n希\n傷\n操\n垂\n秋\n宜\n氫\n套\n督\n振\n架\n亮\n末\n憲\n慶\n編\n牛\n觸\n映\n雷\n銷\n詩\n座\n居\n抓\n裂\n胞\n呼\n娘\n景\n威\n綠\n晶\n厚\n盟\n衡\n雞\n孫\n延\n危\n膠\n屋\n鄉\n臨\n陸\n顧\n掉\n呀\n燈\n歲\n措\n束\n耐\n劇\n玉\n趙\n跳\n哥\n季\n課\n凱\n胡\n額\n款\n紹\n卷\n齊\n偉\n蒸\n殖\n永\n宗\n苗\n川\n爐\n岩\n弱\n零\n楊\n奏\n沿\n露\n桿\n探\n滑\n鎮\n飯\n濃\n航\n懷\n趕\n庫\n奪\n伊\n靈\n稅\n途\n滅\n賽\n歸\n召\n鼓\n播\n盤\n裁\n險\n康\n唯\n錄\n菌\n純\n借\n糖\n蓋\n橫\n符\n私\n努\n堂\n域\n槍\n潤\n幅\n哈\n竟\n熟\n蟲\n澤\n腦\n壤\n碳\n歐\n遍\n側\n寨\n敢\n徹\n慮\n斜\n薄\n庭\n納\n彈\n飼\n伸\n折\n麥\n濕\n暗\n荷\n瓦\n塞\n床\n築\n惡\n戶\n訪\n塔\n奇\n透\n梁\n刀\n旋\n跡\n卡\n氯\n遇\n份\n毒\n泥\n退\n洗\n擺\n灰\n彩\n賣\n耗\n夏\n擇\n忙\n銅\n獻\n硬\n予\n繁\n圈\n雪\n函\n亦\n抽\n篇\n陣\n陰\n丁\n尺\n追\n堆\n雄\n迎\n泛\n爸\n樓\n避\n謀\n噸\n野\n豬\n旗\n累\n偏\n典\n館\n索\n秦\n脂\n潮\n爺\n豆\n忽\n托\n驚\n塑\n遺\n愈\n朱\n替\n纖\n粗\n傾\n尚\n痛\n楚\n謝\n奮\n購\n磨\n君\n池\n旁\n碎\n骨\n監\n捕\n弟\n暴\n割\n貫\n殊\n釋\n詞\n亡\n壁\n頓\n寶\n午\n塵\n聞\n揭\n炮\n殘\n冬\n橋\n婦\n警\n綜\n招\n吳\n付\n浮\n遭\n徐\n您\n搖\n谷\n贊\n箱\n隔\n訂\n男\n吹\n園\n紛\n唐\n敗\n宋\n玻\n巨\n耕\n坦\n榮\n閉\n灣\n鍵\n凡\n駐\n鍋\n救\n恩\n剝\n凝\n鹼\n齒\n截\n煉\n麻\n紡\n禁\n廢\n盛\n版\n緩\n淨\n睛\n昌\n婚\n涉\n筒\n嘴\n插\n岸\n朗\n莊\n街\n藏\n姑\n貿\n腐\n奴\n啦\n慣\n乘\n夥\n恢\n勻\n紗\n扎\n辯\n耳\n彪\n臣\n億\n璃\n抵\n脈\n秀\n薩\n俄\n網\n舞\n店\n噴\n縱\n寸\n汗\n掛\n洪\n賀\n閃\n柬\n爆\n烯\n津\n稻\n牆\n軟\n勇\n像\n滾\n厘\n蒙\n芳\n肯\n坡\n柱\n盪\n腿\n儀\n旅\n尾\n軋\n冰\n貢\n登\n黎\n削\n鑽\n勒\n逃\n障\n氨\n郭\n峰\n幣\n港\n伏\n軌\n畝\n畢\n擦\n莫\n刺\n浪\n秘\n援\n株\n健\n售\n股\n島\n甘\n泡\n睡\n童\n鑄\n湯\n閥\n休\n匯\n舍\n牧\n繞\n炸\n哲\n磷\n績\n朋\n淡\n尖\n啟\n陷\n柴\n呈\n徒\n顏\n淚\n稍\n忘\n泵\n藍\n拖\n洞\n授\n鏡\n辛\n壯\n鋒\n貧\n虛\n彎\n摩\n泰\n幼\n廷\n尊\n窗\n綱\n弄\n隸\n疑\n氏\n宮\n姐\n震\n瑞\n怪\n尤\n琴\n循\n描\n膜\n違\n夾\n腰\n緣\n珠\n窮\n森\n枝\n竹\n溝\n催\n繩\n憶\n邦\n剩\n幸\n漿\n欄\n擁\n牙\n貯\n禮\n濾\n鈉\n紋\n罷\n拍\n咱\n喊\n袖\n埃\n勤\n罰\n焦\n潛\n伍\n墨\n欲\n縫\n姓\n刊\n飽\n仿\n獎\n鋁\n鬼\n麗\n跨\n默\n挖\n鏈\n掃\n喝\n袋\n炭\n污\n幕\n諸\n弧\n勵\n梅\n奶\n潔\n災\n舟\n鑑\n苯\n訟\n抱\n毀\n懂\n寒\n智\n埔\n寄\n屆\n躍\n渡\n挑\n丹\n艱\n貝\n碰\n拔\n爹\n戴\n碼\n夢\n芽\n熔\n赤\n漁\n哭\n敬\n顆\n奔\n鉛\n仲\n虎\n稀\n妹\n乏\n珍\n申\n桌\n遵\n允\n隆\n螺\n倉\n魏\n銳\n曉\n氮\n兼\n隱\n礙\n赫\n撥\n忠\n肅\n缸\n牽\n搶\n博\n巧\n殼\n兄\n杜\n訊\n誠\n碧\n祥\n柯\n頁\n巡\n矩\n悲\n灌\n齡\n倫\n票\n尋\n桂\n鋪\n聖\n恐\n恰\n鄭\n趣\n抬\n荒\n騰\n貼\n柔\n滴\n猛\n闊\n輛\n妻\n填\n撤\n儲\n簽\n鬧\n擾\n紫\n砂\n遞\n戲\n吊\n陶\n伐\n餵\n療\n瓶\n婆\n撫\n臂\n摸\n忍\n蝦\n蠟\n鄰\n胸\n鞏\n擠\n偶\n棄\n槽\n勁\n乳\n鄧\n吉\n仁\n爛\n磚\n租\n烏\n艦\n伴\n瓜\n淺\n丙\n暫\n燥\n橡\n柳\n迷\n暖\n牌\n秧\n膽\n詳\n簧\n踏\n瓷\n譜\n呆\n賓\n糊\n洛\n輝\n憤\n競\n隙\n怒\n粘\n乃\n緒\n肩\n籍\n敏\n塗\n熙\n皆\n偵\n懸\n掘\n享\n糾\n醒\n狂\n鎖\n淀\n恨\n牲\n霸\n爬\n賞\n逆\n玩\n陵\n祝\n秒\n浙\n貌\n役\n彼\n悉\n鴨\n趨\n鳳\n晨\n畜\n輩\n秩\n卵\n署\n梯\n炎\n灘\n棋\n驅\n篩\n峽\n冒\n啥\n壽\n譯\n浸\n泉\n帽\n遲\n矽\n疆\n貸\n漏\n稿\n冠\n嫩\n脅\n芯\n牢\n叛\n蝕\n奧\n鳴\n嶺\n羊\n憑\n串\n塘\n繪\n酵\n融\n盆\n錫\n廟\n籌\n凍\n輔\n攝\n襲\n筋\n拒\n僚\n旱\n鉀\n鳥\n漆\n沈\n眉\n疏\n添\n棒\n穗\n硝\n韓\n逼\n扭\n僑\n涼\n挺\n碗\n栽\n炒\n杯\n患\n餾\n勸\n豪\n遼\n勃\n鴻\n旦\n吏\n拜\n狗\n埋\n輥\n掩\n飲\n搬\n罵\n辭\n勾\n扣\n估\n蔣\n絨\n霧\n丈\n朵\n姆\n擬\n宇\n輯\n陝\n雕\n償\n蓄\n崇\n剪\n倡\n廳\n咬\n駛\n薯\n刷\n斥\n番\n賦\n奉\n佛\n澆\n漫\n曼\n扇\n鈣\n桃\n扶\n仔\n返\n俗\n虧\n腔\n鞋\n棱\n覆\n框\n悄\n叔\n撞\n騙\n勘\n旺\n沸\n孤\n吐\n孟\n渠\n屈\n疾\n妙\n惜\n仰\n狠\n脹\n諧\n拋\n黴\n桑\n崗\n嘛\n衰\n盜\n滲\n臟\n賴\n湧\n甜\n曹\n閱\n肌\n哩\n厲\n烴\n緯\n毅\n昨\n偽\n症\n煮\n嘆\n釘\n搭\n莖\n籠\n酷\n偷\n弓\n錐\n恆\n傑\n坑\n鼻\n翼\n綸\n敘\n獄\n逮\n罐\n絡\n棚\n抑\n膨\n蔬\n寺\n驟\n穆\n冶\n枯\n冊\n屍\n凸\n紳\n坯\n犧\n焰\n轟\n欣\n晉\n瘦\n禦\n錠\n錦\n喪\n旬\n鍛\n壟\n搜\n撲\n邀\n亭\n酯\n邁\n舒\n脆\n酶\n閒\n憂\n酚\n頑\n羽\n漲\n卸\n仗\n陪\n闢\n懲\n杭\n姚\n肚\n捉\n飄\n漂\n昆\n欺\n吾\n郎\n烷\n汁\n呵\n飾\n蕭\n雅\n郵\n遷\n燕\n撒\n姻\n赴\n宴\n煩\n債\n帳\n斑\n鈴\n旨\n醇\n董\n餅\n雛\n姿\n拌\n傅\n腹\n妥\n揉\n賢\n拆\n歪\n葡\n胺\n丟\n浩\n徽\n昂\n墊\n擋\n覽\n貪\n慰\n繳\n汪\n慌\n馮\n諾\n姜\n誼\n兇\n劣\n誣\n耀\n昏\n躺\n盈\n騎\n喬\n溪\n叢\n盧\n抹\n悶\n諮\n刮\n駕\n纜\n悟\n摘\n鉺\n擲\n頗\n幻\n柄\n惠\n慘\n佳\n仇\n臘\n窩\n滌\n劍\n瞧\n堡\n潑\n蔥\n罩\n霍\n撈\n胎\n蒼\n濱\n倆\n捅\n湘\n砍\n霞\n邵\n萄\n瘋\n淮\n遂\n熊\n糞\n烘\n宿\n檔\n戈\n駁\n嫂\n裕\n徙\n箭\n捐\n腸\n撐\n曬\n辨\n殿\n蓮\n攤\n攪\n醬\n屏\n疫\n哀\n蔡\n堵\n沫\n皺\n暢\n疊\n閣\n萊\n敲\n轄\n鉤\n痕\n壩\n巷\n餓\n禍\n丘\n玄\n溜\n曰\n邏\n彭\n嘗\n卿\n妨\n艇\n吞\n韋\n怨\n矮\n歇`.split('\\n');\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/ox/node_modules/@scure/bip39/esm/wordlists/traditional-chinese.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/viem/_esm/ens/index.js":
/*!*********************************************!*\
  !*** ./node_modules/viem/_esm/ens/index.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getEnsAddress: () => (/* reexport safe */ _actions_ens_getEnsAddress_js__WEBPACK_IMPORTED_MODULE_1__.getEnsAddress),\n/* harmony export */   getEnsAvatar: () => (/* reexport safe */ _actions_ens_getEnsAvatar_js__WEBPACK_IMPORTED_MODULE_2__.getEnsAvatar),\n/* harmony export */   getEnsName: () => (/* reexport safe */ _actions_ens_getEnsName_js__WEBPACK_IMPORTED_MODULE_3__.getEnsName),\n/* harmony export */   getEnsResolver: () => (/* reexport safe */ _actions_ens_getEnsResolver_js__WEBPACK_IMPORTED_MODULE_4__.getEnsResolver),\n/* harmony export */   getEnsText: () => (/* reexport safe */ _actions_ens_getEnsText_js__WEBPACK_IMPORTED_MODULE_5__.getEnsText),\n/* harmony export */   labelhash: () => (/* reexport safe */ _utils_ens_labelhash_js__WEBPACK_IMPORTED_MODULE_6__.labelhash),\n/* harmony export */   namehash: () => (/* reexport safe */ _utils_ens_namehash_js__WEBPACK_IMPORTED_MODULE_7__.namehash),\n/* harmony export */   normalize: () => (/* reexport safe */ _utils_ens_normalize_js__WEBPACK_IMPORTED_MODULE_0__.normalize),\n/* harmony export */   packetToBytes: () => (/* reexport safe */ _utils_ens_packetToBytes_js__WEBPACK_IMPORTED_MODULE_9__.packetToBytes),\n/* harmony export */   parseAvatarRecord: () => (/* reexport safe */ _utils_ens_avatar_parseAvatarRecord_js__WEBPACK_IMPORTED_MODULE_8__.parseAvatarRecord)\n/* harmony export */ });\n/* harmony import */ var _utils_ens_normalize_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/ens/normalize.js */ \"(pages-dir-browser)/./node_modules/viem/_esm/utils/ens/normalize.js\");\n/* harmony import */ var _actions_ens_getEnsAddress_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../actions/ens/getEnsAddress.js */ \"(pages-dir-browser)/./node_modules/viem/_esm/actions/ens/getEnsAddress.js\");\n/* harmony import */ var _actions_ens_getEnsAvatar_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../actions/ens/getEnsAvatar.js */ \"(pages-dir-browser)/./node_modules/viem/_esm/actions/ens/getEnsAvatar.js\");\n/* harmony import */ var _actions_ens_getEnsName_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../actions/ens/getEnsName.js */ \"(pages-dir-browser)/./node_modules/viem/_esm/actions/ens/getEnsName.js\");\n/* harmony import */ var _actions_ens_getEnsResolver_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../actions/ens/getEnsResolver.js */ \"(pages-dir-browser)/./node_modules/viem/_esm/actions/ens/getEnsResolver.js\");\n/* harmony import */ var _actions_ens_getEnsText_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../actions/ens/getEnsText.js */ \"(pages-dir-browser)/./node_modules/viem/_esm/actions/ens/getEnsText.js\");\n/* harmony import */ var _utils_ens_labelhash_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/ens/labelhash.js */ \"(pages-dir-browser)/./node_modules/viem/_esm/utils/ens/labelhash.js\");\n/* harmony import */ var _utils_ens_namehash_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/ens/namehash.js */ \"(pages-dir-browser)/./node_modules/viem/_esm/utils/ens/namehash.js\");\n/* harmony import */ var _utils_ens_avatar_parseAvatarRecord_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils/ens/avatar/parseAvatarRecord.js */ \"(pages-dir-browser)/./node_modules/viem/_esm/utils/ens/avatar/parseAvatarRecord.js\");\n/* harmony import */ var _utils_ens_packetToBytes_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../utils/ens/packetToBytes.js */ \"(pages-dir-browser)/./node_modules/viem/_esm/utils/ens/packetToBytes.js\");\n// biome-ignore lint/performance/noBarrelFile: entrypoint module\n\n\n\n\n\n\n\n\n\n\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy92aWVtL19lc20vZW5zL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDc0Q7QUFDVztBQUNGO0FBQ0o7QUFDUTtBQUNSO0FBQ0w7QUFDRjtBQUMwQjtBQUNmO0FBQy9EIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGNoYW5kXFxEb3dubG9hZHNcXGpvaG53cmljaGtpZGludG9yaXp6XFxub2RlX21vZHVsZXNcXHZpZW1cXF9lc21cXGVuc1xcaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gYmlvbWUtaWdub3JlIGxpbnQvcGVyZm9ybWFuY2Uvbm9CYXJyZWxGaWxlOiBlbnRyeXBvaW50IG1vZHVsZVxuZXhwb3J0IHsgbm9ybWFsaXplIH0gZnJvbSAnLi4vdXRpbHMvZW5zL25vcm1hbGl6ZS5qcyc7XG5leHBvcnQgeyBnZXRFbnNBZGRyZXNzLCB9IGZyb20gJy4uL2FjdGlvbnMvZW5zL2dldEVuc0FkZHJlc3MuanMnO1xuZXhwb3J0IHsgZ2V0RW5zQXZhdGFyLCB9IGZyb20gJy4uL2FjdGlvbnMvZW5zL2dldEVuc0F2YXRhci5qcyc7XG5leHBvcnQgeyBnZXRFbnNOYW1lLCB9IGZyb20gJy4uL2FjdGlvbnMvZW5zL2dldEVuc05hbWUuanMnO1xuZXhwb3J0IHsgZ2V0RW5zUmVzb2x2ZXIsIH0gZnJvbSAnLi4vYWN0aW9ucy9lbnMvZ2V0RW5zUmVzb2x2ZXIuanMnO1xuZXhwb3J0IHsgZ2V0RW5zVGV4dCwgfSBmcm9tICcuLi9hY3Rpb25zL2Vucy9nZXRFbnNUZXh0LmpzJztcbmV4cG9ydCB7IGxhYmVsaGFzaCB9IGZyb20gJy4uL3V0aWxzL2Vucy9sYWJlbGhhc2guanMnO1xuZXhwb3J0IHsgbmFtZWhhc2ggfSBmcm9tICcuLi91dGlscy9lbnMvbmFtZWhhc2guanMnO1xuZXhwb3J0IHsgcGFyc2VBdmF0YXJSZWNvcmQsIH0gZnJvbSAnLi4vdXRpbHMvZW5zL2F2YXRhci9wYXJzZUF2YXRhclJlY29yZC5qcyc7XG5leHBvcnQgeyBwYWNrZXRUb0J5dGVzLCB9IGZyb20gJy4uL3V0aWxzL2Vucy9wYWNrZXRUb0J5dGVzLmpzJztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/viem/_esm/ens/index.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./node_modules/viem/_esm/utils/ens/normalize.js":
/*!*******************************************************!*\
  !*** ./node_modules/viem/_esm/utils/ens/normalize.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   normalize: () => (/* binding */ normalize)\n/* harmony export */ });\n/* harmony import */ var ox_Ens__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ox/Ens */ \"(pages-dir-browser)/./node_modules/ox/_esm/core/Ens.js\");\n\n/**\n * @description Normalizes ENS name according to ENSIP-15.\n *\n * @example\n * normalize('wevm.eth')\n * 'wevm.eth'\n *\n * @see https://docs.ens.domains/contract-api-reference/name-processing#normalising-names\n * @see https://github.com/ensdomains/docs/blob/9edf9443de4333a0ea7ec658a870672d5d180d53/ens-improvement-proposals/ensip-15-normalization-standard.md\n */\nfunction normalize(name) {\n    return ox_Ens__WEBPACK_IMPORTED_MODULE_0__.normalize(name);\n}\n//# sourceMappingURL=normalize.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL25vZGVfbW9kdWxlcy92aWVtL19lc20vdXRpbHMvZW5zL25vcm1hbGl6ZS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUE4QjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AsV0FBVyw2Q0FBYTtBQUN4QjtBQUNBIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGNoYW5kXFxEb3dubG9hZHNcXGpvaG53cmljaGtpZGludG9yaXp6XFxub2RlX21vZHVsZXNcXHZpZW1cXF9lc21cXHV0aWxzXFxlbnNcXG5vcm1hbGl6ZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBFbnMgZnJvbSAnb3gvRW5zJztcbi8qKlxuICogQGRlc2NyaXB0aW9uIE5vcm1hbGl6ZXMgRU5TIG5hbWUgYWNjb3JkaW5nIHRvIEVOU0lQLTE1LlxuICpcbiAqIEBleGFtcGxlXG4gKiBub3JtYWxpemUoJ3dldm0uZXRoJylcbiAqICd3ZXZtLmV0aCdcbiAqXG4gKiBAc2VlIGh0dHBzOi8vZG9jcy5lbnMuZG9tYWlucy9jb250cmFjdC1hcGktcmVmZXJlbmNlL25hbWUtcHJvY2Vzc2luZyNub3JtYWxpc2luZy1uYW1lc1xuICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vZW5zZG9tYWlucy9kb2NzL2Jsb2IvOWVkZjk0NDNkZTQzMzNhMGVhN2VjNjU4YTg3MDY3MmQ1ZDE4MGQ1My9lbnMtaW1wcm92ZW1lbnQtcHJvcG9zYWxzL2Vuc2lwLTE1LW5vcm1hbGl6YXRpb24tc3RhbmRhcmQubWRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG5vcm1hbGl6ZShuYW1lKSB7XG4gICAgcmV0dXJuIEVucy5ub3JtYWxpemUobmFtZSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ub3JtYWxpemUuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./node_modules/viem/_esm/utils/ens/normalize.js\n"));

/***/ })

}]);